import hashlib
import os
import sys
import logging
from pathlib import Path
from dataclasses import dataclass


logger = logging.getLogger(__name__)

@dataclass
class Script:
    """Script represents the seed generator python script generated by a given task."""

    # The actual script content
    content: str

    sha256: str

    # Labels for tracking purpose
    task_label: str

    # Harness information
    harness_name: str
    
    # Max execution count for this script
    max_exec: int 

    # The filename where this script was saved (for debugging)
    file_path: str = None

    def to_dict(self) -> dict:
        """Convert the Script instance to a dictionary."""
        return {
            "sha256": self.sha256,
            "task_label": self.task_label,
            "harness_name": self.harness_name,
            "file_path": self.file_path
        }

    @staticmethod
    def new(content: str, 
            task_label: str, 
            harness_name: str,
            workdir: Path = None,
            max_exec: int = sys.maxsize) -> "Script":
        """
        Create a new Script instance with the given content.
        
        Args:
            content: The script content
            task_label: A label for the task
            workdir: Directory to save the script (for debugging and recording)
            
        Returns:
            A new Script instance
        """
        sha256_hash = hashlib.sha256(content.encode()).hexdigest()
        file_path = None
        
        # Save script to file if workdir is provided
        if workdir is not None:
            # Ensure workdir exists
            os.makedirs(workdir, exist_ok=True)
            
            # Create filename using task, dev labels and hash
            file_name = f"script-{task_label.replace('/', '-')}-{sha256_hash[:8]}.py"
            file_path = str(workdir / file_name)

            logger.info(f"Saving script to {file_path}")
            
            # Write content to file
            with open(file_path, 'w') as f:
                f.write(content)

        return Script(
            content=content,
            sha256=sha256_hash,
            task_label=task_label,
            harness_name=harness_name,
            file_path=file_path,
            max_exec=max_exec
        )
