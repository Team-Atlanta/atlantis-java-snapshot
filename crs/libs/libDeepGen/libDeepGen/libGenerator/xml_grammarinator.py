# Generated by Grammarinator 23.7.post143+g68b0350

from math import inf
from grammarinator.runtime import *

class XMLGenerator(Generator):


    def COMMENT(self, parent=None):
        with UnlexerRuleContext(self, 'COMMENT', parent) as rule:
            current = rule.current
            current.src += '<!--'
            with QuantifierContext(rule, 0, 0, inf, XMLGenerator._quant_sizes[0], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        current.src += self._model.charset(current, 0, XMLGenerator._charsets[0])
            current = rule.current
            current.src += '-->'
        return current

    def CDATA(self, parent=None):
        with UnlexerRuleContext(self, 'CDATA', parent) as rule:
            current = rule.current
            current.src += '<![CDATA['
            with QuantifierContext(rule, 0, 0, inf, XMLGenerator._quant_sizes[0], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        current.src += self._model.charset(current, 0, XMLGenerator._charsets[0])
            current = rule.current
            current.src += ']]>'
        return current

    def DTD(self, parent=None):
        with UnlexerRuleContext(self, 'DTD', parent) as rule:
            current = rule.current
            current.src += '<!'
            with QuantifierContext(rule, 0, 0, inf, XMLGenerator._quant_sizes[0], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        current.src += self._model.charset(current, 0, XMLGenerator._charsets[0])
            current = rule.current
            current.src += '>'
        return current

    def EntityRef(self, parent=None):
        with UnlexerRuleContext(self, 'EntityRef', parent) as rule:
            current = rule.current
            current.src += '&'
            self.Name(parent=current)
            current.src += ';'
        return current

    def CharRef(self, parent=None):
        with UnlexerRuleContext(self, 'CharRef', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, XMLGenerator._alt_sizes[0], 0, XMLGenerator._alt_conds[0]) as alt0:
                current = rule.current
                choice0 = alt0()
                if choice0 == 0:
                    current.src += '&#'
                    with QuantifierContext(rule, 0, 1, inf, XMLGenerator._quant_sizes[1], 0) as quant0:
                        while quant0():
                            with QuantifiedContext(rule):
                                current = rule.current
                                self.DIGIT(parent=current)
                    current = rule.current
                    current.src += ';'
                elif choice0 == 1:
                    current.src += '&#x'
                    with QuantifierContext(rule, 1, 1, inf, XMLGenerator._quant_sizes[1], 0) as quant1:
                        while quant1():
                            with QuantifiedContext(rule):
                                current = rule.current
                                self.HEXDIGIT(parent=current)
                    current = rule.current
                    current.src += ';'
            current = rule.current
        return current

    def SEA_WS(self, parent=None):
        with UnlexerRuleContext(self, 'SEA_WS', parent) as rule:
            current = rule.current
            with QuantifierContext(rule, 0, 1, inf, XMLGenerator._quant_sizes[0], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        with AlternationContext(rule, 0, XMLGenerator._alt_sizes[1], 0, XMLGenerator._alt_conds[1]) as alt0:
                            current = rule.current
                            choice0 = alt0()
                            if choice0 == 0:
                                current.src += ' '
                            elif choice0 == 1:
                                current.src += '\t'
                            elif choice0 == 2:
                                with QuantifierContext(rule, 1, 0, 1, XMLGenerator._quant_sizes[0], 0) as quant1:
                                    while quant1():
                                        with QuantifiedContext(rule):
                                            current = rule.current
                                            current.src += '\r'
                                current = rule.current
                                current.src += '\n'
                        current = rule.current
            current = rule.current
        return current

    def OPEN(self, parent=None):
        with UnlexerRuleContext(self, 'OPEN', parent, True) as rule:
            current = rule.current
            current.src += '<'
        return current

    def XMLDeclOpen(self, parent=None):
        with UnlexerRuleContext(self, 'XMLDeclOpen', parent) as rule:
            current = rule.current
            current.src += '<?xml'
            self.S(parent=current)
        return current

    def SPECIAL_OPEN(self, parent=None):
        with UnlexerRuleContext(self, 'SPECIAL_OPEN', parent) as rule:
            current = rule.current
            current.src += '<?'
            self.Name(parent=current)
        return current

    def TEXT(self, parent=None):
        with UnlexerRuleContext(self, 'TEXT', parent) as rule:
            current = rule.current
            with QuantifierContext(rule, 0, 1, inf, XMLGenerator._quant_sizes[0], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        current.src += self._model.charset(current, 0, XMLGenerator._charsets[1])
            current = rule.current
        return current

    def CLOSE(self, parent=None):
        with UnlexerRuleContext(self, 'CLOSE', parent, True) as rule:
            current = rule.current
            current.src += '>'
        return current

    def SPECIAL_CLOSE(self, parent=None):
        with UnlexerRuleContext(self, 'SPECIAL_CLOSE', parent, True) as rule:
            current = rule.current
            current.src += '?>'
        return current

    def SLASH_CLOSE(self, parent=None):
        with UnlexerRuleContext(self, 'SLASH_CLOSE', parent, True) as rule:
            current = rule.current
            current.src += '/>'
        return current

    def SLASH(self, parent=None):
        with UnlexerRuleContext(self, 'SLASH', parent, True) as rule:
            current = rule.current
            current.src += '/'
        return current

    def EQUALS(self, parent=None):
        with UnlexerRuleContext(self, 'EQUALS', parent, True) as rule:
            current = rule.current
            current.src += '='
        return current

    def STRING(self, parent=None):
        with UnlexerRuleContext(self, 'STRING', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, XMLGenerator._alt_sizes[2], 0, XMLGenerator._alt_conds[0]) as alt0:
                current = rule.current
                choice0 = alt0()
                if choice0 == 0:
                    current.src += '"'
                    with QuantifierContext(rule, 0, 0, inf, XMLGenerator._quant_sizes[0], 0) as quant0:
                        while quant0():
                            with QuantifiedContext(rule):
                                current = rule.current
                                current.src += self._model.charset(current, 0, XMLGenerator._charsets[2])
                    current = rule.current
                    current.src += '"'
                elif choice0 == 1:
                    current.src += '\''
                    with QuantifierContext(rule, 1, 0, inf, XMLGenerator._quant_sizes[0], 0) as quant1:
                        while quant1():
                            with QuantifiedContext(rule):
                                current = rule.current
                                current.src += self._model.charset(current, 1, XMLGenerator._charsets[3])
                    current = rule.current
                    current.src += '\''
            current = rule.current
        return current

    def Name(self, parent=None):
        with UnlexerRuleContext(self, 'Name', parent) as rule:
            current = rule.current
            self.NameStartChar(parent=current)
            with QuantifierContext(rule, 0, 0, inf, XMLGenerator._quant_sizes[1], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.NameChar(parent=current)
            current = rule.current
        return current

    def S(self, parent=None):
        with UnlexerRuleContext(self, 'S', parent) as rule:
            current = rule.current
            current.src += self._model.charset(current, 0, XMLGenerator._charsets[4])
        return current

    def HEXDIGIT(self, parent=None):
        with UnlexerRuleContext(self, 'HEXDIGIT', parent) as rule:
            current = rule.current
            current.src += self._model.charset(current, 0, XMLGenerator._charsets[5])
        return current

    def DIGIT(self, parent=None):
        with UnlexerRuleContext(self, 'DIGIT', parent) as rule:
            current = rule.current
            current.src += self._model.charset(current, 0, XMLGenerator._charsets[6])
        return current

    def NameChar(self, parent=None):
        with UnlexerRuleContext(self, 'NameChar', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, XMLGenerator._alt_sizes[3], 0, XMLGenerator._alt_conds[2]) as alt0:
                current = rule.current
                choice0 = alt0()
                if choice0 == 0:
                    self.NameStartChar(parent=current)
                elif choice0 == 1:
                    current.src += '-'
                elif choice0 == 2:
                    current.src += '.'
                elif choice0 == 3:
                    self.DIGIT(parent=current)
                elif choice0 == 4:
                    current.src += '\xb7'
                elif choice0 == 5:
                    current.src += self._model.charset(current, 0, XMLGenerator._charsets[7])
                elif choice0 == 6:
                    current.src += self._model.charset(current, 1, XMLGenerator._charsets[8])
            current = rule.current
        return current

    def NameStartChar(self, parent=None):
        with UnlexerRuleContext(self, 'NameStartChar', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, XMLGenerator._alt_sizes[4], 0, XMLGenerator._alt_conds[3]) as alt0:
                current = rule.current
                choice0 = alt0()
                if choice0 == 0:
                    current.src += self._model.charset(current, 0, XMLGenerator._charsets[9])
                elif choice0 == 1:
                    current.src += self._model.charset(current, 1, XMLGenerator._charsets[10])
                elif choice0 == 2:
                    current.src += self._model.charset(current, 2, XMLGenerator._charsets[11])
                elif choice0 == 3:
                    current.src += self._model.charset(current, 3, XMLGenerator._charsets[12])
                elif choice0 == 4:
                    current.src += self._model.charset(current, 4, XMLGenerator._charsets[13])
                elif choice0 == 5:
                    current.src += self._model.charset(current, 5, XMLGenerator._charsets[14])
            current = rule.current
        return current

    def PI(self, parent=None):
        with UnlexerRuleContext(self, 'PI', parent, True) as rule:
            current = rule.current
            current.src += '?>'
        return current

    def IGNORE(self, parent=None):
        with UnlexerRuleContext(self, 'IGNORE', parent) as rule:
            current = rule.current
            current.src += self._model.charset(current, 0, XMLGenerator._charsets[0])
        return current

    def document(self, parent=None):
        with UnparserRuleContext(self, 'document', parent) as rule:
            current = rule.current
            with QuantifierContext(rule, 0, 0, 1, XMLGenerator._quant_sizes[2], 4) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.prolog(parent=current)
            current = rule.current
            with QuantifierContext(rule, 1, 0, inf, XMLGenerator._quant_sizes[3], 4) as quant1:
                while quant1():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.misc(parent=current)
            current = rule.current
            self.element(parent=current)
            with QuantifierContext(rule, 2, 0, inf, XMLGenerator._quant_sizes[3], 0) as quant2:
                while quant2():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.misc(parent=current)
            current = rule.current
        return current

    def prolog(self, parent=None):
        with UnparserRuleContext(self, 'prolog', parent) as rule:
            current = rule.current
            self._reserve(1, self.XMLDeclOpen, parent=current)
            with QuantifierContext(rule, 0, 0, inf, XMLGenerator._quant_sizes[4], 1) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.attribute(parent=current)
            current = rule.current
            self.SPECIAL_CLOSE(parent=current)
        return current

    def content(self, parent=None):
        with UnparserRuleContext(self, 'content', parent) as rule:
            current = rule.current
            with QuantifierContext(rule, 0, 0, 1, XMLGenerator._quant_sizes[3], 0) as quant0:
                while quant0():
                    with QuantifiedContext(rule):
                        current = rule.current
                        self.chardata(parent=current)
            current = rule.current
            with QuantifierContext(rule, 1, 0, inf, XMLGenerator._quant_sizes[1], 0) as quant1:
                while quant1():
                    with QuantifiedContext(rule):
                        current = rule.current
                        with AlternationContext(rule, 0, XMLGenerator._alt_sizes[5], 0, XMLGenerator._alt_conds[4]) as alt0:
                            current = rule.current
                            [self.element, self.reference, self.CDATA, self.PI, self.COMMENT][alt0()](parent=current)
                        current = rule.current
                        with QuantifierContext(rule, 2, 0, 1, XMLGenerator._quant_sizes[3], 0) as quant2:
                            while quant2():
                                with QuantifiedContext(rule):
                                    current = rule.current
                                    self.chardata(parent=current)
                        current = rule.current
            current = rule.current
        return current

    def element(self, parent=None):
        with UnparserRuleContext(self, 'element', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, XMLGenerator._alt_sizes[6], 0, XMLGenerator._alt_conds[0]) as alt0:
                current = rule.current
                choice0 = alt0()
                if choice0 == 0:
                    self._reserve(8, self.OPEN, parent=current)
                    self._reserve(6, self.Name, parent=current)
                    with QuantifierContext(rule, 0, 0, inf, XMLGenerator._quant_sizes[4], 6) as quant0:
                        while quant0():
                            with QuantifiedContext(rule):
                                current = rule.current
                                self.attribute(parent=current)
                    current = rule.current
                    self._reserve(5, self.CLOSE, parent=current)
                    self._reserve(5, self.content, parent=current)
                    self._reserve(4, self.OPEN, parent=current)
                    self._reserve(3, self.SLASH, parent=current)
                    self._reserve(1, self.Name, parent=current)
                    self.CLOSE(parent=current)
                elif choice0 == 1:
                    self._reserve(3, self.OPEN, parent=current)
                    self._reserve(1, self.Name, parent=current)
                    with QuantifierContext(rule, 1, 0, inf, XMLGenerator._quant_sizes[4], 1) as quant1:
                        while quant1():
                            with QuantifiedContext(rule):
                                current = rule.current
                                self.attribute(parent=current)
                    current = rule.current
                    self.SLASH_CLOSE(parent=current)
            current = rule.current
        return current

    def reference(self, parent=None):
        with UnparserRuleContext(self, 'reference', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, XMLGenerator._alt_sizes[7], 0, XMLGenerator._alt_conds[0]) as alt0:
                current = rule.current
                [self.EntityRef, self.CharRef][alt0()](parent=current)
            current = rule.current
        return current

    def attribute(self, parent=None):
        with UnparserRuleContext(self, 'attribute', parent) as rule:
            current = rule.current
            self._reserve(2, self.Name, parent=current)
            self._reserve(1, self.EQUALS, parent=current)
            self.STRING(parent=current)
        return current

    def chardata(self, parent=None):
        with UnparserRuleContext(self, 'chardata', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, XMLGenerator._alt_sizes[0], 0, XMLGenerator._alt_conds[0]) as alt0:
                current = rule.current
                [self.TEXT, self.SEA_WS][alt0()](parent=current)
            current = rule.current
        return current

    def misc(self, parent=None):
        with UnparserRuleContext(self, 'misc', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, XMLGenerator._alt_sizes[8], 0, XMLGenerator._alt_conds[1]) as alt0:
                current = rule.current
                [self.COMMENT, self.PI, self.SEA_WS][alt0()](parent=current)
            current = rule.current
        return current


    _default_rule = document

    _rule_sizes = {
        'COMMENT': RuleSize(1, 1),
        'CDATA': RuleSize(1, 1),
        'DTD': RuleSize(1, 1),
        'EntityRef': RuleSize(3, 3),
        'CharRef': RuleSize(2, 2),
        'SEA_WS': RuleSize(1, 1),
        'OPEN': RuleSize(1, 1),
        'XMLDeclOpen': RuleSize(2, 2),
        'SPECIAL_OPEN': RuleSize(3, 3),
        'TEXT': RuleSize(1, 1),
        'CLOSE': RuleSize(1, 1),
        'SPECIAL_CLOSE': RuleSize(1, 1),
        'SLASH_CLOSE': RuleSize(1, 1),
        'SLASH': RuleSize(1, 1),
        'EQUALS': RuleSize(1, 1),
        'STRING': RuleSize(1, 1),
        'Name': RuleSize(2, 2),
        'S': RuleSize(1, 1),
        'HEXDIGIT': RuleSize(1, 1),
        'DIGIT': RuleSize(1, 1),
        'NameChar': RuleSize(1, 1),
        'NameStartChar': RuleSize(1, 1),
        'PI': RuleSize(1, 1),
        'IGNORE': RuleSize(1, 1),
        'document': RuleSize(4, 4),
        'prolog': RuleSize(3, 3),
        'content': RuleSize(1, 0),
        'element': RuleSize(3, 4),
        'reference': RuleSize(3, 2),
        'attribute': RuleSize(3, 4),
        'chardata': RuleSize(2, 1),
        'misc': RuleSize(2, 1),
    }

    _alt_sizes = (
        (RuleSize(1, 1), RuleSize(1, 1)),  # 0
        (RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0)),  # 1
        (RuleSize(0, 0), RuleSize(0, 0)),  # 2
        (RuleSize(1, 1), RuleSize(0, 0), RuleSize(0, 0), RuleSize(1, 1), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0)),  # 3
        (RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0), RuleSize(0, 0)),  # 4
        (RuleSize(3, 4), RuleSize(3, 2), RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1)),  # 5
        (RuleSize(2, 9), RuleSize(2, 4)),  # 6
        (RuleSize(3, 3), RuleSize(2, 2)),  # 7
        (RuleSize(1, 1), RuleSize(1, 1), RuleSize(1, 1)),  # 8
    )

    _alt_conds = (
        (1, 1),  # 0
        (1, 1, 1),  # 1
        (1, 1, 1, 1, 1, 1, 1),  # 2
        (1, 1, 1, 1, 1, 1),  # 3
        (1, 1, 1, 1, 1),  # 4
    )

    _quant_sizes = (
        RuleSize(0, 0),  # 0
        RuleSize(1, 1),  # 1
        RuleSize(3, 3),  # 2
        RuleSize(2, 1),  # 3
        RuleSize(3, 4),  # 4
    )

    _charsets = (
        Generator._charset(((0x20, 0x7f), )),  # 0
        Generator._charset(((0x20, 0x26), (0x27, 0x3c), (0x3d, 0x7f), )),  # 1
        Generator._charset(((0x20, 0x22), (0x23, 0x3c), (0x3d, 0x7f), )),  # 2
        Generator._charset(((0x20, 0x27), (0x28, 0x3c), (0x3d, 0x7f), )),  # 3
        Generator._charset(((0x9, 0xa), (0xa, 0xb), (0xd, 0xe), (0x20, 0x21), )),  # 4
        Generator._charset(((0x30, 0x3a), (0x41, 0x47), (0x61, 0x67), )),  # 5
        Generator._charset(((0x30, 0x3a), )),  # 6
        Generator._charset(((0x300, 0x370), )),  # 7
        Generator._charset(((0x203f, 0x2041), )),  # 8
        Generator._charset(((0x3a, 0x3b), (0x41, 0x5b), (0x5f, 0x60), (0x61, 0x7b), )),  # 9
        Generator._charset(((0x2070, 0x2190), )),  # 10
        Generator._charset(((0x2c00, 0x2ff0), )),  # 11
        Generator._charset(((0x3001, 0xd800), )),  # 12
        Generator._charset(((0xf900, 0xfdd0), )),  # 13
        Generator._charset(((0xfdf0, 0xfffe), )),  # 14
    )
