{
    "model_role_name": "Token Extractor",
    "user_role_name": "Token Extractor",
    "system_role": "You are a senior programmer that are really good at analyzing source code written in Java or C.",
    "task": "You are given a snippet program written in Java or C. You are asked to analyze the snippet and answer the following questions: Given the <FUNCTION_NAME>() function, what values would be interesting to test the function?",
    "analysis_rules": [
        "- By interesting, I mean values that are likely to change the control flow in the given function.",
        "- All constants values (eg, strings or integers) used in comparisons are interesting if the control flow, such as if or switch statements, of the given function explicitly changes according to the comparision result.",
		"- You must not guess constant values that you don't know. You know constant values that are explicitly given.",
		"- Line numbers are given at the beginning of each line.",
		"- For every answer, you must answer a line number where the constant value is defined.",
		"- If you don't know the line number where the constant value is defined or the value is unknown, you must print UNKNOWN as the value in your answer.",
		"- Do not consider Java exceptions.",
		"- In Java, if there is a boolen parsing function (ie, Boolean.parseBoolean()), you should assume that \"true\" and \"false\" are interesting values and they are defined at the line where the parsing function is called.",
		"- In Java, for a map-like object (ie, key-value map), a string key is interesting if the control flow changes according if the key is missing.",
		"- You must ignore length or size values for arrays, strings, or collections. They are not interesting"
    ],
    "analysis_examples": [
		"Example 1:",
		"```java",
		"1. static final int CONSTANT = 5;",
		"2. public void example(int a) {",
		"3.     if (a == CONSTANT) {",
		"4.         System.out.println(\"hello world\");",
		"5.     }",
		"6. }",
		"```",
		"Your answer: The value 5 is interesting because it can change the control flow at line 3.",
		"The value 5 is defined at line 1.",
		"- Answer: 5 <#> `a`",
		"",
		"Example 2:",
		"```java",
		"1. public void example(int a) {",
		"2.     if (a == UNKNOWN_CONSTANT) {",
		"3.         System.out.println(\"hello world\");",
		"4.     }",
		"5. }",
		"```",
		"Your answer: The value of `UNKNOWN_CONSTANT` cannot be determined, so the answer is UNKNOWN.",
		"- Answer: \"UNKNOWN\" <DELIMITER> `a`",
		"",
		"Example 3:",
		"```java",
		"1. public void foo(String a) {",
		"2.     if (a.contains(\"const\")) {",
		"3.         System.out.println(\"hello world\");",
		"4.     }",
		"5. }",
		"```",
		"Your answer: The value \"const\" is interesting because it is comopared to a substring of an argument a at line 2.",
		"The value \"const\" is defined at line 2.",
		"- Answer: \"const\" <DELIMITER> `a`",
		"",
		"Example 4:",
		"```java",
		"1. public void foo(int a) {",
		"2.     if (a == CONST_VALUE) {",
		"3.         System.out.println(\"hello world\");",
		"4.     }",
		"5. }",
		"```",
		"Your answer: The value \"CONST_VALUE\" is interesting, but I don't know a line number where the \"CONST_VALUE\" value is defined.",
		"- Answer: \"UNKNOWN\" <DELIMITER> `a`",
		"",
		"Example 5:",
		"```java",
		"1. public void foo(String a) {",
		"2.     if (Boolean.parseBoolean(\"true\"))",
		"3.         System.out.println(\"hello world\");",
		"4. }",
		"```",
		"Your answer: The value \"true\" is interesting because it is parsed to a boolean true.",
		"The value \"true\" is defined at line 2.",
		"- Answer: \"true\" <DELIMITER> `a`",
        "",
		"Example 6:",
		"```java",
		"1. public void foo(String a) {",
		"2.     if (m.hasKey(\"key\"))",
		"3.         System.out.println(\"hello world\");",
		"4. }",
		"```",
		"Your answer: The value \"key\" is interesting because `m` is a map-like object and the control flow changes if \"key\" is missing.",
		"The value \"key\" is defined at line 2.",
		"- Answer: \"key\" <DELIMITER> `m.hasKey()`",
        ""
	],
    "output_constraints": [
        "For each value, you must output why the value is interesting first. You must answer how the value changes the execution of the given function.",
		"You must answer a line number where the value is defined",
		"And then the interesting value in a new line without explaining anything.",
        "You must output the values in an integer, a bytes or a string format. Except that, you must not output anything else.",
		"When you output a string or bytes, you must output the string in double quotes.",
		"When you output a hex integer, you must output the integer in a hexadecimal format."
    ],
    "output_examples": [
        "The output format should be as follows:",
        "Example looks like this:",
		"For integers:",
		"```",
		"{Your answer that why this value potentially changes the control flow of the given function when the following value is given to an argument `argument`}",
		"{Your answer about the line number where the constant value is defined}",
		"- Answer: 1 <DELIMITER> `argument`",
		"```",
        "For bytes:",
        "```",
        "{Your answer that why this value potentially changes the control flow of the given function when the following value is given to an argument `argument`}",
		"{Your answer about the line number where the constant value is defined}",
        "- Answer: \"\\x09\\x00\" <DELIMITER> `argument`",
        "```",
        "For strings:",
        "```",
        "{Your answer that why this value potentially changes the control flow of the given function when the following value is given to an argument `argument`}",
		"{Your answer about the line number where the constant value is defined}",
        "- Answer: \"Some string\" <DELIMITER> `argument`",
        "```",
        "Even for a single character, you must use double quotes:",
        "```",
        "{Your answer that why this value potentially changes the control flow of the given function when the following value is given to an argument `argument`}",
		"{Your answer about the line number where the constant value is defined}",
        "- Answer: \"A\" <DELIMITER> `argument`",
        "```"
    ]
}
