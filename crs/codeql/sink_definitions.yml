sink_definitions:
  - model:
      package: "java.math"
      type: "BigDecimal"
      subtypes: false
      name: "BigDecimal"
      signature: "(String)"
      ext: ""
      input: "Argument[0]"
      kind: "sink-BigDecimal"
      provenance: "manual"
    metadata:
      description: "DoS for BigDecimal"
  - model:
      package: "java.math"
      type: "BigDecimal"
      subtypes: false
      name: "BigDecimal"
      signature: "(String,MathContext)"
      ext: ""
      input: "Argument[0]"
      kind: "sink-BigDecimal"
      provenance: "manual"
    metadata:
      description: "DoS for BigDecimal"
  - model:
      package: "java.math"
      type: "BigDecimal"
      subtypes: false
      name: "BigDecimal"
      signature: "(char[])"
      ext: ""
      input: "Argument[0]"
      kind: "sink-BigDecimal"
      provenance: "manual"
    metadata:
      description: "DoS for BigDecimal"
  - model:
      package: "java.math"
      type: "BigDecimal"
      subtypes: false
      name: "BigDecimal"
      signature: "(char[],int,int)"
      ext: ""
      input: "Argument[0]"
      kind: "sink-BigDecimal"
      provenance: "manual"
    metadata:
      description: "DoS for BigDecimal"
  - model:
      package: "java.math"
      type: "BigDecimal"
      subtypes: false
      name: "BigDecimal"
      signature: "(char[],int,int,MathContext)"
      ext: ""
      input: "Argument[0]"
      kind: "sink-BigDecimal"
      provenance: "manual"
    metadata:
      description: "DoS for BigDecimal"
  - model:
      package: "java.math"
      type: "BigDecimal"
      subtypes: false
      name: "BigDecimal"
      signature: "(char[],MathContext)"
      ext: ""
      input: "Argument[0]"
      kind: "sink-BigDecimal"
      provenance: "manual"
    metadata:
      description: "DoS for BigDecimal"
  - model:
      package: "javax.xml.parsers"
      type: "SAXParser"
      subtypes: false
      name: "parse"
      signature: "(File,DefaultHandler)"
      ext: ""
      input: "Argument[0]"
      kind: "sink-SAXParser"
      provenance: "manual"
    metadata:
      description: "SSRF by SAXParser"
  - model:
      package: "javax.xml.parsers"
      type: "SAXParser"
      subtypes: false
      name: "parse"
      signature: "(File,HandlerBase)"
      ext: ""
      input: "Argument[0]"
      kind: "sink-SAXParser"
      provenance: "manual"
    metadata:
      description: "SSRF by SAXParser"
  - model:
      package: "javax.xml.parsers"
      type: "SAXParser"
      subtypes: false
      name: "parse"
      signature: "(InputSource,DefaultHandler)"
      ext: ""
      input: "Argument[0]"
      kind: "sink-SAXParser"
      provenance: "manual"
    metadata:
      description: "SSRF by SAXParser"
  - model:
      package: "javax.xml.parsers"
      type: "SAXParser"
      subtypes: false
      name: "parse"
      signature: "(InputSource,HandlerBase)"
      ext: ""
      input: "Argument[0]"
      kind: "sink-SAXParser"
      provenance: "manual"
    metadata:
      description: "SSRF by SAXParser"
  - model:
      package: "javax.xml.parsers"
      type: "SAXParser"
      subtypes: false
      name: "parse"
      signature: "(InputStream,DefaultHandler)"
      ext: ""
      input: "Argument[0]"
      kind: "sink-SAXParser"
      provenance: "manual"
    metadata:
      description: "SSRF by SAXParser"
  - model:
      package: "javax.xml.parsers"
      type: "SAXParser"
      subtypes: false
      name: "parse"
      signature: "(InputStream,DefaultHandler,String)"
      ext: ""
      input: "Argument[0]"
      kind: "sink-SAXParser"
      provenance: "manual"
    metadata:
      description: "SSRF by SAXParser"
  - model:
      package: "javax.xml.parsers"
      type: "SAXParser"
      subtypes: false
      name: "parse"
      signature: "(InputStream,HandlerBase)"
      ext: ""
      input: "Argument[0]"
      kind: "sink-SAXParser"
      provenance: "manual"
    metadata:
      description: "SSRF by SAXParser"
  - model:
      package: "javax.xml.parsers"
      type: "SAXParser"
      subtypes: false
      name: "parse"
      signature: "(InputStream,HandlerBase,String)"
      ext: ""
      input: "Argument[0]"
      kind: "sink-SAXParser"
      provenance: "manual"
    metadata:
      description: "SSRF by SAXParser"
  - model:
      package: "javax.xml.parsers"
      type: "SAXParser"
      subtypes: false
      name: "parse"
      signature: "(String,DefaultHandler)"
      ext: ""
      input: "Argument[0]"
      kind: "sink-SAXParser"
      provenance: "manual"
    metadata:
      description: "SSRF by SAXParser"
  - model:
      package: "javax.xml.parsers"
      type: "SAXParser"
      subtypes: false
      name: "parse"
      signature: "(String,HandlerBase)"
      ext: ""
      input: "Argument[0]"
      kind: "sink-SAXParser"
      provenance: "manual"
    metadata:
      description: "SSRF by SAXParser"

  # java.net.URL
  - model: # URL(String spec)
      package: "java.net"
      type: "URL"
      subtypes: false
      name: "URL"
      signature: "(String)"
      ext: ""
      input: "Argument[0]" # spec
      kind: "sink-ServerSideRequestForgery"
      provenance: "manual"
    metadata:
      description: "SSRF by URL"
  - model: # URL(URL context, String spec)
      package: "java.net"
      type: "URL"
      subtypes: false
      name: "URL"
      signature: "(URL,String)"
      ext: ""
      input: "Argument[1]" # spec
      kind: "sink-ServerSideRequestForgery"
      provenance: "manual"
    metadata:
      description: "SSRF by URL"
  - model: # URL(URL context, String spec, URLStreamHandler handler)
      package: "java.net"
      type: "URL"
      subtypes: false
      name: "URL"
      signature: "(URL,String,URLStreamHandler)"
      ext: ""
      input: "Argument[1]" # spec
      kind: "sink-ServerSideRequestForgery"
      provenance: "manual"
    metadata:
      description: "SSRF by URL"
  - model: # URL(String protocol, String host, String file)
      package: "java.net"
      type: "URL"
      subtypes: false
      name: "URL"
      signature: "(String,String,String)"
      ext: ""
      input: "Argument[1]" # host
      kind: "sink-ServerSideRequestForgery"
      provenance: "manual"
    metadata:
      description: "SSRF by URL"
  - model: # URL(String protocol, String host, int port, String file)
      package: "java.net"
      type: "URL"
      subtypes: false
      name: "URL"
      signature: "(String,String,int,String)"
      ext: ""
      input: "Argument[1]" # host
      kind: "sink-ServerSideRequestForgery"
      provenance: "manual"
    metadata:
      description: "SSRF by URL"
  - model: # URL(String protocol, String host, int port, String file, URLStreamHandler handler)
      package: "java.net"
      type: "URL"
      subtypes: false
      name: "URL"
      signature: "(String,String,int,String,URLStreamHandler)"
      ext: ""
      input: "Argument[1]" # host
      kind: "sink-ServerSideRequestForgery"
      provenance: "manual"
    metadata:
      description: "SSRF by URL"
  - model: # URL.of(URI uri, URLStreamHandler handler)
      # Note that this sink is only available in JDK 20+
      package: "java.net"
      type: "URL"
      subtypes: false
      name: "of"
      signature: "(URI,URLStreamHandler)"
      ext: ""
      input: "Argument[0]" # uri
      kind: "sink-ServerSideRequestForgery"
      provenance: "manual"
    metadata:
      description: "SSRF by URL"
  # NOTE: URL.fabricateNewURL() would create new instance but it's hard to track
  
  # java.net.URI
  - model: # URI(String str)
      package: "java.net"
      type: "URI"
      subtypes: false
      name: "URI"
      signature: "(String)"
      ext: ""
      input: "Argument[0]" # str
      kind: "sink-ServerSideRequestForgery"
      provenance: "manual"
    metadata:
      description: "SSRF by URI"
  - model: # URI(String scheme, String userInfo, String host, int port, String path, String query, String fragment)
      package: "java.net"
      type: "URI"
      subtypes: false
      name: "URI"
      signature: "(String,String,String,int,String,String,String)"
      ext: ""
      input: "Argument[2]" # host
      kind: "sink-ServerSideRequestForgery"
      provenance: "manual"
    metadata:
      description: "SSRF by URI"
  - model: # URI(String scheme, String authority, String path, String query, String fragment)
      package: "java.net"
      type: "URI"
      subtypes: false
      name: "URI"
      signature: "(String,String,String,String,String)"
      ext: ""
      input: "Argument[1]" # authority
      kind: "sink-ServerSideRequestForgery"
      provenance: "manual"
    metadata:
      description: "SSRF by URI"
  - model: # URI(String scheme, String host, String path, String fragment)
      package: "java.net"
      type: "URI"
      subtypes: false
      name: "URI"
      signature: "(String,String,String,String)"
      ext: ""
      input: "Argument[1]" # host
      kind: "sink-ServerSideRequestForgery"
      provenance: "manual"
    metadata:
      description: "SSRF by URI"
  - model: # URI(String scheme, String ssp, String fragment)
      package: "java.net"
      type: "URI"
      subtypes: false
      name: "URI"
      signature: "(String,String,String)"
      ext: ""
      input: "Argument[1]" # ssp
      kind: "sink-ServerSideRequestForgery"
      provenance: "manual"
    metadata:
      description: "SSRF by URI"
  - model: # java.net.URI.create(String)
      package: "java.net"
      type: "URI"
      subtypes: false
      name: "create"
      signature: "(String)"
      ext: ""
      input: "Argument[0]" # uri
      kind: "sink-ServerSideRequestForgery"
      provenance: "manual"
    metadata:
      description: "SSRF by URI"

  # javax.validation.Validator
  - model: # Validator.validate(T object, Class<?>... groups)
      package: "javax.validation"
      type: "Validator"
      subtypes: false
      name: "validate"
      signature: "(Object,Class[])"
      ext: ""
      input: "Argument[0]" # object
      kind: "sink-ExpressionLanguageInjection"
      provenance: "manual"
    metadata:
      description: "Remote code execution by Validator"
  - model: # Validator.validateProperty(T object, String propertyName, Class<?>... groups)
      package: "javax.validation"
      type: "Validator"
      subtypes: false
      name: "validateProperty"
      signature: "(Object,String,Class[])"
      ext: ""
      input: "Argument[0]" # object
      kind: "sink-ExpressionLanguageInjection"
      provenance: "manual"
    metadata:
      description: "Remote code execution by Validator"
  - model: # validateValue(Class<T> beanType, String propertyName, Object value, Class<?>... groups)
      # NOTE: I'm not sure if this is a vulerable sink
      package: "javax.validation"
      type: "Validator"
      subtypes: false
      name: "validateValue"
      signature: "(Class,String,Object,Class[])"
      ext: ""
      input: "Argument[0]" # beanType
      kind: "sink-ExpressionLanguageInjection"
      provenance: "manual"
    metadata:
      description: "Remote code execution by Validator"

  # org.apache.batik
  - model: # TranscoderInput(Document document)
      package: "org.apache.batik.transcoder"
      type: "TranscoderInput"
      subtypes: false
      name: "TranscoderInput"
      signature: "(org.w3c.dom.Document)"
      ext: ""
      input: "Argument[0]" # document
      kind: "sink-batik-TranscoderInput"
      provenance: "manual"
    metadata:
      description: "SSRF by batik TranscoderInput"
  - model: # TranscoderInput(java.io.Reader reader)
      package: "org.apache.batik.transcoder"
      type: "TranscoderInput"
      subtypes: false
      name: "TranscoderInput"
      signature: "(Reader)"
      ext: ""
      input: "Argument[0]" # reader
      kind: "sink-batik-TranscoderInput"
      provenance: "manual"
    metadata:
      description: "SSRF by batik TranscoderInput"
  - model: # TranscoderInput(java.lang.String uri)
      package: "org.apache.batik.transcoder"
      type: "TranscoderInput"
      subtypes: false
      name: "TranscoderInput"
      signature: "(String)"
      ext: ""
      input: "Argument[0]" # uri
      kind: "sink-batik-TranscoderInput"
      provenance: "manual"
    metadata:
      description: "SSRF by batik TranscoderInput"
  - model: # TranscoderInput(org.xml.sax.XMLReader xmlReader)
      package: "org.apache.batik.transcoder"
      type: "TranscoderInput"
      subtypes: false
      name: "TranscoderInput"
      signature: "(org.xml.sax.XMLReader)"
      ext: ""
      input: "Argument[0]" # xmlReader
      kind: "sink-batik-TranscoderInput"
      provenance: "manual"
    metadata:
      description: "SSRF by batik TranscoderInput"
  - model: # TranscoderInput(java.io.InputStream istream)
      package: "org.apache.batik.transcoder"
      type: "TranscoderInput"
      subtypes: false
      name: "TranscoderInput"
      signature: "(InputStream)"
      ext: ""
      input: "Argument[0]" # inputStream
      kind: "sink-batik-TranscoderInput"
      provenance: "manual"
    metadata:
      description: "SSRF by batik TranscoderInput"
