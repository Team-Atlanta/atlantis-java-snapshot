{
    "sinks": {
        "Server Side Request Forgery (SSRF)": [
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/httpclient/HtmlUnitSSLConnectionSocketFactory.java",
                "line": 161,
                "column": 36
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/httpclient/HtmlUnitSSLConnectionSocketFactory.java",
                "line": 161,
                "column": 51
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/httpclient/SocksConnectionSocketFactory.java",
                "line": 52,
                "column": 27
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/HttpWebConnection.java",
                "line": 191,
                "column": 57
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/HttpWebConnection.java",
                "line": 202,
                "column": 61
            }
        ],
        "load arbitrary library": [
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/platform/Platform.java",
                "line": 55,
                "column": 66
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/platform/Platform.java",
                "line": 63,
                "column": 63
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/platform/Platform.java",
                "line": 132,
                "column": 25
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/platform/Platform.java",
                "line": 151,
                "column": 57
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/platform/Platform.java",
                "line": 164,
                "column": 25
            },
            {
                "path": "src/htmlunit/target/test-classes/libraries/dojo/1.9.3/util/doh/robot/DOHRobot.java",
                "line": 223,
                "column": 34
            },
            {
                "path": "src/htmlunit/target/test-classes/libraries/dojo/1.9.3/util/doh/robot/DOHRobot.java",
                "line": 224,
                "column": 36
            }
        ],
        "Regular Expression Injection": [
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/HttpWebConnection.java",
                "line": 1389,
                "column": 24
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/ProxyConfig.java",
                "line": 142,
                "column": 56
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/ScriptException.java",
                "line": 274,
                "column": 48
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/WebAssert.java",
                "line": 79,
                "column": 24
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/WebClient.java",
                "line": 1600,
                "column": 51
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/WebConsole.java",
                "line": 210,
                "column": 30
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/html/HtmlInput.java",
                "line": 1017,
                "column": 36
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/html/HtmlLink.java",
                "line": 280,
                "column": 50
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/html/HtmlLink.java",
                "line": 290,
                "column": 50
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/html/HtmlLink.java",
                "line": 298,
                "column": 50
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/html/HtmlNumberInput.java",
                "line": 140,
                "column": 44
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/html/XmlSerializer.java",
                "line": 381,
                "column": 40
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/httpclient/HtmlUnitExpiresHandler.java",
                "line": 92,
                "column": 34
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/javascript/HtmlUnitContextFactory.java",
                "line": 185,
                "column": 50
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/javascript/JavaScriptEngine.java",
                "line": 1216,
                "column": 48
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/javascript/host/html/HTMLElement.java",
                "line": 416,
                "column": 54
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/javascript/host/html/HTMLElement.java",
                "line": 458,
                "column": 54
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/javascript/host/intl/V8BreakIterator.java",
                "line": 179,
                "column": 35
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/javascript/host/intl/V8BreakIterator.java",
                "line": 182,
                "column": 35
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/javascript/host/xml/XSLTProcessor.java",
                "line": 156,
                "column": 54
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/javascript/proxyautoconfig/ProxyAutoConfig.java",
                "line": 167,
                "column": 28
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/javascript/regexp/HtmlUnitRegExpProxy.java",
                "line": 445,
                "column": 44
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/javascript/regexp/HtmlUnitRegExpProxy.java",
                "line": 455,
                "column": 44
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/platform/canvas/rendering/AwtRenderingBackend.java",
                "line": 782,
                "column": 50
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/util/DebuggingWebConnection.java",
                "line": 273,
                "column": 71
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/util/DebuggingWebConnection.java",
                "line": 273,
                "column": 50
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/util/XmlUtils.java",
                "line": 124,
                "column": 54
            },
            {
                "path": "src/htmlunit/target/test-classes/libraries/dojo/1.9.3/util/doh/robot/DOHRobot.java",
                "line": 1715,
                "column": 32
            },
            {
                "path": "src/htmlunit/target/test-classes/libraries/dojo/1.9.3/util/doh/robot/DOHRobot.java",
                "line": 613,
                "column": 46
            },
            {
                "path": "src/htmlunit/target/test-classes/libraries/dojo/1.9.3/util/doh/robot/DOHRobot.java",
                "line": 615,
                "column": 69
            }
        ],
        "Script Engine Injection": [
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/javascript/host/html/HTMLElement.java",
                "line": 363,
                "column": 21
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/javascript/host/html/HTMLElement.java",
                "line": 363,
                "column": 35
            },
            {
                "path": "src/htmlunit/target/test-classes/libraries/dojo/1.9.3/util/doh/robot/DOHRobot.java",
                "line": 230,
                "column": 14
            },
            {
                "path": "src/htmlunit/target/test-classes/libraries/dojo/1.9.3/util/doh/robot/DOHRobot.java",
                "line": 230,
                "column": 36
            },
            {
                "path": "src/htmlunit/target/test-classes/libraries/dojo/1.9.3/util/doh/robot/DOHRobot.java",
                "line": 231,
                "column": 16
            },
            {
                "path": "src/htmlunit/target/test-classes/libraries/dojo/1.9.3/util/doh/robot/DOHRobot.java",
                "line": 231,
                "column": 35
            }
        ],
        "File read/write hook path": [
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/DownloadedContent.java",
                "line": 89,
                "column": 41
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/HttpWebConnection.java",
                "line": 798,
                "column": 71
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/TextPage.java",
                "line": 63,
                "column": 21
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/WebClient.java",
                "line": 1492,
                "column": 89
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/html/HtmlEmbed.java",
                "line": 68,
                "column": 55
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/html/HtmlImage.java",
                "line": 788,
                "column": 59
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/html/HtmlImageInput.java",
                "line": 247,
                "column": 59
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/html/XmlSerializer.java",
                "line": 244,
                "column": 67
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/util/DebuggingWebConnection.java",
                "line": 177,
                "column": 59
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/util/DebuggingWebConnection.java",
                "line": 259,
                "column": 68
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/html/XmlSerializer.java",
                "line": 314,
                "column": 53
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/html/XmlSerializer.java",
                "line": 314,
                "column": 66
            },
            {
                "path": "src/htmlunit/src/main/java/org/htmlunit/javascript/host/file/File.java",
                "line": 85,
                "column": 47
            }
        ]
    },
    "tasks": [
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "id_1",
            "sanitizer": "Server Side Request Forgery (SSRF)",
            "sink": "src/htmlunit/src/main/java/org/htmlunit/HttpWebConnection.java:191:57",
            "status": "error",
            "id": 1
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "id_1",
            "sanitizer": "Server Side Request Forgery (SSRF)",
            "sink": "src/htmlunit/src/main/java/org/htmlunit/HttpWebConnection.java:202:61",
            "status": "error",
            "id": 2
        },
        {
            "blob": [
                ""
            ],
            "code": "src/htmlunit-harnesses/htmlunit-harness-one/src/main/java/com/aixcc/htmlunit/harnesses/one/HtmlunitOne.java:\n45       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n46           // Convert the byte array to a string\n47           String htmlString = new String(input, StandardCharsets.UTF_8);\n48   \n49           // Write the HTML content to a temporary file\n50           File tempFile = File.createTempFile(\"test\", \".html\");\n51           try (FileWriter writer = new FileWriter(tempFile)) {\n52               writer.write(htmlString);\n53           } catch (Exception e) {\n54               // Ensure the temporary file is deleted if an exception occurs\n55               tempFile.delete();\n56               throw e;\n57           }\n58   \n59           try {\n60               // Use WebClient to load the temporary file and print the page's normalized text\n61               WebClient webClient = new WebClient(BrowserVersion.EDGE);\n62               HtmlPage page = webClient.getPage(tempFile.toURI().toURL());\n63               System.out.println(page.asNormalizedText());\n64           } catch (Exception e) {\n65               // Eat the java exception since fuzzer does not care them\n66               //System.out.println(e.getMessage());\n67           } finally {\n68               // Ensure the temporary file is deleted\n69               tempFile.delete();\n70           }\n71       }\n\nsrc/htmlunit/src/main/java/org/htmlunit/WebClient.java:\n 400       public <P extends Page> P getPage(final WebWindow webWindow, final WebRequest webRequest)\n 401               throws IOException, FailingHttpStatusCodeException {\n 402           return getPage(webWindow, webRequest, true);\n 403       }\n 429       @SuppressWarnings(\"unchecked\")\n 430       <P extends Page> P getPage(final WebWindow webWindow, final WebRequest webRequest,\n 431               final boolean addToHistory)\n 432           throws IOException, FailingHttpStatusCodeException {\n 433   \n 434           final Page page = webWindow.getEnclosedPage();\n 435   \n 436           if (page != null) {\n 437               final URL prev = page.getUrl();\n 438               final URL current = webRequest.getUrl();\n 439               if (UrlUtils.sameFile(current, prev)\n 440                           && current.getRef() != null\n 441                           && !Objects.equals(current.getRef(), prev.getRef())) {\n 442                   // We're just navigating to an anchor within the current page.\n 443                   page.getWebResponse().getWebRequest().setUrl(current);\n 444                   if (addToHistory) {\n 445                       webWindow.getHistory().addPage(page);\n 446                   }\n 447   \n 448                   // clear the cache because the anchors are now matched by\n 449                   // the target pseudo style\n 450                   if (page instanceof HtmlPage) {\n 451                       ((HtmlPage) page).clearComputedStyles();\n 452                   }\n 453   \n 454                   final Window window = webWindow.getScriptableObject();\n 455                   if (window != null) { // js enabled\n 456                       window.getLocation().setHash(current.getRef());\n 457                   }\n 458                   return (P) page;\n 459               }\n 460   \n 461               if (page.isHtmlPage()) {\n 462                   final HtmlPage htmlPage = (HtmlPage) page;\n 463                   if (!htmlPage.isOnbeforeunloadAccepted()) {\n 464                       LOG.debug(\"The registered OnbeforeunloadHandler rejected to load a new page.\");\n 465                       return (P) page;\n 466                   }\n 467               }\n 468           }\n 469   \n 470           if (LOG.isDebugEnabled()) {\n 471               LOG.debug(\"Get page for window named '\" + webWindow.getName() + \"', using \" + webRequest);\n 472           }\n 473   \n 474           WebResponse webResponse;\n 475           final String protocol = webRequest.getUrl().getProtocol();\n 476           if (\"javascript\".equals(protocol)) {\n 477               webResponse = makeWebResponseForJavaScriptUrl(webWindow, webRequest.getUrl(), webRequest.getCharset());\n 478               if (webWindow.getEnclosedPage() != null && webWindow.getEnclosedPage().getWebResponse() == webResponse) {\n 479                   // a javascript:... url with result of type undefined didn't changed the page\n 480                   return (P) webWindow.getEnclosedPage();\n 481               }\n 482           }\n 483           else {\n 484               try {\n 485                   webResponse = loadWebResponse(webRequest);\n 486               }\n 487               catch (final NoHttpResponseException e) {\n 488                   webResponse = new WebResponse(RESPONSE_DATA_NO_HTTP_RESPONSE, webRequest, 0);\n 489               }\n 490           }\n 491   \n 492           printContentIfNecessary(webResponse);\n 493           loadWebResponseInto(webResponse, webWindow);\n 494   \n 495           // start execution here\n 496           // note: we have to do this also if the server reports an error!\n 497           //       e.g. if the server returns a 404 error page that includes javascript\n 498           if (scriptEngine_ != null) {\n 499               scriptEngine_.registerWindowAndMaybeStartEventLoop(webWindow);\n 500           }\n 501   \n 502           // check and report problems if needed\n 503           throwFailingHttpStatusCodeExceptionIfNecessary(webResponse);\n 504           return (P) webWindow.getEnclosedPage();\n 505       }\n 533       public <P extends Page> P getPage(final URL url) throws IOException, FailingHttpStatusCodeException {\n 534           final WebRequest request = new WebRequest(url, getBrowserVersion().getHtmlAcceptHeader(),\n 535                                                             getBrowserVersion().getAcceptEncodingHeader());\n 536           request.setCharset(UTF_8);\n 537   \n 538           return getPage(getCurrentWindow().getTopWindow(), request);\n 539       }\n 573       public Page loadWebResponseInto(final WebResponse webResponse, final WebWindow webWindow)\n 574           throws IOException, FailingHttpStatusCodeException {\n 575           return loadWebResponseInto(webResponse, webWindow, null);\n 576       }\n 599       public Page loadWebResponseInto(final WebResponse webResponse, final WebWindow webWindow,\n 600               String forceAttachmentWithFilename)\n 601               throws IOException, FailingHttpStatusCodeException {\n 602           WebAssert.notNull(\"webResponse\", webResponse);\n 603           WebAssert.notNull(\"webWindow\", webWindow);\n 604   \n 605           if (webResponse.getStatusCode() == HttpStatus.NO_CONTENT_204) {\n 606               return webWindow.getEnclosedPage();\n 607           }\n 608   \n 609           if (webStartHandler_ != null && \"application/x-java-jnlp-file\".equals(webResponse.getContentType())) {\n 610               webStartHandler_.handleJnlpResponse(webResponse);\n 611               return webWindow.getEnclosedPage();\n 612           }\n 613   \n 614           if (attachmentHandler_ != null\n 615                   && (forceAttachmentWithFilename != null || attachmentHandler_.isAttachment(webResponse))) {\n 616   \n 617               // check content disposition header for nothing provided\n 618               if (StringUtils.isEmpty(forceAttachmentWithFilename)) {\n 619                   final String disp = webResponse.getResponseHeaderValue(HttpHeader.CONTENT_DISPOSITION);\n 620                   forceAttachmentWithFilename = Attachment.getSuggestedFilename(disp);\n 621               }\n 622   \n 623               if (attachmentHandler_.handleAttachment(webResponse,\n 624                           StringUtils.isEmpty(forceAttachmentWithFilename) ? null : forceAttachmentWithFilename)) {\n 625                   // the handling is done by the attachment handler;\n 626                   // do not open a new window\n 627                   return webWindow.getEnclosedPage();\n 628               }\n 629   \n 630               final WebWindow w = openWindow(null, null, webWindow);\n 631               final Page page = pageCreator_.createPage(webResponse, w);\n 632               attachmentHandler_.handleAttachment(page,\n 633                                   StringUtils.isEmpty(forceAttachmentWithFilename) ? null : forceAttachmentWithFilename);\n 634               return page;\n 635           }\n 636   \n 637           final Page oldPage = webWindow.getEnclosedPage();\n 638           if (oldPage != null) {\n 639               // Remove the old page before create new one.\n 640               oldPage.cleanUp();\n 641           }\n 642   \n 643           Page newPage = null;\n 644           FrameWindow.PageDenied pageDenied = PageDenied.NONE;\n 645           if (windows_.contains(webWindow)) {\n 646               if (webWindow instanceof FrameWindow) {\n 647                   final String contentSecurityPolicy =\n 648                           webResponse.getResponseHeaderValue(HttpHeader.CONTENT_SECURIRY_POLICY);\n 649                   if (StringUtils.isNotBlank(contentSecurityPolicy)) {\n 650                       final URL origin = UrlUtils.getUrlWithoutPathRefQuery(\n 651                               ((FrameWindow) webWindow).getEnclosingPage().getUrl());\n 652                       final URL source = UrlUtils.getUrlWithoutPathRefQuery(webResponse.getWebRequest().getUrl());\n 653                       final Policy policy = Policy.parseSerializedCSP(contentSecurityPolicy,\n 654                                                       Policy.PolicyErrorConsumer.ignored);\n 655                       if (!policy.allowsFrameAncestor(\n 656                               Optional.of(URI.parseURI(source.toExternalForm()).orElse(null)),\n 657                               Optional.of(URI.parseURI(origin.toExternalForm()).orElse(null)))) {\n 658                           pageDenied = PageDenied.BY_CONTENT_SECURIRY_POLICY;\n 659   \n 660                           if (LOG.isWarnEnabled()) {\n 661                               LOG.warn(\"Load denied by Content-Security-Policy: '\" + contentSecurityPolicy + \"' - \"\n 662                                       + webResponse.getWebRequest().getUrl() + \"' does not permit framing.\");\n 663                           }\n 664                       }\n 665                   }\n 666   \n 667                   if (pageDenied == PageDenied.NONE) {\n 668                       final String xFrameOptions = webResponse.getResponseHeaderValue(HttpHeader.X_FRAME_OPTIONS);\n 669                       if (\"DENY\".equalsIgnoreCase(xFrameOptions)) {\n 670                           pageDenied = PageDenied.BY_X_FRAME_OPTIONS;\n 671   \n 672                           if (LOG.isWarnEnabled()) {\n 673                               LOG.warn(\"Load denied by X-Frame-Options: DENY; - '\"\n 674                                       + webResponse.getWebRequest().getUrl() + \"' does not permit framing.\");\n 675                           }\n 676                       }\n 677                   }\n 678               }\n 679   \n 680               if (pageDenied == PageDenied.NONE) {\n 681                   newPage = pageCreator_.createPage(webResponse, webWindow);\n 682               }\n 683               else {\n 684                   try {\n 685                       final WebResponse aboutBlank = loadWebResponse(WebRequest.newAboutBlankRequest());\n 686                       newPage = pageCreator_.createPage(aboutBlank, webWindow);\n 687                       // TODO - maybe we have to attach to original request/response to the page\n 688   \n 689                       ((FrameWindow) webWindow).setPageDenied(pageDenied);\n 690                   }\n 691                   catch (final IOException ignored) {\n 692                       // ignore\n 693                   }\n 694               }\n 695   \n 696               if (windows_.contains(webWindow)) {\n 697                   fireWindowContentChanged(new WebWindowEvent(webWindow, WebWindowEvent.CHANGE, oldPage, newPage));\n 698   \n 699                   // The page being loaded may already have been replaced by another page via JavaScript code.\n 700                   if (webWindow.getEnclosedPage() == newPage) {\n 701                       newPage.initialize();\n 702                       // hack: onload should be fired the same way for all type of pages\n 703                       // here is a hack to handle non HTML pages\n 704                       if (isJavaScriptEnabled()\n 705                               && webWindow instanceof FrameWindow && !newPage.isHtmlPage()) {\n 706                           final FrameWindow fw = (FrameWindow) webWindow;\n 707                           final BaseFrameElement frame = fw.getFrameElement();\n 708                           if (frame.hasEventHandlers(\"onload\")) {\n 709                               if (LOG.isDebugEnabled()) {\n 710                                   LOG.debug(\"Executing onload handler for \" + frame);\n 711                               }\n 712                               final Event event = new Event(frame, Event.TYPE_LOAD);\n 713                               ((Node) frame.getScriptableObject()).executeEventLocally(event);\n 714                           }\n 715                       }\n 716                   }\n 717               }\n 718           }\n 719           return newPage;\n 720       }\n1029       private void fireWindowContentChanged(final WebWindowEvent event) {\n1030           if (currentWindowTracker_ != null) {\n1031               currentWindowTracker_.webWindowContentChanged(event);\n1032           }\n1033           for (final WebWindowListener listener : new ArrayList<>(webWindowListeners_)) {\n1034               listener.webWindowContentChanged(event);\n1035           }\n1036       }\n2209           @Override\n2210           public void webWindowContentChanged(final WebWindowEvent event) {\n2211               final WebWindow window = event.getWebWindow();\n2212               boolean use = false;\n2213               if (window instanceof DialogWindow) {\n2214                   use = true;\n2215               }\n2216               else if (window instanceof TopLevelWindow) {\n2217                   use = event.getOldPage() == null;\n2218               }\n2219               else if (window instanceof FrameWindow) {\n2220                   final FrameWindow fw = (FrameWindow) window;\n2221                   final String enclosingPageState = fw.getEnclosingPage().getDocumentElement().getReadyState();\n2222                   final URL frameUrl = fw.getEnclosedPage().getUrl();\n2223                   if (!DomNode.READY_STATE_COMPLETE.equals(enclosingPageState) || frameUrl == UrlUtils.URL_ABOUT_BLANK) {\n2224                       return;\n2225                   }\n2226   \n2227                   // now looks at the visibility of the frame window\n2228                   final BaseFrameElement frameElement = fw.getFrameElement();\n2229                   if (webClient_.isJavaScriptEnabled() && frameElement.isDisplayed()) {\n2230                       final ComputedCssStyleDeclaration style = fw.getComputedStyle(frameElement, null);\n2231                       use = style.getCalculatedWidth(false, false) != 0\n2232                               && style.getCalculatedHeight(false, false) != 0;\n2233                   }\n2234               }\n2235               if (use) {\n2236                   webClient_.setCurrentWindow(window);\n2237               }\n2238           }\n\nsrc/htmlunit/src/main/java/org/htmlunit/css/ComputedCssStyleDeclaration.java:\n1469       public int getCalculatedWidth(final boolean includeBorder, final boolean includePadding) {\n1470           final DomElement element = getDomElement();\n1471   \n1472           if (!element.isAttachedToPage()) {\n1473               return 0;\n1474           }\n1475           int width = getCalculatedWidth();\n1476           if (!\"border-box\".equals(getStyleAttribute(Definition.BOX_SIZING, true))) {\n1477               if (includeBorder) {\n1478                   width += getBorderHorizontal();\n1479               }\n1480               else if (isScrollable(false, true) && !(element instanceof HtmlBody)) {\n1481                   width -= 17;\n1482               }\n1483   \n1484               if (includePadding) {\n1485                   width += getPaddingHorizontal();\n1486               }\n1487           }\n1488           return width;\n1489       }\n1491       private int getCalculatedWidth() {\n1492           final Integer cachedWidth = getCachedWidth();\n1493           if (cachedWidth != null) {\n1494               return cachedWidth.intValue();\n1495           }\n1496   \n1497           final DomElement element = getDomElement();\n1498           if (!element.mayBeDisplayed()) {\n1499               return updateCachedWidth(0);\n1500           }\n1501   \n1502           final String display = getDisplay();\n1503           if (NONE.equals(display)) {\n1504               return updateCachedWidth(0);\n1505           }\n1506   \n1507           final int width;\n1508           final String styleWidth = getStyleAttribute(Definition.WIDTH, true);\n1509           final DomNode parent = element.getParentNode();\n1510   \n1511           // width is ignored for inline elements\n1512           if ((INLINE.equals(display) || StringUtils.isEmpty(styleWidth)) && parent instanceof HtmlElement) {\n1513               // hack: TODO find a way to specify default values for different tags\n1514               if (element instanceof HtmlCanvas) {\n1515                   return 300;\n1516               }\n1517   \n1518               // Width not explicitly set.\n1519               final String cssFloat = getCssFloat();\n1520               final String position = getStyleAttribute(Definition.POSITION, true);\n1521               if (\"right\".equals(cssFloat) || \"left\".equals(cssFloat)\n1522                       || ABSOLUTE.equals(position) || FIXED.equals(position)) {\n1523                   final BrowserVersion browserVersion = getDomElement().getPage().getWebClient().getBrowserVersion();\n1524                   // We're floating; simplistic approximation: text content * pixels per character.\n1525                   width = element.getVisibleText().length() * browserVersion.getPixesPerChar();\n1526               }\n1527               else if (BLOCK.equals(display)) {\n1528                   final int windowWidth = element.getPage().getEnclosingWindow().getInnerWidth();\n1529                   if (element instanceof HtmlBody) {\n1530                       width = windowWidth - 16;\n1531                   }\n1532                   else {\n1533                       // Block elements take up 100% of the parent's width.\n1534                       width = CssPixelValueConverter.pixelValue((DomElement) parent,\n1535                                           new CssPixelValueConverter.CssValue(0, windowWidth) {\n1536                               @Override public String get(final ComputedCssStyleDeclaration style) {\n1537                                   return style.getWidth();\n1538                               }\n1539                           }) - (getBorderHorizontal() + getPaddingHorizontal());\n1540                   }\n1541               }\n1542               else if (element instanceof HtmlSubmitInput\n1543                           || element instanceof HtmlResetInput\n1544                           || element instanceof HtmlButtonInput\n1545                           || element instanceof HtmlButton\n1546                           || element instanceof HtmlFileInput) {\n1547                   // use asNormalizedText() here because getVisibleText() returns an empty string\n1548                   // for submit and reset buttons\n1549                   final String text = element.asNormalizedText();\n1550                   final BrowserVersion browserVersion = getDomElement().getPage().getWebClient().getBrowserVersion();\n1551                   // default font for buttons is a bit smaller than the body font size\n1552                   width = 10 + (int) (text.length() * browserVersion.getPixesPerChar() * 0.9);\n1553               }\n1554               else if (element instanceof HtmlTextInput || element instanceof HtmlPasswordInput) {\n1555                   final BrowserVersion browserVersion = getDomElement().getPage().getWebClient().getBrowserVersion();\n1556                   if (browserVersion.hasFeature(JS_CLIENTWIDTH_INPUT_TEXT_173)) {\n1557                       return 173;\n1558                   }\n1559                   width = 154; // FF\n1560               }\n1561               else if (element instanceof HtmlRadioButtonInput || element instanceof HtmlCheckBoxInput) {\n1562                   final BrowserVersion browserVersion = getDomElement().getPage().getWebClient().getBrowserVersion();\n1563                   if (browserVersion.hasFeature(JS_CLIENTWIDTH_RADIO_CHECKBOX_10)) {\n1564                       width = 10;\n1565                   }\n1566                   else if (browserVersion.hasFeature(JS_CLIENTWIDTH_RADIO_CHECKBOX_14)) {\n1567                       width = 14;\n1568                   }\n1569                   else {\n1570                       width = 13;\n1571                   }\n1572               }\n1573               else if (element instanceof HtmlTextArea) {\n1574                   width = 100; // wild guess\n1575               }\n1576               else if (element instanceof HtmlImage) {\n1577                   width = ((HtmlImage) element).getWidthOrDefault();\n1578               }\n1579               else {\n1580                   // Inline elements take up however much space is required by their children.\n1581                   width = getContentWidth();\n1582               }\n1583           }\n1584           else if (AUTO.equals(styleWidth)) {\n1585               width = element.getPage().getEnclosingWindow().getInnerWidth();\n1586           }\n1587           else {\n1588               // Width explicitly set in the style attribute, or there was no parent to provide guidance.\n1589               width = CssPixelValueConverter.pixelValue(element,\n1590                       new CssPixelValueConverter.CssValue(0, element.getPage().getEnclosingWindow().getInnerWidth()) {\n1591                       @Override public String get(final ComputedCssStyleDeclaration style) {\n1592                           return style.getStyleAttribute(Definition.WIDTH, true);\n1593                       }\n1594                   });\n1595           }\n1596   \n1597           return updateCachedWidth(width);\n1598       }\n\nsrc/htmlunit/src/main/java/org/htmlunit/html/HtmlImage.java:\n553       public int getWidth() throws IOException {\n554           if (width_ < 0) {\n555               determineWidthAndHeight();\n556           }\n557           return width_;\n558       }\n564       public int getWidthOrDefault() {\n565           final String widthAttrib = getWidthAttribute();\n566   \n567           if (ATTRIBUTE_NOT_DEFINED != widthAttrib) {\n568               try {\n569                   return Integer.parseInt(widthAttrib);\n570               }\n571               catch (final NumberFormatException ignored) {\n572                   // ignore\n573               }\n574           }\n575   \n576           final String src = getSrcAttribute();\n577           if (ATTRIBUTE_NOT_DEFINED == src) {\n578               final BrowserVersion browserVersion = getPage().getWebClient().getBrowserVersion();\n579               if (browserVersion.hasFeature(JS_IMAGE_WIDTH_HEIGHT_RETURNS_16x16_0x0)\n580                       || browserVersion.hasFeature(JS_IMAGE_WIDTH_HEIGHT_RETURNS_24x24_0x0)) {\n581                   return 0;\n582               }\n583               return 24;\n584           }\n585   \n586           final WebClient webClient = getPage().getWebClient();\n587           final BrowserVersion browserVersion = webClient.getBrowserVersion();\n588           if (StringUtils.isEmpty(src)) {\n589               return 0;\n590           }\n591           if (browserVersion.hasFeature(JS_IMAGE_WIDTH_HEIGHT_RETURNS_16x16_0x0) && StringUtils.isBlank(src)) {\n592               return 0;\n593           }\n594   \n595           try {\n596               return getWidth();\n597           }\n598           catch (final IOException e) {\n599               if (browserVersion.hasFeature(JS_IMAGE_WIDTH_HEIGHT_RETURNS_16x16_0x0)) {\n600                   return 16;\n601               }\n602               return 24;\n603           }\n604       }\n615       private void determineWidthAndHeight() throws IOException {\n616           readImageIfNeeded();\n617   \n618           final IntDimension2D dim = imageData_.getWidthHeight();\n619           width_ = dim.getWidth();\n620           height_ = dim.getHeight();\n621   \n622           // ImageIO creates temp files; to save file handles\n623           // we will cache the values and close this directly to free the resources\n624           closeImageData();\n625       }\n698       private void readImageIfNeeded() throws IOException {\n699           downloadImageIfNeeded();\n700           if (imageData_ == null) {\n701               if (null == imageWebResponse_) {\n702                   throw new IOException(\"No image response available (src='\" + getSrcAttribute() + \"')\");\n703               }\n704               imageData_ = Platform.buildImageData(imageWebResponse_.getContentAsStream());\n705           }\n706       }\n\nsrc/htmlunit/src/main/java/org/htmlunit/platform/Platform.java:\n161       public static ImageData buildImageData(final InputStream inputStream) throws IOException {\n162           try {\n163               final Class<?> backendClass = Class.forName(\n164                           \"org.htmlunit.platform.image.ImageIOImageData\");\n165               return (ImageData) ConstructorUtils.invokeConstructor(backendClass, inputStream);\n166           }\n167           catch (final InvocationTargetException ex) {\n168               final Throwable targetEx = ex.getTargetException();\n169               if (targetEx instanceof IOException) {\n170                   throw (IOException) targetEx;\n171               }\n172   \n173               return new NoOpImageData();\n174           }\n175           catch (final RuntimeException ex) {\n176               throw ex;\n177           }\n178           catch (final Throwable ex) {\n179               return new NoOpImageData();\n180           }\n181       }\n",
            "cost": 0.12159,
            "harness_id": "id_1",
            "sanitizer": "load arbitrary library",
            "sink": "src/htmlunit/src/main/java/org/htmlunit/platform/Platform.java:164:25",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 3
        },
        {
            "blob": [
                ""
            ],
            "code": "src/htmlunit-harnesses/htmlunit-harness-one/src/main/java/com/aixcc/htmlunit/harnesses/one/HtmlunitOne.java:\n45       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n46           // Convert the byte array to a string\n47           String htmlString = new String(input, StandardCharsets.UTF_8);\n48   \n49           // Write the HTML content to a temporary file\n50           File tempFile = File.createTempFile(\"test\", \".html\");\n51           try (FileWriter writer = new FileWriter(tempFile)) {\n52               writer.write(htmlString);\n53           } catch (Exception e) {\n54               // Ensure the temporary file is deleted if an exception occurs\n55               tempFile.delete();\n56               throw e;\n57           }\n58   \n59           try {\n60               // Use WebClient to load the temporary file and print the page's normalized text\n61               WebClient webClient = new WebClient(BrowserVersion.EDGE);\n62               HtmlPage page = webClient.getPage(tempFile.toURI().toURL());\n63               System.out.println(page.asNormalizedText());\n64           } catch (Exception e) {\n65               // Eat the java exception since fuzzer does not care them\n66               //System.out.println(e.getMessage());\n67           } finally {\n68               // Ensure the temporary file is deleted\n69               tempFile.delete();\n70           }\n71       }\n\nsrc/htmlunit/src/main/java/org/htmlunit/WebClient.java:\n 400       public <P extends Page> P getPage(final WebWindow webWindow, final WebRequest webRequest)\n 401               throws IOException, FailingHttpStatusCodeException {\n 402           return getPage(webWindow, webRequest, true);\n 403       }\n 429       @SuppressWarnings(\"unchecked\")\n 430       <P extends Page> P getPage(final WebWindow webWindow, final WebRequest webRequest,\n 431               final boolean addToHistory)\n 432           throws IOException, FailingHttpStatusCodeException {\n 433   \n 434           final Page page = webWindow.getEnclosedPage();\n 435   \n 436           if (page != null) {\n 437               final URL prev = page.getUrl();\n 438               final URL current = webRequest.getUrl();\n 439               if (UrlUtils.sameFile(current, prev)\n 440                           && current.getRef() != null\n 441                           && !Objects.equals(current.getRef(), prev.getRef())) {\n 442                   // We're just navigating to an anchor within the current page.\n 443                   page.getWebResponse().getWebRequest().setUrl(current);\n 444                   if (addToHistory) {\n 445                       webWindow.getHistory().addPage(page);\n 446                   }\n 447   \n 448                   // clear the cache because the anchors are now matched by\n 449                   // the target pseudo style\n 450                   if (page instanceof HtmlPage) {\n 451                       ((HtmlPage) page).clearComputedStyles();\n 452                   }\n 453   \n 454                   final Window window = webWindow.getScriptableObject();\n 455                   if (window != null) { // js enabled\n 456                       window.getLocation().setHash(current.getRef());\n 457                   }\n 458                   return (P) page;\n 459               }\n 460   \n 461               if (page.isHtmlPage()) {\n 462                   final HtmlPage htmlPage = (HtmlPage) page;\n 463                   if (!htmlPage.isOnbeforeunloadAccepted()) {\n 464                       LOG.debug(\"The registered OnbeforeunloadHandler rejected to load a new page.\");\n 465                       return (P) page;\n 466                   }\n 467               }\n 468           }\n 469   \n 470           if (LOG.isDebugEnabled()) {\n 471               LOG.debug(\"Get page for window named '\" + webWindow.getName() + \"', using \" + webRequest);\n 472           }\n 473   \n 474           WebResponse webResponse;\n 475           final String protocol = webRequest.getUrl().getProtocol();\n 476           if (\"javascript\".equals(protocol)) {\n 477               webResponse = makeWebResponseForJavaScriptUrl(webWindow, webRequest.getUrl(), webRequest.getCharset());\n 478               if (webWindow.getEnclosedPage() != null && webWindow.getEnclosedPage().getWebResponse() == webResponse) {\n 479                   // a javascript:... url with result of type undefined didn't changed the page\n 480                   return (P) webWindow.getEnclosedPage();\n 481               }\n 482           }\n 483           else {\n 484               try {\n 485                   webResponse = loadWebResponse(webRequest);\n 486               }\n 487               catch (final NoHttpResponseException e) {\n 488                   webResponse = new WebResponse(RESPONSE_DATA_NO_HTTP_RESPONSE, webRequest, 0);\n 489               }\n 490           }\n 491   \n 492           printContentIfNecessary(webResponse);\n 493           loadWebResponseInto(webResponse, webWindow);\n 494   \n 495           // start execution here\n 496           // note: we have to do this also if the server reports an error!\n 497           //       e.g. if the server returns a 404 error page that includes javascript\n 498           if (scriptEngine_ != null) {\n 499               scriptEngine_.registerWindowAndMaybeStartEventLoop(webWindow);\n 500           }\n 501   \n 502           // check and report problems if needed\n 503           throwFailingHttpStatusCodeExceptionIfNecessary(webResponse);\n 504           return (P) webWindow.getEnclosedPage();\n 505       }\n 533       public <P extends Page> P getPage(final URL url) throws IOException, FailingHttpStatusCodeException {\n 534           final WebRequest request = new WebRequest(url, getBrowserVersion().getHtmlAcceptHeader(),\n 535                                                             getBrowserVersion().getAcceptEncodingHeader());\n 536           request.setCharset(UTF_8);\n 537   \n 538           return getPage(getCurrentWindow().getTopWindow(), request);\n 539       }\n 573       public Page loadWebResponseInto(final WebResponse webResponse, final WebWindow webWindow)\n 574           throws IOException, FailingHttpStatusCodeException {\n 575           return loadWebResponseInto(webResponse, webWindow, null);\n 576       }\n 599       public Page loadWebResponseInto(final WebResponse webResponse, final WebWindow webWindow,\n 600               String forceAttachmentWithFilename)\n 601               throws IOException, FailingHttpStatusCodeException {\n 602           WebAssert.notNull(\"webResponse\", webResponse);\n 603           WebAssert.notNull(\"webWindow\", webWindow);\n 604   \n 605           if (webResponse.getStatusCode() == HttpStatus.NO_CONTENT_204) {\n 606               return webWindow.getEnclosedPage();\n 607           }\n 608   \n 609           if (webStartHandler_ != null && \"application/x-java-jnlp-file\".equals(webResponse.getContentType())) {\n 610               webStartHandler_.handleJnlpResponse(webResponse);\n 611               return webWindow.getEnclosedPage();\n 612           }\n 613   \n 614           if (attachmentHandler_ != null\n 615                   && (forceAttachmentWithFilename != null || attachmentHandler_.isAttachment(webResponse))) {\n 616   \n 617               // check content disposition header for nothing provided\n 618               if (StringUtils.isEmpty(forceAttachmentWithFilename)) {\n 619                   final String disp = webResponse.getResponseHeaderValue(HttpHeader.CONTENT_DISPOSITION);\n 620                   forceAttachmentWithFilename = Attachment.getSuggestedFilename(disp);\n 621               }\n 622   \n 623               if (attachmentHandler_.handleAttachment(webResponse,\n 624                           StringUtils.isEmpty(forceAttachmentWithFilename) ? null : forceAttachmentWithFilename)) {\n 625                   // the handling is done by the attachment handler;\n 626                   // do not open a new window\n 627                   return webWindow.getEnclosedPage();\n 628               }\n 629   \n 630               final WebWindow w = openWindow(null, null, webWindow);\n 631               final Page page = pageCreator_.createPage(webResponse, w);\n 632               attachmentHandler_.handleAttachment(page,\n 633                                   StringUtils.isEmpty(forceAttachmentWithFilename) ? null : forceAttachmentWithFilename);\n 634               return page;\n 635           }\n 636   \n 637           final Page oldPage = webWindow.getEnclosedPage();\n 638           if (oldPage != null) {\n 639               // Remove the old page before create new one.\n 640               oldPage.cleanUp();\n 641           }\n 642   \n 643           Page newPage = null;\n 644           FrameWindow.PageDenied pageDenied = PageDenied.NONE;\n 645           if (windows_.contains(webWindow)) {\n 646               if (webWindow instanceof FrameWindow) {\n 647                   final String contentSecurityPolicy =\n 648                           webResponse.getResponseHeaderValue(HttpHeader.CONTENT_SECURIRY_POLICY);\n 649                   if (StringUtils.isNotBlank(contentSecurityPolicy)) {\n 650                       final URL origin = UrlUtils.getUrlWithoutPathRefQuery(\n 651                               ((FrameWindow) webWindow).getEnclosingPage().getUrl());\n 652                       final URL source = UrlUtils.getUrlWithoutPathRefQuery(webResponse.getWebRequest().getUrl());\n 653                       final Policy policy = Policy.parseSerializedCSP(contentSecurityPolicy,\n 654                                                       Policy.PolicyErrorConsumer.ignored);\n 655                       if (!policy.allowsFrameAncestor(\n 656                               Optional.of(URI.parseURI(source.toExternalForm()).orElse(null)),\n 657                               Optional.of(URI.parseURI(origin.toExternalForm()).orElse(null)))) {\n 658                           pageDenied = PageDenied.BY_CONTENT_SECURIRY_POLICY;\n 659   \n 660                           if (LOG.isWarnEnabled()) {\n 661                               LOG.warn(\"Load denied by Content-Security-Policy: '\" + contentSecurityPolicy + \"' - \"\n 662                                       + webResponse.getWebRequest().getUrl() + \"' does not permit framing.\");\n 663                           }\n 664                       }\n 665                   }\n 666   \n 667                   if (pageDenied == PageDenied.NONE) {\n 668                       final String xFrameOptions = webResponse.getResponseHeaderValue(HttpHeader.X_FRAME_OPTIONS);\n 669                       if (\"DENY\".equalsIgnoreCase(xFrameOptions)) {\n 670                           pageDenied = PageDenied.BY_X_FRAME_OPTIONS;\n 671   \n 672                           if (LOG.isWarnEnabled()) {\n 673                               LOG.warn(\"Load denied by X-Frame-Options: DENY; - '\"\n 674                                       + webResponse.getWebRequest().getUrl() + \"' does not permit framing.\");\n 675                           }\n 676                       }\n 677                   }\n 678               }\n 679   \n 680               if (pageDenied == PageDenied.NONE) {\n 681                   newPage = pageCreator_.createPage(webResponse, webWindow);\n 682               }\n 683               else {\n 684                   try {\n 685                       final WebResponse aboutBlank = loadWebResponse(WebRequest.newAboutBlankRequest());\n 686                       newPage = pageCreator_.createPage(aboutBlank, webWindow);\n 687                       // TODO - maybe we have to attach to original request/response to the page\n 688   \n 689                       ((FrameWindow) webWindow).setPageDenied(pageDenied);\n 690                   }\n 691                   catch (final IOException ignored) {\n 692                       // ignore\n 693                   }\n 694               }\n 695   \n 696               if (windows_.contains(webWindow)) {\n 697                   fireWindowContentChanged(new WebWindowEvent(webWindow, WebWindowEvent.CHANGE, oldPage, newPage));\n 698   \n 699                   // The page being loaded may already have been replaced by another page via JavaScript code.\n 700                   if (webWindow.getEnclosedPage() == newPage) {\n 701                       newPage.initialize();\n 702                       // hack: onload should be fired the same way for all type of pages\n 703                       // here is a hack to handle non HTML pages\n 704                       if (isJavaScriptEnabled()\n 705                               && webWindow instanceof FrameWindow && !newPage.isHtmlPage()) {\n 706                           final FrameWindow fw = (FrameWindow) webWindow;\n 707                           final BaseFrameElement frame = fw.getFrameElement();\n 708                           if (frame.hasEventHandlers(\"onload\")) {\n 709                               if (LOG.isDebugEnabled()) {\n 710                                   LOG.debug(\"Executing onload handler for \" + frame);\n 711                               }\n 712                               final Event event = new Event(frame, Event.TYPE_LOAD);\n 713                               ((Node) frame.getScriptableObject()).executeEventLocally(event);\n 714                           }\n 715                       }\n 716                   }\n 717               }\n 718           }\n 719           return newPage;\n 720       }\n1029       private void fireWindowContentChanged(final WebWindowEvent event) {\n1030           if (currentWindowTracker_ != null) {\n1031               currentWindowTracker_.webWindowContentChanged(event);\n1032           }\n1033           for (final WebWindowListener listener : new ArrayList<>(webWindowListeners_)) {\n1034               listener.webWindowContentChanged(event);\n1035           }\n1036       }\n2209           @Override\n2210           public void webWindowContentChanged(final WebWindowEvent event) {\n2211               final WebWindow window = event.getWebWindow();\n2212               boolean use = false;\n2213               if (window instanceof DialogWindow) {\n2214                   use = true;\n2215               }\n2216               else if (window instanceof TopLevelWindow) {\n2217                   use = event.getOldPage() == null;\n2218               }\n2219               else if (window instanceof FrameWindow) {\n2220                   final FrameWindow fw = (FrameWindow) window;\n2221                   final String enclosingPageState = fw.getEnclosingPage().getDocumentElement().getReadyState();\n2222                   final URL frameUrl = fw.getEnclosedPage().getUrl();\n2223                   if (!DomNode.READY_STATE_COMPLETE.equals(enclosingPageState) || frameUrl == UrlUtils.URL_ABOUT_BLANK) {\n2224                       return;\n2225                   }\n2226   \n2227                   // now looks at the visibility of the frame window\n2228                   final BaseFrameElement frameElement = fw.getFrameElement();\n2229                   if (webClient_.isJavaScriptEnabled() && frameElement.isDisplayed()) {\n2230                       final ComputedCssStyleDeclaration style = fw.getComputedStyle(frameElement, null);\n2231                       use = style.getCalculatedWidth(false, false) != 0\n2232                               && style.getCalculatedHeight(false, false) != 0;\n2233                   }\n2234               }\n2235               if (use) {\n2236                   webClient_.setCurrentWindow(window);\n2237               }\n2238           }\n\nsrc/htmlunit/src/main/java/org/htmlunit/css/ComputedCssStyleDeclaration.java:\n1469       public int getCalculatedWidth(final boolean includeBorder, final boolean includePadding) {\n1470           final DomElement element = getDomElement();\n1471   \n1472           if (!element.isAttachedToPage()) {\n1473               return 0;\n1474           }\n1475           int width = getCalculatedWidth();\n1476           if (!\"border-box\".equals(getStyleAttribute(Definition.BOX_SIZING, true))) {\n1477               if (includeBorder) {\n1478                   width += getBorderHorizontal();\n1479               }\n1480               else if (isScrollable(false, true) && !(element instanceof HtmlBody)) {\n1481                   width -= 17;\n1482               }\n1483   \n1484               if (includePadding) {\n1485                   width += getPaddingHorizontal();\n1486               }\n1487           }\n1488           return width;\n1489       }\n1646       private int getEmptyHeight() {\n1647           final Integer cachedHeight2 = getCachedHeight2();\n1648           if (cachedHeight2 != null) {\n1649               return cachedHeight2.intValue();\n1650           }\n1651   \n1652           final DomElement element = getDomElement();\n1653           if (!element.mayBeDisplayed()) {\n1654               return updateCachedHeight2(0);\n1655           }\n1656   \n1657           final String display = getDisplay();\n1658           if (NONE.equals(display)) {\n1659               return updateCachedHeight2(0);\n1660           }\n1661   \n1662           final WebWindow webWindow = element.getPage().getEnclosingWindow();\n1663           final int windowHeight = webWindow.getInnerHeight();\n1664   \n1665           if (element instanceof HtmlBody) {\n1666               return updateCachedHeight2(windowHeight);\n1667           }\n1668   \n1669           final boolean isInline = INLINE.equals(display) && !(element instanceof HtmlInlineFrame);\n1670           // height is ignored for inline elements\n1671           final boolean explicitHeightSpecified = !isInline && !super.getHeight().isEmpty();\n1672   \n1673           int defaultHeight;\n1674           if ((element instanceof HtmlAbbreviated\n1675                   || element instanceof HtmlAcronym\n1676                   || element instanceof HtmlAddress\n1677                   || element instanceof HtmlArticle\n1678                   || element instanceof HtmlAside\n1679                   || element instanceof HtmlBaseFont\n1680                   || element instanceof HtmlBidirectionalIsolation\n1681                   || element instanceof HtmlBidirectionalOverride\n1682                   || element instanceof HtmlBig\n1683                   || element instanceof HtmlBlink\n1684                   || element instanceof HtmlBold\n1685                   || element instanceof HtmlCenter\n1686                   || element instanceof HtmlCitation\n1687                   || element instanceof HtmlCode\n1688                   || element instanceof HtmlDefinition\n1689                   || element instanceof HtmlDefinitionDescription\n1690                   || element instanceof HtmlDefinitionTerm\n1691                   || element instanceof HtmlEmphasis\n1692                   || element instanceof HtmlFigure\n1693                   || element instanceof HtmlFigureCaption\n1694                   || element instanceof HtmlFooter\n1695                   || element instanceof HtmlHeader\n1696                   || element instanceof HtmlItalic\n1697                   || element instanceof HtmlKeyboard\n1698                   || element instanceof HtmlLayer\n1699                   || element instanceof HtmlMark\n1700                   || element instanceof HtmlNav\n1701                   || element instanceof HtmlNoBreak\n1702                   || element instanceof HtmlNoEmbed\n1703                   || element instanceof HtmlNoFrames\n1704                   || element instanceof HtmlNoLayer\n1705                   || element instanceof HtmlNoScript\n1706                   || element instanceof HtmlPlainText\n1707                   || element instanceof HtmlRuby\n1708                   || element instanceof HtmlRb\n1709                   || element instanceof HtmlRp\n1710                   || element instanceof HtmlRt\n1711                   || element instanceof HtmlRtc\n1712                   || element instanceof HtmlS\n1713                   || element instanceof HtmlSample\n1714                   || element instanceof HtmlSection\n1715                   || element instanceof HtmlSmall\n1716                   || element instanceof HtmlStrike\n1717                   || element instanceof HtmlStrong\n1718                   || element instanceof HtmlSubscript\n1719                   || element instanceof HtmlSummary\n1720                   || element instanceof HtmlSuperscript\n1721                   || element instanceof HtmlTeletype\n1722                   || element instanceof HtmlUnderlined\n1723                   || element instanceof HtmlUnknownElement\n1724                   || element instanceof HtmlWordBreak\n1725                   || element instanceof HtmlMain\n1726                   || element instanceof HtmlVariable\n1727   \n1728                   || element instanceof HtmlDivision\n1729                   || element instanceof HtmlData\n1730                   || element instanceof HtmlTime\n1731                   || element instanceof HtmlOutput\n1732                   || element instanceof HtmlSlot\n1733                   || element instanceof HtmlLegend)\n1734                   && StringUtils.isBlank(element.getTextContent())) {\n1735               defaultHeight = 0;\n1736           }\n1737           else if (element.getFirstChild() == null) {\n1738               if (element instanceof HtmlRadioButtonInput || element instanceof HtmlCheckBoxInput) {\n1739                   final BrowserVersion browser = webWindow.getWebClient().getBrowserVersion();\n1740                   if (browser.hasFeature(JS_CLIENTHEIGHT_RADIO_CHECKBOX_10)) {\n1741                       defaultHeight = 10;\n1742                   }\n1743                   else if (browser.hasFeature(JS_CLIENTHEIGHT_RADIO_CHECKBOX_14)) {\n1744                       defaultHeight = 14;\n1745                   }\n1746                   else {\n1747                       defaultHeight = 13;\n1748                   }\n1749               }\n1750               else if (element instanceof HtmlButton) {\n1751                   defaultHeight = 20;\n1752               }\n1753               else if (element instanceof HtmlInput && !(element instanceof HtmlHiddenInput)) {\n1754                   final BrowserVersion browser = webWindow.getWebClient().getBrowserVersion();\n1755                   if (browser.hasFeature(JS_CLIENTHEIGHT_INPUT_17)) {\n1756                       defaultHeight = 17;\n1757                   }\n1758                   else if (browser.hasFeature(JS_CLIENTHEIGHT_INPUT_18)) {\n1759                       defaultHeight = 18;\n1760                   }\n1761                   else {\n1762                       defaultHeight = 20;\n1763                   }\n1764               }\n1765               else if (element instanceof HtmlSelect) {\n1766                   defaultHeight = 20;\n1767               }\n1768               else if (element instanceof HtmlTextArea) {\n1769                   defaultHeight = 49;\n1770               }\n1771               else if (element instanceof HtmlInlineFrame) {\n1772                   defaultHeight = 154;\n1773               }\n1774               else {\n1775                   defaultHeight = 0;\n1776               }\n1777           }\n1778           else {\n1779               final String fontSize = getFontSize();\n1780               defaultHeight = webWindow.getWebClient().getBrowserVersion().getFontHeight(fontSize);\n1781   \n1782               if (element instanceof HtmlDivision\n1783                       || element instanceof HtmlSpan) {\n1784                   String width = getStyleAttribute(Definition.WIDTH, false);\n1785   \n1786                   // maybe we are enclosed something that forces a width\n1787                   DomNode parent = getDomElement().getParentNode();\n1788                   final WebWindow win = parent.getPage().getEnclosingWindow();\n1789                   while (width.isEmpty() && parent != null) {\n1790                       if (parent instanceof DomElement) {\n1791                           final ComputedCssStyleDeclaration computedCss = win.getComputedStyle((DomElement) parent, null);\n1792                           width = computedCss.getStyleAttribute(Definition.WIDTH, false);\n1793                       }\n1794                       parent = parent.getParentNode();\n1795                       if (parent instanceof Page) {\n1796                           break;\n1797                       }\n1798                   }\n1799                   final int pixelWidth = CssPixelValueConverter.pixelValue(width);\n1800                   final String content = element.getVisibleText();\n1801   \n1802                   if (pixelWidth > 0\n1803                           && !width.isEmpty()\n1804                           && StringUtils.isNotBlank(content)) {\n1805                       final int lineCount = Platform.getFontUtil().countLines(content, pixelWidth, fontSize);\n1806                       defaultHeight *= lineCount;\n1807                   }\n1808                   else {\n1809                       if (element instanceof HtmlSpan && StringUtils.isEmpty(content)) {\n1810                           defaultHeight = 0;\n1811                       }\n1812                       else {\n1813                           defaultHeight *= StringUtils.countMatches(content, '\\n') + 1;\n1814                       }\n1815                   }\n1816               }\n1817           }\n1818   \n1819           final int defaultWindowHeight = element instanceof HtmlCanvas ? 150 : windowHeight;\n1820   \n1821           int height = CssPixelValueConverter.pixelValue(element,\n1822                   new CssPixelValueConverter.CssValue(defaultHeight, defaultWindowHeight) {\n1823                   @Override public String get(final ComputedCssStyleDeclaration style) {\n1824                       final DomElement elem = style.getDomElement();\n1825                       if (elem instanceof HtmlBody) {\n1826                           return String.valueOf(elem.getPage().getEnclosingWindow().getInnerHeight());\n1827                       }\n1828                       // height is ignored for inline elements\n1829                       if (isInline) {\n1830                           return \"\";\n1831                       }\n1832                       return style.getStyleAttribute(Definition.HEIGHT, true);\n1833                   }\n1834               });\n1835   \n1836           if (height == 0 && !explicitHeightSpecified) {\n1837               height = defaultHeight;\n1838           }\n1839   \n1840           return updateCachedHeight2(height);\n1841       }\n1916       private boolean isScrollable(final boolean horizontal, final boolean ignoreSize) {\n1917           final boolean scrollable;\n1918           final DomElement element = getDomElement();\n1919   \n1920           String overflow;\n1921           if (horizontal) {\n1922               overflow = getStyleAttribute(Definition.OVERFLOW_X_, false);\n1923               if (StringUtils.isEmpty(overflow)) {\n1924                   overflow = getStyleAttribute(Definition.OVERFLOW_X, false);\n1925               }\n1926               // fall back to default\n1927               if (StringUtils.isEmpty(overflow)) {\n1928                   overflow = getStyleAttribute(Definition.OVERFLOW, true);\n1929               }\n1930               scrollable = (element instanceof HtmlBody || SCROLL.equals(overflow) || AUTO.equals(overflow))\n1931                   && (ignoreSize || getContentWidth() > getCalculatedWidth());\n1932           }\n1933           else {\n1934               overflow = getStyleAttribute(Definition.OVERFLOW_Y_, false);\n1935               if (StringUtils.isEmpty(overflow)) {\n1936                   overflow = getStyleAttribute(Definition.OVERFLOW_Y, false);\n1937               }\n1938               // fall back to default\n1939               if (StringUtils.isEmpty(overflow)) {\n1940                   overflow = getStyleAttribute(Definition.OVERFLOW, true);\n1941               }\n1942   \n1943               scrollable = (element instanceof HtmlBody || SCROLL.equals(overflow) || AUTO.equals(overflow))\n1944                   && (ignoreSize || getContentHeight() > getEmptyHeight());\n1945           }\n1946           return scrollable;\n1947       }\n\nsrc/htmlunit/src/main/java/org/htmlunit/platform/Platform.java:\n144       public static FontUtil getFontUtil() {\n145           // for Android\n146           if (FontUtil_ != null) {\n147               return FontUtil_;\n148           }\n149   \n150           try {\n151               final Class<?> backendClass = Class.forName(\"org.htmlunit.platform.font.AwtFontUtil\");\n152               FontUtil_ = (FontUtil) ConstructorUtils.invokeConstructor(backendClass);\n153               return FontUtil_;\n154           }\n155           catch (final Throwable e) {\n156               FontUtil_ = new NoOpFontUtil();\n157               return FontUtil_;\n158           }\n159       }\n",
            "cost": 0.12412000000000001,
            "harness_id": "id_1",
            "sanitizer": "load arbitrary library",
            "sink": "src/htmlunit/src/main/java/org/htmlunit/platform/Platform.java:151:57",
            "status": "corpus",
            "valid_path": "NO",
            "id": 4
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "id_1",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/htmlunit/src/main/java/org/htmlunit/util/DebuggingWebConnection.java:273:71",
            "status": "error",
            "id": 5
        },
        {
            "blob": [
                ""
            ],
            "code": "src/htmlunit-harnesses/htmlunit-harness-one/src/main/java/com/aixcc/htmlunit/harnesses/one/HtmlunitOne.java:\n45       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n46           // Convert the byte array to a string\n47           String htmlString = new String(input, StandardCharsets.UTF_8);\n48   \n49           // Write the HTML content to a temporary file\n50           File tempFile = File.createTempFile(\"test\", \".html\");\n51           try (FileWriter writer = new FileWriter(tempFile)) {\n52               writer.write(htmlString);\n53           } catch (Exception e) {\n54               // Ensure the temporary file is deleted if an exception occurs\n55               tempFile.delete();\n56               throw e;\n57           }\n58   \n59           try {\n60               // Use WebClient to load the temporary file and print the page's normalized text\n61               WebClient webClient = new WebClient(BrowserVersion.EDGE);\n62               HtmlPage page = webClient.getPage(tempFile.toURI().toURL());\n63               System.out.println(page.asNormalizedText());\n64           } catch (Exception e) {\n65               // Eat the java exception since fuzzer does not care them\n66               //System.out.println(e.getMessage());\n67           } finally {\n68               // Ensure the temporary file is deleted\n69               tempFile.delete();\n70           }\n71       }\n\nsrc/htmlunit/src/main/java/org/htmlunit/WebClient.java:\n 400       public <P extends Page> P getPage(final WebWindow webWindow, final WebRequest webRequest)\n 401               throws IOException, FailingHttpStatusCodeException {\n 402           return getPage(webWindow, webRequest, true);\n 403       }\n 429       @SuppressWarnings(\"unchecked\")\n 430       <P extends Page> P getPage(final WebWindow webWindow, final WebRequest webRequest,\n 431               final boolean addToHistory)\n 432           throws IOException, FailingHttpStatusCodeException {\n 433   \n 434           final Page page = webWindow.getEnclosedPage();\n 435   \n 436           if (page != null) {\n 437               final URL prev = page.getUrl();\n 438               final URL current = webRequest.getUrl();\n 439               if (UrlUtils.sameFile(current, prev)\n 440                           && current.getRef() != null\n 441                           && !Objects.equals(current.getRef(), prev.getRef())) {\n 442                   // We're just navigating to an anchor within the current page.\n 443                   page.getWebResponse().getWebRequest().setUrl(current);\n 444                   if (addToHistory) {\n 445                       webWindow.getHistory().addPage(page);\n 446                   }\n 447   \n 448                   // clear the cache because the anchors are now matched by\n 449                   // the target pseudo style\n 450                   if (page instanceof HtmlPage) {\n 451                       ((HtmlPage) page).clearComputedStyles();\n 452                   }\n 453   \n 454                   final Window window = webWindow.getScriptableObject();\n 455                   if (window != null) { // js enabled\n 456                       window.getLocation().setHash(current.getRef());\n 457                   }\n 458                   return (P) page;\n 459               }\n 460   \n 461               if (page.isHtmlPage()) {\n 462                   final HtmlPage htmlPage = (HtmlPage) page;\n 463                   if (!htmlPage.isOnbeforeunloadAccepted()) {\n 464                       LOG.debug(\"The registered OnbeforeunloadHandler rejected to load a new page.\");\n 465                       return (P) page;\n 466                   }\n 467               }\n 468           }\n 469   \n 470           if (LOG.isDebugEnabled()) {\n 471               LOG.debug(\"Get page for window named '\" + webWindow.getName() + \"', using \" + webRequest);\n 472           }\n 473   \n 474           WebResponse webResponse;\n 475           final String protocol = webRequest.getUrl().getProtocol();\n 476           if (\"javascript\".equals(protocol)) {\n 477               webResponse = makeWebResponseForJavaScriptUrl(webWindow, webRequest.getUrl(), webRequest.getCharset());\n 478               if (webWindow.getEnclosedPage() != null && webWindow.getEnclosedPage().getWebResponse() == webResponse) {\n 479                   // a javascript:... url with result of type undefined didn't changed the page\n 480                   return (P) webWindow.getEnclosedPage();\n 481               }\n 482           }\n 483           else {\n 484               try {\n 485                   webResponse = loadWebResponse(webRequest);\n 486               }\n 487               catch (final NoHttpResponseException e) {\n 488                   webResponse = new WebResponse(RESPONSE_DATA_NO_HTTP_RESPONSE, webRequest, 0);\n 489               }\n 490           }\n 491   \n 492           printContentIfNecessary(webResponse);\n 493           loadWebResponseInto(webResponse, webWindow);\n 494   \n 495           // start execution here\n 496           // note: we have to do this also if the server reports an error!\n 497           //       e.g. if the server returns a 404 error page that includes javascript\n 498           if (scriptEngine_ != null) {\n 499               scriptEngine_.registerWindowAndMaybeStartEventLoop(webWindow);\n 500           }\n 501   \n 502           // check and report problems if needed\n 503           throwFailingHttpStatusCodeExceptionIfNecessary(webResponse);\n 504           return (P) webWindow.getEnclosedPage();\n 505       }\n 533       public <P extends Page> P getPage(final URL url) throws IOException, FailingHttpStatusCodeException {\n 534           final WebRequest request = new WebRequest(url, getBrowserVersion().getHtmlAcceptHeader(),\n 535                                                             getBrowserVersion().getAcceptEncodingHeader());\n 536           request.setCharset(UTF_8);\n 537   \n 538           return getPage(getCurrentWindow().getTopWindow(), request);\n 539       }\n1541       public WebResponse loadWebResponse(final WebRequest webRequest) throws IOException {\n1542           switch (webRequest.getUrl().getProtocol()) {\n1543               case UrlUtils.ABOUT:\n1544                   return makeWebResponseForAboutUrl(webRequest);\n1545   \n1546               case \"file\":\n1547                   return makeWebResponseForFileUrl(webRequest);\n1548   \n1549               case \"data\":\n1550                   return makeWebResponseForDataUrl(webRequest);\n1551   \n1552               case \"blob\":\n1553                   return makeWebResponseForBlobUrl(webRequest);\n1554   \n1555               default:\n1556                   return loadWebResponseFromWebConnection(webRequest, ALLOWED_REDIRECTIONS_SAME_URL);\n1557           }\n1558       }\n1567       private WebResponse loadWebResponseFromWebConnection(final WebRequest webRequest,\n1568           final int allowedRedirects) throws IOException {\n1569   \n1570           URL url = webRequest.getUrl();\n1571           final HttpMethod method = webRequest.getHttpMethod();\n1572           final List<NameValuePair> parameters = webRequest.getRequestParameters();\n1573   \n1574           WebAssert.notNull(\"url\", url);\n1575           WebAssert.notNull(\"method\", method);\n1576           WebAssert.notNull(\"parameters\", parameters);\n1577   \n1578           url = UrlUtils.encodeUrl(url, webRequest.getCharset());\n1579           webRequest.setUrl(url);\n1580   \n1581           if (LOG.isDebugEnabled()) {\n1582               LOG.debug(\"Load response for \" + method + \" \" + url.toExternalForm());\n1583           }\n1584   \n1585           // If the request settings don't specify a custom proxy, use the default client proxy...\n1586           if (webRequest.getProxyHost() == null) {\n1587               final ProxyConfig proxyConfig = getOptions().getProxyConfig();\n1588               if (proxyConfig.getProxyAutoConfigUrl() != null) {\n1589                   if (!UrlUtils.sameFile(new URL(proxyConfig.getProxyAutoConfigUrl()), url)) {\n1590                       String content = proxyConfig.getProxyAutoConfigContent();\n1591                       if (content == null) {\n1592                           content = getPage(proxyConfig.getProxyAutoConfigUrl())\n1593                               .getWebResponse().getContentAsString();\n1594                           proxyConfig.setProxyAutoConfigContent(content);\n1595                       }\n1596                       final String allValue = JavaScriptEngine.evaluateProxyAutoConfig(getBrowserVersion(), content, url);\n1597                       if (LOG.isDebugEnabled()) {\n1598                           LOG.debug(\"Proxy Auto-Config: value '\" + allValue + \"' for URL \" + url);\n1599                       }\n1600                       String value = allValue.split(\";\")[0].trim();\n1601                       if (value.startsWith(\"PROXY\")) {\n1602                           value = value.substring(6);\n1603                           final int colonIndex = value.indexOf(':');\n1604                           webRequest.setSocksProxy(false);\n1605                           webRequest.setProxyHost(value.substring(0, colonIndex));\n1606                           webRequest.setProxyPort(Integer.parseInt(value.substring(colonIndex + 1)));\n1607                       }\n1608                       else if (value.startsWith(\"SOCKS\")) {\n1609                           value = value.substring(6);\n1610                           final int colonIndex = value.indexOf(':');\n1611                           webRequest.setSocksProxy(true);\n1612                           webRequest.setProxyHost(value.substring(0, colonIndex));\n1613                           webRequest.setProxyPort(Integer.parseInt(value.substring(colonIndex + 1)));\n1614                       }\n1615                   }\n1616               }\n1617               // ...unless the host needs to bypass the configured client proxy!\n1618               else if (!proxyConfig.shouldBypassProxy(webRequest.getUrl().getHost())) {\n1619                   webRequest.setProxyHost(proxyConfig.getProxyHost());\n1620                   webRequest.setProxyPort(proxyConfig.getProxyPort());\n1621                   webRequest.setProxyScheme(proxyConfig.getProxyScheme());\n1622                   webRequest.setSocksProxy(proxyConfig.isSocksProxy());\n1623               }\n1624           }\n1625   \n1626           // Add the headers that are sent with every request.\n1627           addDefaultHeaders(webRequest);\n1628   \n1629           // Retrieve the response, either from the cache or from the server.\n1630           final WebResponse fromCache = getCache().getCachedResponse(webRequest);\n1631           final WebResponse webResponse = getWebResponseOrUseCached(webRequest, fromCache);\n1632   \n1633           // Continue according to the HTTP status code.\n1634           final int status = webResponse.getStatusCode();\n1635           if (status == HttpStatus.USE_PROXY_305) {\n1636               getIncorrectnessListener().notify(\"Ignoring HTTP status code [305] 'Use Proxy'\", this);\n1637           }\n1638           else if (status >= HttpStatus.MOVED_PERMANENTLY_301\n1639               && status <= HttpStatus.PERMANENT_REDIRECT_308\n1640               && status != HttpStatus.NOT_MODIFIED_304\n1641               && getOptions().isRedirectEnabled()) {\n1642   \n1643               final URL newUrl;\n1644               String locationString = null;\n1645               try {\n1646                   locationString = webResponse.getResponseHeaderValue(\"Location\");\n1647                   if (locationString == null) {\n1648                       return webResponse;\n1649                   }\n1650                   locationString = new String(locationString.getBytes(ISO_8859_1), UTF_8);\n1651                   newUrl = expandUrl(url, locationString);\n1652               }\n1653               catch (final MalformedURLException e) {\n1654                   getIncorrectnessListener().notify(\"Got a redirect status code [\" + status + \" \"\n1655                       + webResponse.getStatusMessage()\n1656                       + \"] but the location is not a valid URL [\" + locationString\n1657                       + \"]. Skipping redirection processing.\", this);\n1658                   return webResponse;\n1659               }\n1660   \n1661               if (LOG.isDebugEnabled()) {\n1662                   LOG.debug(\"Got a redirect status code [\" + status + \"] new location = [\" + locationString + \"]\");\n1663               }\n1664   \n1665               if (allowedRedirects == 0) {\n1666                   throw new FailingHttpStatusCodeException(\"Too much redirect for \"\n1667                       + webResponse.getWebRequest().getUrl(), webResponse);\n1668               }\n1669   \n1670               if (status == HttpStatus.MOVED_PERMANENTLY_301\n1671                       || status == HttpStatus.FOUND_302\n1672                       || status == HttpStatus.SEE_OTHER_303) {\n1673                   final WebRequest wrs = new WebRequest(newUrl, HttpMethod.GET);\n1674                   wrs.setCharset(webRequest.getCharset());\n1675   \n1676                   if (HttpMethod.HEAD == webRequest.getHttpMethod()) {\n1677                       wrs.setHttpMethod(HttpMethod.HEAD);\n1678                   }\n1679                   for (final Map.Entry<String, String> entry : webRequest.getAdditionalHeaders().entrySet()) {\n1680                       wrs.setAdditionalHeader(entry.getKey(), entry.getValue());\n1681                   }\n1682                   return loadWebResponseFromWebConnection(wrs, allowedRedirects - 1);\n1683               }\n1684               else if (status == HttpStatus.TEMPORARY_REDIRECT_307\n1685                           || status == HttpStatus.PERMANENT_REDIRECT_308) {\n1686                   // https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/307\n1687                   // https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/308\n1688                   // reuse method and body\n1689                   final WebRequest wrs = new WebRequest(newUrl, webRequest.getHttpMethod());\n1690                   wrs.setCharset(webRequest.getCharset());\n1691                   if (webRequest.getRequestBody() != null) {\n1692                       if (HttpMethod.POST == webRequest.getHttpMethod()\n1693                               || HttpMethod.PUT == webRequest.getHttpMethod()\n1694                               || HttpMethod.PATCH == webRequest.getHttpMethod()) {\n1695                           wrs.setRequestBody(webRequest.getRequestBody());\n1696                           wrs.setEncodingType(webRequest.getEncodingType());\n1697                       }\n1698                   }\n1699                   else {\n1700                       wrs.setRequestParameters(parameters);\n1701                   }\n1702   \n1703                   for (final Map.Entry<String, String> entry : webRequest.getAdditionalHeaders().entrySet()) {\n1704                       wrs.setAdditionalHeader(entry.getKey(), entry.getValue());\n1705                   }\n1706   \n1707                   return loadWebResponseFromWebConnection(wrs, allowedRedirects - 1);\n1708               }\n1709           }\n1710   \n1711           if (fromCache == null) {\n1712               getCache().cacheIfPossible(webRequest, webResponse, null);\n1713           }\n1714           return webResponse;\n1715       }\n1723       private WebResponse getWebResponseOrUseCached(\n1724               final WebRequest webRequest, final WebResponse cached) throws IOException {\n1725           if (cached == null) {\n1726               return getWebConnection().getResponse(webRequest);\n1727           }\n1728   \n1729           if (!HeaderUtils.containsNoCache(cached)) {\n1730               return new WebResponseFromCache(cached, webRequest);\n1731           }\n1732   \n1733           // implementation based on rfc9111 https://www.rfc-editor.org/rfc/rfc9111#name-validation\n1734           if (HeaderUtils.containsETag(cached)) {\n1735               webRequest.setAdditionalHeader(HttpHeader.IF_NONE_MATCH, cached.getResponseHeaderValue(HttpHeader.ETAG));\n1736           }\n1737           if (HeaderUtils.containsLastModified(cached)) {\n1738               webRequest.setAdditionalHeader(HttpHeader.IF_MODIFIED_SINCE,\n1739                       cached.getResponseHeaderValue(HttpHeader.LAST_MODIFIED));\n1740           }\n1741   \n1742           final WebResponse webResponse = getWebConnection().getResponse(webRequest);\n1743   \n1744           if (webResponse.getStatusCode() >= HttpStatus.INTERNAL_SERVER_ERROR_500) {\n1745               return new WebResponseFromCache(cached, webRequest);\n1746           }\n1747   \n1748           if (webResponse.getStatusCode() == HttpStatus.NOT_MODIFIED_304) {\n1749               final Map<String, NameValuePair> header2NameValuePair = new LinkedHashMap<>();\n1750               for (final NameValuePair pair : cached.getResponseHeaders()) {\n1751                   header2NameValuePair.put(pair.getName(), pair);\n1752               }\n1753               for (final NameValuePair pair : webResponse.getResponseHeaders()) {\n1754                   if (preferHeaderFrom304Response(pair.getName())) {\n1755                       header2NameValuePair.put(pair.getName(), pair);\n1756                   }\n1757               }\n1758               // WebResponse headers is unmodifiableList so we cannot update it directly\n1759               // instead, create a new WebResponseFromCache with updated headers\n1760               // then use it to replace the old cached value\n1761               final WebResponse updatedCached =\n1762                       new WebResponseFromCache(cached, new ArrayList<>(header2NameValuePair.values()), webRequest);\n1763               getCache().cacheIfPossible(webRequest, updatedCached, null);\n1764               return updatedCached;\n1765           }\n1766   \n1767           getCache().cacheIfPossible(webRequest, webResponse, null);\n1768           return webResponse;\n1769       }\n\nsrc/htmlunit/src/main/java/org/htmlunit/util/DebuggingWebConnection.java:\n106       @Override\n107       public WebResponse getResponse(final WebRequest request) throws IOException {\n108           WebResponse response = wrappedWebConnection_.getResponse(request);\n109           if (isUncompressJavaScript() && isJavaScript(response.getContentType())) {\n110               response = uncompressJavaScript(response);\n111           }\n112           saveResponse(response, request);\n113           return response;\n114       }\n170       protected void saveResponse(final WebResponse response, final WebRequest request)\n171           throws IOException {\n172           counter_++;\n173           final String extension = chooseExtension(response.getContentType());\n174           final File file = createFile(request.getUrl(), extension);\n175           int length = 0;\n176           try (InputStream input = response.getContentAsStream()) {\n177               try (OutputStream fos = Files.newOutputStream(file.toPath())) {\n178                   length = IOUtils.copy(input, fos);\n179               }\n180               catch (final EOFException ignored) {\n181                   // ignore\n182               }\n183           }\n184   \n185           final URL url = response.getWebRequest().getUrl();\n186           if (LOG.isInfoEnabled()) {\n187               LOG.info(\"Created file \" + file.getAbsolutePath() + \" for response \" + counter_ + \": \" + url);\n188           }\n189   \n190           final StringBuilder bduiler = new StringBuilder();\n191           bduiler.append(\"tab[tab.length] = {code: \").append(response.getStatusCode())\n192                   .append(\", \").append(\"fileName: '\").append(file.getName()).append(\"', \")\n193                   .append(\"contentType: '\").append(response.getContentType()).append(\"', \")\n194                   .append(\"method: '\").append(request.getHttpMethod().name()).append(\"', \");\n195           if (request.getHttpMethod() == HttpMethod.POST && request.getEncodingType() == FormEncodingType.URL_ENCODED) {\n196               bduiler.append(\"postParameters: \").append(nameValueListToJsMap(request.getRequestParameters()))\n197                   .append(\", \");\n198           }\n199           bduiler.append(\"url: '\").append(escapeJSString(url.toString())).append(\"', \")\n200                   .append(\"loadTime: \").append(response.getLoadTime()).append(\", \")\n201                   .append(\"responseSize: \").append(length).append(\", \")\n202                   .append(\"responseHeaders: \").append(nameValueListToJsMap(response.getResponseHeaders()))\n203                   .append(\"};\\n\");\n204           appendToJSFile(bduiler.toString());\n205       }\n272       private File createFile(final URL url, final String extension) throws IOException {\n273           String name = url.getPath().replaceFirst(\"/$\", \"\").replaceAll(\".*/\", \"\");\n274           name = StringUtils.substringBefore(name, \"?\"); // remove query\n275           name = StringUtils.substringBefore(name, \";\"); // remove additional info\n276           name = StringUtils.substring(name, 0, 30); // avoid exceptions due to too long file names\n277           name = org.htmlunit.util.StringUtils.sanitizeForFileName(name);\n278           if (!name.endsWith(extension)) {\n279               name += extension;\n280           }\n281           int counter = 0;\n282           while (true) {\n283               final String fileName;\n284               if (counter != 0) {\n285                   fileName = StringUtils.substringBeforeLast(name, \".\")\n286                       + \"_\" + counter + \".\" + StringUtils.substringAfterLast(name, \".\");\n287               }\n288               else {\n289                   fileName = name;\n290               }\n291               final File f = new File(reportFolder_, fileName);\n292               if (f.createNewFile()) {\n293                   return f;\n294               }\n295               counter++;\n296           }\n297       }\n",
            "cost": 0.10989499999999999,
            "harness_id": "id_1",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/htmlunit/src/main/java/org/htmlunit/util/DebuggingWebConnection.java:273:50",
            "status": "corpus",
            "valid_path": "NO",
            "id": 6
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "id_1",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/htmlunit/src/main/java/org/htmlunit/util/XmlUtils.java:124:54",
            "status": "error",
            "id": 7
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "id_1",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/htmlunit/src/main/java/org/htmlunit/html/HtmlInput.java:1017:36",
            "status": "error",
            "id": 8
        },
        {
            "blob": [
                ""
            ],
            "code": "src/htmlunit-harnesses/htmlunit-harness-one/src/main/java/com/aixcc/htmlunit/harnesses/one/HtmlunitOne.java:\n45       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n46           // Convert the byte array to a string\n47           String htmlString = new String(input, StandardCharsets.UTF_8);\n48   \n49           // Write the HTML content to a temporary file\n50           File tempFile = File.createTempFile(\"test\", \".html\");\n51           try (FileWriter writer = new FileWriter(tempFile)) {\n52               writer.write(htmlString);\n53           } catch (Exception e) {\n54               // Ensure the temporary file is deleted if an exception occurs\n55               tempFile.delete();\n56               throw e;\n57           }\n58   \n59           try {\n60               // Use WebClient to load the temporary file and print the page's normalized text\n61               WebClient webClient = new WebClient(BrowserVersion.EDGE);\n62               HtmlPage page = webClient.getPage(tempFile.toURI().toURL());\n63               System.out.println(page.asNormalizedText());\n64           } catch (Exception e) {\n65               // Eat the java exception since fuzzer does not care them\n66               //System.out.println(e.getMessage());\n67           } finally {\n68               // Ensure the temporary file is deleted\n69               tempFile.delete();\n70           }\n71       }\n\nsrc/htmlunit/src/main/java/org/htmlunit/WebClient.java:\n 400       public <P extends Page> P getPage(final WebWindow webWindow, final WebRequest webRequest)\n 401               throws IOException, FailingHttpStatusCodeException {\n 402           return getPage(webWindow, webRequest, true);\n 403       }\n 429       @SuppressWarnings(\"unchecked\")\n 430       <P extends Page> P getPage(final WebWindow webWindow, final WebRequest webRequest,\n 431               final boolean addToHistory)\n 432           throws IOException, FailingHttpStatusCodeException {\n 433   \n 434           final Page page = webWindow.getEnclosedPage();\n 435   \n 436           if (page != null) {\n 437               final URL prev = page.getUrl();\n 438               final URL current = webRequest.getUrl();\n 439               if (UrlUtils.sameFile(current, prev)\n 440                           && current.getRef() != null\n 441                           && !Objects.equals(current.getRef(), prev.getRef())) {\n 442                   // We're just navigating to an anchor within the current page.\n 443                   page.getWebResponse().getWebRequest().setUrl(current);\n 444                   if (addToHistory) {\n 445                       webWindow.getHistory().addPage(page);\n 446                   }\n 447   \n 448                   // clear the cache because the anchors are now matched by\n 449                   // the target pseudo style\n 450                   if (page instanceof HtmlPage) {\n 451                       ((HtmlPage) page).clearComputedStyles();\n 452                   }\n 453   \n 454                   final Window window = webWindow.getScriptableObject();\n 455                   if (window != null) { // js enabled\n 456                       window.getLocation().setHash(current.getRef());\n 457                   }\n 458                   return (P) page;\n 459               }\n 460   \n 461               if (page.isHtmlPage()) {\n 462                   final HtmlPage htmlPage = (HtmlPage) page;\n 463                   if (!htmlPage.isOnbeforeunloadAccepted()) {\n 464                       LOG.debug(\"The registered OnbeforeunloadHandler rejected to load a new page.\");\n 465                       return (P) page;\n 466                   }\n 467               }\n 468           }\n 469   \n 470           if (LOG.isDebugEnabled()) {\n 471               LOG.debug(\"Get page for window named '\" + webWindow.getName() + \"', using \" + webRequest);\n 472           }\n 473   \n 474           WebResponse webResponse;\n 475           final String protocol = webRequest.getUrl().getProtocol();\n 476           if (\"javascript\".equals(protocol)) {\n 477               webResponse = makeWebResponseForJavaScriptUrl(webWindow, webRequest.getUrl(), webRequest.getCharset());\n 478               if (webWindow.getEnclosedPage() != null && webWindow.getEnclosedPage().getWebResponse() == webResponse) {\n 479                   // a javascript:... url with result of type undefined didn't changed the page\n 480                   return (P) webWindow.getEnclosedPage();\n 481               }\n 482           }\n 483           else {\n 484               try {\n 485                   webResponse = loadWebResponse(webRequest);\n 486               }\n 487               catch (final NoHttpResponseException e) {\n 488                   webResponse = new WebResponse(RESPONSE_DATA_NO_HTTP_RESPONSE, webRequest, 0);\n 489               }\n 490           }\n 491   \n 492           printContentIfNecessary(webResponse);\n 493           loadWebResponseInto(webResponse, webWindow);\n 494   \n 495           // start execution here\n 496           // note: we have to do this also if the server reports an error!\n 497           //       e.g. if the server returns a 404 error page that includes javascript\n 498           if (scriptEngine_ != null) {\n 499               scriptEngine_.registerWindowAndMaybeStartEventLoop(webWindow);\n 500           }\n 501   \n 502           // check and report problems if needed\n 503           throwFailingHttpStatusCodeExceptionIfNecessary(webResponse);\n 504           return (P) webWindow.getEnclosedPage();\n 505       }\n 533       public <P extends Page> P getPage(final URL url) throws IOException, FailingHttpStatusCodeException {\n 534           final WebRequest request = new WebRequest(url, getBrowserVersion().getHtmlAcceptHeader(),\n 535                                                             getBrowserVersion().getAcceptEncodingHeader());\n 536           request.setCharset(UTF_8);\n 537   \n 538           return getPage(getCurrentWindow().getTopWindow(), request);\n 539       }\n1541       public WebResponse loadWebResponse(final WebRequest webRequest) throws IOException {\n1542           switch (webRequest.getUrl().getProtocol()) {\n1543               case UrlUtils.ABOUT:\n1544                   return makeWebResponseForAboutUrl(webRequest);\n1545   \n1546               case \"file\":\n1547                   return makeWebResponseForFileUrl(webRequest);\n1548   \n1549               case \"data\":\n1550                   return makeWebResponseForDataUrl(webRequest);\n1551   \n1552               case \"blob\":\n1553                   return makeWebResponseForBlobUrl(webRequest);\n1554   \n1555               default:\n1556                   return loadWebResponseFromWebConnection(webRequest, ALLOWED_REDIRECTIONS_SAME_URL);\n1557           }\n1558       }\n1567       private WebResponse loadWebResponseFromWebConnection(final WebRequest webRequest,\n1568           final int allowedRedirects) throws IOException {\n1569   \n1570           URL url = webRequest.getUrl();\n1571           final HttpMethod method = webRequest.getHttpMethod();\n1572           final List<NameValuePair> parameters = webRequest.getRequestParameters();\n1573   \n1574           WebAssert.notNull(\"url\", url);\n1575           WebAssert.notNull(\"method\", method);\n1576           WebAssert.notNull(\"parameters\", parameters);\n1577   \n1578           url = UrlUtils.encodeUrl(url, webRequest.getCharset());\n1579           webRequest.setUrl(url);\n1580   \n1581           if (LOG.isDebugEnabled()) {\n1582               LOG.debug(\"Load response for \" + method + \" \" + url.toExternalForm());\n1583           }\n1584   \n1585           // If the request settings don't specify a custom proxy, use the default client proxy...\n1586           if (webRequest.getProxyHost() == null) {\n1587               final ProxyConfig proxyConfig = getOptions().getProxyConfig();\n1588               if (proxyConfig.getProxyAutoConfigUrl() != null) {\n1589                   if (!UrlUtils.sameFile(new URL(proxyConfig.getProxyAutoConfigUrl()), url)) {\n1590                       String content = proxyConfig.getProxyAutoConfigContent();\n1591                       if (content == null) {\n1592                           content = getPage(proxyConfig.getProxyAutoConfigUrl())\n1593                               .getWebResponse().getContentAsString();\n1594                           proxyConfig.setProxyAutoConfigContent(content);\n1595                       }\n1596                       final String allValue = JavaScriptEngine.evaluateProxyAutoConfig(getBrowserVersion(), content, url);\n1597                       if (LOG.isDebugEnabled()) {\n1598                           LOG.debug(\"Proxy Auto-Config: value '\" + allValue + \"' for URL \" + url);\n1599                       }\n1600                       String value = allValue.split(\";\")[0].trim();\n1601                       if (value.startsWith(\"PROXY\")) {\n1602                           value = value.substring(6);\n1603                           final int colonIndex = value.indexOf(':');\n1604                           webRequest.setSocksProxy(false);\n1605                           webRequest.setProxyHost(value.substring(0, colonIndex));\n1606                           webRequest.setProxyPort(Integer.parseInt(value.substring(colonIndex + 1)));\n1607                       }\n1608                       else if (value.startsWith(\"SOCKS\")) {\n1609                           value = value.substring(6);\n1610                           final int colonIndex = value.indexOf(':');\n1611                           webRequest.setSocksProxy(true);\n1612                           webRequest.setProxyHost(value.substring(0, colonIndex));\n1613                           webRequest.setProxyPort(Integer.parseInt(value.substring(colonIndex + 1)));\n1614                       }\n1615                   }\n1616               }\n1617               // ...unless the host needs to bypass the configured client proxy!\n1618               else if (!proxyConfig.shouldBypassProxy(webRequest.getUrl().getHost())) {\n1619                   webRequest.setProxyHost(proxyConfig.getProxyHost());\n1620                   webRequest.setProxyPort(proxyConfig.getProxyPort());\n1621                   webRequest.setProxyScheme(proxyConfig.getProxyScheme());\n1622                   webRequest.setSocksProxy(proxyConfig.isSocksProxy());\n1623               }\n1624           }\n1625   \n1626           // Add the headers that are sent with every request.\n1627           addDefaultHeaders(webRequest);\n1628   \n1629           // Retrieve the response, either from the cache or from the server.\n1630           final WebResponse fromCache = getCache().getCachedResponse(webRequest);\n1631           final WebResponse webResponse = getWebResponseOrUseCached(webRequest, fromCache);\n1632   \n1633           // Continue according to the HTTP status code.\n1634           final int status = webResponse.getStatusCode();\n1635           if (status == HttpStatus.USE_PROXY_305) {\n1636               getIncorrectnessListener().notify(\"Ignoring HTTP status code [305] 'Use Proxy'\", this);\n1637           }\n1638           else if (status >= HttpStatus.MOVED_PERMANENTLY_301\n1639               && status <= HttpStatus.PERMANENT_REDIRECT_308\n1640               && status != HttpStatus.NOT_MODIFIED_304\n1641               && getOptions().isRedirectEnabled()) {\n1642   \n1643               final URL newUrl;\n1644               String locationString = null;\n1645               try {\n1646                   locationString = webResponse.getResponseHeaderValue(\"Location\");\n1647                   if (locationString == null) {\n1648                       return webResponse;\n1649                   }\n1650                   locationString = new String(locationString.getBytes(ISO_8859_1), UTF_8);\n1651                   newUrl = expandUrl(url, locationString);\n1652               }\n1653               catch (final MalformedURLException e) {\n1654                   getIncorrectnessListener().notify(\"Got a redirect status code [\" + status + \" \"\n1655                       + webResponse.getStatusMessage()\n1656                       + \"] but the location is not a valid URL [\" + locationString\n1657                       + \"]. Skipping redirection processing.\", this);\n1658                   return webResponse;\n1659               }\n1660   \n1661               if (LOG.isDebugEnabled()) {\n1662                   LOG.debug(\"Got a redirect status code [\" + status + \"] new location = [\" + locationString + \"]\");\n1663               }\n1664   \n1665               if (allowedRedirects == 0) {\n1666                   throw new FailingHttpStatusCodeException(\"Too much redirect for \"\n1667                       + webResponse.getWebRequest().getUrl(), webResponse);\n1668               }\n1669   \n1670               if (status == HttpStatus.MOVED_PERMANENTLY_301\n1671                       || status == HttpStatus.FOUND_302\n1672                       || status == HttpStatus.SEE_OTHER_303) {\n1673                   final WebRequest wrs = new WebRequest(newUrl, HttpMethod.GET);\n1674                   wrs.setCharset(webRequest.getCharset());\n1675   \n1676                   if (HttpMethod.HEAD == webRequest.getHttpMethod()) {\n1677                       wrs.setHttpMethod(HttpMethod.HEAD);\n1678                   }\n1679                   for (final Map.Entry<String, String> entry : webRequest.getAdditionalHeaders().entrySet()) {\n1680                       wrs.setAdditionalHeader(entry.getKey(), entry.getValue());\n1681                   }\n1682                   return loadWebResponseFromWebConnection(wrs, allowedRedirects - 1);\n1683               }\n1684               else if (status == HttpStatus.TEMPORARY_REDIRECT_307\n1685                           || status == HttpStatus.PERMANENT_REDIRECT_308) {\n1686                   // https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/307\n1687                   // https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/308\n1688                   // reuse method and body\n1689                   final WebRequest wrs = new WebRequest(newUrl, webRequest.getHttpMethod());\n1690                   wrs.setCharset(webRequest.getCharset());\n1691                   if (webRequest.getRequestBody() != null) {\n1692                       if (HttpMethod.POST == webRequest.getHttpMethod()\n1693                               || HttpMethod.PUT == webRequest.getHttpMethod()\n1694                               || HttpMethod.PATCH == webRequest.getHttpMethod()) {\n1695                           wrs.setRequestBody(webRequest.getRequestBody());\n1696                           wrs.setEncodingType(webRequest.getEncodingType());\n1697                       }\n1698                   }\n1699                   else {\n1700                       wrs.setRequestParameters(parameters);\n1701                   }\n1702   \n1703                   for (final Map.Entry<String, String> entry : webRequest.getAdditionalHeaders().entrySet()) {\n1704                       wrs.setAdditionalHeader(entry.getKey(), entry.getValue());\n1705                   }\n1706   \n1707                   return loadWebResponseFromWebConnection(wrs, allowedRedirects - 1);\n1708               }\n1709           }\n1710   \n1711           if (fromCache == null) {\n1712               getCache().cacheIfPossible(webRequest, webResponse, null);\n1713           }\n1714           return webResponse;\n1715       }\n1723       private WebResponse getWebResponseOrUseCached(\n1724               final WebRequest webRequest, final WebResponse cached) throws IOException {\n1725           if (cached == null) {\n1726               return getWebConnection().getResponse(webRequest);\n1727           }\n1728   \n1729           if (!HeaderUtils.containsNoCache(cached)) {\n1730               return new WebResponseFromCache(cached, webRequest);\n1731           }\n1732   \n1733           // implementation based on rfc9111 https://www.rfc-editor.org/rfc/rfc9111#name-validation\n1734           if (HeaderUtils.containsETag(cached)) {\n1735               webRequest.setAdditionalHeader(HttpHeader.IF_NONE_MATCH, cached.getResponseHeaderValue(HttpHeader.ETAG));\n1736           }\n1737           if (HeaderUtils.containsLastModified(cached)) {\n1738               webRequest.setAdditionalHeader(HttpHeader.IF_MODIFIED_SINCE,\n1739                       cached.getResponseHeaderValue(HttpHeader.LAST_MODIFIED));\n1740           }\n1741   \n1742           final WebResponse webResponse = getWebConnection().getResponse(webRequest);\n1743   \n1744           if (webResponse.getStatusCode() >= HttpStatus.INTERNAL_SERVER_ERROR_500) {\n1745               return new WebResponseFromCache(cached, webRequest);\n1746           }\n1747   \n1748           if (webResponse.getStatusCode() == HttpStatus.NOT_MODIFIED_304) {\n1749               final Map<String, NameValuePair> header2NameValuePair = new LinkedHashMap<>();\n1750               for (final NameValuePair pair : cached.getResponseHeaders()) {\n1751                   header2NameValuePair.put(pair.getName(), pair);\n1752               }\n1753               for (final NameValuePair pair : webResponse.getResponseHeaders()) {\n1754                   if (preferHeaderFrom304Response(pair.getName())) {\n1755                       header2NameValuePair.put(pair.getName(), pair);\n1756                   }\n1757               }\n1758               // WebResponse headers is unmodifiableList so we cannot update it directly\n1759               // instead, create a new WebResponseFromCache with updated headers\n1760               // then use it to replace the old cached value\n1761               final WebResponse updatedCached =\n1762                       new WebResponseFromCache(cached, new ArrayList<>(header2NameValuePair.values()), webRequest);\n1763               getCache().cacheIfPossible(webRequest, updatedCached, null);\n1764               return updatedCached;\n1765           }\n1766   \n1767           getCache().cacheIfPossible(webRequest, webResponse, null);\n1768           return webResponse;\n1769       }\n\nsrc/htmlunit/src/main/java/org/htmlunit/HttpWebConnection.java:\n 169       @Override\n 170       public WebResponse getResponse(final WebRequest webRequest) throws IOException {\n 171           final HttpClientBuilder builder = reconfigureHttpClientIfNeeded(getHttpClientBuilder(), webRequest);\n 172   \n 173           HttpUriRequest httpMethod = null;\n 174           try {\n 175               try {\n 176                   httpMethod = makeHttpMethod(webRequest, builder);\n 177               }\n 178               catch (final URISyntaxException e) {\n 179                   throw new IOException(\"Unable to create URI from URL: \" + webRequest.getUrl().toExternalForm()\n 180                           + \" (reason: \" + e.getMessage() + \")\", e);\n 181               }\n 182   \n 183               final URL url = webRequest.getUrl();\n 184               final HttpHost httpHost = new HttpHost(url.getHost(), url.getPort(), url.getProtocol());\n 185               final long startTime = System.currentTimeMillis();\n 186   \n 187               final HttpContext httpContext = getHttpContext();\n 188               try {\n 189                   try (CloseableHttpClient closeableHttpClient = builder.build()) {\n 190                       try (CloseableHttpResponse httpResponse =\n 191                               closeableHttpClient.execute(httpHost, httpMethod, httpContext)) {\n 192                           return downloadResponse(httpMethod, webRequest, httpResponse, startTime);\n 193                       }\n 194                   }\n 195               }\n 196               catch (final SSLPeerUnverifiedException ex) {\n 197                   // Try to use only SSLv3 instead\n 198                   if (webClient_.getOptions().isUseInsecureSSL()) {\n 199                       HtmlUnitSSLConnectionSocketFactory.setUseSSL3Only(httpContext, true);\n 200                       try (CloseableHttpClient closeableHttpClient = builder.build()) {\n 201                           try (CloseableHttpResponse httpResponse =\n 202                                   closeableHttpClient.execute(httpHost, httpMethod, httpContext)) {\n 203                               return downloadResponse(httpMethod, webRequest, httpResponse, startTime);\n 204                           }\n 205                       }\n 206                   }\n 207                   throw ex;\n 208               }\n 209               catch (final Error e) {\n 210                   // in case a StackOverflowError occurs while the connection is leased, it won't get released.\n 211                   // Calling code may catch the StackOverflowError, but due to the leak, the httpClient_ may\n 212                   // come out of connections and throw a ConnectionPoolTimeoutException.\n 213                   // => best solution, discard the HttpClient instance.\n 214                   httpClientBuilder_.remove(Thread.currentThread());\n 215                   throw e;\n 216               }\n 217           }\n 218           finally {\n 219               if (httpMethod != null) {\n 220                   onResponseGenerated(httpMethod);\n 221               }\n 222           }\n 223       }\n 620       private HttpClientBuilder reconfigureHttpClientIfNeeded(final HttpClientBuilder httpClientBuilder,\n 621               final WebRequest webRequest) {\n 622           final WebClientOptions options = webClient_.getOptions();\n 623   \n 624           // register new SSL factory only if settings have changed\n 625           if (options.isUseInsecureSSL() != usedOptions_.isUseInsecureSSL()\n 626                   || options.getSSLClientCertificateStore() != usedOptions_.getSSLClientCertificateStore()\n 627                   || options.getSSLTrustStore() != usedOptions_.getSSLTrustStore()\n 628                   || options.getSSLClientCipherSuites() != usedOptions_.getSSLClientCipherSuites()\n 629                   || options.getSSLClientProtocols() != usedOptions_.getSSLClientProtocols()\n 630                   || options.getProxyConfig() != usedOptions_.getProxyConfig()) {\n 631               configureHttpsScheme(httpClientBuilder);\n 632   \n 633               if (connectionManager_ != null) {\n 634                   connectionManager_.shutdown();\n 635                   connectionManager_ = null;\n 636               }\n 637           }\n 638   \n 639           final int timeout = getTimeout(webRequest);\n 640           if (timeout != usedOptions_.getTimeout()) {\n 641               configureTimeout(httpClientBuilder, timeout);\n 642           }\n 643   \n 644           final long connectionTimeToLive = webClient_.getOptions().getConnectionTimeToLive();\n 645           if (connectionTimeToLive != usedOptions_.getConnectionTimeToLive()) {\n 646               httpClientBuilder.setConnectionTimeToLive(connectionTimeToLive, TimeUnit.MILLISECONDS);\n 647               usedOptions_.setConnectionTimeToLive(connectionTimeToLive);\n 648           }\n 649   \n 650           if (connectionManager_ == null) {\n 651               connectionManager_ = createConnectionManager(httpClientBuilder);\n 652           }\n 653           httpClientBuilder.setConnectionManager(connectionManager_);\n 654   \n 655           return httpClientBuilder;\n 656       }\n1302       private static PoolingHttpClientConnectionManager createConnectionManager(final HttpClientBuilder builder) {\n1303           try {\n1304               PublicSuffixMatcher publicSuffixMatcher = getField(builder, \"publicSuffixMatcher\");\n1305               if (publicSuffixMatcher == null) {\n1306                   publicSuffixMatcher = PublicSuffixMatcherLoader.getDefault();\n1307               }\n1308   \n1309               LayeredConnectionSocketFactory sslSocketFactory = getField(builder, \"sslSocketFactory\");\n1310               final SocketConfig defaultSocketConfig = getField(builder, \"defaultSocketConfig\");\n1311               final ConnectionConfig defaultConnectionConfig = getField(builder, \"defaultConnectionConfig\");\n1312               final boolean systemProperties = getField(builder, \"systemProperties\");\n1313               final int maxConnTotal = getField(builder, \"maxConnTotal\");\n1314               final int maxConnPerRoute = getField(builder, \"maxConnPerRoute\");\n1315               HostnameVerifier hostnameVerifier = getField(builder, \"hostnameVerifier\");\n1316               final SSLContext sslcontext = getField(builder, \"sslContext\");\n1317               final DnsResolver dnsResolver = getField(builder, \"dnsResolver\");\n1318               final long connTimeToLive = getField(builder, \"connTimeToLive\");\n1319               final TimeUnit connTimeToLiveTimeUnit = getField(builder, \"connTimeToLiveTimeUnit\");\n1320   \n1321               if (sslSocketFactory == null) {\n1322                   final String[] supportedProtocols = systemProperties\n1323                           ? split(System.getProperty(\"https.protocols\")) : null;\n1324                   final String[] supportedCipherSuites = systemProperties\n1325                           ? split(System.getProperty(\"https.cipherSuites\")) : null;\n1326                   if (hostnameVerifier == null) {\n1327                       hostnameVerifier = new DefaultHostnameVerifier(publicSuffixMatcher);\n1328                   }\n1329                   if (sslcontext == null) {\n1330                       if (systemProperties) {\n1331                           sslSocketFactory = new SSLConnectionSocketFactory(\n1332                                   (SSLSocketFactory) SSLSocketFactory.getDefault(),\n1333                                   supportedProtocols, supportedCipherSuites, hostnameVerifier);\n1334                       }\n1335                       else {\n1336                           sslSocketFactory = new SSLConnectionSocketFactory(\n1337                                   SSLContexts.createDefault(),\n1338                                   hostnameVerifier);\n1339                       }\n1340                   }\n1341                   else {\n1342                       sslSocketFactory = new SSLConnectionSocketFactory(\n1343                               sslcontext, supportedProtocols, supportedCipherSuites, hostnameVerifier);\n1344                   }\n1345               }\n1346   \n1347               final PoolingHttpClientConnectionManager poolingmgr = new PoolingHttpClientConnectionManager(\n1348                       RegistryBuilder.<ConnectionSocketFactory>create()\n1349                           .register(\"http\", new SocksConnectionSocketFactory())\n1350                           .register(\"https\", sslSocketFactory)\n1351                           .build(),\n1352                           null,\n1353                           null,\n1354                           dnsResolver,\n1355                           connTimeToLive,\n1356                           connTimeToLiveTimeUnit != null ? connTimeToLiveTimeUnit : TimeUnit.MILLISECONDS);\n1357               if (defaultSocketConfig != null) {\n1358                   poolingmgr.setDefaultSocketConfig(defaultSocketConfig);\n1359               }\n1360               if (defaultConnectionConfig != null) {\n1361                   poolingmgr.setDefaultConnectionConfig(defaultConnectionConfig);\n1362               }\n1363               if (systemProperties) {\n1364                   String s = System.getProperty(\"http.keepAlive\", \"true\");\n1365                   if (\"true\".equalsIgnoreCase(s)) {\n1366                       s = System.getProperty(\"http.maxConnections\", \"5\");\n1367                       final int max = Integer.parseInt(s);\n1368                       poolingmgr.setDefaultMaxPerRoute(max);\n1369                       poolingmgr.setMaxTotal(2 * max);\n1370                   }\n1371               }\n1372               if (maxConnTotal > 0) {\n1373                   poolingmgr.setMaxTotal(maxConnTotal);\n1374               }\n1375               if (maxConnPerRoute > 0) {\n1376                   poolingmgr.setDefaultMaxPerRoute(maxConnPerRoute);\n1377               }\n1378               return poolingmgr;\n1379           }\n1380           catch (final IllegalAccessException e) {\n1381               throw new RuntimeException(e);\n1382           }\n1383       }\n1385       private static String[] split(final String s) {\n1386           if (TextUtils.isBlank(s)) {\n1387               return null;\n1388           }\n1389           return s.split(\" *, *\");\n1390       }\n",
            "cost": 0.126475,
            "harness_id": "id_1",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/htmlunit/src/main/java/org/htmlunit/HttpWebConnection.java:1389:24",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 9
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "id_1",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/htmlunit/src/main/java/org/htmlunit/html/HtmlLink.java:280:50",
            "status": "error",
            "id": 10
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "id_1",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/htmlunit/src/main/java/org/htmlunit/html/HtmlLink.java:290:50",
            "status": "error",
            "id": 11
        },
        {
            "blob": [
                ""
            ],
            "code": "src/htmlunit-harnesses/htmlunit-harness-one/src/main/java/com/aixcc/htmlunit/harnesses/one/HtmlunitOne.java:\n45       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n46           // Convert the byte array to a string\n47           String htmlString = new String(input, StandardCharsets.UTF_8);\n48   \n49           // Write the HTML content to a temporary file\n50           File tempFile = File.createTempFile(\"test\", \".html\");\n51           try (FileWriter writer = new FileWriter(tempFile)) {\n52               writer.write(htmlString);\n53           } catch (Exception e) {\n54               // Ensure the temporary file is deleted if an exception occurs\n55               tempFile.delete();\n56               throw e;\n57           }\n58   \n59           try {\n60               // Use WebClient to load the temporary file and print the page's normalized text\n61               WebClient webClient = new WebClient(BrowserVersion.EDGE);\n62               HtmlPage page = webClient.getPage(tempFile.toURI().toURL());\n63               System.out.println(page.asNormalizedText());\n64           } catch (Exception e) {\n65               // Eat the java exception since fuzzer does not care them\n66               //System.out.println(e.getMessage());\n67           } finally {\n68               // Ensure the temporary file is deleted\n69               tempFile.delete();\n70           }\n71       }\n\nsrc/htmlunit/src/main/java/org/htmlunit/WebClient.java:\n 400       public <P extends Page> P getPage(final WebWindow webWindow, final WebRequest webRequest)\n 401               throws IOException, FailingHttpStatusCodeException {\n 402           return getPage(webWindow, webRequest, true);\n 403       }\n 429       @SuppressWarnings(\"unchecked\")\n 430       <P extends Page> P getPage(final WebWindow webWindow, final WebRequest webRequest,\n 431               final boolean addToHistory)\n 432           throws IOException, FailingHttpStatusCodeException {\n 433   \n 434           final Page page = webWindow.getEnclosedPage();\n 435   \n 436           if (page != null) {\n 437               final URL prev = page.getUrl();\n 438               final URL current = webRequest.getUrl();\n 439               if (UrlUtils.sameFile(current, prev)\n 440                           && current.getRef() != null\n 441                           && !Objects.equals(current.getRef(), prev.getRef())) {\n 442                   // We're just navigating to an anchor within the current page.\n 443                   page.getWebResponse().getWebRequest().setUrl(current);\n 444                   if (addToHistory) {\n 445                       webWindow.getHistory().addPage(page);\n 446                   }\n 447   \n 448                   // clear the cache because the anchors are now matched by\n 449                   // the target pseudo style\n 450                   if (page instanceof HtmlPage) {\n 451                       ((HtmlPage) page).clearComputedStyles();\n 452                   }\n 453   \n 454                   final Window window = webWindow.getScriptableObject();\n 455                   if (window != null) { // js enabled\n 456                       window.getLocation().setHash(current.getRef());\n 457                   }\n 458                   return (P) page;\n 459               }\n 460   \n 461               if (page.isHtmlPage()) {\n 462                   final HtmlPage htmlPage = (HtmlPage) page;\n 463                   if (!htmlPage.isOnbeforeunloadAccepted()) {\n 464                       LOG.debug(\"The registered OnbeforeunloadHandler rejected to load a new page.\");\n 465                       return (P) page;\n 466                   }\n 467               }\n 468           }\n 469   \n 470           if (LOG.isDebugEnabled()) {\n 471               LOG.debug(\"Get page for window named '\" + webWindow.getName() + \"', using \" + webRequest);\n 472           }\n 473   \n 474           WebResponse webResponse;\n 475           final String protocol = webRequest.getUrl().getProtocol();\n 476           if (\"javascript\".equals(protocol)) {\n 477               webResponse = makeWebResponseForJavaScriptUrl(webWindow, webRequest.getUrl(), webRequest.getCharset());\n 478               if (webWindow.getEnclosedPage() != null && webWindow.getEnclosedPage().getWebResponse() == webResponse) {\n 479                   // a javascript:... url with result of type undefined didn't changed the page\n 480                   return (P) webWindow.getEnclosedPage();\n 481               }\n 482           }\n 483           else {\n 484               try {\n 485                   webResponse = loadWebResponse(webRequest);\n 486               }\n 487               catch (final NoHttpResponseException e) {\n 488                   webResponse = new WebResponse(RESPONSE_DATA_NO_HTTP_RESPONSE, webRequest, 0);\n 489               }\n 490           }\n 491   \n 492           printContentIfNecessary(webResponse);\n 493           loadWebResponseInto(webResponse, webWindow);\n 494   \n 495           // start execution here\n 496           // note: we have to do this also if the server reports an error!\n 497           //       e.g. if the server returns a 404 error page that includes javascript\n 498           if (scriptEngine_ != null) {\n 499               scriptEngine_.registerWindowAndMaybeStartEventLoop(webWindow);\n 500           }\n 501   \n 502           // check and report problems if needed\n 503           throwFailingHttpStatusCodeExceptionIfNecessary(webResponse);\n 504           return (P) webWindow.getEnclosedPage();\n 505       }\n 533       public <P extends Page> P getPage(final URL url) throws IOException, FailingHttpStatusCodeException {\n 534           final WebRequest request = new WebRequest(url, getBrowserVersion().getHtmlAcceptHeader(),\n 535                                                             getBrowserVersion().getAcceptEncodingHeader());\n 536           request.setCharset(UTF_8);\n 537   \n 538           return getPage(getCurrentWindow().getTopWindow(), request);\n 539       }\n 573       public Page loadWebResponseInto(final WebResponse webResponse, final WebWindow webWindow)\n 574           throws IOException, FailingHttpStatusCodeException {\n 575           return loadWebResponseInto(webResponse, webWindow, null);\n 576       }\n 599       public Page loadWebResponseInto(final WebResponse webResponse, final WebWindow webWindow,\n 600               String forceAttachmentWithFilename)\n 601               throws IOException, FailingHttpStatusCodeException {\n 602           WebAssert.notNull(\"webResponse\", webResponse);\n 603           WebAssert.notNull(\"webWindow\", webWindow);\n 604   \n 605           if (webResponse.getStatusCode() == HttpStatus.NO_CONTENT_204) {\n 606               return webWindow.getEnclosedPage();\n 607           }\n 608   \n 609           if (webStartHandler_ != null && \"application/x-java-jnlp-file\".equals(webResponse.getContentType())) {\n 610               webStartHandler_.handleJnlpResponse(webResponse);\n 611               return webWindow.getEnclosedPage();\n 612           }\n 613   \n 614           if (attachmentHandler_ != null\n 615                   && (forceAttachmentWithFilename != null || attachmentHandler_.isAttachment(webResponse))) {\n 616   \n 617               // check content disposition header for nothing provided\n 618               if (StringUtils.isEmpty(forceAttachmentWithFilename)) {\n 619                   final String disp = webResponse.getResponseHeaderValue(HttpHeader.CONTENT_DISPOSITION);\n 620                   forceAttachmentWithFilename = Attachment.getSuggestedFilename(disp);\n 621               }\n 622   \n 623               if (attachmentHandler_.handleAttachment(webResponse,\n 624                           StringUtils.isEmpty(forceAttachmentWithFilename) ? null : forceAttachmentWithFilename)) {\n 625                   // the handling is done by the attachment handler;\n 626                   // do not open a new window\n 627                   return webWindow.getEnclosedPage();\n 628               }\n 629   \n 630               final WebWindow w = openWindow(null, null, webWindow);\n 631               final Page page = pageCreator_.createPage(webResponse, w);\n 632               attachmentHandler_.handleAttachment(page,\n 633                                   StringUtils.isEmpty(forceAttachmentWithFilename) ? null : forceAttachmentWithFilename);\n 634               return page;\n 635           }\n 636   \n 637           final Page oldPage = webWindow.getEnclosedPage();\n 638           if (oldPage != null) {\n 639               // Remove the old page before create new one.\n 640               oldPage.cleanUp();\n 641           }\n 642   \n 643           Page newPage = null;\n 644           FrameWindow.PageDenied pageDenied = PageDenied.NONE;\n 645           if (windows_.contains(webWindow)) {\n 646               if (webWindow instanceof FrameWindow) {\n 647                   final String contentSecurityPolicy =\n 648                           webResponse.getResponseHeaderValue(HttpHeader.CONTENT_SECURIRY_POLICY);\n 649                   if (StringUtils.isNotBlank(contentSecurityPolicy)) {\n 650                       final URL origin = UrlUtils.getUrlWithoutPathRefQuery(\n 651                               ((FrameWindow) webWindow).getEnclosingPage().getUrl());\n 652                       final URL source = UrlUtils.getUrlWithoutPathRefQuery(webResponse.getWebRequest().getUrl());\n 653                       final Policy policy = Policy.parseSerializedCSP(contentSecurityPolicy,\n 654                                                       Policy.PolicyErrorConsumer.ignored);\n 655                       if (!policy.allowsFrameAncestor(\n 656                               Optional.of(URI.parseURI(source.toExternalForm()).orElse(null)),\n 657                               Optional.of(URI.parseURI(origin.toExternalForm()).orElse(null)))) {\n 658                           pageDenied = PageDenied.BY_CONTENT_SECURIRY_POLICY;\n 659   \n 660                           if (LOG.isWarnEnabled()) {\n 661                               LOG.warn(\"Load denied by Content-Security-Policy: '\" + contentSecurityPolicy + \"' - \"\n 662                                       + webResponse.getWebRequest().getUrl() + \"' does not permit framing.\");\n 663                           }\n 664                       }\n 665                   }\n 666   \n 667                   if (pageDenied == PageDenied.NONE) {\n 668                       final String xFrameOptions = webResponse.getResponseHeaderValue(HttpHeader.X_FRAME_OPTIONS);\n 669                       if (\"DENY\".equalsIgnoreCase(xFrameOptions)) {\n 670                           pageDenied = PageDenied.BY_X_FRAME_OPTIONS;\n 671   \n 672                           if (LOG.isWarnEnabled()) {\n 673                               LOG.warn(\"Load denied by X-Frame-Options: DENY; - '\"\n 674                                       + webResponse.getWebRequest().getUrl() + \"' does not permit framing.\");\n 675                           }\n 676                       }\n 677                   }\n 678               }\n 679   \n 680               if (pageDenied == PageDenied.NONE) {\n 681                   newPage = pageCreator_.createPage(webResponse, webWindow);\n 682               }\n 683               else {\n 684                   try {\n 685                       final WebResponse aboutBlank = loadWebResponse(WebRequest.newAboutBlankRequest());\n 686                       newPage = pageCreator_.createPage(aboutBlank, webWindow);\n 687                       // TODO - maybe we have to attach to original request/response to the page\n 688   \n 689                       ((FrameWindow) webWindow).setPageDenied(pageDenied);\n 690                   }\n 691                   catch (final IOException ignored) {\n 692                       // ignore\n 693                   }\n 694               }\n 695   \n 696               if (windows_.contains(webWindow)) {\n 697                   fireWindowContentChanged(new WebWindowEvent(webWindow, WebWindowEvent.CHANGE, oldPage, newPage));\n 698   \n 699                   // The page being loaded may already have been replaced by another page via JavaScript code.\n 700                   if (webWindow.getEnclosedPage() == newPage) {\n 701                       newPage.initialize();\n 702                       // hack: onload should be fired the same way for all type of pages\n 703                       // here is a hack to handle non HTML pages\n 704                       if (isJavaScriptEnabled()\n 705                               && webWindow instanceof FrameWindow && !newPage.isHtmlPage()) {\n 706                           final FrameWindow fw = (FrameWindow) webWindow;\n 707                           final BaseFrameElement frame = fw.getFrameElement();\n 708                           if (frame.hasEventHandlers(\"onload\")) {\n 709                               if (LOG.isDebugEnabled()) {\n 710                                   LOG.debug(\"Executing onload handler for \" + frame);\n 711                               }\n 712                               final Event event = new Event(frame, Event.TYPE_LOAD);\n 713                               ((Node) frame.getScriptableObject()).executeEventLocally(event);\n 714                           }\n 715                       }\n 716                   }\n 717               }\n 718           }\n 719           return newPage;\n 720       }\n\nsrc/htmlunit/src/main/java/org/htmlunit/DefaultPageCreator.java:\n214       @Override\n215       public Page createPage(final WebResponse webResponse, final WebWindow webWindow) throws IOException {\n216           final PageType pageType = determinePageType(webResponse);\n217           switch (pageType) {\n218               case HTML:\n219                   return createHtmlPage(webResponse, webWindow);\n220   \n221               case JAVASCRIPT:\n222                   return createHtmlPage(webResponse, webWindow);\n223   \n224               case XML:\n225                   final SgmlPage sgmlPage = createXmlPage(webResponse, webWindow);\n226                   final DomElement doc = sgmlPage.getDocumentElement();\n227                   if (doc != null && Html.XHTML_NAMESPACE.equals(doc.getNamespaceURI())) {\n228                       return createXHtmlPage(webResponse, webWindow);\n229                   }\n230                   return sgmlPage;\n231   \n232               case TEXT:\n233                   return createTextPage(webResponse, webWindow);\n234   \n235               default:\n236                   return createUnexpectedPage(webResponse, webWindow);\n237           }\n238       }\n354       protected SgmlPage createXmlPage(final WebResponse webResponse, final WebWindow webWindow) throws IOException {\n355           final SgmlPage page = new XmlPage(webResponse, webWindow);\n356           webWindow.setEnclosedPage(page);\n357           return page;\n358       }\n\nsrc/htmlunit/src/main/java/org/htmlunit/xml/XmlPage.java:\n 69       public XmlPage(final WebResponse webResponse, final WebWindow enclosingWindow) throws IOException {\n 70           this(webResponse, enclosingWindow, true);\n 71       }\n 99       public XmlPage(final WebResponse webResponse, final WebWindow enclosingWindow, final boolean ignoreSAXException)\n100           throws IOException {\n101           this(webResponse, enclosingWindow, ignoreSAXException, true);\n102       }\n116       public XmlPage(final WebResponse webResponse, final WebWindow enclosingWindow, final boolean ignoreSAXException,\n117           final boolean handleXHTMLAsHTML) throws IOException {\n118           super(webResponse, enclosingWindow);\n119   \n120           try {\n121               try {\n122                   final Document document = XmlUtils.buildDocument(webResponse);\n123                   node_ = document.getFirstChild();\n124               }\n125               catch (final SAXException e) {\n126                   if (LOG.isWarnEnabled()) {\n127                       LOG.warn(\"Failed parsing XML document '\" + webResponse.getWebRequest().getUrl() + \"'\", e);\n128                   }\n129                   if (!ignoreSAXException) {\n130                       throw new IOException(e.getMessage());\n131                   }\n132               }\n133           }\n134           catch (final ParserConfigurationException e) {\n135               if (LOG.isWarnEnabled()) {\n136                   if (null == webResponse) {\n137                       LOG.warn(\"Failed parsing XML empty document: \" + e.getMessage(), e);\n138                   }\n139                   else {\n140                       LOG.warn(\"Failed parsing XML empty document '\" + webResponse.getWebRequest().getUrl() + \"'\", e);\n141                   }\n142               }\n143           }\n144   \n145           final Map<Integer, List<String>> attributesOrderMap;\n146           if (node_ != null) {\n147               attributesOrderMap = XmlUtils.getAttributesOrderMap(node_.getOwnerDocument());\n148           }\n149           else {\n150               attributesOrderMap = null;\n151           }\n152           for (Node node = node_; node != null; node = node.getNextSibling()) {\n153               XmlUtils.appendChild(this, this, node, handleXHTMLAsHTML, attributesOrderMap);\n154           }\n155       }\n\nsrc/htmlunit/src/main/java/org/htmlunit/util/XmlUtils.java:\n263       public static void appendChild(final SgmlPage page, final DomNode parent, final Node child,\n264           final boolean handleXHTMLAsHTML, final Map<Integer, List<String>> attributesOrderMap) {\n265           final DocumentType documentType = child.getOwnerDocument().getDoctype();\n266           if (documentType != null && page instanceof XmlPage) {\n267               final DomDocumentType domDoctype = new DomDocumentType(\n268                       page, documentType.getName(), documentType.getPublicId(), documentType.getSystemId());\n269               ((XmlPage) page).setDocumentType(domDoctype);\n270           }\n271           final DomNode childXml = createFrom(page, child, handleXHTMLAsHTML, attributesOrderMap);\n272           parent.appendChild(childXml);\n273           copy(page, child, childXml, handleXHTMLAsHTML, attributesOrderMap);\n274       }\n\nsrc/htmlunit/src/main/java/org/htmlunit/html/DomNode.java:\n 908       @Override\n 909       public DomNode appendChild(final Node node) {\n 910           if (node == this) {\n 911               throw JavaScriptEngine.throwAsScriptRuntimeEx(new Exception(\"Can not add not to itself \" + this));\n 912           }\n 913           final DomNode domNode = (DomNode) node;\n 914           if (domNode.isAncestorOf(this)) {\n 915               throw JavaScriptEngine.throwAsScriptRuntimeEx(new Exception(\"Can not add (grand)parent to itself \" + this));\n 916           }\n 917   \n 918           if (domNode instanceof DomDocumentFragment) {\n 919               final DomDocumentFragment fragment = (DomDocumentFragment) domNode;\n 920               for (final DomNode child : fragment.getChildren()) {\n 921                   appendChild(child);\n 922               }\n 923           }\n 924           else {\n 925               // clean up the new node, in case it is being moved\n 926               if (domNode.getParentNode() != null) {\n 927                   domNode.detach();\n 928               }\n 929   \n 930               basicAppend(domNode);\n 931   \n 932               fireAddition(domNode);\n 933           }\n 934   \n 935           return domNode;\n 936       }\n1037       private void fireAddition(final DomNode domNode) {\n1038           final boolean wasAlreadyAttached = domNode.isAttachedToPage();\n1039           domNode.attachedToPage_ = isAttachedToPage();\n1040   \n1041           if (domNode.attachedToPage_) {\n1042               // trigger events\n1043               final Page page = getPage();\n1044               if (null != page && page.isHtmlPage()) {\n1045                   ((HtmlPage) page).notifyNodeAdded(domNode);\n1046               }\n1047   \n1048               // a node that is already \"complete\" (ie not being parsed) and not yet attached\n1049               if (!domNode.isBodyParsed() && !wasAlreadyAttached) {\n1050                   for (final DomNode child : domNode.getDescendants()) {\n1051                       child.attachedToPage_ = true;\n1052                       child.onAllChildrenAddedToPage(true);\n1053                   }\n1054                   domNode.onAllChildrenAddedToPage(true);\n1055               }\n1056           }\n1057   \n1058           if (this instanceof DomDocumentFragment) {\n1059               onAddedToDocumentFragment();\n1060           }\n1061   \n1062           fireNodeAdded(this, domNode);\n1063       }\n\nsrc/htmlunit/src/main/java/org/htmlunit/html/HtmlLink.java:\n268       @Override\n269       public void onAllChildrenAddedToPage(final boolean postponed) {\n270           if (getOwnerDocument() instanceof XmlPage) {\n271               return;\n272           }\n273           if (LOG.isDebugEnabled()) {\n274               LOG.debug(\"Link node added: \" + asXml());\n275           }\n276   \n277           if (!isStyleSheetLink()) {\n278               if (LOG.isDebugEnabled()) {\n279                   LOG.debug(\"Link type '\" + getRelAttribute() + \"' not supported (\"\n280                               + asXml().replaceAll(\"[\\\\r\\\\n]\", \"\") + \").\");\n281               }\n282   \n283               return;\n284           }\n285   \n286           final WebClient webClient = getPage().getWebClient();\n287           if (!webClient.getOptions().isCssEnabled()) {\n288               if (LOG.isDebugEnabled()) {\n289                   LOG.debug(\"Stylesheet Link found but ignored because css support is disabled (\"\n290                               + asXml().replaceAll(\"[\\\\r\\\\n]\", \"\") + \").\");\n291               }\n292               return;\n293           }\n294   \n295           if (!webClient.isJavaScriptEngineEnabled()) {\n296               if (LOG.isDebugEnabled()) {\n297                   LOG.debug(\"Stylesheet Link found but ignored because javascript engine is disabled (\"\n298                               + asXml().replaceAll(\"[\\\\r\\\\n]\", \"\") + \").\");\n299               }\n300               return;\n301           }\n302   \n303           final PostponedAction action = new PostponedAction(getPage(), \"Loading of link \" + this) {\n304               @Override\n305               public void execute() {\n306                   final HTMLLinkElement linkElem = HtmlLink.this.getScriptableObject();\n307                   // force loading, caching inside the link\n308                   linkElem.getSheet();\n309               }\n310           };\n311   \n312           final AbstractJavaScriptEngine<?> engine = webClient.getJavaScriptEngine();\n313           if (postponed) {\n314               engine.addPostponedAction(action);\n315           }\n316           else {\n317               try {\n318                   action.execute();\n319               }\n320               catch (final RuntimeException e) {\n321                   throw e;\n322               }\n323               catch (final Exception e) {\n324                   throw new RuntimeException(e);\n325               }\n326           }\n327       }\n",
            "cost": 0.115195,
            "harness_id": "id_1",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/htmlunit/src/main/java/org/htmlunit/html/HtmlLink.java:298:50",
            "status": "corpus",
            "valid_path": "NO",
            "id": 12
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "id_1",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/htmlunit/src/main/java/org/htmlunit/WebClient.java:1600:51",
            "status": "error",
            "id": 13
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "id_1",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/htmlunit/src/main/java/org/htmlunit/html/HtmlNumberInput.java:140:44",
            "status": "error",
            "id": 14
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "id_1",
            "sanitizer": "File read/write hook path",
            "sink": "src/htmlunit/src/main/java/org/htmlunit/WebClient.java:1492:89",
            "status": "error",
            "id": 15
        },
        {
            "blob": [
                ""
            ],
            "code": "src/htmlunit-harnesses/htmlunit-harness-one/src/main/java/com/aixcc/htmlunit/harnesses/one/HtmlunitOne.java:\n45       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n46           // Convert the byte array to a string\n47           String htmlString = new String(input, StandardCharsets.UTF_8);\n48   \n49           // Write the HTML content to a temporary file\n50           File tempFile = File.createTempFile(\"test\", \".html\");\n51           try (FileWriter writer = new FileWriter(tempFile)) {\n52               writer.write(htmlString);\n53           } catch (Exception e) {\n54               // Ensure the temporary file is deleted if an exception occurs\n55               tempFile.delete();\n56               throw e;\n57           }\n58   \n59           try {\n60               // Use WebClient to load the temporary file and print the page's normalized text\n61               WebClient webClient = new WebClient(BrowserVersion.EDGE);\n62               HtmlPage page = webClient.getPage(tempFile.toURI().toURL());\n63               System.out.println(page.asNormalizedText());\n64           } catch (Exception e) {\n65               // Eat the java exception since fuzzer does not care them\n66               //System.out.println(e.getMessage());\n67           } finally {\n68               // Ensure the temporary file is deleted\n69               tempFile.delete();\n70           }\n71       }\n\nsrc/htmlunit/src/main/java/org/htmlunit/WebClient.java:\n 400       public <P extends Page> P getPage(final WebWindow webWindow, final WebRequest webRequest)\n 401               throws IOException, FailingHttpStatusCodeException {\n 402           return getPage(webWindow, webRequest, true);\n 403       }\n 429       @SuppressWarnings(\"unchecked\")\n 430       <P extends Page> P getPage(final WebWindow webWindow, final WebRequest webRequest,\n 431               final boolean addToHistory)\n 432           throws IOException, FailingHttpStatusCodeException {\n 433   \n 434           final Page page = webWindow.getEnclosedPage();\n 435   \n 436           if (page != null) {\n 437               final URL prev = page.getUrl();\n 438               final URL current = webRequest.getUrl();\n 439               if (UrlUtils.sameFile(current, prev)\n 440                           && current.getRef() != null\n 441                           && !Objects.equals(current.getRef(), prev.getRef())) {\n 442                   // We're just navigating to an anchor within the current page.\n 443                   page.getWebResponse().getWebRequest().setUrl(current);\n 444                   if (addToHistory) {\n 445                       webWindow.getHistory().addPage(page);\n 446                   }\n 447   \n 448                   // clear the cache because the anchors are now matched by\n 449                   // the target pseudo style\n 450                   if (page instanceof HtmlPage) {\n 451                       ((HtmlPage) page).clearComputedStyles();\n 452                   }\n 453   \n 454                   final Window window = webWindow.getScriptableObject();\n 455                   if (window != null) { // js enabled\n 456                       window.getLocation().setHash(current.getRef());\n 457                   }\n 458                   return (P) page;\n 459               }\n 460   \n 461               if (page.isHtmlPage()) {\n 462                   final HtmlPage htmlPage = (HtmlPage) page;\n 463                   if (!htmlPage.isOnbeforeunloadAccepted()) {\n 464                       LOG.debug(\"The registered OnbeforeunloadHandler rejected to load a new page.\");\n 465                       return (P) page;\n 466                   }\n 467               }\n 468           }\n 469   \n 470           if (LOG.isDebugEnabled()) {\n 471               LOG.debug(\"Get page for window named '\" + webWindow.getName() + \"', using \" + webRequest);\n 472           }\n 473   \n 474           WebResponse webResponse;\n 475           final String protocol = webRequest.getUrl().getProtocol();\n 476           if (\"javascript\".equals(protocol)) {\n 477               webResponse = makeWebResponseForJavaScriptUrl(webWindow, webRequest.getUrl(), webRequest.getCharset());\n 478               if (webWindow.getEnclosedPage() != null && webWindow.getEnclosedPage().getWebResponse() == webResponse) {\n 479                   // a javascript:... url with result of type undefined didn't changed the page\n 480                   return (P) webWindow.getEnclosedPage();\n 481               }\n 482           }\n 483           else {\n 484               try {\n 485                   webResponse = loadWebResponse(webRequest);\n 486               }\n 487               catch (final NoHttpResponseException e) {\n 488                   webResponse = new WebResponse(RESPONSE_DATA_NO_HTTP_RESPONSE, webRequest, 0);\n 489               }\n 490           }\n 491   \n 492           printContentIfNecessary(webResponse);\n 493           loadWebResponseInto(webResponse, webWindow);\n 494   \n 495           // start execution here\n 496           // note: we have to do this also if the server reports an error!\n 497           //       e.g. if the server returns a 404 error page that includes javascript\n 498           if (scriptEngine_ != null) {\n 499               scriptEngine_.registerWindowAndMaybeStartEventLoop(webWindow);\n 500           }\n 501   \n 502           // check and report problems if needed\n 503           throwFailingHttpStatusCodeExceptionIfNecessary(webResponse);\n 504           return (P) webWindow.getEnclosedPage();\n 505       }\n 533       public <P extends Page> P getPage(final URL url) throws IOException, FailingHttpStatusCodeException {\n 534           final WebRequest request = new WebRequest(url, getBrowserVersion().getHtmlAcceptHeader(),\n 535                                                             getBrowserVersion().getAcceptEncodingHeader());\n 536           request.setCharset(UTF_8);\n 537   \n 538           return getPage(getCurrentWindow().getTopWindow(), request);\n 539       }\n1351       private WebResponse makeWebResponseForDataUrl(final WebRequest webRequest) throws IOException {\n1352           final URL url = webRequest.getUrl();\n1353           final DataURLConnection connection;\n1354           connection = new DataURLConnection(url);\n1355   \n1356           final List<NameValuePair> responseHeaders = new ArrayList<>();\n1357           responseHeaders.add(new NameValuePair(HttpHeader.CONTENT_TYPE_LC,\n1358               connection.getMediaType() + \";charset=\" + connection.getCharset()));\n1359   \n1360           try (InputStream is = connection.getInputStream()) {\n1361               final DownloadedContent downloadedContent =\n1362                       HttpWebConnection.downloadContent(is,\n1363                               getOptions().getMaxInMemory(),\n1364                               getOptions().getTempFileDirectory());\n1365               final WebResponseData data = new WebResponseData(downloadedContent, 200, \"OK\", responseHeaders);\n1366               return new WebResponse(data, url, webRequest.getHttpMethod(), 0);\n1367           }\n1368       }\n1541       public WebResponse loadWebResponse(final WebRequest webRequest) throws IOException {\n1542           switch (webRequest.getUrl().getProtocol()) {\n1543               case UrlUtils.ABOUT:\n1544                   return makeWebResponseForAboutUrl(webRequest);\n1545   \n1546               case \"file\":\n1547                   return makeWebResponseForFileUrl(webRequest);\n1548   \n1549               case \"data\":\n1550                   return makeWebResponseForDataUrl(webRequest);\n1551   \n1552               case \"blob\":\n1553                   return makeWebResponseForBlobUrl(webRequest);\n1554   \n1555               default:\n1556                   return loadWebResponseFromWebConnection(webRequest, ALLOWED_REDIRECTIONS_SAME_URL);\n1557           }\n1558       }\n\nsrc/htmlunit/src/main/java/org/htmlunit/HttpWebConnection.java:\n 782       public static DownloadedContent downloadContent(final InputStream is, final int maxInMemory,\n 783               final File tempFileDirectory) throws IOException {\n 784           if (is == null) {\n 785               return new DownloadedContent.InMemory(null);\n 786           }\n 787   \n 788           try (ByteArrayOutputStream bos = new ByteArrayOutputStream()) {\n 789               final byte[] buffer = new byte[1024];\n 790               int nbRead;\n 791               try {\n 792                   while ((nbRead = is.read(buffer)) != -1) {\n 793                       bos.write(buffer, 0, nbRead);\n 794                       if (maxInMemory > 0 && bos.size() > maxInMemory) {\n 795                           // we have exceeded the max for memory, let's write everything to a temporary file\n 796                           final File file = File.createTempFile(\"htmlunit\", \".tmp\", tempFileDirectory);\n 797                           file.deleteOnExit();\n 798                           try (OutputStream fos = Files.newOutputStream(file.toPath())) {\n 799                               bos.writeTo(fos); // what we have already read\n 800                               IOUtils.copyLarge(is, fos); // what remains from the server response\n 801                           }\n 802                           return new DownloadedContent.OnFile(file, true);\n 803                       }\n 804                   }\n 805               }\n 806               catch (final ConnectionClosedException e) {\n 807                   LOG.warn(\"Connection was closed while reading from stream.\", e);\n 808                   return new DownloadedContent.InMemory(bos.toByteArray());\n 809               }\n 810               catch (final EOFException e) {\n 811                   // this might happen with broken gzip content\n 812                   LOG.warn(\"EOFException while reading from stream.\", e);\n 813                   return new DownloadedContent.InMemory(bos.toByteArray());\n 814               }\n 815   \n 816               return new DownloadedContent.InMemory(bos.toByteArray());\n 817           }\n 818       }\n",
            "cost": 0.065595,
            "harness_id": "id_1",
            "sanitizer": "File read/write hook path",
            "sink": "src/htmlunit/src/main/java/org/htmlunit/HttpWebConnection.java:798:71",
            "status": "corpus",
            "valid_path": "NO",
            "id": 16
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "id_1",
            "sanitizer": "File read/write hook path",
            "sink": "src/htmlunit/src/main/java/org/htmlunit/util/DebuggingWebConnection.java:259:68",
            "status": "error",
            "id": 17
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "id_1",
            "sanitizer": "File read/write hook path",
            "sink": "src/htmlunit/src/main/java/org/htmlunit/util/DebuggingWebConnection.java:177:59",
            "status": "error",
            "id": 18
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "id_1",
            "sanitizer": "File read/write hook path",
            "sink": "src/htmlunit/src/main/java/org/htmlunit/DownloadedContent.java:89:41",
            "status": "error",
            "id": 19
        }
    ],
    "result": [
        {
            "harness_id": "id_1",
            "blob": [
                ""
            ]
        }
    ]
}