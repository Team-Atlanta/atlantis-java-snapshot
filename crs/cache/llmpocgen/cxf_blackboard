{
    "sinks": {
        "OS Command Injection": [
            {
                "path": "src/cxf/testutils/src/main/java/org/apache/cxf/testutil/common/ServerLauncher.java",
                "line": 219,
                "column": 23
            },
            {
                "path": "src/cxf/bin/DoMerges.java",
                "line": 133,
                "column": 64
            },
            {
                "path": "src/cxf/bin/DoMerges.java",
                "line": 138,
                "column": 60
            },
            {
                "path": "src/cxf/bin/DoMerges.java",
                "line": 144,
                "column": 47
            },
            {
                "path": "src/cxf/bin/DoMerges.java",
                "line": 166,
                "column": 47
            },
            {
                "path": "src/cxf/bin/DoMerges.java",
                "line": 172,
                "column": 60
            },
            {
                "path": "src/cxf/bin/DoMerges.java",
                "line": 213,
                "column": 39
            },
            {
                "path": "src/cxf/bin/DoMerges.java",
                "line": 234,
                "column": 60
            },
            {
                "path": "src/cxf/bin/DoMerges.java",
                "line": 265,
                "column": 52
            },
            {
                "path": "src/cxf/bin/DoMerges.java",
                "line": 285,
                "column": 47
            },
            {
                "path": "src/cxf/bin/DoMerges.java",
                "line": 287,
                "column": 43
            },
            {
                "path": "src/cxf/bin/DoMerges.java",
                "line": 302,
                "column": 47
            },
            {
                "path": "src/cxf/bin/DoMerges.java",
                "line": 334,
                "column": 39
            },
            {
                "path": "src/cxf/bin/DoMerges.java",
                "line": 337,
                "column": 43
            },
            {
                "path": "src/cxf/bin/DoMerges.java",
                "line": 351,
                "column": 47
            },
            {
                "path": "src/cxf/bin/DoMerges.java",
                "line": 355,
                "column": 48
            },
            {
                "path": "src/cxf/bin/DoMerges.java",
                "line": 377,
                "column": 60
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
                "line": 318,
                "column": 57
            }
        ],
        "Server Side Request Forgery (SSRF)": [
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/resource/URIResolver.java",
                "line": 415,
                "column": 22
            },
            {
                "path": "src/cxf/tools/wadlto/jaxrs/src/main/java/org/apache/cxf/tools/wadlto/jaxrs/SourceGenerator.java",
                "line": 1790,
                "column": 57
            },
            {
                "path": "src/cxf/distribution/src/main/release/samples/js_browser_client_simple/src/main/java/demo/hw/client/Get.java",
                "line": 43,
                "column": 27
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/ws/addressing/EndpointReferenceUtils.java",
                "line": 118,
                "column": 39
            },
            {
                "path": "src/cxf/tools/wadlto/jaxrs/src/main/java/org/apache/cxf/tools/wadlto/jaxrs/SourceGenerator.java",
                "line": 1848,
                "column": 35
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/resource/URIResolver.java",
                "line": 293,
                "column": 28
            },
            {
                "path": "src/cxf/distribution/src/main/release/samples/js_browser_client_simple/src/main/java/demo/hw/client/Get.java",
                "line": 72,
                "column": 23
            },
            {
                "path": "src/cxf/tools/wadlto/jaxrs/src/main/java/org/apache/cxf/tools/wadlto/jaxrs/SourceGenerator.java",
                "line": 1790,
                "column": 49
            },
            {
                "path": "src/cxf/distribution/src/main/release/samples/js_browser_client_simple/src/main/java/demo/hw/client/Get.java",
                "line": 54,
                "column": 23
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/resource/URIResolver.java",
                "line": 411,
                "column": 27
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/resource/URIResolver.java",
                "line": 378,
                "column": 35
            },
            {
                "path": "src/cxf/testutils/src/main/java/org/apache/cxf/testutil/common/AbstractBusClientServerTestBase.java",
                "line": 103,
                "column": 27
            },
            {
                "path": "src/cxf/distribution/src/main/release/samples/js_browser_client_simple/src/main/java/demo/hw/client/Get.java",
                "line": 83,
                "column": 23
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/resource/URIResolver.java",
                "line": 346,
                "column": 23
            },
            {
                "path": "src/cxf/distribution/src/main/release/samples/jax_rs/basic/src/main/java/demo/jaxrs/client/Client.java",
                "line": 77,
                "column": 69
            },
            {
                "path": "src/cxf/distribution/src/main/release/samples/jax_rs/basic/src/main/java/demo/jaxrs/client/Client.java",
                "line": 101,
                "column": 69
            },
            {
                "path": "src/cxf/distribution/src/main/release/samples/jax_rs/basic_https/src/main/java/httpsdemo/client/Client.java",
                "line": 73,
                "column": 61
            },
            {
                "path": "src/cxf/distribution/src/main/release/samples/jax_rs/content_negotiation/src/main/java/demo/jaxrs/client/Client.java",
                "line": 41,
                "column": 65
            },
            {
                "path": "src/cxf/distribution/src/main/release/samples/jax_rs/content_negotiation/src/main/java/demo/jaxrs/client/Client.java",
                "line": 57,
                "column": 65
            },
            {
                "path": "src/cxf/distribution/src/main/release/samples/jax_rs/content_negotiation/src/main/java/demo/jaxrs/client/Client.java",
                "line": 74,
                "column": 65
            },
            {
                "path": "src/cxf/distribution/src/main/release/samples/jax_rs/search/src/main/java/demo/jaxrs/search/client/Client.java",
                "line": 68,
                "column": 65
            },
            {
                "path": "src/cxf/distribution/src/main/release/samples/jax_rs/search/src/main/java/demo/jaxrs/search/client/Client.java",
                "line": 85,
                "column": 65
            },
            {
                "path": "src/cxf/distribution/src/main/release/samples/jax_rs/search/src/main/java/demo/jaxrs/search/client/Client.java",
                "line": 108,
                "column": 65
            },
            {
                "path": "src/cxf/distribution/src/main/release/samples/jax_rs/search/src/main/java/demo/jaxrs/search/client/Client.java",
                "line": 127,
                "column": 65
            },
            {
                "path": "src/cxf/distribution/src/main/release/samples/jax_rs/spring_security/src/main/java/demo/jaxrs/client/Client.java",
                "line": 126,
                "column": 65
            },
            {
                "path": "src/cxf/distribution/src/main/release/samples/jax_rs/tracing_brave/src/main/java/demo/jaxrs/tracing/client/ApacheHttpAsyncClient.java",
                "line": 50,
                "column": 70
            },
            {
                "path": "src/cxf/distribution/src/main/release/samples/jax_rs/tracing_brave/src/main/java/demo/jaxrs/tracing/client/ApacheHttpClient.java",
                "line": 45,
                "column": 62
            },
            {
                "path": "src/cxf/distribution/src/main/release/samples/jax_rs/tracing_brave/src/main/java/demo/jaxrs/tracing/server/Catalog.java",
                "line": 151,
                "column": 62
            }
        ],
        "Remote Code Execution": [
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/classloader/ClassLoaderUtils.java",
                "line": 308,
                "column": 34
            },
            {
                "path": "src/cxf/tools/javato/ws/src/main/java/org/apache/cxf/tools/java2wsdl/generator/WSDLGeneratorFactory.java",
                "line": 46,
                "column": 62
            },
            {
                "path": "src/cxf/testutils/src/main/java/org/apache/cxf/testutil/common/ServerLauncher.java",
                "line": 182,
                "column": 41
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/jaxb/JAXBUtils.java",
                "line": 650,
                "column": 42
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/interceptor/ClientFaultConverter.java",
                "line": 288,
                "column": 52
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/jaxb/JAXBUtils.java",
                "line": 646,
                "column": 42
            },
            {
                "path": "src/cxf/rt/wsdl/src/main/java/org/apache/cxf/wsdl/service/factory/XercesSchemaValidationUtils.java",
                "line": 189,
                "column": 40
            }
        ],
        "SQL Injection": [
            {
                "path": "src/cxf/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/persistence/jdbc/RMTxStore.java",
                "line": 840,
                "column": 36
            },
            {
                "path": "src/cxf/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/persistence/jdbc/RMTxStore.java",
                "line": 850,
                "column": 36
            },
            {
                "path": "src/cxf/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/persistence/jdbc/RMTxStore.java",
                "line": 861,
                "column": 40
            },
            {
                "path": "src/cxf/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/persistence/jdbc/RMTxStore.java",
                "line": 902,
                "column": 42
            },
            {
                "path": "src/cxf/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/persistence/jdbc/RMTxStore.java",
                "line": 931,
                "column": 32
            },
            {
                "path": "src/cxf/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/persistence/jdbc/RMTxStore.java",
                "line": 941,
                "column": 40
            }
        ],
        "Remote JNDI Lookup": [
            {
                "path": "src/cxf/integration/jca/src/main/java/org/apache/cxf/jca/inbound/DispatchMDBMessageListenerImpl.java",
                "line": 52,
                "column": 51
            },
            {
                "path": "src/cxf/integration/jca/src/main/java/org/apache/cxf/jca/servant/EJBEndpoint.java",
                "line": 70,
                "column": 41
            },
            {
                "path": "src/cxf/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/WebClient.java",
                "line": 1340,
                "column": 44
            },
            {
                "path": "src/cxf/rt/transports/jms/src/main/java/org/apache/cxf/transport/jms/JMSConfigFactory.java",
                "line": 195,
                "column": 52
            },
            {
                "path": "src/cxf/rt/transports/jms/src/main/java/org/apache/cxf/transport/jms/util/JndiHelper.java",
                "line": 43,
                "column": 41
            }
        ],
        "LDAP Injection": [
            {
                "path": "src/cxf/services/xkms/xkms-x509-repo-ldap/src/main/java/org/apache/cxf/xkms/x509/repo/ldap/LdapSearch.java",
                "line": 79,
                "column": 42
            },
            {
                "path": "src/cxf/services/xkms/xkms-x509-repo-ldap/src/main/java/org/apache/cxf/xkms/x509/repo/ldap/LdapSearch.java",
                "line": 79,
                "column": 53
            }
        ],
        "XPath Injection": [
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/helpers/XPathUtils.java",
                "line": 77,
                "column": 35
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/helpers/XPathUtils.java",
                "line": 77,
                "column": 52
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/helpers/XPathUtils.java",
                "line": 77,
                "column": 58
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/ext/xml/XMLSource.java",
                "line": 303,
                "column": 34
            },
            {
                "path": "src/cxf/rt/ws/eventing/src/main/java/org/apache/cxf/ws/eventing/shared/utils/FilteringUtil.java",
                "line": 71,
                "column": 61
            },
            {
                "path": "src/cxf/rt/ws/eventing/src/main/java/org/apache/cxf/ws/eventing/shared/utils/FilteringUtil.java",
                "line": 86,
                "column": 27
            },
            {
                "path": "src/cxf/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/CryptoCoverageUtil.java",
                "line": 331,
                "column": 25
            },
            {
                "path": "src/cxf/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/CryptoCoverageUtil.java",
                "line": 332,
                "column": 25
            },
            {
                "path": "src/cxf/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/CryptoCoverageUtil.java",
                "line": 333,
                "column": 25
            },
            {
                "path": "src/cxf/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyhandlers/AbstractBindingBuilder.java",
                "line": 1446,
                "column": 53
            },
            {
                "path": "src/cxf/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyhandlers/AbstractBindingBuilder.java",
                "line": 1446,
                "column": 71
            },
            {
                "path": "src/cxf/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyhandlers/AbstractBindingBuilder.java",
                "line": 1446,
                "column": 81
            },
            {
                "path": "src/cxf/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/AbstractSupportingTokenPolicyValidator.java",
                "line": 783,
                "column": 45
            },
            {
                "path": "src/cxf/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/AbstractSupportingTokenPolicyValidator.java",
                "line": 784,
                "column": 45
            },
            {
                "path": "src/cxf/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/AbstractSupportingTokenPolicyValidator.java",
                "line": 785,
                "column": 45
            },
            {
                "path": "src/cxf/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/RequiredElementsPolicyValidator.java",
                "line": 87,
                "column": 61
            },
            {
                "path": "src/cxf/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/RequiredElementsPolicyValidator.java",
                "line": 88,
                "column": 70
            },
            {
                "path": "src/cxf/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/RequiredElementsPolicyValidator.java",
                "line": 89,
                "column": 70
            },
            {
                "path": "src/cxf/rt/ws/transfer/src/main/java/org/apache/cxf/ws/transfer/dialect/fragment/language/FragmentDialectLanguageXPath10.java",
                "line": 86,
                "column": 17
            },
            {
                "path": "src/cxf/rt/ws/transfer/src/main/java/org/apache/cxf/ws/transfer/dialect/fragment/language/FragmentDialectLanguageXPath10.java",
                "line": 86,
                "column": 32
            },
            {
                "path": "src/cxf/rt/ws/transfer/src/main/java/org/apache/cxf/ws/transfer/dialect/fragment/language/FragmentDialectLanguageXPath10.java",
                "line": 86,
                "column": 42
            },
            {
                "path": "src/cxf/rt/ws/transfer/src/main/java/org/apache/cxf/ws/transfer/dialect/fragment/language/FragmentDialectLanguageXPath10.java",
                "line": 100,
                "column": 17
            },
            {
                "path": "src/cxf/rt/ws/transfer/src/main/java/org/apache/cxf/ws/transfer/dialect/fragment/language/FragmentDialectLanguageXPath10.java",
                "line": 100,
                "column": 32
            },
            {
                "path": "src/cxf/rt/ws/transfer/src/main/java/org/apache/cxf/ws/transfer/dialect/fragment/language/FragmentDialectLanguageXPath10.java",
                "line": 100,
                "column": 57
            },
            {
                "path": "src/cxf/services/wsn/wsn-core/src/main/java/org/apache/cxf/wsn/jms/JmsSubscription.java",
                "line": 256,
                "column": 53
            },
            {
                "path": "src/cxf/testutils/src/main/java/org/apache/cxf/test/XPathAssert.java",
                "line": 59,
                "column": 69
            },
            {
                "path": "src/cxf/testutils/src/main/java/org/apache/cxf/test/XPathAssert.java",
                "line": 59,
                "column": 76
            },
            {
                "path": "src/cxf/testutils/src/main/java/org/apache/cxf/test/XPathAssert.java",
                "line": 59,
                "column": 82
            },
            {
                "path": "src/cxf/testutils/src/main/java/org/apache/cxf/test/XPathAssert.java",
                "line": 79,
                "column": 63
            },
            {
                "path": "src/cxf/testutils/src/main/java/org/apache/cxf/test/XPathAssert.java",
                "line": 79,
                "column": 70
            },
            {
                "path": "src/cxf/testutils/src/main/java/org/apache/cxf/test/XPathAssert.java",
                "line": 79,
                "column": 76
            },
            {
                "path": "src/cxf/testutils/src/main/java/org/apache/cxf/test/XPathAssert.java",
                "line": 108,
                "column": 69
            },
            {
                "path": "src/cxf/testutils/src/main/java/org/apache/cxf/test/XPathAssert.java",
                "line": 108,
                "column": 76
            },
            {
                "path": "src/cxf/testutils/src/main/java/org/apache/cxf/test/XPathAssert.java",
                "line": 108,
                "column": 82
            },
            {
                "path": "src/cxf/testutils/src/main/java/org/apache/cxf/test/XPathAssert.java",
                "line": 132,
                "column": 52
            },
            {
                "path": "src/cxf/testutils/src/main/java/org/apache/cxf/test/XPathAssert.java",
                "line": 140,
                "column": 45
            },
            {
                "path": "src/cxf/testutils/src/main/java/org/apache/cxf/test/XPathAssert.java",
                "line": 165,
                "column": 52
            },
            {
                "path": "src/cxf/testutils/src/main/java/org/apache/cxf/test/XPathAssert.java",
                "line": 174,
                "column": 45
            },
            {
                "path": "src/cxf/tools/wsdlto/databinding/jaxb/src/main/java/org/apache/cxf/tools/wsdlto/databinding/jaxb/JAXBDataBinding.java",
                "line": 559,
                "column": 53
            },
            {
                "path": "src/cxf/tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/customization/JAXWSBindingParser.java",
                "line": 226,
                "column": 45
            },
            {
                "path": "src/cxf/tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/customization/JAXWSBindingParser.java",
                "line": 226,
                "column": 57
            },
            {
                "path": "src/cxf/tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/customization/JAXWSBindingParser.java",
                "line": 226,
                "column": 65
            }
        ],
        "load arbitrary library": [
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/BusFactory.java",
                "line": 392,
                "column": 56
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/BusFactory.java",
                "line": 396,
                "column": 52
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/bus/blueprint/BundleDelegatingClassLoader.java",
                "line": 115,
                "column": 51
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/bus/extension/Extension.java",
                "line": 167,
                "column": 46
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/bus/extension/Extension.java",
                "line": 175,
                "column": 33
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/bus/extension/Extension.java",
                "line": 179,
                "column": 67
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/bus/spring/Jsr250BeanPostProcessor.java",
                "line": 50,
                "column": 26
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBus.java",
                "line": 136,
                "column": 48
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBus.java",
                "line": 137,
                "column": 47
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/classloader/ClassLoaderUtils.java",
                "line": 274,
                "column": 37
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/classloader/ClassLoaderUtils.java",
                "line": 288,
                "column": 37
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/classloader/ClassLoaderUtils.java",
                "line": 302,
                "column": 50
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/classloader/ClassLoaderUtils.java",
                "line": 308,
                "column": 34
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/classloader/ClassLoaderUtils.java",
                "line": 313,
                "column": 45
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/classloader/ClassLoaderUtils.java",
                "line": 319,
                "column": 61
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/jaxb/JAXBContextCache.java",
                "line": 383,
                "column": 32
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/jaxb/JAXBContextCache.java",
                "line": 399,
                "column": 39
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/jaxb/JAXBContextCache.java",
                "line": 417,
                "column": 55
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/jaxb/JAXBUtils.java",
                "line": 592,
                "column": 31
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/jaxb/JAXBUtils.java",
                "line": 607,
                "column": 43
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/jaxb/JAXBUtils.java",
                "line": 645,
                "column": 37
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/jaxb/JAXBUtils.java",
                "line": 646,
                "column": 42
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/jaxb/JAXBUtils.java",
                "line": 648,
                "column": 37
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/jaxb/JAXBUtils.java",
                "line": 650,
                "column": 42
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/jaxb/JAXBUtils.java",
                "line": 705,
                "column": 37
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/jaxb/JAXBUtils.java",
                "line": 708,
                "column": 37
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/jaxb/JAXBUtils.java",
                "line": 776,
                "column": 37
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/jaxb/JAXBUtils.java",
                "line": 778,
                "column": 37
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/jaxb/JAXBUtils.java",
                "line": 884,
                "column": 50
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/jaxb/JAXBUtils.java",
                "line": 913,
                "column": 63
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/logging/JDKBugHacks.java",
                "line": 126,
                "column": 56
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/logging/JDKBugHacks.java",
                "line": 145,
                "column": 38
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/logging/JDKBugHacks.java",
                "line": 156,
                "column": 39
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/logging/LogUtils.java",
                "line": 101,
                "column": 35
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/logging/LogUtils.java",
                "line": 102,
                "column": 50
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/logging/LogUtils.java",
                "line": 125,
                "column": 49
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/logging/LogUtils.java",
                "line": 128,
                "column": 49
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/spi/ClassGeneratorClassLoader.java",
                "line": 122,
                "column": 46
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/spi/GeneratedClassClassLoader.java",
                "line": 44,
                "column": 33
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/spi/GeneratedClassClassLoader.java",
                "line": 84,
                "column": 46
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/CglibProxyHelper.java",
                "line": 36,
                "column": 23
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/CglibProxyHelper.java",
                "line": 37,
                "column": 23
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/CglibProxyHelper.java",
                "line": 38,
                "column": 23
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/ProxyClassLoader.java",
                "line": 64,
                "column": 41
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/ProxyClassLoader.java",
                "line": 71,
                "column": 57
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/ProxyHelper.java",
                "line": 111,
                "column": 50
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/ProxyHelper.java",
                "line": 121,
                "column": 39
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/ProxyHelper.java",
                "line": 125,
                "column": 43
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/SpringClassUnwrapper.java",
                "line": 33,
                "column": 23
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/SpringClassUnwrapper.java",
                "line": 34,
                "column": 23
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/SpringClasspathScanner.java",
                "line": 47,
                "column": 23
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/SpringClasspathScanner.java",
                "line": 48,
                "column": 23
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/SpringClasspathScanner.java",
                "line": 52,
                "column": 27
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/SpringClasspathScanner.java",
                "line": 53,
                "column": 27
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/SpringClasspathScanner.java",
                "line": 200,
                "column": 33
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/helpers/DOMUtils.java",
                "line": 93,
                "column": 27
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/helpers/DOMUtils.java",
                "line": 107,
                "column": 31
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/interceptor/ClientFaultConverter.java",
                "line": 288,
                "column": 52
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/interceptor/security/DefaultSecurityContext.java",
                "line": 52,
                "column": 39
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/interceptor/security/DefaultSecurityContext.java",
                "line": 57,
                "column": 40
            },
            {
                "path": "src/cxf/distribution/src/main/release/samples/java_first_jms/src/main/java/demo/server/ServerJMS.java",
                "line": 84,
                "column": 24
            },
            {
                "path": "src/cxf/integration/cdi/src/main/java/org/apache/cxf/cdi/JAXRSCdiResourceExtension.java",
                "line": 150,
                "column": 30
            },
            {
                "path": "src/cxf/integration/cdi/src/main/java/org/apache/cxf/cdi/JAXRSCdiResourceExtension.java",
                "line": 157,
                "column": 34
            },
            {
                "path": "src/cxf/integration/cdi/src/main/java/org/apache/cxf/cdi/JAXRSCdiResourceExtension.java",
                "line": 324,
                "column": 34
            },
            {
                "path": "src/cxf/integration/jca/src/main/java/org/apache/cxf/jca/core/classloader/PlugInClassLoader.java",
                "line": 148,
                "column": 45
            },
            {
                "path": "src/cxf/integration/jca/src/main/java/org/apache/cxf/jca/cxf/handlers/InvocationHandlerFactory.java",
                "line": 123,
                "column": 65
            },
            {
                "path": "src/cxf/integration/jca/src/main/java/org/apache/cxf/jca/inbound/MDBActivationWork.java",
                "line": 110,
                "column": 46
            },
            {
                "path": "src/cxf/integration/jca/src/main/java/org/apache/cxf/jca/servant/EJBEndpoint.java",
                "line": 73,
                "column": 49
            },
            {
                "path": "src/cxf/rt/bindings/corba/src/main/java/org/apache/cxf/binding/corba/utils/OrbConfig.java",
                "line": 156,
                "column": 57
            },
            {
                "path": "src/cxf/rt/bindings/corba/src/main/java/org/apache/cxf/binding/corba/utils/OrbConfig.java",
                "line": 157,
                "column": 51
            },
            {
                "path": "src/cxf/rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/saaj/SAAJFactoryResolver.java",
                "line": 97,
                "column": 44
            },
            {
                "path": "src/cxf/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBDataBinding.java",
                "line": 509,
                "column": 43
            },
            {
                "path": "src/cxf/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBDataBinding.java",
                "line": 510,
                "column": 43
            },
            {
                "path": "src/cxf/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBDataBinding.java",
                "line": 511,
                "column": 43
            },
            {
                "path": "src/cxf/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBDataBinding.java",
                "line": 667,
                "column": 68
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/servlet/CXFNonSpringJaxrsServlet.java",
                "line": 615,
                "column": 45
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java",
                "line": 1138,
                "column": 50
            },
            {
                "path": "src/cxf/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/ServiceImpl.java",
                "line": 590,
                "column": 89
            },
            {
                "path": "src/cxf/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/handler/HandlerChainBuilder.java",
                "line": 127,
                "column": 67
            },
            {
                "path": "src/cxf/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/interceptors/MessageModeInInterceptor.java",
                "line": 64,
                "column": 42
            },
            {
                "path": "src/cxf/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/cache/CacheControlFeature.java",
                "line": 129,
                "column": 53
            },
            {
                "path": "src/cxf/rt/rs/description-swagger-ui/src/main/java/org/apache/cxf/jaxrs/swagger/ui/OsgiSwaggerUiResolver.java",
                "line": 38,
                "column": 23
            },
            {
                "path": "src/cxf/rt/rs/description-swagger/src/main/java/org/apache/cxf/jaxrs/swagger/AbstractSwaggerFeature.java",
                "line": 178,
                "column": 31
            },
            {
                "path": "src/cxf/rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/cdi/CDIFacade.java",
                "line": 39,
                "column": 27
            },
            {
                "path": "src/cxf/rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/proxy/MicroProfileClientProxyImpl.java",
                "line": 93,
                "column": 54
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/http/CXFAuthenticator.java",
                "line": 90,
                "column": 60
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/http/CXFAuthenticator.java",
                "line": 113,
                "column": 44
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/http/osgi/HttpConduitConfigApplier.java",
                "line": 373,
                "column": 41
            },
            {
                "path": "src/cxf/rt/transports/websocket/src/main/java/org/apache/cxf/transport/websocket/WebSocketDestinationFactory.java",
                "line": 61,
                "column": 27
            },
            {
                "path": "src/cxf/rt/transports/websocket/src/main/java/org/apache/cxf/transport/websocket/WebSocketDestinationFactory.java",
                "line": 70,
                "column": 42
            },
            {
                "path": "src/cxf/rt/transports/websocket/src/main/java/org/apache/cxf/transport/websocket/WebSocketDestinationFactory.java",
                "line": 80,
                "column": 42
            },
            {
                "path": "src/cxf/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/persistence/jdbc/RMTxStore.java",
                "line": 1086,
                "column": 31
            },
            {
                "path": "src/cxf/rt/ws/security/src/main/java/org/apache/cxf/ws/security/tokenstore/TokenStoreFactory.java",
                "line": 34,
                "column": 56
            },
            {
                "path": "src/cxf/rt/wsdl/src/main/java/org/apache/cxf/wsdl/JAXBExtensionHelper.java",
                "line": 180,
                "column": 52
            },
            {
                "path": "src/cxf/rt/wsdl/src/main/java/org/apache/cxf/wsdl/JAXBExtensionHelper.java",
                "line": 294,
                "column": 52
            },
            {
                "path": "src/cxf/rt/wsdl/src/main/java/org/apache/cxf/wsdl/service/factory/ClassReader.java",
                "line": 285,
                "column": 42
            },
            {
                "path": "src/cxf/rt/wsdl/src/main/java/org/apache/cxf/wsdl/service/factory/ClassReader.java",
                "line": 286,
                "column": 35
            },
            {
                "path": "src/cxf/rt/wsdl/src/main/java/org/apache/cxf/wsdl/service/factory/XercesSchemaValidationUtils.java",
                "line": 189,
                "column": 40
            },
            {
                "path": "src/cxf/services/xkms/xkms-common/src/main/java/org/apache/cxf/xkms/model/extensions/ClassArrayFactoryBean.java",
                "line": 42,
                "column": 40
            },
            {
                "path": "src/cxf/testutils/src/main/java/org/apache/cxf/testutil/common/ServerLauncher.java",
                "line": 182,
                "column": 41
            },
            {
                "path": "src/cxf/tools/common/src/main/java/org/apache/cxf/tools/common/VelocityGenerator.java",
                "line": 77,
                "column": 61
            },
            {
                "path": "src/cxf/tools/common/src/main/java/org/apache/cxf/tools/common/model/JavaType.java",
                "line": 137,
                "column": 53
            },
            {
                "path": "src/cxf/tools/common/src/main/java/org/apache/cxf/tools/common/toolspec/ToolSpec.java",
                "line": 139,
                "column": 47
            },
            {
                "path": "src/cxf/tools/common/src/main/java/org/apache/cxf/tools/common/toolspec/ToolSpec.java",
                "line": 157,
                "column": 47
            },
            {
                "path": "src/cxf/tools/common/src/main/java/org/apache/cxf/tools/util/AnnotationUtil.java",
                "line": 85,
                "column": 43
            },
            {
                "path": "src/cxf/tools/common/src/main/java/org/apache/cxf/tools/util/URLFactory.java",
                "line": 70,
                "column": 41
            },
            {
                "path": "src/cxf/tools/common/src/main/java/org/apache/cxf/tools/util/URLFactory.java",
                "line": 74,
                "column": 44
            },
            {
                "path": "src/cxf/tools/corba/src/main/java/org/apache/cxf/tools/corba/common/SchemaFactory.java",
                "line": 79,
                "column": 48
            },
            {
                "path": "src/cxf/tools/corba/src/main/java/org/apache/cxf/tools/corba/common/WSDLCorbaFactory.java",
                "line": 81,
                "column": 48
            },
            {
                "path": "src/cxf/tools/javato/ws/src/main/java/org/apache/cxf/tools/java2wsdl/generator/WSDLGeneratorFactory.java",
                "line": 46,
                "column": 62
            },
            {
                "path": "src/cxf/tools/wsdlto/core/src/main/java/org/apache/cxf/tools/wsdlto/WSDLToJavaContainer.java",
                "line": 746,
                "column": 78
            },
            {
                "path": "src/cxf/tools/wsdlto/databinding/jaxb/src/main/java/org/apache/cxf/tools/wsdlto/databinding/jaxb/JAXBDataBinding.java",
                "line": 458,
                "column": 73
            },
            {
                "path": "src/cxf/tools/wsdlto/frontend/javascript/src/main/java/org/apache/cxf/tools/wsdlto/javascript/JavaScriptContainer.java",
                "line": 304,
                "column": 78
            },
            {
                "path": "src/cxf/tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/processor/internal/ParameterProcessor.java",
                "line": 209,
                "column": 31
            },
            {
                "path": "src/cxf/tools/wsdlto/misc/src/main/java/org/apache/cxf/tools/misc/processor/address/AddressFactory.java",
                "line": 58,
                "column": 47
            }
        ],
        "Regular Expression Injection": [
            {
                "path": "src/cxf/benchmark/performance/soap_http_doc_lit/src/main/java/org/apache/cxf/performance/complex_type/client/Client.java",
                "line": 124,
                "column": 54
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/attachment/AttachmentSerializer.java",
                "line": 243,
                "column": 55
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/attachment/AttachmentSerializer.java",
                "line": 379,
                "column": 47
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/bus/blueprint/ConfigurerImpl.java",
                "line": 83,
                "column": 50
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/bus/blueprint/ConfigurerImpl.java",
                "line": 84,
                "column": 55
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/bus/extension/TextExtensionFragmentParser.java",
                "line": 81,
                "column": 43
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/bus/osgi/OSGIBusListener.java",
                "line": 73,
                "column": 67
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/bus/spring/ControlledValidationXmlBeanDefinitionReader.java",
                "line": 166,
                "column": 58
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/bus/spring/ControlledValidationXmlBeanDefinitionReader.java",
                "line": 170,
                "column": 48
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/jaxb/JAXBContextCache.java",
                "line": 376,
                "column": 43
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/logging/RegexLoggingFilter.java",
                "line": 36,
                "column": 44
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/ASMHelperImpl.java",
                "line": 56,
                "column": 73
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/ASMHelperImpl.java",
                "line": 57,
                "column": 79
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/ASMHelperImpl.java",
                "line": 58,
                "column": 73
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/ASMHelperImpl.java",
                "line": 59,
                "column": 79
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/ASMHelperImpl.java",
                "line": 60,
                "column": 75
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/ASMHelperImpl.java",
                "line": 61,
                "column": 83
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/ASMHelperImpl.java",
                "line": 62,
                "column": 75
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/ASMHelperImpl.java",
                "line": 63,
                "column": 77
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/ClasspathScanner.java",
                "line": 178,
                "column": 53
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
                "line": 95,
                "column": 49
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
                "line": 100,
                "column": 33
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
                "line": 292,
                "column": 70
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/PackageUtils.java",
                "line": 62,
                "column": 68
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/PackageUtils.java",
                "line": 176,
                "column": 68
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/StringUtils.java",
                "line": 75,
                "column": 43
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/StringUtils.java",
                "line": 105,
                "column": 43
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/configuration/jsse/SSLUtils.java",
                "line": 437,
                "column": 42
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/configuration/jsse/SSLUtils.java",
                "line": 451,
                "column": 46
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/configuration/jsse/SSLUtils.java",
                "line": 426,
                "column": 50
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/configuration/spring/ConfigurerImpl.java",
                "line": 106,
                "column": 58
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/configuration/spring/ConfigurerImpl.java",
                "line": 108,
                "column": 67
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/databinding/source/XMLStreamDataWriter.java",
                "line": 257,
                "column": 38
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/helpers/FileUtils.java",
                "line": 318,
                "column": 41
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/interceptor/security/DelegatingAuthenticationInterceptor.java",
                "line": 63,
                "column": 56
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/interceptor/security/SimpleAuthorizingInterceptor.java",
                "line": 103,
                "column": 49
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/interceptor/security/SimpleAuthorizingInterceptor.java",
                "line": 113,
                "column": 74
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/message/MessageUtils.java",
                "line": 166,
                "column": 56
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/message/MessageUtils.java",
                "line": 203,
                "column": 56
            },
            {
                "path": "src/cxf/integration/jca/src/main/java/org/apache/cxf/jca/inbound/MDBActivationWork.java",
                "line": 241,
                "column": 40
            },
            {
                "path": "src/cxf/maven-plugins/codegen-plugin/src/main/java/org/apache/cxf/maven_plugin/wsdl2java/WsdlOptionLoader.java",
                "line": 117,
                "column": 50
            },
            {
                "path": "src/cxf/maven-plugins/java2ws-plugin/src/main/java/org/apache/cxf/maven_plugin/Java2WSMojo.java",
                "line": 297,
                "column": 58
            },
            {
                "path": "src/cxf/maven-plugins/wadl2java-plugin/src/main/java/org/apache/cxf/maven_plugin/wadlto/OptionLoader.java",
                "line": 202,
                "column": 50
            },
            {
                "path": "src/cxf/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBDataBinding.java",
                "line": 711,
                "column": 62
            },
            {
                "path": "src/cxf/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/WrapperHelperClassGenerator.java",
                "line": 51,
                "column": 48
            },
            {
                "path": "src/cxf/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/WrapperHelperClassGenerator.java",
                "line": 61,
                "column": 60
            },
            {
                "path": "src/cxf/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/AbstractLoggingInterceptor.java",
                "line": 147,
                "column": 58
            },
            {
                "path": "src/cxf/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/MaskSensitiveHelper.java",
                "line": 45,
                "column": 49
            },
            {
                "path": "src/cxf/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/MaskSensitiveHelper.java",
                "line": 70,
                "column": 72
            },
            {
                "path": "src/cxf/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/MaskSensitiveHelper.java",
                "line": 71,
                "column": 70
            },
            {
                "path": "src/cxf/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/event/DefaultLogEventMapper.java",
                "line": 71,
                "column": 74
            },
            {
                "path": "src/cxf/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/osgi/Activator.java",
                "line": 127,
                "column": 91
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/blueprint/JAXRSServerFactoryBeanDefinitionParser.java",
                "line": 60,
                "column": 41
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/CacheControlHeaderProvider.java",
                "line": 95,
                "column": 48
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/CacheControlHeaderProvider.java",
                "line": 133,
                "column": 24
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/CacheControlHeaderProvider.java",
                "line": 195,
                "column": 43
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/CookieHeaderProvider.java",
                "line": 43,
                "column": 35
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/HttpHeadersImpl.java",
                "line": 194,
                "column": 37
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/HttpHeadersImpl.java",
                "line": 200,
                "column": 48
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/HttpHeadersImpl.java",
                "line": 265,
                "column": 42
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/LinkBuilderImpl.java",
                "line": 97,
                "column": 38
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/LinkBuilderImpl.java",
                "line": 156,
                "column": 33
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/LinkBuilderImpl.java",
                "line": 192,
                "column": 41
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/LinkHeaderProvider.java",
                "line": 57,
                "column": 69
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/LinkHeaderProvider.java",
                "line": 71,
                "column": 76
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/NewCookieHeaderProvider.java",
                "line": 64,
                "column": 35
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/RequestImpl.java",
                "line": 169,
                "column": 43
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/RequestImpl.java",
                "line": 171,
                "column": 48
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/UriBuilderImpl.java",
                "line": 427,
                "column": 50
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/UriBuilderImpl.java",
                "line": 591,
                "column": 36
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/UriBuilderImpl.java",
                "line": 862,
                "column": 52
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/UriBuilderImpl.java",
                "line": 901,
                "column": 54
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/UriBuilderImpl.java",
                "line": 933,
                "column": 54
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/UriBuilderImpl.java",
                "line": 1000,
                "column": 73
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/model/URITemplate.java",
                "line": 107,
                "column": 48
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/model/URITemplate.java",
                "line": 328,
                "column": 48
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/model/URITemplate.java",
                "line": 498,
                "column": 63
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/model/doc/JavaDocProvider.java",
                "line": 212,
                "column": 63
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/security/JAASAuthenticationFilter.java",
                "line": 146,
                "column": 59
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/security/KerberosAuthenticationFilter.java",
                "line": 81,
                "column": 54
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/servlet/CXFNonSpringJaxrsServlet.java",
                "line": 214,
                "column": 44
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/servlet/CXFNonSpringJaxrsServlet.java",
                "line": 242,
                "column": 39
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/servlet/CXFNonSpringJaxrsServlet.java",
                "line": 307,
                "column": 50
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/servlet/CXFNonSpringJaxrsServlet.java",
                "line": 330,
                "column": 50
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/servlet/CXFNonSpringJaxrsServlet.java",
                "line": 350,
                "column": 51
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/servlet/CXFNonSpringJaxrsServlet.java",
                "line": 377,
                "column": 45
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/servlet/CXFNonSpringJaxrsServlet.java",
                "line": 383,
                "column": 49
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/servlet/CXFNonSpringJaxrsServlet.java",
                "line": 505,
                "column": 54
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/spring/AbstractSpringConfigurationFactory.java",
                "line": 105,
                "column": 45
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/spring/AbstractSpringConfigurationFactory.java",
                "line": 111,
                "column": 48
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/spring/JAXRSServerFactoryBeanDefinitionParser.java",
                "line": 71,
                "column": 41
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/FormUtils.java",
                "line": 135,
                "column": 41
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java",
                "line": 1025,
                "column": 41
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXRSUtils.java",
                "line": 328,
                "column": 60
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXRSUtils.java",
                "line": 1491,
                "column": 44
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXRSUtils.java",
                "line": 1503,
                "column": 53
            },
            {
                "path": "src/cxf/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/JaxWsClientProxy.java",
                "line": 284,
                "column": 39
            },
            {
                "path": "src/cxf/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/handler/BaseHandlerChainBuilder.java",
                "line": 184,
                "column": 36
            },
            {
                "path": "src/cxf/rt/frontend/simple/src/main/java/org/apache/cxf/endpoint/dynamic/ExceptionClassGenerator.java",
                "line": 37,
                "column": 48
            },
            {
                "path": "src/cxf/rt/javascript/javascript-rt/src/main/java/org/apache/cxf/javascript/BasicNameManager.java",
                "line": 121,
                "column": 77
            },
            {
                "path": "src/cxf/rt/javascript/javascript-rt/src/main/java/org/apache/cxf/javascript/BasicNameManager.java",
                "line": 121,
                "column": 31
            },
            {
                "path": "src/cxf/rt/javascript/javascript-rt/src/main/java/org/apache/cxf/javascript/JavascriptUtils.java",
                "line": 131,
                "column": 33
            },
            {
                "path": "src/cxf/rt/javascript/javascript-rt/src/main/java/org/apache/cxf/javascript/types/SchemaJavascriptBuilder.java",
                "line": 422,
                "column": 54
            },
            {
                "path": "src/cxf/rt/management/src/main/java/org/apache/cxf/management/jmx/InstrumentationManagerImpl.java",
                "line": 337,
                "column": 46
            },
            {
                "path": "src/cxf/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/AbstractClient.java",
                "line": 474,
                "column": 64
            },
            {
                "path": "src/cxf/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/JAXRSClientFactoryBean.java",
                "line": 199,
                "column": 43
            },
            {
                "path": "src/cxf/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/UrlEncodingParamConverter.java",
                "line": 37,
                "column": 73
            },
            {
                "path": "src/cxf/rt/rs/description-openapi-v3/src/main/java/org/apache/cxf/jaxrs/openapi/OpenApiCustomizer.java",
                "line": 179,
                "column": 79
            },
            {
                "path": "src/cxf/rt/rs/description-openapi-v3/src/main/java/org/apache/cxf/jaxrs/openapi/OpenApiCustomizer.java",
                "line": 127,
                "column": 82
            },
            {
                "path": "src/cxf/rt/rs/description-swagger-ui/src/main/java/org/apache/cxf/jaxrs/swagger/ui/SwaggerUiResolver.java",
                "line": 61,
                "column": 52
            },
            {
                "path": "src/cxf/rt/rs/description-swagger/src/main/java/org/apache/cxf/jaxrs/swagger/Swagger2Customizer.java",
                "line": 102,
                "column": 76
            },
            {
                "path": "src/cxf/rt/rs/description-swagger/src/main/java/org/apache/cxf/jaxrs/swagger/Swagger2Customizer.java",
                "line": 157,
                "column": 79
            },
            {
                "path": "src/cxf/rt/rs/description-swagger/src/main/java/org/apache/cxf/jaxrs/swagger/Swagger2Feature.java",
                "line": 363,
                "column": 72
            },
            {
                "path": "src/cxf/rt/rs/description-swagger/src/main/java/org/apache/cxf/jaxrs/swagger/Swagger2Feature.java",
                "line": 648,
                "column": 65
            },
            {
                "path": "src/cxf/rt/rs/extensions/search/src/main/java/org/apache/cxf/jaxrs/ext/search/AbstractSearchConditionParser.java",
                "line": 182,
                "column": 39
            },
            {
                "path": "src/cxf/rt/rs/extensions/search/src/main/java/org/apache/cxf/jaxrs/ext/search/PrimitiveSearchCondition.java",
                "line": 220,
                "column": 41
            },
            {
                "path": "src/cxf/rt/rs/extensions/search/src/main/java/org/apache/cxf/jaxrs/ext/search/SearchUtils.java",
                "line": 120,
                "column": 38
            },
            {
                "path": "src/cxf/rt/rs/extensions/search/src/main/java/org/apache/cxf/jaxrs/ext/search/SearchUtils.java",
                "line": 123,
                "column": 38
            },
            {
                "path": "src/cxf/rt/rs/extensions/search/src/main/java/org/apache/cxf/jaxrs/ext/search/SearchUtils.java",
                "line": 126,
                "column": 38
            },
            {
                "path": "src/cxf/rt/rs/extensions/search/src/main/java/org/apache/cxf/jaxrs/ext/search/SearchUtils.java",
                "line": 131,
                "column": 34
            },
            {
                "path": "src/cxf/rt/rs/extensions/search/src/main/java/org/apache/cxf/jaxrs/ext/search/SearchUtils.java",
                "line": 137,
                "column": 38
            },
            {
                "path": "src/cxf/rt/rs/extensions/search/src/main/java/org/apache/cxf/jaxrs/ext/search/SearchUtils.java",
                "line": 207,
                "column": 34
            },
            {
                "path": "src/cxf/rt/rs/extensions/search/src/main/java/org/apache/cxf/jaxrs/ext/search/fiql/FiqlParser.java",
                "line": 94,
                "column": 47
            },
            {
                "path": "src/cxf/rt/rs/extensions/search/src/main/java/org/apache/cxf/jaxrs/ext/search/fiql/FiqlParser.java",
                "line": 97,
                "column": 61
            },
            {
                "path": "src/cxf/rt/rs/extensions/search/src/main/java/org/apache/cxf/jaxrs/ext/search/jpa/AbstractJPATypedQueryVisitor.java",
                "line": 323,
                "column": 55
            },
            {
                "path": "src/cxf/rt/rs/extensions/search/src/main/java/org/apache/cxf/jaxrs/ext/search/sql/SQLPrinterVisitor.java",
                "line": 75,
                "column": 55
            },
            {
                "path": "src/cxf/rt/rs/extensions/search/src/main/java/org/apache/cxf/jaxrs/ext/search/visitor/AbstractSearchConditionVisitor.java",
                "line": 81,
                "column": 41
            },
            {
                "path": "src/cxf/rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/cdi/RestClientBean.java",
                "line": 233,
                "column": 63
            },
            {
                "path": "src/cxf/rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/cdi/RestClientBean.java",
                "line": 300,
                "column": 48
            },
            {
                "path": "src/cxf/rt/rs/security/cors/src/main/java/org/apache/cxf/rs/security/cors/CrossOriginResourceSharingFilter.java",
                "line": 484,
                "column": 48
            },
            {
                "path": "src/cxf/rt/rs/security/http-signature/src/main/java/org/apache/cxf/rs/security/httpsignature/DigestVerifier.java",
                "line": 55,
                "column": 63
            },
            {
                "path": "src/cxf/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/AbstractJweJsonWriterProvider.java",
                "line": 82,
                "column": 59
            },
            {
                "path": "src/cxf/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/AbstractJwsJsonWriterProvider.java",
                "line": 71,
                "column": 59
            },
            {
                "path": "src/cxf/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/JoseJaxrsUtils.java",
                "line": 61,
                "column": 49
            },
            {
                "path": "src/cxf/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/JwtAuthenticationFilter.java",
                "line": 32,
                "column": 59
            },
            {
                "path": "src/cxf/rt/rs/security/jose-parent/jose-jaxrs/src/main/java/org/apache/cxf/rs/security/jose/jaxrs/JwtTokenSecurityContext.java",
                "line": 51,
                "column": 44
            },
            {
                "path": "src/cxf/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/common/JoseUtils.java",
                "line": 57,
                "column": 37
            },
            {
                "path": "src/cxf/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
                "line": 342,
                "column": 42
            },
            {
                "path": "src/cxf/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/filters/AccessTokenIntrospectionClient.java",
                "line": 88,
                "column": 57
            },
            {
                "path": "src/cxf/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/filters/JwtAccessTokenValidator.java",
                "line": 97,
                "column": 42
            },
            {
                "path": "src/cxf/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/filters/OAuthScopesFilter.java",
                "line": 152,
                "column": 80
            },
            {
                "path": "src/cxf/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/tokens/hawk/AbstractHawkAccessTokenValidator.java",
                "line": 100,
                "column": 50
            },
            {
                "path": "src/cxf/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/tokens/hawk/AbstractHawkAccessTokenValidator.java",
                "line": 103,
                "column": 53
            },
            {
                "path": "src/cxf/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/tokens/hawk/AbstractHawkAccessTokenValidator.java",
                "line": 104,
                "column": 84
            },
            {
                "path": "src/cxf/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/utils/AuthorizationUtils.java",
                "line": 54,
                "column": 47
            },
            {
                "path": "src/cxf/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/utils/AuthorizationUtils.java",
                "line": 75,
                "column": 51
            },
            {
                "path": "src/cxf/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/utils/JwtTokenUtils.java",
                "line": 81,
                "column": 42
            },
            {
                "path": "src/cxf/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/utils/OAuthUtils.java",
                "line": 254,
                "column": 55
            },
            {
                "path": "src/cxf/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/utils/crypto/ModelEncryptionSupport.java",
                "line": 282,
                "column": 52
            },
            {
                "path": "src/cxf/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/utils/crypto/ModelEncryptionSupport.java",
                "line": 498,
                "column": 51
            },
            {
                "path": "src/cxf/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/utils/crypto/ModelEncryptionSupport.java",
                "line": 505,
                "column": 41
            },
            {
                "path": "src/cxf/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/utils/crypto/ModelEncryptionSupport.java",
                "line": 512,
                "column": 31
            },
            {
                "path": "src/cxf/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/utils/crypto/ModelEncryptionSupport.java",
                "line": 518,
                "column": 52
            },
            {
                "path": "src/cxf/rt/rs/security/sso/oidc/src/main/java/org/apache/cxf/rs/security/oidc/idp/OidcDynamicRegistrationService.java",
                "line": 53,
                "column": 86
            },
            {
                "path": "src/cxf/rt/rs/security/sso/oidc/src/main/java/org/apache/cxf/rs/security/oidc/rp/OidcClientCodeRequestFilter.java",
                "line": 62,
                "column": 65
            },
            {
                "path": "src/cxf/rt/rs/security/sso/oidc/src/main/java/org/apache/cxf/rs/security/oidc/utils/OidcUtils.java",
                "line": 115,
                "column": 54
            },
            {
                "path": "src/cxf/rt/rs/security/xml/src/main/java/org/apache/cxf/rs/security/saml/SamlHeaderInHandler.java",
                "line": 47,
                "column": 46
            },
            {
                "path": "src/cxf/rt/rs/security/xml/src/main/java/org/apache/cxf/rs/security/xml/AbstractXmlSigInHandler.java",
                "line": 321,
                "column": 59
            },
            {
                "path": "src/cxf/rt/rs/security/xml/src/main/java/org/apache/cxf/rs/security/xml/AbstractXmlSigInHandler.java",
                "line": 335,
                "column": 66
            },
            {
                "path": "src/cxf/rt/rs/security/xml/src/main/java/org/apache/cxf/rs/security/xml/AbstractXmlSigInHandler.java",
                "line": 339,
                "column": 59
            },
            {
                "path": "src/cxf/rt/rs/security/xml/src/main/java/org/apache/cxf/rs/security/xml/XmlSecInInterceptor.java",
                "line": 422,
                "column": 59
            },
            {
                "path": "src/cxf/rt/rs/security/xml/src/main/java/org/apache/cxf/rs/security/xml/XmlSecInInterceptor.java",
                "line": 436,
                "column": 66
            },
            {
                "path": "src/cxf/rt/rs/security/xml/src/main/java/org/apache/cxf/rs/security/xml/XmlSecInInterceptor.java",
                "line": 440,
                "column": 59
            },
            {
                "path": "src/cxf/rt/security-saml/src/main/java/org/apache/cxf/rt/security/saml/utils/SAMLUtils.java",
                "line": 152,
                "column": 78
            },
            {
                "path": "src/cxf/rt/transports/http-netty/netty-server/src/main/java/org/apache/cxf/transport/http/netty/server/util/Utils.java",
                "line": 162,
                "column": 54
            },
            {
                "path": "src/cxf/rt/transports/http-netty/netty-server/src/main/java/org/apache/cxf/transport/http/netty/server/util/Utils.java",
                "line": 163,
                "column": 63
            },
            {
                "path": "src/cxf/rt/transports/http-netty/netty-server/src/main/java/org/apache/cxf/transport/http/netty/server/util/Utils.java",
                "line": 167,
                "column": 39
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/http/AbstractHTTPDestination.java",
                "line": 169,
                "column": 50
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/http/Cookies.java",
                "line": 70,
                "column": 45
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/http/Cookies.java",
                "line": 72,
                "column": 47
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/http/Cookies.java",
                "line": 74,
                "column": 46
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/http/Cookies.java",
                "line": 83,
                "column": 41
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/http/PatternBuilder.java",
                "line": 51,
                "column": 32
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/http/osgi/ConfigAdminHttpConduitConfigurer.java",
                "line": 120,
                "column": 64
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/https/CertConstraints.java",
                "line": 63,
                "column": 48
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/AbstractHTTPServlet.java",
                "line": 185,
                "column": 46
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/AbstractHTTPServlet.java",
                "line": 187,
                "column": 46
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/AbstractHTTPServlet.java",
                "line": 200,
                "column": 47
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/AbstractHTTPServlet.java",
                "line": 202,
                "column": 49
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/AbstractHTTPServlet.java",
                "line": 487,
                "column": 59
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/AbstractHTTPServlet.java",
                "line": 495,
                "column": 79
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletDestination.java",
                "line": 75,
                "column": 50
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/servicelist/FormattedServiceListWriter.java",
                "line": 47,
                "column": 64
            },
            {
                "path": "src/cxf/rt/transports/jms/src/main/java/org/apache/cxf/transport/jms/JMSConduit.java",
                "line": 88,
                "column": 61
            },
            {
                "path": "src/cxf/rt/transports/jms/src/main/java/org/apache/cxf/transport/jms/uri/JMSURIParser.java",
                "line": 78,
                "column": 47
            },
            {
                "path": "src/cxf/rt/transports/websocket/src/main/java/org/apache/cxf/transport/websocket/atmosphere/DefaultProtocolInterceptor.java",
                "line": 81,
                "column": 47
            },
            {
                "path": "src/cxf/rt/transports/websocket/src/main/java/org/apache/cxf/transport/websocket/atmosphere/DefaultProtocolInterceptor.java",
                "line": 85,
                "column": 47
            },
            {
                "path": "src/cxf/rt/transports/websocket/src/main/java/org/apache/cxf/transport/websocket/atmosphere/DefaultProtocolInterceptor.java",
                "line": 91,
                "column": 52
            },
            {
                "path": "src/cxf/rt/transports/websocket/src/main/java/org/apache/cxf/transport/websocket/atmosphere/DefaultProtocolInterceptor.java",
                "line": 102,
                "column": 52
            },
            {
                "path": "src/cxf/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/persistence/jdbc/RMTxStore.java",
                "line": 250,
                "column": 43
            },
            {
                "path": "src/cxf/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/AbstractWSS4JStaxInterceptor.java",
                "line": 187,
                "column": 62
            },
            {
                "path": "src/cxf/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/AbstractWSS4JStaxInterceptor.java",
                "line": 192,
                "column": 64
            },
            {
                "path": "src/cxf/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/AbstractBindingPolicyValidator.java",
                "line": 121,
                "column": 54
            },
            {
                "path": "src/cxf/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyvalidators/LayoutPolicyValidator.java",
                "line": 140,
                "column": 50
            },
            {
                "path": "src/cxf/rt/ws/transfer/src/main/java/org/apache/cxf/ws/transfer/dialect/fragment/FragmentDialect.java",
                "line": 69,
                "column": 25
            },
            {
                "path": "src/cxf/rt/ws/transfer/src/main/java/org/apache/cxf/ws/transfer/dialect/fragment/FragmentDialect.java",
                "line": 72,
                "column": 25
            },
            {
                "path": "src/cxf/rt/ws/transfer/src/main/java/org/apache/cxf/ws/transfer/dialect/fragment/FragmentDialect.java",
                "line": 254,
                "column": 38
            },
            {
                "path": "src/cxf/rt/ws/transfer/src/main/java/org/apache/cxf/ws/transfer/dialect/fragment/language/FragmentDialectLanguageQName.java",
                "line": 46,
                "column": 44
            },
            {
                "path": "src/cxf/services/sts/sts-core/src/main/java/org/apache/cxf/sts/claims/LdapGroupClaimsHandler.java",
                "line": 261,
                "column": 34
            },
            {
                "path": "src/cxf/services/sts/sts-core/src/main/java/org/apache/cxf/sts/claims/LdapGroupClaimsHandler.java",
                "line": 262,
                "column": 49
            },
            {
                "path": "src/cxf/services/sts/sts-core/src/main/java/org/apache/cxf/sts/claims/LdapGroupClaimsHandler.java",
                "line": 269,
                "column": 63
            },
            {
                "path": "src/cxf/services/sts/sts-core/src/main/java/org/apache/cxf/sts/claims/LdapGroupClaimsHandler.java",
                "line": 269,
                "column": 38
            },
            {
                "path": "src/cxf/services/sts/sts-core/src/main/java/org/apache/cxf/sts/claims/LdapGroupClaimsHandler.java",
                "line": 270,
                "column": 44
            },
            {
                "path": "src/cxf/services/sts/sts-core/src/main/java/org/apache/cxf/sts/claims/LdapGroupClaimsHandler.java",
                "line": 285,
                "column": 63
            },
            {
                "path": "src/cxf/services/sts/sts-core/src/main/java/org/apache/cxf/sts/claims/mapper/ClaimUtils.java",
                "line": 198,
                "column": 63
            },
            {
                "path": "src/cxf/services/sts/sts-core/src/main/java/org/apache/cxf/sts/service/StaticService.java",
                "line": 118,
                "column": 58
            },
            {
                "path": "src/cxf/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/realm/CertConstraintsParser.java",
                "line": 54,
                "column": 59
            },
            {
                "path": "src/cxf/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/validator/jwt/DefaultJWTRoleParser.java",
                "line": 58,
                "column": 40
            },
            {
                "path": "src/cxf/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/validator/jwt/JWTTokenValidator.java",
                "line": 109,
                "column": 25
            },
            {
                "path": "src/cxf/services/ws-discovery/ws-discovery-api/src/main/java/org/apache/cxf/ws/discovery/internal/WSDiscoveryServiceImpl.java",
                "line": 338,
                "column": 52
            },
            {
                "path": "src/cxf/services/ws-discovery/ws-discovery-api/src/main/java/org/apache/cxf/ws/discovery/internal/WSDiscoveryServiceImpl.java",
                "line": 339,
                "column": 53
            },
            {
                "path": "src/cxf/services/xkms/xkms-common/src/main/java/org/apache/cxf/xkms/handlers/DnUtils.java",
                "line": 33,
                "column": 43
            },
            {
                "path": "src/cxf/services/xkms/xkms-common/src/main/java/org/apache/cxf/xkms/handlers/DnUtils.java",
                "line": 62,
                "column": 32
            },
            {
                "path": "src/cxf/services/xkms/xkms-common/src/main/java/org/apache/cxf/xkms/handlers/DnUtils.java",
                "line": 76,
                "column": 31
            },
            {
                "path": "src/cxf/services/xkms/xkms-common/src/main/java/org/apache/cxf/xkms/handlers/DnUtils.java",
                "line": 97,
                "column": 56
            },
            {
                "path": "src/cxf/services/xkms/xkms-x509-handlers/src/main/java/org/apache/cxf/xkms/x509/repo/file/FileCertificateRepo.java",
                "line": 275,
                "column": 45
            },
            {
                "path": "src/cxf/services/xkms/xkms-x509-handlers/src/main/java/org/apache/cxf/xkms/x509/repo/file/FileCertificateRepo.java",
                "line": 285,
                "column": 74
            },
            {
                "path": "src/cxf/services/xkms/xkms-x509-handlers/src/main/java/org/apache/cxf/xkms/x509/repo/file/FileCertificateRepo.java",
                "line": 287,
                "column": 87
            },
            {
                "path": "src/cxf/services/xkms/xkms-x509-repo-ldap/src/main/java/org/apache/cxf/xkms/x509/repo/ldap/LdapCertificateRepo.java",
                "line": 157,
                "column": 41
            },
            {
                "path": "src/cxf/services/xkms/xkms-x509-repo-ldap/src/main/java/org/apache/cxf/xkms/x509/repo/ldap/LdapCertificateRepo.java",
                "line": 158,
                "column": 43
            },
            {
                "path": "src/cxf/services/xkms/xkms-x509-repo-ldap/src/main/java/org/apache/cxf/xkms/x509/repo/ldap/LdapCertificateRepo.java",
                "line": 228,
                "column": 50
            },
            {
                "path": "src/cxf/tools/common/src/main/java/org/apache/cxf/tools/common/VelocityWriter.java",
                "line": 41,
                "column": 40
            },
            {
                "path": "src/cxf/tools/common/src/main/java/org/apache/cxf/tools/common/VelocityWriter.java",
                "line": 44,
                "column": 40
            },
            {
                "path": "src/cxf/tools/common/src/main/java/org/apache/cxf/tools/common/VelocityWriter.java",
                "line": 57,
                "column": 40
            },
            {
                "path": "src/cxf/tools/common/src/main/java/org/apache/cxf/tools/common/VelocityWriter.java",
                "line": 60,
                "column": 40
            },
            {
                "path": "src/cxf/tools/common/src/main/java/org/apache/cxf/tools/common/model/JavaInterface.java",
                "line": 262,
                "column": 38
            },
            {
                "path": "src/cxf/tools/common/src/main/java/org/apache/cxf/tools/common/model/JavaInterface.java",
                "line": 269,
                "column": 38
            },
            {
                "path": "src/cxf/tools/common/src/main/java/org/apache/cxf/tools/common/toolspec/parser/CommandLineParser.java",
                "line": 234,
                "column": 45
            },
            {
                "path": "src/cxf/tools/corba/src/main/java/org/apache/cxf/tools/corba/idlpreprocessor/IdlPreprocessorReader.java",
                "line": 310,
                "column": 40
            },
            {
                "path": "src/cxf/tools/corba/src/main/java/org/apache/cxf/tools/corba/processors/idl/IDLToWSDLProcessor.java",
                "line": 433,
                "column": 86
            },
            {
                "path": "src/cxf/tools/corba/src/main/java/org/apache/cxf/tools/corba/processors/idl/IDLToWSDLProcessor.java",
                "line": 470,
                "column": 64
            },
            {
                "path": "src/cxf/tools/corba/src/main/java/org/apache/cxf/tools/corba/processors/idl/ModuleToNSMapper.java",
                "line": 130,
                "column": 33
            },
            {
                "path": "src/cxf/tools/validator/src/main/java/org/apache/cxf/tools/validator/internal/ValidatorUtil.java",
                "line": 163,
                "column": 54
            },
            {
                "path": "src/cxf/tools/wadlto/jaxrs/src/main/java/org/apache/cxf/tools/wadlto/jaxb/CustomizationParser.java",
                "line": 98,
                "column": 50
            },
            {
                "path": "src/cxf/tools/wadlto/jaxrs/src/main/java/org/apache/cxf/tools/wadlto/jaxrs/JAXRSContainer.java",
                "line": 222,
                "column": 54
            },
            {
                "path": "src/cxf/tools/wadlto/jaxrs/src/main/java/org/apache/cxf/tools/wadlto/jaxrs/SourceGenerator.java",
                "line": 444,
                "column": 40
            },
            {
                "path": "src/cxf/tools/wadlto/jaxrs/src/main/java/org/apache/cxf/tools/wadlto/jaxrs/SourceGenerator.java",
                "line": 445,
                "column": 45
            },
            {
                "path": "src/cxf/tools/wadlto/jaxrs/src/main/java/org/apache/cxf/tools/wadlto/jaxrs/SourceGenerator.java",
                "line": 468,
                "column": 85
            },
            {
                "path": "src/cxf/tools/wadlto/jaxrs/src/main/java/org/apache/cxf/tools/wadlto/jaxrs/SourceGenerator.java",
                "line": 473,
                "column": 83
            },
            {
                "path": "src/cxf/tools/wadlto/jaxrs/src/main/java/org/apache/cxf/tools/wadlto/jaxrs/SourceGenerator.java",
                "line": 692,
                "column": 56
            },
            {
                "path": "src/cxf/tools/wadlto/jaxrs/src/main/java/org/apache/cxf/tools/wadlto/jaxrs/SourceGenerator.java",
                "line": 696,
                "column": 86
            },
            {
                "path": "src/cxf/tools/wadlto/jaxrs/src/main/java/org/apache/cxf/tools/wadlto/jaxrs/SourceGenerator.java",
                "line": 754,
                "column": 88
            },
            {
                "path": "src/cxf/tools/wadlto/jaxrs/src/main/java/org/apache/cxf/tools/wadlto/jaxrs/SourceGenerator.java",
                "line": 754,
                "column": 66
            },
            {
                "path": "src/cxf/tools/wadlto/jaxrs/src/main/java/org/apache/cxf/tools/wadlto/jaxrs/SourceGenerator.java",
                "line": 1150,
                "column": 52
            },
            {
                "path": "src/cxf/tools/wadlto/jaxrs/src/main/java/org/apache/cxf/tools/wadlto/jaxrs/SourceGenerator.java",
                "line": 1163,
                "column": 83
            },
            {
                "path": "src/cxf/tools/wadlto/jaxrs/src/main/java/org/apache/cxf/tools/wadlto/jaxrs/SourceGenerator.java",
                "line": 1257,
                "column": 45
            },
            {
                "path": "src/cxf/tools/wadlto/jaxrs/src/main/java/org/apache/cxf/tools/wadlto/jaxrs/SourceGenerator.java",
                "line": 1366,
                "column": 70
            },
            {
                "path": "src/cxf/tools/wadlto/jaxrs/src/main/java/org/apache/cxf/tools/wadlto/jaxrs/SourceGenerator.java",
                "line": 1430,
                "column": 35
            },
            {
                "path": "src/cxf/tools/wadlto/jaxrs/src/main/java/org/apache/cxf/tools/wadlto/jaxrs/SourceGenerator.java",
                "line": 1456,
                "column": 36
            },
            {
                "path": "src/cxf/tools/wadlto/jaxrs/src/main/java/org/apache/cxf/tools/wadlto/jaxrs/SourceGenerator.java",
                "line": 1468,
                "column": 47
            },
            {
                "path": "src/cxf/tools/wadlto/jaxrs/src/main/java/org/apache/cxf/tools/wadlto/jaxrs/SourceGenerator.java",
                "line": 1542,
                "column": 46
            },
            {
                "path": "src/cxf/tools/wadlto/jaxrs/src/main/java/org/apache/cxf/tools/wadlto/jaxrs/SourceGenerator.java",
                "line": 1572,
                "column": 63
            },
            {
                "path": "src/cxf/tools/wadlto/jaxrs/src/main/java/org/apache/cxf/tools/wadlto/jaxrs/SourceGenerator.java",
                "line": 1580,
                "column": 90
            },
            {
                "path": "src/cxf/tools/wsdlto/core/src/main/java/org/apache/cxf/tools/wsdlto/core/RandomValueProvider.java",
                "line": 139,
                "column": 30
            },
            {
                "path": "src/cxf/tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/processor/internal/ProcessorUtil.java",
                "line": 202,
                "column": 36
            },
            {
                "path": "src/cxf/tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/processor/internal/ProcessorUtil.java",
                "line": 287,
                "column": 53
            }
        ],
        "Script Engine Injection": [
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/bus/blueprint/ConfigurerImpl.java",
                "line": 166,
                "column": 37
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/bus/blueprint/ConfigurerImpl.java",
                "line": 166,
                "column": 46
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerImpl.java",
                "line": 275,
                "column": 29
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerImpl.java",
                "line": 275,
                "column": 43
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/bus/managers/BindingFactoryManagerImpl.java",
                "line": 116,
                "column": 86
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/bus/managers/BindingFactoryManagerImpl.java",
                "line": 116,
                "column": 95
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBeanLocator.java",
                "line": 107,
                "column": 24
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBeanLocator.java",
                "line": 107,
                "column": 33
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBeanLocator.java",
                "line": 170,
                "column": 24
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBeanLocator.java",
                "line": 170,
                "column": 33
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBeanLocator.java",
                "line": 174,
                "column": 21
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBeanLocator.java",
                "line": 174,
                "column": 30
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBeanLocator.java",
                "line": 283,
                "column": 24
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBeanLocator.java",
                "line": 283,
                "column": 63
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBeanLocator.java",
                "line": 289,
                "column": 33
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBeanLocator.java",
                "line": 289,
                "column": 42
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBus.java",
                "line": 139,
                "column": 29
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBus.java",
                "line": 139,
                "column": 65
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBus.java",
                "line": 140,
                "column": 36
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBus.java",
                "line": 140,
                "column": 77
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/injection/ResourceInjector.java",
                "line": 290,
                "column": 17
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/injection/ResourceInjector.java",
                "line": 290,
                "column": 31
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/injection/ResourceInjector.java",
                "line": 294,
                "column": 17
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/injection/ResourceInjector.java",
                "line": 294,
                "column": 37
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/injection/ResourceInjector.java",
                "line": 347,
                "column": 21
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/injection/ResourceInjector.java",
                "line": 347,
                "column": 35
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/injection/ResourceInjector.java",
                "line": 367,
                "column": 21
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/injection/ResourceInjector.java",
                "line": 367,
                "column": 35
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/jaxb/EscapeHandlerInvocationHandler.java",
                "line": 40,
                "column": 23
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/jaxb/EscapeHandlerInvocationHandler.java",
                "line": 40,
                "column": 37
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/jaxb/JAXBContextCache.java",
                "line": 319,
                "column": 49
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/jaxb/JAXBContextCache.java",
                "line": 319,
                "column": 58
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/jaxb/JAXBUtils.java",
                "line": 667,
                "column": 27
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/jaxb/JAXBUtils.java",
                "line": 667,
                "column": 36
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/jaxb/JAXBUtils.java",
                "line": 677,
                "column": 29
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/jaxb/JAXBUtils.java",
                "line": 677,
                "column": 87
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/jaxb/JAXBUtils.java",
                "line": 706,
                "column": 22
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/jaxb/JAXBUtils.java",
                "line": 706,
                "column": 67
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/jaxb/JAXBUtils.java",
                "line": 709,
                "column": 22
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/jaxb/JAXBUtils.java",
                "line": 709,
                "column": 67
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/logging/JDKBugHacks.java",
                "line": 128,
                "column": 40
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/logging/JDKBugHacks.java",
                "line": 128,
                "column": 54
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/logging/JDKBugHacks.java",
                "line": 132,
                "column": 29
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/logging/JDKBugHacks.java",
                "line": 132,
                "column": 43
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/logging/JDKBugHacks.java",
                "line": 147,
                "column": 25
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/logging/JDKBugHacks.java",
                "line": 147,
                "column": 39
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/logging/LogUtils.java",
                "line": 103,
                "column": 37
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/logging/LogUtils.java",
                "line": 103,
                "column": 79
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/ASMHelperImpl.java",
                "line": 243,
                "column": 41
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/ASMHelperImpl.java",
                "line": 243,
                "column": 81
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/ASMHelperImpl.java",
                "line": 234,
                "column": 29
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/ASMHelperImpl.java",
                "line": 234,
                "column": 68
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/ExtensionInvocationHandler.java",
                "line": 34,
                "column": 20
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/ExtensionInvocationHandler.java",
                "line": 34,
                "column": 34
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/ExtensionInvocationHandler.java",
                "line": 39,
                "column": 16
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/ExtensionInvocationHandler.java",
                "line": 39,
                "column": 25
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/ReflectionInvokationHandler.java",
                "line": 88,
                "column": 35
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/ReflectionInvokationHandler.java",
                "line": 88,
                "column": 44
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/ReflectionInvokationHandler.java",
                "line": 104,
                "column": 47
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/ReflectionInvokationHandler.java",
                "line": 104,
                "column": 57
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/ReflectionInvokationHandler.java",
                "line": 125,
                "column": 46
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/ReflectionInvokationHandler.java",
                "line": 125,
                "column": 86
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/ReflectionInvokationHandler.java",
                "line": 127,
                "column": 31
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/ReflectionInvokationHandler.java",
                "line": 127,
                "column": 70
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/ReflectionUtil.java",
                "line": 234,
                "column": 66
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/ReflectionUtil.java",
                "line": 234,
                "column": 106
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/configuration/spring/ConfigurerImpl.java",
                "line": 233,
                "column": 37
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/configuration/spring/ConfigurerImpl.java",
                "line": 233,
                "column": 46
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/databinding/AbstractWrapperHelper.java",
                "line": 82,
                "column": 16
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/databinding/AbstractWrapperHelper.java",
                "line": 82,
                "column": 30
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/databinding/AbstractWrapperHelper.java",
                "line": 101,
                "column": 64
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/databinding/AbstractWrapperHelper.java",
                "line": 101,
                "column": 85
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/databinding/AbstractWrapperHelper.java",
                "line": 105,
                "column": 29
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/databinding/AbstractWrapperHelper.java",
                "line": 105,
                "column": 50
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/databinding/AbstractWrapperHelper.java",
                "line": 114,
                "column": 21
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/databinding/AbstractWrapperHelper.java",
                "line": 114,
                "column": 42
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/endpoint/ClientImpl.java",
                "line": 223,
                "column": 48
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/endpoint/ClientImpl.java",
                "line": 223,
                "column": 97
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/helpers/DOMUtils.java",
                "line": 774,
                "column": 34
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/helpers/DOMUtils.java",
                "line": 774,
                "column": 78
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/interceptor/ClientFaultConverter.java",
                "line": 368,
                "column": 21
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/interceptor/ClientFaultConverter.java",
                "line": 368,
                "column": 31
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/interceptor/ClientFaultConverter.java",
                "line": 368,
                "column": 34
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/interceptor/ClientFaultConverter.java",
                "line": 368,
                "column": 43
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/interceptor/FaultOutInterceptor.java",
                "line": 135,
                "column": 24
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/interceptor/FaultOutInterceptor.java",
                "line": 135,
                "column": 38
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/interceptor/security/DefaultSecurityContext.java",
                "line": 135,
                "column": 85
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/interceptor/security/DefaultSecurityContext.java",
                "line": 135,
                "column": 94
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/interceptor/security/NameDigestPasswordCallbackHandler.java",
                "line": 107,
                "column": 17
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/interceptor/security/NameDigestPasswordCallbackHandler.java",
                "line": 107,
                "column": 31
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/interceptor/security/NamePasswordCallbackHandler.java",
                "line": 99,
                "column": 17
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/interceptor/security/NamePasswordCallbackHandler.java",
                "line": 99,
                "column": 31
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/interceptor/security/SecureAnnotationsInterceptor.java",
                "line": 113,
                "column": 48
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/interceptor/security/SecureAnnotationsInterceptor.java",
                "line": 113,
                "column": 67
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/service/invoker/AbstractInvoker.java",
                "line": 179,
                "column": 16
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/service/invoker/AbstractInvoker.java",
                "line": 179,
                "column": 25
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/staxutils/validation/Stax2ValidationUtils.java",
                "line": 192,
                "column": 49
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/staxutils/validation/Stax2ValidationUtils.java",
                "line": 192,
                "column": 63
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/transport/TransportFinder.java",
                "line": 154,
                "column": 70
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/transport/TransportFinder.java",
                "line": 154,
                "column": 79
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/workqueue/AutomaticWorkQueueImpl.java",
                "line": 441,
                "column": 25
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/workqueue/AutomaticWorkQueueImpl.java",
                "line": 441,
                "column": 78
            },
            {
                "path": "src/cxf/distribution/src/main/release/samples/java_first_jms/src/main/java/demo/server/ServerJMS.java",
                "line": 91,
                "column": 9
            },
            {
                "path": "src/cxf/distribution/src/main/release/samples/java_first_jms/src/main/java/demo/server/ServerJMS.java",
                "line": 91,
                "column": 35
            },
            {
                "path": "src/cxf/distribution/src/main/release/samples/java_first_jms/src/main/java/demo/server/ServerJMS.java",
                "line": 93,
                "column": 9
            },
            {
                "path": "src/cxf/distribution/src/main/release/samples/java_first_jms/src/main/java/demo/server/ServerJMS.java",
                "line": 93,
                "column": 33
            },
            {
                "path": "src/cxf/distribution/src/main/release/samples/java_first_jms/src/main/java/demo/server/ServerJMS.java",
                "line": 95,
                "column": 9
            },
            {
                "path": "src/cxf/distribution/src/main/release/samples/java_first_jms/src/main/java/demo/server/ServerJMS.java",
                "line": 95,
                "column": 28
            },
            {
                "path": "src/cxf/distribution/src/main/release/samples/wsdl_first_dynamic_client/src/main/java/demo/hw/client/ComplexClient.java",
                "line": 95,
                "column": 9
            },
            {
                "path": "src/cxf/distribution/src/main/release/samples/wsdl_first_dynamic_client/src/main/java/demo/hw/client/ComplexClient.java",
                "line": 95,
                "column": 56
            },
            {
                "path": "src/cxf/distribution/src/main/release/samples/wsdl_first_dynamic_client/src/main/java/demo/hw/client/ComplexClient.java",
                "line": 97,
                "column": 9
            },
            {
                "path": "src/cxf/distribution/src/main/release/samples/wsdl_first_dynamic_client/src/main/java/demo/hw/client/ComplexClient.java",
                "line": 97,
                "column": 58
            },
            {
                "path": "src/cxf/distribution/src/main/release/samples/wsdl_first_dynamic_client/src/main/java/demo/hw/client/ComplexClient.java",
                "line": 103,
                "column": 29
            },
            {
                "path": "src/cxf/distribution/src/main/release/samples/wsdl_first_dynamic_client/src/main/java/demo/hw/client/ComplexClient.java",
                "line": 103,
                "column": 69
            },
            {
                "path": "src/cxf/distribution/src/main/release/samples/wsdl_first_dynamic_client/src/main/java/demo/hw/client/ComplexClient.java",
                "line": 107,
                "column": 36
            },
            {
                "path": "src/cxf/distribution/src/main/release/samples/wsdl_first_dynamic_client/src/main/java/demo/hw/client/ComplexClient.java",
                "line": 107,
                "column": 79
            },
            {
                "path": "src/cxf/integration/jca/src/main/java/org/apache/cxf/jca/cxf/handlers/InvokingInvocationHandler.java",
                "line": 65,
                "column": 20
            },
            {
                "path": "src/cxf/integration/jca/src/main/java/org/apache/cxf/jca/cxf/handlers/InvokingInvocationHandler.java",
                "line": 65,
                "column": 34
            },
            {
                "path": "src/cxf/integration/jca/src/main/java/org/apache/cxf/jca/cxf/handlers/ObjectMethodInvocationHandler.java",
                "line": 57,
                "column": 23
            },
            {
                "path": "src/cxf/integration/jca/src/main/java/org/apache/cxf/jca/cxf/handlers/ObjectMethodInvocationHandler.java",
                "line": 57,
                "column": 37
            },
            {
                "path": "src/cxf/integration/jca/src/main/java/org/apache/cxf/jca/inbound/DispatchMDBMessageListenerImpl.java",
                "line": 54,
                "column": 16
            },
            {
                "path": "src/cxf/integration/jca/src/main/java/org/apache/cxf/jca/inbound/DispatchMDBMessageListenerImpl.java",
                "line": 54,
                "column": 30
            },
            {
                "path": "src/cxf/integration/jca/src/main/java/org/apache/cxf/jca/outbound/ManagedConnectionImpl.java",
                "line": 359,
                "column": 24
            },
            {
                "path": "src/cxf/integration/jca/src/main/java/org/apache/cxf/jca/outbound/ManagedConnectionImpl.java",
                "line": 359,
                "column": 38
            },
            {
                "path": "src/cxf/integration/jca/src/main/java/org/apache/cxf/jca/servant/EJBInvoker.java",
                "line": 54,
                "column": 20
            },
            {
                "path": "src/cxf/integration/jca/src/main/java/org/apache/cxf/jca/servant/EJBInvoker.java",
                "line": 54,
                "column": 40
            },
            {
                "path": "src/cxf/integration/jca/src/main/java/org/apache/cxf/jca/servant/EJBInvoker.java",
                "line": 54,
                "column": 46
            },
            {
                "path": "src/cxf/maven-plugins/java2wadl-plugin/src/main/java/org/apache/cxf/maven_plugin/javatowadl/ParseJavaDocMojo.java",
                "line": 226,
                "column": 13
            },
            {
                "path": "src/cxf/maven-plugins/java2wadl-plugin/src/main/java/org/apache/cxf/maven_plugin/javatowadl/ParseJavaDocMojo.java",
                "line": 226,
                "column": 22
            },
            {
                "path": "src/cxf/maven-plugins/java2wadl-plugin/src/main/java/org/apache/cxf/maven_plugin/javatowadl/ParseJavaDocMojo.java",
                "line": 226,
                "column": 28
            },
            {
                "path": "src/cxf/rt/bindings/corba/src/main/java/org/apache/cxf/binding/corba/interceptors/CorbaStreamFaultOutInterceptor.java",
                "line": 249,
                "column": 24
            },
            {
                "path": "src/cxf/rt/bindings/corba/src/main/java/org/apache/cxf/binding/corba/interceptors/CorbaStreamFaultOutInterceptor.java",
                "line": 249,
                "column": 43
            },
            {
                "path": "src/cxf/rt/bindings/corba/src/main/java/org/apache/cxf/binding/corba/runtime/CorbaObjectReader.java",
                "line": 344,
                "column": 33
            },
            {
                "path": "src/cxf/rt/bindings/corba/src/main/java/org/apache/cxf/binding/corba/runtime/CorbaObjectReader.java",
                "line": 344,
                "column": 42
            },
            {
                "path": "src/cxf/rt/bindings/corba/src/main/java/org/apache/cxf/binding/corba/runtime/CorbaObjectReader.java",
                "line": 344,
                "column": 63
            },
            {
                "path": "src/cxf/rt/bindings/corba/src/main/java/org/apache/cxf/binding/corba/runtime/CorbaObjectWriter.java",
                "line": 306,
                "column": 13
            },
            {
                "path": "src/cxf/rt/bindings/corba/src/main/java/org/apache/cxf/binding/corba/runtime/CorbaObjectWriter.java",
                "line": 306,
                "column": 22
            },
            {
                "path": "src/cxf/rt/bindings/corba/src/main/java/org/apache/cxf/binding/corba/runtime/CorbaObjectWriter.java",
                "line": 306,
                "column": 30
            },
            {
                "path": "src/cxf/rt/bindings/corba/src/main/java/org/apache/cxf/binding/corba/runtime/CorbaObjectWriter.java",
                "line": 306,
                "column": 55
            },
            {
                "path": "src/cxf/rt/bindings/corba/src/main/java/org/apache/cxf/binding/corba/runtime/CorbaObjectWriter.java",
                "line": 306,
                "column": 62
            },
            {
                "path": "src/cxf/rt/bindings/corba/src/main/java/org/apache/cxf/binding/corba/utils/OrbConfig.java",
                "line": 160,
                "column": 40
            },
            {
                "path": "src/cxf/rt/bindings/corba/src/main/java/org/apache/cxf/binding/corba/utils/OrbConfig.java",
                "line": 160,
                "column": 60
            },
            {
                "path": "src/cxf/rt/bindings/corba/src/main/java/org/apache/cxf/binding/corba/utils/OrbConfig.java",
                "line": 161,
                "column": 60
            },
            {
                "path": "src/cxf/rt/bindings/corba/src/main/java/org/apache/cxf/binding/corba/utils/OrbConfig.java",
                "line": 164,
                "column": 13
            },
            {
                "path": "src/cxf/rt/bindings/corba/src/main/java/org/apache/cxf/binding/corba/utils/OrbConfig.java",
                "line": 164,
                "column": 37
            },
            {
                "path": "src/cxf/rt/bindings/corba/src/main/java/org/apache/cxf/binding/corba/utils/OrbConfig.java",
                "line": 164,
                "column": 46
            },
            {
                "path": "src/cxf/rt/bindings/corba/src/main/java/org/apache/cxf/binding/corba/utils/OrbConfig.java",
                "line": 164,
                "column": 62
            },
            {
                "path": "src/cxf/rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/saaj/SAAJUtils.java",
                "line": 107,
                "column": 25
            },
            {
                "path": "src/cxf/rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/saaj/SAAJUtils.java",
                "line": 107,
                "column": 39
            },
            {
                "path": "src/cxf/rt/databinding/aegis/src/main/java/org/apache/cxf/aegis/type/basic/BeanType.java",
                "line": 288,
                "column": 62
            },
            {
                "path": "src/cxf/rt/databinding/aegis/src/main/java/org/apache/cxf/aegis/type/basic/BeanType.java",
                "line": 288,
                "column": 71
            },
            {
                "path": "src/cxf/rt/databinding/aegis/src/main/java/org/apache/cxf/aegis/type/basic/BeanType.java",
                "line": 301,
                "column": 17
            },
            {
                "path": "src/cxf/rt/databinding/aegis/src/main/java/org/apache/cxf/aegis/type/basic/BeanType.java",
                "line": 301,
                "column": 26
            },
            {
                "path": "src/cxf/rt/databinding/aegis/src/main/java/org/apache/cxf/aegis/type/basic/BeanType.java",
                "line": 458,
                "column": 20
            },
            {
                "path": "src/cxf/rt/databinding/aegis/src/main/java/org/apache/cxf/aegis/type/basic/BeanType.java",
                "line": 458,
                "column": 29
            },
            {
                "path": "src/cxf/rt/databinding/aegis/src/main/java/org/apache/cxf/aegis/type/java5/AnnotationReader.java",
                "line": 282,
                "column": 40
            },
            {
                "path": "src/cxf/rt/databinding/aegis/src/main/java/org/apache/cxf/aegis/type/java5/AnnotationReader.java",
                "line": 282,
                "column": 54
            },
            {
                "path": "src/cxf/rt/databinding/aegis/src/main/java/org/apache/cxf/aegis/type/java5/AnnotationReader.java",
                "line": 305,
                "column": 36
            },
            {
                "path": "src/cxf/rt/databinding/aegis/src/main/java/org/apache/cxf/aegis/type/java5/AnnotationReader.java",
                "line": 305,
                "column": 50
            },
            {
                "path": "src/cxf/rt/databinding/aegis/src/main/java/org/apache/cxf/aegis/type/java5/AnnotationReader.java",
                "line": 334,
                "column": 40
            },
            {
                "path": "src/cxf/rt/databinding/aegis/src/main/java/org/apache/cxf/aegis/type/java5/AnnotationReader.java",
                "line": 334,
                "column": 84
            },
            {
                "path": "src/cxf/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java",
                "line": 463,
                "column": 69
            },
            {
                "path": "src/cxf/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java",
                "line": 463,
                "column": 78
            },
            {
                "path": "src/cxf/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java",
                "line": 612,
                "column": 29
            },
            {
                "path": "src/cxf/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java",
                "line": 612,
                "column": 39
            },
            {
                "path": "src/cxf/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java",
                "line": 971,
                "column": 43
            },
            {
                "path": "src/cxf/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java",
                "line": 973,
                "column": 33
            },
            {
                "path": "src/cxf/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java",
                "line": 994,
                "column": 54
            },
            {
                "path": "src/cxf/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java",
                "line": 994,
                "column": 103
            },
            {
                "path": "src/cxf/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBWrapperHelper.java",
                "line": 58,
                "column": 49
            },
            {
                "path": "src/cxf/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBWrapperHelper.java",
                "line": 58,
                "column": 63
            },
            {
                "path": "src/cxf/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBWrapperHelper.java",
                "line": 61,
                "column": 16
            },
            {
                "path": "src/cxf/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBWrapperHelper.java",
                "line": 61,
                "column": 30
            },
            {
                "path": "src/cxf/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBWrapperHelper.java",
                "line": 68,
                "column": 22
            },
            {
                "path": "src/cxf/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBWrapperHelper.java",
                "line": 68,
                "column": 54
            },
            {
                "path": "src/cxf/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/Utils.java",
                "line": 240,
                "column": 50
            },
            {
                "path": "src/cxf/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/Utils.java",
                "line": 240,
                "column": 59
            },
            {
                "path": "src/cxf/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/Utils.java",
                "line": 240,
                "column": 70
            },
            {
                "path": "src/cxf/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/Utils.java",
                "line": 240,
                "column": 79
            },
            {
                "path": "src/cxf/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/Utils.java",
                "line": 254,
                "column": 9
            },
            {
                "path": "src/cxf/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/Utils.java",
                "line": 254,
                "column": 23
            },
            {
                "path": "src/cxf/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/io/DataWriterImpl.java",
                "line": 209,
                "column": 13
            },
            {
                "path": "src/cxf/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/io/DataWriterImpl.java",
                "line": 209,
                "column": 22
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/tl/ThreadLocalInvocationHandler.java",
                "line": 48,
                "column": 20
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/tl/ThreadLocalInvocationHandler.java",
                "line": 48,
                "column": 29
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/ProviderFactory.java",
                "line": 1021,
                "column": 13
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/ProviderFactory.java",
                "line": 1021,
                "column": 22
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/XSLTJaxbProvider.java",
                "line": 295,
                "column": 43
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/XSLTJaxbProvider.java",
                "line": 295,
                "column": 96
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/AnnotationUtils.java",
                "line": 115,
                "column": 69
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/AnnotationUtils.java",
                "line": 115,
                "column": 91
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java",
                "line": 384,
                "column": 13
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java",
                "line": 384,
                "column": 35
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java",
                "line": 409,
                "column": 20
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java",
                "line": 409,
                "column": 42
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java",
                "line": 629,
                "column": 36
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java",
                "line": 629,
                "column": 45
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java",
                "line": 1451,
                "column": 17
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java",
                "line": 1451,
                "column": 31
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java",
                "line": 1507,
                "column": 20
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java",
                "line": 1507,
                "column": 29
            },
            {
                "path": "src/cxf/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/JaxWsClientProxy.java",
                "line": 118,
                "column": 24
            },
            {
                "path": "src/cxf/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/JaxWsClientProxy.java",
                "line": 118,
                "column": 38
            },
            {
                "path": "src/cxf/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/JaxWsClientProxy.java",
                "line": 120,
                "column": 24
            },
            {
                "path": "src/cxf/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/JaxWsClientProxy.java",
                "line": 120,
                "column": 38
            },
            {
                "path": "src/cxf/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/handler/HandlerChainBuilder.java",
                "line": 202,
                "column": 13
            },
            {
                "path": "src/cxf/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/handler/HandlerChainBuilder.java",
                "line": 202,
                "column": 25
            },
            {
                "path": "src/cxf/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/interceptors/SwAOutInterceptor.java",
                "line": 120,
                "column": 33
            },
            {
                "path": "src/cxf/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/interceptors/SwAOutInterceptor.java",
                "line": 120,
                "column": 42
            },
            {
                "path": "src/cxf/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/interceptors/WebFaultOutInterceptor.java",
                "line": 142,
                "column": 29
            },
            {
                "path": "src/cxf/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/interceptors/WebFaultOutInterceptor.java",
                "line": 142,
                "column": 43
            },
            {
                "path": "src/cxf/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/interceptors/WebFaultOutInterceptor.java",
                "line": 225,
                "column": 33
            },
            {
                "path": "src/cxf/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/interceptors/WebFaultOutInterceptor.java",
                "line": 225,
                "column": 43
            },
            {
                "path": "src/cxf/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/interceptors/WebFaultOutInterceptor.java",
                "line": 225,
                "column": 48
            },
            {
                "path": "src/cxf/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/interceptors/WebFaultOutInterceptor.java",
                "line": 225,
                "column": 57
            },
            {
                "path": "src/cxf/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/spring/JaxWsWebServicePublisherBeanPostProcessor.java",
                "line": 111,
                "column": 26
            },
            {
                "path": "src/cxf/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/spring/JaxWsWebServicePublisherBeanPostProcessor.java",
                "line": 111,
                "column": 53
            },
            {
                "path": "src/cxf/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/support/JaxWsEndpointImpl.java",
                "line": 409,
                "column": 24
            },
            {
                "path": "src/cxf/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/support/JaxWsEndpointImpl.java",
                "line": 409,
                "column": 71
            },
            {
                "path": "src/cxf/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/support/JaxWsServiceConfiguration.java",
                "line": 436,
                "column": 24
            },
            {
                "path": "src/cxf/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/support/JaxWsServiceConfiguration.java",
                "line": 436,
                "column": 51
            },
            {
                "path": "src/cxf/rt/frontend/simple/src/main/java/org/apache/cxf/endpoint/dynamic/DynamicClientFactory.java",
                "line": 716,
                "column": 48
            },
            {
                "path": "src/cxf/rt/frontend/simple/src/main/java/org/apache/cxf/endpoint/dynamic/DynamicClientFactory.java",
                "line": 716,
                "column": 62
            },
            {
                "path": "src/cxf/rt/frontend/simple/src/main/java/org/apache/cxf/endpoint/dynamic/DynamicClientFactory.java",
                "line": 839,
                "column": 21
            },
            {
                "path": "src/cxf/rt/frontend/simple/src/main/java/org/apache/cxf/endpoint/dynamic/DynamicClientFactory.java",
                "line": 839,
                "column": 30
            },
            {
                "path": "src/cxf/rt/frontend/simple/src/main/java/org/apache/cxf/frontend/ClientProxy.java",
                "line": 64,
                "column": 20
            },
            {
                "path": "src/cxf/rt/frontend/simple/src/main/java/org/apache/cxf/frontend/ClientProxy.java",
                "line": 64,
                "column": 34
            },
            {
                "path": "src/cxf/rt/frontend/simple/src/main/java/org/apache/cxf/frontend/ClientProxy.java",
                "line": 66,
                "column": 20
            },
            {
                "path": "src/cxf/rt/frontend/simple/src/main/java/org/apache/cxf/frontend/ClientProxy.java",
                "line": 66,
                "column": 34
            },
            {
                "path": "src/cxf/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/ClientProxyImpl.java",
                "line": 249,
                "column": 43
            },
            {
                "path": "src/cxf/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/ClientProxyImpl.java",
                "line": 250,
                "column": 25
            },
            {
                "path": "src/cxf/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/ClientProxyImpl.java",
                "line": 274,
                "column": 20
            },
            {
                "path": "src/cxf/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/ClientProxyImpl.java",
                "line": 274,
                "column": 29
            },
            {
                "path": "src/cxf/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/ClientProxyImpl.java",
                "line": 589,
                "column": 34
            },
            {
                "path": "src/cxf/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/ClientProxyImpl.java",
                "line": 589,
                "column": 48
            },
            {
                "path": "src/cxf/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/ClientProxyImpl.java",
                "line": 666,
                "column": 48
            },
            {
                "path": "src/cxf/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/ClientProxyImpl.java",
                "line": 666,
                "column": 62
            },
            {
                "path": "src/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java",
                "line": 1016,
                "column": 41
            },
            {
                "path": "src/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java",
                "line": 1016,
                "column": 50
            },
            {
                "path": "src/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java",
                "line": 1019,
                "column": 38
            },
            {
                "path": "src/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java",
                "line": 1019,
                "column": 47
            },
            {
                "path": "src/cxf/rt/rs/extensions/providers/src/main/java/org/apache/cxf/jaxrs/provider/atom/AtomPojoProvider.java",
                "line": 226,
                "column": 26
            },
            {
                "path": "src/cxf/rt/rs/extensions/providers/src/main/java/org/apache/cxf/jaxrs/provider/atom/AtomPojoProvider.java",
                "line": 226,
                "column": 35
            },
            {
                "path": "src/cxf/rt/rs/extensions/providers/src/main/java/org/apache/cxf/jaxrs/provider/atom/AtomPojoProvider.java",
                "line": 462,
                "column": 31
            },
            {
                "path": "src/cxf/rt/rs/extensions/providers/src/main/java/org/apache/cxf/jaxrs/provider/atom/AtomPojoProvider.java",
                "line": 462,
                "column": 40
            },
            {
                "path": "src/cxf/rt/rs/extensions/providers/src/main/java/org/apache/cxf/jaxrs/provider/atom/AtomPojoProvider.java",
                "line": 640,
                "column": 13
            },
            {
                "path": "src/cxf/rt/rs/extensions/providers/src/main/java/org/apache/cxf/jaxrs/provider/atom/AtomPojoProvider.java",
                "line": 640,
                "column": 22
            },
            {
                "path": "src/cxf/rt/rs/extensions/search/src/main/java/org/apache/cxf/jaxrs/ext/search/AbstractSearchConditionParser.java",
                "line": 168,
                "column": 25
            },
            {
                "path": "src/cxf/rt/rs/extensions/search/src/main/java/org/apache/cxf/jaxrs/ext/search/AbstractSearchConditionParser.java",
                "line": 168,
                "column": 40
            },
            {
                "path": "src/cxf/rt/rs/extensions/search/src/main/java/org/apache/cxf/jaxrs/ext/search/AbstractSearchConditionParser.java",
                "line": 234,
                "column": 13
            },
            {
                "path": "src/cxf/rt/rs/extensions/search/src/main/java/org/apache/cxf/jaxrs/ext/search/AbstractSearchConditionParser.java",
                "line": 234,
                "column": 28
            },
            {
                "path": "src/cxf/rt/rs/extensions/search/src/main/java/org/apache/cxf/jaxrs/ext/search/Beanspector.java",
                "line": 166,
                "column": 13
            },
            {
                "path": "src/cxf/rt/rs/extensions/search/src/main/java/org/apache/cxf/jaxrs/ext/search/Beanspector.java",
                "line": 166,
                "column": 27
            },
            {
                "path": "src/cxf/rt/rs/extensions/search/src/main/java/org/apache/cxf/jaxrs/ext/search/Beanspector.java",
                "line": 185,
                "column": 20
            },
            {
                "path": "src/cxf/rt/rs/extensions/search/src/main/java/org/apache/cxf/jaxrs/ext/search/Beanspector.java",
                "line": 185,
                "column": 34
            },
            {
                "path": "src/cxf/rt/rs/extensions/search/src/main/java/org/apache/cxf/jaxrs/ext/search/PrimitiveSearchCondition.java",
                "line": 226,
                "column": 29
            },
            {
                "path": "src/cxf/rt/rs/extensions/search/src/main/java/org/apache/cxf/jaxrs/ext/search/PrimitiveSearchCondition.java",
                "line": 226,
                "column": 38
            },
            {
                "path": "src/cxf/rt/rs/extensions/search/src/main/java/org/apache/cxf/jaxrs/ext/search/visitor/AbstractSearchConditionVisitor.java",
                "line": 92,
                "column": 29
            },
            {
                "path": "src/cxf/rt/rs/extensions/search/src/main/java/org/apache/cxf/jaxrs/ext/search/visitor/AbstractSearchConditionVisitor.java",
                "line": 92,
                "column": 38
            },
            {
                "path": "src/cxf/rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/proxy/MicroProfileClientProxyImpl.java",
                "line": 359,
                "column": 46
            },
            {
                "path": "src/cxf/rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/proxy/MicroProfileClientProxyImpl.java",
                "line": 359,
                "column": 55
            },
            {
                "path": "src/cxf/rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/proxy/MicroProfileClientProxyImpl.java",
                "line": 360,
                "column": 55
            },
            {
                "path": "src/cxf/rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/proxy/MicroProfileClientProxyImpl.java",
                "line": 362,
                "column": 46
            },
            {
                "path": "src/cxf/rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/proxy/MicroProfileClientProxyImpl.java",
                "line": 362,
                "column": 55
            },
            {
                "path": "src/cxf/rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/proxy/MicroProfileClientProxyImpl.java",
                "line": 463,
                "column": 29
            },
            {
                "path": "src/cxf/rt/rs/microprofile-client/src/main/java/org/apache/cxf/microprofile/client/proxy/MicroProfileClientProxyImpl.java",
                "line": 463,
                "column": 75
            },
            {
                "path": "src/cxf/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/utils/OAuthUtils.java",
                "line": 158,
                "column": 17
            },
            {
                "path": "src/cxf/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/utils/OAuthUtils.java",
                "line": 158,
                "column": 50
            },
            {
                "path": "src/cxf/rt/transports/http-jetty/src/main/java/org/apache/cxf/transport/http_jetty/JettyHTTPServerEngine.java",
                "line": 550,
                "column": 21
            },
            {
                "path": "src/cxf/rt/transports/http-jetty/src/main/java/org/apache/cxf/transport/http_jetty/JettyHTTPServerEngine.java",
                "line": 551,
                "column": 33
            },
            {
                "path": "src/cxf/rt/transports/http-jetty/src/main/java/org/apache/cxf/transport/http_jetty/JettyHTTPServerEngine.java",
                "line": 551,
                "column": 91
            },
            {
                "path": "src/cxf/rt/transports/http-jetty/src/main/java/org/apache/cxf/transport/http_jetty/JettyHTTPServerEngine.java",
                "line": 551,
                "column": 74
            },
            {
                "path": "src/cxf/rt/transports/http-jetty/src/main/java/org/apache/cxf/transport/http_jetty/JettyHTTPServerEngine.java",
                "line": 553,
                "column": 17
            },
            {
                "path": "src/cxf/rt/transports/http-jetty/src/main/java/org/apache/cxf/transport/http_jetty/JettyHTTPServerEngine.java",
                "line": 554,
                "column": 29
            },
            {
                "path": "src/cxf/rt/transports/http-jetty/src/main/java/org/apache/cxf/transport/http_jetty/JettyHTTPServerEngine.java",
                "line": 554,
                "column": 33
            },
            {
                "path": "src/cxf/rt/transports/http-jetty/src/main/java/org/apache/cxf/transport/http_jetty/JettyHTTPServerEngine.java",
                "line": 554,
                "column": 74
            },
            {
                "path": "src/cxf/rt/transports/http-jetty/src/main/java/org/apache/cxf/transport/http_jetty/JettyHTTPServerEngine.java",
                "line": 564,
                "column": 21
            },
            {
                "path": "src/cxf/rt/transports/http-jetty/src/main/java/org/apache/cxf/transport/http_jetty/JettyHTTPServerEngine.java",
                "line": 564,
                "column": 81
            },
            {
                "path": "src/cxf/rt/transports/http-jetty/src/main/java/org/apache/cxf/transport/http_jetty/JettyHTTPServerEngine.java",
                "line": 564,
                "column": 85
            },
            {
                "path": "src/cxf/rt/transports/http-jetty/src/main/java/org/apache/cxf/transport/http_jetty/JettyHTTPServerEngine.java",
                "line": 828,
                "column": 31
            },
            {
                "path": "src/cxf/rt/transports/http-jetty/src/main/java/org/apache/cxf/transport/http_jetty/JettyHTTPServerEngine.java",
                "line": 828,
                "column": 82
            },
            {
                "path": "src/cxf/rt/transports/http-jetty/src/main/java/org/apache/cxf/transport/http_jetty/JettyHTTPServerEngineFactory.java",
                "line": 347,
                "column": 21
            },
            {
                "path": "src/cxf/rt/transports/http-jetty/src/main/java/org/apache/cxf/transport/http_jetty/JettyHTTPServerEngineFactory.java",
                "line": 347,
                "column": 70
            },
            {
                "path": "src/cxf/rt/transports/http-jetty/src/main/java/org/apache/cxf/transport/http_jetty/JettyHTTPServerEngineFactory.java",
                "line": 347,
                "column": 86
            },
            {
                "path": "src/cxf/rt/transports/http-jetty/src/main/java/org/apache/cxf/transport/http_jetty/continuations/JettyContinuationProviderFactory.java",
                "line": 60,
                "column": 28
            },
            {
                "path": "src/cxf/rt/transports/http-jetty/src/main/java/org/apache/cxf/transport/http_jetty/continuations/JettyContinuationProviderFactory.java",
                "line": 60,
                "column": 67
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/http/CXFAuthenticator.java",
                "line": 58,
                "column": 46
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/http/CXFAuthenticator.java",
                "line": 58,
                "column": 55
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/http/CXFAuthenticator.java",
                "line": 74,
                "column": 33
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/http/CXFAuthenticator.java",
                "line": 74,
                "column": 42
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/http/CXFAuthenticator.java",
                "line": 92,
                "column": 37
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/http/CXFAuthenticator.java",
                "line": 92,
                "column": 46
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/http/CXFAuthenticator.java",
                "line": 95,
                "column": 41
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/http/CXFAuthenticator.java",
                "line": 95,
                "column": 50
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/http/CXFAuthenticator.java",
                "line": 99,
                "column": 41
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/http/CXFAuthenticator.java",
                "line": 99,
                "column": 50
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/http/CXFAuthenticator.java",
                "line": 111,
                "column": 21
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/http/CXFAuthenticator.java",
                "line": 111,
                "column": 60
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/http/ReferencingAuthenticator.java",
                "line": 82,
                "column": 17
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/http/ReferencingAuthenticator.java",
                "line": 82,
                "column": 26
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/http/ReferencingAuthenticator.java",
                "line": 232,
                "column": 41
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/http/ReferencingAuthenticator.java",
                "line": 232,
                "column": 55
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/https/HttpsURLConnectionFactory.java",
                "line": 202,
                "column": 17
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/https/HttpsURLConnectionFactory.java",
                "line": 202,
                "column": 31
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/https/HttpsURLConnectionFactory.java",
                "line": 211,
                "column": 21
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/https/HttpsURLConnectionFactory.java",
                "line": 211,
                "column": 48
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/https/HttpsURLConnectionFactory.java",
                "line": 219,
                "column": 21
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/https/HttpsURLConnectionFactory.java",
                "line": 219,
                "column": 48
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/https/HttpsURLConnectionInfo.java",
                "line": 107,
                "column": 47
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/https/HttpsURLConnectionInfo.java",
                "line": 107,
                "column": 61
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/https/HttpsURLConnectionInfo.java",
                "line": 109,
                "column": 53
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/https/HttpsURLConnectionInfo.java",
                "line": 109,
                "column": 67
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/https/HttpsURLConnectionInfo.java",
                "line": 111,
                "column": 54
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/https/HttpsURLConnectionInfo.java",
                "line": 111,
                "column": 68
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/CXFNonSpringServlet.java",
                "line": 274,
                "column": 43
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/CXFNonSpringServlet.java",
                "line": 274,
                "column": 52
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/CXFNonSpringServlet.java",
                "line": 274,
                "column": 91
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/CXFNonSpringServlet.java",
                "line": 278,
                "column": 59
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/CXFNonSpringServlet.java",
                "line": 278,
                "column": 68
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/CXFServlet.java",
                "line": 114,
                "column": 66
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/CXFServlet.java",
                "line": 115,
                "column": 80
            },
            {
                "path": "src/cxf/rt/transports/jms/src/main/java/org/apache/cxf/transport/jms/uri/JMSEndpoint.java",
                "line": 155,
                "column": 13
            },
            {
                "path": "src/cxf/rt/transports/jms/src/main/java/org/apache/cxf/transport/jms/uri/JMSEndpoint.java",
                "line": 155,
                "column": 27
            },
            {
                "path": "src/cxf/rt/ws/addr/src/main/java/org/apache/cxf/ws/addressing/impl/MAPAggregatorImpl.java",
                "line": 1038,
                "column": 21
            },
            {
                "path": "src/cxf/rt/ws/addr/src/main/java/org/apache/cxf/ws/addressing/impl/MAPAggregatorImpl.java",
                "line": 1039,
                "column": 33
            },
            {
                "path": "src/cxf/rt/ws/eventing/src/main/java/org/apache/cxf/ws/eventing/backend/notification/EventSinkInterfaceNotificationTask.java",
                "line": 96,
                "column": 13
            },
            {
                "path": "src/cxf/rt/ws/eventing/src/main/java/org/apache/cxf/ws/eventing/backend/notification/EventSinkInterfaceNotificationTask.java",
                "line": 96,
                "column": 27
            },
            {
                "path": "src/cxf/rt/ws/security/src/main/java/org/apache/cxf/ws/security/sts/provider/SecurityTokenServiceProvider.java",
                "line": 244,
                "column": 19
            },
            {
                "path": "src/cxf/rt/ws/security/src/main/java/org/apache/cxf/ws/security/sts/provider/SecurityTokenServiceProvider.java",
                "line": 244,
                "column": 33
            },
            {
                "path": "src/cxf/rt/wsdl/src/main/java/org/apache/cxf/wsdl/JAXBExtensionHelper.java",
                "line": 302,
                "column": 28
            },
            {
                "path": "src/cxf/rt/wsdl/src/main/java/org/apache/cxf/wsdl/JAXBExtensionHelper.java",
                "line": 302,
                "column": 42
            },
            {
                "path": "src/cxf/rt/wsdl/src/main/java/org/apache/cxf/wsdl/service/factory/ClassReader.java",
                "line": 398,
                "column": 21
            },
            {
                "path": "src/cxf/rt/wsdl/src/main/java/org/apache/cxf/wsdl/service/factory/ClassReader.java",
                "line": 398,
                "column": 30
            },
            {
                "path": "src/cxf/rt/wsdl/src/main/java/org/apache/cxf/wsdl/service/factory/XercesSchemaValidationUtils.java",
                "line": 173,
                "column": 35
            },
            {
                "path": "src/cxf/rt/wsdl/src/main/java/org/apache/cxf/wsdl/service/factory/XercesSchemaValidationUtils.java",
                "line": 173,
                "column": 77
            },
            {
                "path": "src/cxf/rt/wsdl/src/main/java/org/apache/cxf/wsdl/service/factory/XercesSchemaValidationUtils.java",
                "line": 174,
                "column": 57
            },
            {
                "path": "src/cxf/rt/wsdl/src/main/java/org/apache/cxf/wsdl/service/factory/XercesSchemaValidationUtils.java",
                "line": 174,
                "column": 102
            },
            {
                "path": "src/cxf/rt/wsdl/src/main/java/org/apache/cxf/wsdl/service/factory/XercesSchemaValidationUtils.java",
                "line": 192,
                "column": 13
            },
            {
                "path": "src/cxf/rt/wsdl/src/main/java/org/apache/cxf/wsdl/service/factory/XercesSchemaValidationUtils.java",
                "line": 192,
                "column": 22
            },
            {
                "path": "src/cxf/services/xkms/xkms-service/src/main/java/org/apache/cxf/xkms/service/NamedServiceProxy.java",
                "line": 41,
                "column": 16
            },
            {
                "path": "src/cxf/services/xkms/xkms-service/src/main/java/org/apache/cxf/xkms/service/NamedServiceProxy.java",
                "line": 41,
                "column": 30
            },
            {
                "path": "src/cxf/testutils/src/main/java/org/apache/cxf/testutil/common/EmbeddedJMSBrokerLauncher.java",
                "line": 122,
                "column": 21
            },
            {
                "path": "src/cxf/testutils/src/main/java/org/apache/cxf/testutil/common/EmbeddedJMSBrokerLauncher.java",
                "line": 122,
                "column": 77
            },
            {
                "path": "src/cxf/testutils/src/main/java/org/apache/cxf/testutil/common/TestUtil.java",
                "line": 242,
                "column": 29
            },
            {
                "path": "src/cxf/testutils/src/main/java/org/apache/cxf/testutil/common/TestUtil.java",
                "line": 242,
                "column": 72
            },
            {
                "path": "src/cxf/testutils/src/main/java/org/apache/cxf/testutil/common/TestUtil.java",
                "line": 252,
                "column": 29
            },
            {
                "path": "src/cxf/testutils/src/main/java/org/apache/cxf/testutil/common/TestUtil.java",
                "line": 252,
                "column": 38
            },
            {
                "path": "src/cxf/tools/common/src/main/java/org/apache/cxf/tools/common/ToolException.java",
                "line": 143,
                "column": 13
            },
            {
                "path": "src/cxf/tools/common/src/main/java/org/apache/cxf/tools/common/ToolException.java",
                "line": 143,
                "column": 80
            },
            {
                "path": "src/cxf/tools/validator/src/main/java/org/apache/cxf/tools/validator/internal/Stax2DOM.java",
                "line": 89,
                "column": 25
            },
            {
                "path": "src/cxf/tools/validator/src/main/java/org/apache/cxf/tools/validator/internal/Stax2DOM.java",
                "line": 89,
                "column": 79
            },
            {
                "path": "src/cxf/tools/validator/src/main/java/org/apache/cxf/tools/validator/internal/WSIBPValidator.java",
                "line": 69,
                "column": 45
            },
            {
                "path": "src/cxf/tools/validator/src/main/java/org/apache/cxf/tools/validator/internal/WSIBPValidator.java",
                "line": 69,
                "column": 54
            }
        ],
        "File read/write hook path": [
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/attachment/ImageDataContentHandler.java",
                "line": 101,
                "column": 53
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/configuration/jsse/SSLUtils.java",
                "line": 108,
                "column": 81
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/configuration/jsse/SSLUtils.java",
                "line": 139,
                "column": 81
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/configuration/jsse/SSLUtils.java",
                "line": 200,
                "column": 35
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/configuration/jsse/TLSParameterJaxBUtils.java",
                "line": 152,
                "column": 68
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/configuration/jsse/TLSParameterJaxBUtils.java",
                "line": 174,
                "column": 61
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/configuration/jsse/TLSParameterJaxBUtils.java",
                "line": 203,
                "column": 51
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/helpers/FileUtils.java",
                "line": 333,
                "column": 35
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/helpers/IOUtils.java",
                "line": 306,
                "column": 59
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/helpers/LoadingByteArrayOutputStream.java",
                "line": 65,
                "column": 59
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/io/CachedOutputStream.java",
                "line": 614,
                "column": 75
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/io/CachedOutputStream.java",
                "line": 637,
                "column": 47
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/io/CachedOutputStream.java",
                "line": 679,
                "column": 63
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/io/CachedWriter.java",
                "line": 614,
                "column": 75
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/io/CachedWriter.java",
                "line": 648,
                "column": 47
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/resource/URIResolver.java",
                "line": 243,
                "column": 43
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/staxutils/StaxUtils.java",
                "line": 1144,
                "column": 53
            },
            {
                "path": "src/cxf/distribution/src/main/release/samples/jaxws_graalvm_dynamic/client/src/main/java/demo/jaxws/client/DumpingClassLoaderCapturer.java",
                "line": 50,
                "column": 59
            },
            {
                "path": "src/cxf/maven-plugins/codegen-plugin/src/main/java/org/apache/cxf/maven_plugin/wsdl2java/WSDL2JavaMojo.java",
                "line": 241,
                "column": 84
            },
            {
                "path": "src/cxf/maven-plugins/codegen-plugin/src/main/java/org/apache/cxf/maven_plugin/wsdl2java/WSDL2JavaMojo.java",
                "line": 257,
                "column": 83
            },
            {
                "path": "src/cxf/maven-plugins/java2wadl-plugin/src/main/java/org/apache/cxf/maven_plugin/javatowadl/DumpJavaDoc.java",
                "line": 43,
                "column": 49
            },
            {
                "path": "src/cxf/maven-plugins/java2wadl-plugin/src/main/java/org/apache/cxf/maven_plugin/javatowadl/ResourceMapJavaDocProvider.java",
                "line": 43,
                "column": 52
            },
            {
                "path": "src/cxf/maven-plugins/java2wadl-plugin/src/main/java13/org/apache/cxf/maven_plugin/javatowadl/DumpJavaDoc.java",
                "line": 116,
                "column": 54
            },
            {
                "path": "src/cxf/rt/bindings/corba/src/main/java/org/apache/cxf/binding/corba/utils/OrbConfig.java",
                "line": 184,
                "column": 56
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/BinaryDataProvider.java",
                "line": 119,
                "column": 57
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/BinaryDataProvider.java",
                "line": 162,
                "column": 42
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/MultipartProvider.java",
                "line": 347,
                "column": 91
            },
            {
                "path": "src/cxf/rt/frontend/simple/src/main/java/org/apache/cxf/endpoint/dynamic/DynamicClientFactory.java",
                "line": 562,
                "column": 51
            },
            {
                "path": "src/cxf/rt/frontend/simple/src/main/java/org/apache/cxf/endpoint/dynamic/DynamicClientFactory.java",
                "line": 806,
                "column": 65
            },
            {
                "path": "src/cxf/rt/management/src/main/java/org/apache/cxf/management/persistence/FilesystemExchangeDataDAO.java",
                "line": 51,
                "column": 58
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/https/httpclient/PublicSuffixMatcherLoader.java",
                "line": 75,
                "column": 52
            },
            {
                "path": "src/cxf/services/xkms/xkms-x509-handlers/src/main/java/org/apache/cxf/xkms/x509/repo/file/FileCertificateRepo.java",
                "line": 87,
                "column": 58
            },
            {
                "path": "src/cxf/services/xkms/xkms-x509-handlers/src/main/java/org/apache/cxf/xkms/x509/repo/file/FileCertificateRepo.java",
                "line": 110,
                "column": 58
            },
            {
                "path": "src/cxf/services/xkms/xkms-x509-handlers/src/main/java/org/apache/cxf/xkms/x509/repo/file/FileCertificateRepo.java",
                "line": 169,
                "column": 52
            },
            {
                "path": "src/cxf/services/xkms/xkms-x509-handlers/src/main/java/org/apache/cxf/xkms/x509/repo/file/FileCertificateRepo.java",
                "line": 175,
                "column": 52
            },
            {
                "path": "src/cxf/services/xkms/xkms-x509-handlers/src/main/java/org/apache/cxf/xkms/x509/repo/file/FileCertificateRepo.java",
                "line": 262,
                "column": 54
            },
            {
                "path": "src/cxf/testutils/src/main/java/org/apache/cxf/testutil/common/ServerLauncher.java",
                "line": 273,
                "column": 44
            },
            {
                "path": "src/cxf/tools/common/src/main/java/org/apache/cxf/tools/util/OutputStreamCreator.java",
                "line": 33,
                "column": 38
            },
            {
                "path": "src/cxf/tools/corba/src/main/java/org/apache/cxf/tools/corba/common/SchemaFactory.java",
                "line": 128,
                "column": 60
            },
            {
                "path": "src/cxf/tools/corba/src/main/java/org/apache/cxf/tools/corba/common/WSDLCorbaFactory.java",
                "line": 141,
                "column": 60
            },
            {
                "path": "src/cxf/tools/corba/src/main/java/org/apache/cxf/tools/corba/utils/FileOutputStreamFactory.java",
                "line": 156,
                "column": 38
            },
            {
                "path": "src/cxf/tools/corba/src/main/java/org/apache/cxf/tools/corba/utils/FileOutputStreamFactory.java",
                "line": 170,
                "column": 39
            },
            {
                "path": "src/cxf/tools/javato/ws/src/main/java/org/apache/cxf/tools/java2js/processor/JavaToJSProcessor.java",
                "line": 86,
                "column": 63
            },
            {
                "path": "src/cxf/tools/javato/ws/src/main/java/org/apache/cxf/tools/java2wsdl/generator/wsdl11/WSDL11Generator.java",
                "line": 99,
                "column": 95
            },
            {
                "path": "src/cxf/tools/wadlto/jaxrs/src/main/java/org/apache/cxf/tools/wadlto/jaxb/CustomizationParser.java",
                "line": 150,
                "column": 49
            },
            {
                "path": "src/cxf/tools/wadlto/jaxrs/src/main/java/org/apache/cxf/tools/wadlto/jaxrs/SourceGenerator.java",
                "line": 1697,
                "column": 13
            },
            {
                "path": "src/cxf/tools/wsdlto/core/src/main/java/org/apache/cxf/tools/wsdlto/WSDLToJavaContainer.java",
                "line": 346,
                "column": 35
            },
            {
                "path": "src/cxf/tools/wsdlto/core/src/main/java/org/apache/cxf/tools/wsdlto/WSDLToJavaContainer.java",
                "line": 381,
                "column": 86
            },
            {
                "path": "src/cxf/tools/wsdlto/core/src/main/java/org/apache/cxf/tools/wsdlto/WSDLToJavaContainer.java",
                "line": 821,
                "column": 91
            },
            {
                "path": "src/cxf/tools/wsdlto/core/src/main/java/org/apache/cxf/tools/wsdlto/WSDLToJavaContainer.java",
                "line": 838,
                "column": 91
            },
            {
                "path": "src/cxf/tools/wsdlto/databinding/jaxb/src/main/java/org/apache/cxf/tools/wsdlto/databinding/jaxb/JAXBDataBinding.java",
                "line": 603,
                "column": 49
            },
            {
                "path": "src/cxf/tools/wsdlto/databinding/jaxb/src/main/java/org/apache/cxf/tools/wsdlto/databinding/jaxb/JAXBDataBinding.java",
                "line": 687,
                "column": 51
            },
            {
                "path": "src/cxf/tools/wsdlto/frontend/javascript/src/main/java/org/apache/cxf/tools/wsdlto/javascript/WSDLToJavaScriptProcessor.java",
                "line": 73,
                "column": 63
            },
            {
                "path": "src/cxf/tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/customization/CustomizationParser.java",
                "line": 585,
                "column": 49
            },
            {
                "path": "src/cxf/tools/wsdlto/misc/src/main/java/org/apache/cxf/tools/misc/processor/XSDToWSDLProcessor.java",
                "line": 105,
                "column": 43
            },
            {
                "path": "src/cxf/tools/common/src/main/java/org/apache/cxf/tools/common/ClassUtils.java",
                "line": 102,
                "column": 45
            },
            {
                "path": "src/cxf/benchmark/profiling/src/main/java/org/apache/cxf/profile/FastInfosetExperiment.java",
                "line": 109,
                "column": 46
            },
            {
                "path": "src/cxf/benchmark/profiling/src/main/java/org/apache/cxf/profile/FastInfosetExperiment.java",
                "line": 121,
                "column": 46
            },
            {
                "path": "src/cxf/benchmark/profiling/src/main/java/org/apache/cxf/profile/FastInfosetExperiment.java",
                "line": 131,
                "column": 48
            },
            {
                "path": "src/cxf/bin/DoMerges.java",
                "line": 149,
                "column": 67
            },
            {
                "path": "src/cxf/bin/DoMerges.java",
                "line": 178,
                "column": 71
            },
            {
                "path": "src/cxf/bin/DoMerges.java",
                "line": 197,
                "column": 71
            },
            {
                "path": "src/cxf/bin/DoMerges.java",
                "line": 307,
                "column": 67
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
                "line": 280,
                "column": 71
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/common/util/Compiler.java",
                "line": 367,
                "column": 71
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/interceptor/AbstractLoggingInterceptor.java",
                "line": 125,
                "column": 57
            },
            {
                "path": "src/cxf/core/src/main/java/org/apache/cxf/io/CachedOutputStream.java",
                "line": 657,
                "column": 19
            },
            {
                "path": "src/cxf/distribution/src/main/release/samples/aegis_standalone/src/main/java/org/apache/cxf/demo/aegis/commands/ReadZoo.java",
                "line": 57,
                "column": 53
            },
            {
                "path": "src/cxf/distribution/src/main/release/samples/aegis_standalone/src/main/java/org/apache/cxf/demo/aegis/commands/WriteZoo.java",
                "line": 62,
                "column": 56
            },
            {
                "path": "src/cxf/distribution/src/main/release/samples/jax_rs/basic_https/src/main/java/httpsdemo/client/Client.java",
                "line": 54,
                "column": 43
            },
            {
                "path": "src/cxf/distribution/src/main/release/samples/jax_rs/big_query/src/main/java/demo/jaxrs/server/BigQueryServer.java",
                "line": 103,
                "column": 51
            },
            {
                "path": "src/cxf/distribution/src/main/release/samples/jax_rs/search/src/main/java/demo/jaxrs/search/server/Storage.java",
                "line": 59,
                "column": 79
            },
            {
                "path": "src/cxf/distribution/src/main/release/samples/jax_rs/search/src/main/java/demo/jaxrs/search/server/Storage.java",
                "line": 73,
                "column": 36
            },
            {
                "path": "src/cxf/distribution/src/main/release/samples/wsdl_first_https/src/main/java/demo/hw_https/client/ClientNonSpring.java",
                "line": 99,
                "column": 51
            },
            {
                "path": "src/cxf/maven-plugins/codegen-plugin/src/main/java/org/apache/cxf/maven_plugin/AbstractCodegenMojo.java",
                "line": 785,
                "column": 61
            },
            {
                "path": "src/cxf/maven-plugins/codegen-plugin/src/main/java/org/apache/cxf/maven_plugin/wsdl2java/ForkOnceWSDL2Java.java",
                "line": 38,
                "column": 72
            },
            {
                "path": "src/cxf/maven-plugins/codegen-plugin/src/main/java/org/apache/cxf/maven_plugin/wsdl2js/ForkOnceWSDL2Javascript.java",
                "line": 38,
                "column": 72
            },
            {
                "path": "src/cxf/maven-plugins/java2swagger-plugin/src/main/java/org/apache/cxf/maven_plugin/java2swagger/Java2SwaggerMojo.java",
                "line": 211,
                "column": 72
            },
            {
                "path": "src/cxf/maven-plugins/java2wadl-plugin/src/main/java/org/apache/cxf/maven_plugin/javatowadl/Java2WADLMojo.java",
                "line": 314,
                "column": 76
            },
            {
                "path": "src/cxf/maven-plugins/wadl2java-plugin/src/main/java/org/apache/cxf/maven_plugin/common/ForkOnceCodeGenerator.java",
                "line": 36,
                "column": 72
            },
            {
                "path": "src/cxf/maven-plugins/wadl2java-plugin/src/main/java/org/apache/cxf/maven_plugin/wadlto/AbstractCodeGeneratorMojo.java",
                "line": 328,
                "column": 61
            },
            {
                "path": "src/cxf/rt/bindings/corba/src/main/java/org/apache/cxf/binding/corba/utils/CorbaUtils.java",
                "line": 527,
                "column": 96
            },
            {
                "path": "src/cxf/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/OldLoggingFactoryBeanListener.java",
                "line": 94,
                "column": 69
            },
            {
                "path": "src/cxf/rt/frontend/js/src/main/java/org/apache/cxf/js/rhino/ProviderFactory.java",
                "line": 77,
                "column": 71
            },
            {
                "path": "src/cxf/tools/corba/src/main/java/org/apache/cxf/tools/corba/processors/idl/IDLToWSDLProcessor.java",
                "line": 500,
                "column": 60
            },
            {
                "path": "src/cxf/tools/corba/src/main/java/org/apache/cxf/tools/corba/processors/idl/IDLToWSDLProcessor.java",
                "line": 628,
                "column": 80
            },
            {
                "path": "src/cxf/tools/corba/src/main/java/org/apache/cxf/tools/corba/processors/wsdl/WSDLToCorbaBinding.java",
                "line": 340,
                "column": 60
            },
            {
                "path": "src/cxf/tools/wsdlto/core/src/main/java/org/apache/cxf/tools/wsdlto/core/PluginLoader.java",
                "line": 211,
                "column": 63
            },
            {
                "path": "src/cxf/tools/common/src/main/java/org/apache/cxf/tools/common/ClassUtils.java",
                "line": 101,
                "column": 48
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/tl/ThreadLocalServletContext.java",
                "line": 98,
                "column": 34
            },
            {
                "path": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/tl/ThreadLocalServletContext.java",
                "line": 102,
                "column": 42
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletContextResourceResolver.java",
                "line": 53,
                "column": 51
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletContextResourceResolver.java",
                "line": 63,
                "column": 54
            },
            {
                "path": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletContextResourceResolver.java",
                "line": 79,
                "column": 54
            }
        ]
    },
    "tasks": [
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java:\n 659       public static ResourceTypes getAllRequestResponseTypes(List<ClassResourceInfo> cris,\n 660                                                              boolean jaxbOnly,\n 661                                                              MessageBodyWriter<?> jaxbWriter) {\n 662           ResourceTypes types = new ResourceTypes();\n 663           for (ClassResourceInfo resource : cris) {\n 664               getAllTypesForResource(resource, types, jaxbOnly, jaxbWriter);\n 665           }\n 666           return types;\n 667       }\n 680       private static void getAllTypesForResource(ClassResourceInfo resource,\n 681                                                  ResourceTypes types,\n 682                                                  boolean jaxbOnly,\n 683                                                  MessageBodyWriter<?> jaxbWriter) {\n 684           Class<?> jaxbElement = null;\n 685           try {\n 686               jaxbElement = ClassLoaderUtils.loadClass(\"javax.xml.bind.JAXBElement\", ResourceUtils.class);\n 687           } catch (final ClassNotFoundException e) {\n 688               // no-op\n 689           }\n 690   \n 691           for (OperationResourceInfo ori : resource.getMethodDispatcher().getOperationResourceInfos()) {\n 692               Method method = ori.getAnnotatedMethod() == null ? ori.getMethodToInvoke() : ori.getAnnotatedMethod();\n 693               Class<?> realReturnType = method.getReturnType();\n 694               Class<?> cls = realReturnType;\n 695               if (cls == Response.class || ori.isAsync()) {\n 696                   cls = getActualJaxbType(cls, method, false);\n 697               }\n 698               Type type = method.getGenericReturnType();\n 699               if (jaxbOnly) {\n 700                   checkJaxbType(resource.getServiceClass(), cls, realReturnType == Response.class || ori.isAsync()\n 701                       ? cls : type, types, method.getAnnotations(), jaxbWriter, jaxbElement);\n 702               } else {\n 703                   types.getAllTypes().put(cls, type);\n 704               }\n 705   \n 706               for (Parameter pm : ori.getParameters()) {\n 707                   if (pm.getType() == ParameterType.REQUEST_BODY) {\n 708                       Class<?> inType = method.getParameterTypes()[pm.getIndex()];\n 709                       if (inType != AsyncResponse.class) {\n 710                           Type paramType = method.getGenericParameterTypes()[pm.getIndex()];\n 711                           if (jaxbOnly) {\n 712                               checkJaxbType(resource.getServiceClass(), inType, paramType, types,\n 713                                             method.getParameterAnnotations()[pm.getIndex()], jaxbWriter, jaxbElement);\n 714                           } else {\n 715                               types.getAllTypes().put(inType, paramType);\n 716                           }\n 717                       }\n 718                   }\n 719               }\n 720   \n 721           }\n 722   \n 723           for (ClassResourceInfo sub : resource.getSubResources()) {\n 724               if (!isRecursiveSubResource(resource, sub)) {\n 725                   getAllTypesForResource(sub, types, jaxbOnly, jaxbWriter);\n 726               }\n 727           }\n 728       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/common/classloader/ClassLoaderUtils.java:\n268       public static Class<?> loadClass(String className, Class<?> callingClass)\n269           throws ClassNotFoundException {\n270           try {\n271               ClassLoader cl = getContextClassLoader();\n272   \n273               if (cl != null) {\n274                   return cl.loadClass(className);\n275               }\n276           } catch (ClassNotFoundException e) {\n277               //ignore\n278           }\n279           return loadClass2(className, callingClass);\n280       }\n305       private static Class<?> loadClass2(String className, Class<?> callingClass)\n306           throws ClassNotFoundException {\n307           try {\n308               return Class.forName(className);\n309           } catch (ClassNotFoundException ex) {\n310               try {\n311                   final ClassLoader loader = getClassLoader(ClassLoaderUtils.class);\n312                   if (loader != null) {\n313                       return loader.loadClass(className);\n314                   }\n315               } catch (ClassNotFoundException exc) {\n316                   if (callingClass != null) {\n317                       final ClassLoader callingClassLoader = getClassLoader(callingClass);\n318                       if (callingClassLoader != null) {\n319                           return callingClassLoader.loadClass(className);\n320                       }\n321                   }\n322               }\n323               throw ex;\n324           }\n325       }\n",
            "cost": 0.086645,
            "harness_id": "id_3",
            "sanitizer": "Remote Code Execution",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/common/classloader/ClassLoaderUtils.java:308:34",
            "status": "corpus",
            "valid_path": "NO",
            "id": 1
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1934       protected SchemaWriter createSchemaWriter(ResourceTypes resourceTypes, JAXBContext context, UriInfo ui) {\n1935           // if neither externalSchemaLinks nor externalSchemasCache is set\n1936           // then JAXBContext will be used to generate the schema\n1937           if (externalSchemaLinks != null && externalSchemasCache == null) {\n1938               return new ExternalSchemaWriter(externalSchemaLinks, ui);\n1939           } else if (externalSchemasCache != null) {\n1940               return new StringSchemaWriter(externalSchemasCache, externalSchemaLinks, ui);\n1941           } else {\n1942               SchemaCollection coll = getSchemaCollection(resourceTypes, context);\n1943               if (coll != null) {\n1944                   return new SchemaCollectionWriter(coll);\n1945               }\n1946           }\n1947           return null;\n1948       }\n1977           StringSchemaWriter(List<String> schemas, List<URI> links, UriInfo ui) {\n1978               this.theSchemas = new LinkedList<>();\n1979               // we'll need to do the proper schema caching eventually\n1980               for (String s : schemas) {\n1981                   XMLSource source = new XMLSource(new ByteArrayInputStream(s.getBytes(StandardCharsets.UTF_8)));\n1982                   source.setBuffering();\n1983                   Map<String, String> locs = getLocationsMap(source, \"import\", links, ui);\n1984                   locs.putAll(getLocationsMap(source, \"include\", links, ui));\n1985                   String actualSchema = !locs.isEmpty() ? transformSchema(s, locs) : s;\n1986                   theSchemas.add(actualSchema);\n1987               }\n1988           }\n1990           private Map<String, String> getLocationsMap(XMLSource source, String elementName, List<URI> links,\n1991                                                       UriInfo ui) {\n1992               Map<String, String> nsMap = Collections.singletonMap(\"xs\", Constants.URI_2001_SCHEMA_XSD);\n1993               String[] locations = source.getValues(\"/*/xs:\" + elementName + \"/@schemaLocation\", nsMap);\n1994   \n1995               Map<String, String> locs = new HashMap<>();\n1996               if (locations == null) {\n1997                   return locs;\n1998               }\n1999   \n2000               for (String loc : locations) {\n2001                   try {\n2002                       URI uri = URI.create(loc);\n2003                       if (!uri.isAbsolute()) {\n2004                           if (links != null) {\n2005                               for (URI overwriteURI : links) {\n2006                                   if (overwriteURI.toString().endsWith(loc)) {\n2007                                       if (overwriteURI.isAbsolute()) {\n2008                                           locs.put(loc, overwriteURI.toString());\n2009                                       } else {\n2010                                           locs.put(loc, ui.getBaseUriBuilder().path(overwriteURI.toString())\n2011                                               .build().toString());\n2012                                       }\n2013                                       break;\n2014                                   }\n2015                               }\n2016                           }\n2017                           if (!locs.containsKey(loc)) {\n2018                               locs.put(loc, ui.getBaseUriBuilder().path(loc).build().toString());\n2019                           }\n2020                       }\n2021                   } catch (Exception ex) {\n2022                       // continue\n2023                   }\n2024               }\n2025               return locs;\n2026           }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/ext/xml/XMLSource.java:\n147       @SuppressWarnings(\"unchecked\")\n148       public <T> T[] getNodes(String expression, Map<String, String> namespaces, Class<T> cls) {\n149   \n150           NodeList nodes = (NodeList)evaluate(expression, namespaces, XPathConstants.NODESET);\n151           if (nodes == null || nodes.getLength() == 0) {\n152               return null;\n153           }\n154           T[] values = (T[])Array.newInstance(cls, nodes.getLength());\n155           for (int i = 0; i < nodes.getLength(); i++) {\n156               Node node = nodes.item(i);\n157               if (InjectionUtils.isPrimitive(cls)) {\n158                   values[i] = (T)readPrimitiveValue(node, cls);\n159               } else {\n160                   values[i] = readNode(node, cls);\n161               }\n162           }\n163           return values;\n164       }\n262       public String[] getValues(String expression, Map<String, String> namespaces) {\n263           return getNodes(expression, namespaces, String.class);\n264       }\n283       private Object evaluate(String expression, Map<String, String> namespaces, QName type) {\n284           XPathFactory factory = XPathFactory.newInstance();\n285           try {\n286               factory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, Boolean.TRUE);\n287           } catch (XPathFactoryConfigurationException e) {\n288               throw new RuntimeException(e);\n289           }\n290           XPath xpath = factory.newXPath();\n291           xpath.setNamespaceContext(new NamespaceContextImpl(namespaces));\n292           boolean releaseDoc = false;\n293           try {\n294               if (stream != null) {\n295                   //xalan xpath evaluate parses to a DOM via a DocumentBuilderFactory, but doesn't\n296                   //set the SecureProcessing on that. Since a DOM is always created, might as well\n297                   //do it via stax and avoid the service factory performance hits that the\n298                   //DocumentBuilderFactory will entail as well as get the extra security\n299                   //that woodstox provides\n300                   setBuffering();\n301                   releaseDoc = true;\n302               }\n303               return xpath.compile(expression).evaluate(doc, type);\n304           } catch (XPathExpressionException ex) {\n305               throw new IllegalArgumentException(\"Illegal XPath expression '\" + expression + \"'\", ex);\n306           } finally {\n307               if (releaseDoc) {\n308                   //don't need to maintain the doc\n309                   doc = null;\n310               }\n311           }\n312       }\n",
            "cost": 0.096805,
            "harness_id": "id_3",
            "sanitizer": "XPath Injection",
            "sink": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/ext/xml/XMLSource.java:303:34",
            "status": "corpus",
            "valid_path": "NO",
            "id": 2
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/BusFactory.java:\n 95       public static synchronized Bus getDefaultBus() {\n 96           return getDefaultBus(true);\n 97       }\n105       public static synchronized Bus getDefaultBus(boolean createIfNeeded) {\n106           if (defaultBus == null && createIfNeeded) {\n107               defaultBus = newInstance().createBus();\n108           }\n109           if (defaultBus == null) {\n110               // never set up.\n111               return null;\n112           }\n113           return defaultBus;\n114       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBusFactory.java:\n 82       public Bus createBus() {\n 83           return createBus((String)null);\n 84       }\n 93       public Bus createBus(String cfgFile) {\n 94           return createBus(cfgFile, defaultBusNotExists());\n 95       }\n101       protected Bus finishCreatingBus(ConfigurableApplicationContext bac) {\n102           final Bus bus = (Bus)bac.getBean(Bus.DEFAULT_BUS_ID);\n103   \n104           bus.setExtension(bac, ApplicationContext.class);\n105           if (bac instanceof BusApplicationContext) {\n106               bus.setExtension((BusApplicationContext)bac, BusApplicationContext.class);\n107           }\n108           possiblySetDefaultBus(bus);\n109   \n110           initializeBus(bus);\n111   \n112           registerApplicationContextLifeCycleListener(bus, bac);\n113   \n114           if (bus instanceof SpringBus && defaultBusNotExists()) {\n115               ((SpringBus)bus).setCloseContext(true);\n116           }\n117           return bus;\n118       }\n120       public Bus createBus(String cfgFile, boolean includeDefaults) {\n121           if (cfgFile == null) {\n122               return createBus((String[])null, includeDefaults);\n123           }\n124           return createBus(new String[] {cfgFile}, includeDefaults);\n125       }\n127       public Bus createBus(String[] cfgFiles, boolean includeDefaults) {\n128           try {\n129               String userCfgFile\n130                   = SystemPropertyAction.getPropertyOrNull(Configurer.USER_CFG_FILE_PROPERTY_NAME);\n131               String sysCfgFileUrl\n132                   = SystemPropertyAction.getPropertyOrNull(Configurer.USER_CFG_FILE_PROPERTY_URL);\n133               final Resource r = BusApplicationContext.findResource(Configurer.DEFAULT_USER_CFG_FILE);\n134   \n135               boolean exists = true;\n136               if (r != null) {\n137                   exists = AccessController\n138                       .doPrivileged(new PrivilegedAction<Boolean>() {\n139                           public Boolean run() {\n140                               return r.exists();\n141                           }\n142                       });\n143               }\n144               if (context == null && userCfgFile == null && cfgFiles == null && sysCfgFileUrl == null\n145                   && (r == null || !exists) && includeDefaults) {\n146                   return new org.apache.cxf.bus.CXFBusFactory().createBus();\n147               }\n148               return finishCreatingBus(createApplicationContext(cfgFiles, includeDefaults));\n149           } catch (BeansException ex) {\n150               LogUtils.log(LOG, Level.WARNING, \"APP_CONTEXT_CREATION_FAILED_MSG\", ex, (Object[])null);\n151               throw new RuntimeException(ex);\n152           }\n153       }\n201       void registerApplicationContextLifeCycleListener(Bus bus, ConfigurableApplicationContext bac) {\n202           BusLifeCycleManager lm = bus.getExtension(BusLifeCycleManager.class);\n203           if (null != lm) {\n204               lm.registerLifeCycleListener(new BusApplicationContextLifeCycleListener(bac));\n205           }\n206       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/managers/CXFBusLifeCycleManager.java:\n 62       public final void registerLifeCycleListener(BusLifeCycleListener listener) {\n 63           listeners.addIfAbsent(listener);\n 64           if (initCalled) {\n 65               listener.initComplete();\n 66           }\n 67   \n 68       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/osgi/OSGIBusListener.java:\n 96       public void initComplete() {\n 97           ManagedWorkQueueList wqList = bus.getExtension(ManagedWorkQueueList.class);\n 98           if (wqList != null) {\n 99               WorkQueueManager manager = bus.getExtension(WorkQueueManager.class);\n100               wqList.addAllToWorkQueueManager(manager);\n101           }\n102           registerBusAsService();\n103       }\n212       private void registerBusAsService() {\n213           BundleContext context = bus.getExtension(BundleContext.class);\n214           if (context != null) {\n215               Map<String, Object> props = new HashMap<>();\n216               props.put(CONTEXT_SYMBOLIC_NAME_PROPERTY, context.getBundle().getSymbolicName());\n217               props.put(CONTEXT_VERSION_PROPERTY, getBundleVersion(context.getBundle()));\n218               props.put(CONTEXT_NAME_PROPERTY, bus.getId());\n219   \n220               service = context.registerService(Bus.class.getName(), bus, CollectionUtils.toDictionary(props));\n221           }\n222       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBus.java:\n132       @Override\n133       public String getId() {\n134           if (id == null) {\n135               try {\n136                   Class<?> clsbc = Class.forName(\"org.osgi.framework.BundleContext\");\n137                   Class<?> clsb = Class.forName(\"org.osgi.framework.Bundle\");\n138                   Object o = getExtension(clsbc);\n139                   Object o2 = clsbc.getMethod(\"getBundle\").invoke(o);\n140                   String s = (String)clsb.getMethod(\"getSymbolicName\").invoke(o2);\n141                   id = s + '-' + DEFAULT_BUS_ID + Integer.toString(this.hashCode());\n142               } catch (Throwable t) {\n143                   id = super.getId();\n144               }\n145           }\n146           return id;\n147       }\n",
            "cost": 0.103765,
            "harness_id": "id_3",
            "sanitizer": "load arbitrary library",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBus.java:136:48",
            "status": "corpus",
            "valid_path": "NO",
            "id": 3
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/BusFactory.java:\n 95       public static synchronized Bus getDefaultBus() {\n 96           return getDefaultBus(true);\n 97       }\n105       public static synchronized Bus getDefaultBus(boolean createIfNeeded) {\n106           if (defaultBus == null && createIfNeeded) {\n107               defaultBus = newInstance().createBus();\n108           }\n109           if (defaultBus == null) {\n110               // never set up.\n111               return null;\n112           }\n113           return defaultBus;\n114       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBusFactory.java:\n 82       public Bus createBus() {\n 83           return createBus((String)null);\n 84       }\n 93       public Bus createBus(String cfgFile) {\n 94           return createBus(cfgFile, defaultBusNotExists());\n 95       }\n101       protected Bus finishCreatingBus(ConfigurableApplicationContext bac) {\n102           final Bus bus = (Bus)bac.getBean(Bus.DEFAULT_BUS_ID);\n103   \n104           bus.setExtension(bac, ApplicationContext.class);\n105           if (bac instanceof BusApplicationContext) {\n106               bus.setExtension((BusApplicationContext)bac, BusApplicationContext.class);\n107           }\n108           possiblySetDefaultBus(bus);\n109   \n110           initializeBus(bus);\n111   \n112           registerApplicationContextLifeCycleListener(bus, bac);\n113   \n114           if (bus instanceof SpringBus && defaultBusNotExists()) {\n115               ((SpringBus)bus).setCloseContext(true);\n116           }\n117           return bus;\n118       }\n120       public Bus createBus(String cfgFile, boolean includeDefaults) {\n121           if (cfgFile == null) {\n122               return createBus((String[])null, includeDefaults);\n123           }\n124           return createBus(new String[] {cfgFile}, includeDefaults);\n125       }\n127       public Bus createBus(String[] cfgFiles, boolean includeDefaults) {\n128           try {\n129               String userCfgFile\n130                   = SystemPropertyAction.getPropertyOrNull(Configurer.USER_CFG_FILE_PROPERTY_NAME);\n131               String sysCfgFileUrl\n132                   = SystemPropertyAction.getPropertyOrNull(Configurer.USER_CFG_FILE_PROPERTY_URL);\n133               final Resource r = BusApplicationContext.findResource(Configurer.DEFAULT_USER_CFG_FILE);\n134   \n135               boolean exists = true;\n136               if (r != null) {\n137                   exists = AccessController\n138                       .doPrivileged(new PrivilegedAction<Boolean>() {\n139                           public Boolean run() {\n140                               return r.exists();\n141                           }\n142                       });\n143               }\n144               if (context == null && userCfgFile == null && cfgFiles == null && sysCfgFileUrl == null\n145                   && (r == null || !exists) && includeDefaults) {\n146                   return new org.apache.cxf.bus.CXFBusFactory().createBus();\n147               }\n148               return finishCreatingBus(createApplicationContext(cfgFiles, includeDefaults));\n149           } catch (BeansException ex) {\n150               LogUtils.log(LOG, Level.WARNING, \"APP_CONTEXT_CREATION_FAILED_MSG\", ex, (Object[])null);\n151               throw new RuntimeException(ex);\n152           }\n153       }\n201       void registerApplicationContextLifeCycleListener(Bus bus, ConfigurableApplicationContext bac) {\n202           BusLifeCycleManager lm = bus.getExtension(BusLifeCycleManager.class);\n203           if (null != lm) {\n204               lm.registerLifeCycleListener(new BusApplicationContextLifeCycleListener(bac));\n205           }\n206       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/managers/CXFBusLifeCycleManager.java:\n 62       public final void registerLifeCycleListener(BusLifeCycleListener listener) {\n 63           listeners.addIfAbsent(listener);\n 64           if (initCalled) {\n 65               listener.initComplete();\n 66           }\n 67   \n 68       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/osgi/OSGIBusListener.java:\n 96       public void initComplete() {\n 97           ManagedWorkQueueList wqList = bus.getExtension(ManagedWorkQueueList.class);\n 98           if (wqList != null) {\n 99               WorkQueueManager manager = bus.getExtension(WorkQueueManager.class);\n100               wqList.addAllToWorkQueueManager(manager);\n101           }\n102           registerBusAsService();\n103       }\n212       private void registerBusAsService() {\n213           BundleContext context = bus.getExtension(BundleContext.class);\n214           if (context != null) {\n215               Map<String, Object> props = new HashMap<>();\n216               props.put(CONTEXT_SYMBOLIC_NAME_PROPERTY, context.getBundle().getSymbolicName());\n217               props.put(CONTEXT_VERSION_PROPERTY, getBundleVersion(context.getBundle()));\n218               props.put(CONTEXT_NAME_PROPERTY, bus.getId());\n219   \n220               service = context.registerService(Bus.class.getName(), bus, CollectionUtils.toDictionary(props));\n221           }\n222       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBus.java:\n132       @Override\n133       public String getId() {\n134           if (id == null) {\n135               try {\n136                   Class<?> clsbc = Class.forName(\"org.osgi.framework.BundleContext\");\n137                   Class<?> clsb = Class.forName(\"org.osgi.framework.Bundle\");\n138                   Object o = getExtension(clsbc);\n139                   Object o2 = clsbc.getMethod(\"getBundle\").invoke(o);\n140                   String s = (String)clsb.getMethod(\"getSymbolicName\").invoke(o2);\n141                   id = s + '-' + DEFAULT_BUS_ID + Integer.toString(this.hashCode());\n142               } catch (Throwable t) {\n143                   id = super.getId();\n144               }\n145           }\n146           return id;\n147       }\n",
            "cost": 0.103815,
            "harness_id": "id_3",
            "sanitizer": "load arbitrary library",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBus.java:137:47",
            "status": "corpus",
            "valid_path": "NO",
            "id": 4
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/BusFactory.java:\n 95       public static synchronized Bus getDefaultBus() {\n 96           return getDefaultBus(true);\n 97       }\n105       public static synchronized Bus getDefaultBus(boolean createIfNeeded) {\n106           if (defaultBus == null && createIfNeeded) {\n107               defaultBus = newInstance().createBus();\n108           }\n109           if (defaultBus == null) {\n110               // never set up.\n111               return null;\n112           }\n113           return defaultBus;\n114       }\n302       public static BusFactory newInstance() {\n303           return newInstance(null);\n304       }\n312       public static BusFactory newInstance(String className) {\n313           if (className == null) {\n314               ClassLoader loader = Thread.currentThread().getContextClassLoader();\n315               className = getBusFactoryClass(loader);\n316               if (className == null && loader != BusFactory.class.getClassLoader()) {\n317                   className = getBusFactoryClass(BusFactory.class.getClassLoader());\n318               }\n319           }\n320           if (className == null) {\n321               className = BusFactory.DEFAULT_BUS_FACTORY;\n322           }\n323   \n324           try {\n325               Class<? extends BusFactory> busFactoryClass = ClassLoaderUtils.loadClass(className, BusFactory.class)\n326                   .asSubclass(BusFactory.class);\n327   \n328               return busFactoryClass.getConstructor().newInstance();\n329           } catch (Exception ex) {\n330               LogUtils.log(LOG, Level.SEVERE, \"BUS_FACTORY_INSTANTIATION_EXC\", ex);\n331               throw new RuntimeException(ex);\n332           }\n333       }\n338       private static String getBusFactoryClass(ClassLoader classLoader) {\n339   \n340           // next check system properties\n341           String busFactoryClass = SystemPropertyAction.getPropertyOrNull(BusFactory.BUS_FACTORY_PROPERTY_NAME);\n342           if (isValidBusFactoryClass(busFactoryClass)) {\n343               return busFactoryClass;\n344           }\n345   \n346           try {\n347               // next, check for the services stuff in the jar file\n348               String serviceId = \"META-INF/services/\" + BusFactory.BUS_FACTORY_PROPERTY_NAME;\n349               InputStream is;\n350   \n351               if (classLoader == null) {\n352                   classLoader = Thread.currentThread().getContextClassLoader();\n353               }\n354   \n355               if (classLoader == null) {\n356                   is = ClassLoader.getSystemResourceAsStream(serviceId);\n357               } else {\n358                   is = classLoader.getResourceAsStream(serviceId);\n359               }\n360               if (is == null) {\n361                   serviceId = \"META-INF/cxf/\" + BusFactory.BUS_FACTORY_PROPERTY_NAME;\n362   \n363                   if (classLoader == null) {\n364                       classLoader = Thread.currentThread().getContextClassLoader();\n365                   }\n366   \n367                   if (classLoader == null) {\n368                       is = ClassLoader.getSystemResourceAsStream(serviceId);\n369                   } else {\n370                       is = classLoader.getResourceAsStream(serviceId);\n371                   }\n372               }\n373   \n374               String busFactoryCondition = null;\n375   \n376               if (is != null) {\n377                   try (BufferedReader rd = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8))) {\n378                       busFactoryClass = rd.readLine();\n379                       busFactoryCondition = rd.readLine();\n380                   }\n381               }\n382               if (isValidBusFactoryClass(busFactoryClass)\n383                   && busFactoryCondition != null) {\n384                   try {\n385                       Class<?> cls = ClassLoaderUtils.loadClass(busFactoryClass, BusFactory.class)\n386                           .asSubclass(BusFactory.class);\n387                       if (busFactoryCondition.startsWith(\"#\")) {\n388                           busFactoryCondition = busFactoryCondition.substring(1);\n389                       }\n390                       int idx = busFactoryCondition.indexOf(',');\n391                       while (idx != -1) {\n392                           cls.getClassLoader().loadClass(busFactoryCondition.substring(0, idx));\n393                           busFactoryCondition = busFactoryCondition.substring(idx + 1);\n394                           idx = busFactoryCondition.indexOf(',');\n395                       }\n396                       cls.getClassLoader().loadClass(busFactoryCondition);\n397                   } catch (ClassNotFoundException | NoClassDefFoundError e) {\n398                       busFactoryClass = DEFAULT_BUS_FACTORY;\n399                   }\n400   \n401               }\n402   \n403           } catch (Exception ex) {\n404               LogUtils.log(LOG, Level.SEVERE, \"FAILED_TO_DETERMINE_BUS_FACTORY_EXC\", ex);\n405           }\n406           return busFactoryClass;\n407       }\n",
            "cost": 0.094305,
            "harness_id": "id_3",
            "sanitizer": "load arbitrary library",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/BusFactory.java:392:56",
            "status": "corpus",
            "valid_path": "NO",
            "id": 5
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/BusFactory.java:\n 95       public static synchronized Bus getDefaultBus() {\n 96           return getDefaultBus(true);\n 97       }\n105       public static synchronized Bus getDefaultBus(boolean createIfNeeded) {\n106           if (defaultBus == null && createIfNeeded) {\n107               defaultBus = newInstance().createBus();\n108           }\n109           if (defaultBus == null) {\n110               // never set up.\n111               return null;\n112           }\n113           return defaultBus;\n114       }\n302       public static BusFactory newInstance() {\n303           return newInstance(null);\n304       }\n312       public static BusFactory newInstance(String className) {\n313           if (className == null) {\n314               ClassLoader loader = Thread.currentThread().getContextClassLoader();\n315               className = getBusFactoryClass(loader);\n316               if (className == null && loader != BusFactory.class.getClassLoader()) {\n317                   className = getBusFactoryClass(BusFactory.class.getClassLoader());\n318               }\n319           }\n320           if (className == null) {\n321               className = BusFactory.DEFAULT_BUS_FACTORY;\n322           }\n323   \n324           try {\n325               Class<? extends BusFactory> busFactoryClass = ClassLoaderUtils.loadClass(className, BusFactory.class)\n326                   .asSubclass(BusFactory.class);\n327   \n328               return busFactoryClass.getConstructor().newInstance();\n329           } catch (Exception ex) {\n330               LogUtils.log(LOG, Level.SEVERE, \"BUS_FACTORY_INSTANTIATION_EXC\", ex);\n331               throw new RuntimeException(ex);\n332           }\n333       }\n338       private static String getBusFactoryClass(ClassLoader classLoader) {\n339   \n340           // next check system properties\n341           String busFactoryClass = SystemPropertyAction.getPropertyOrNull(BusFactory.BUS_FACTORY_PROPERTY_NAME);\n342           if (isValidBusFactoryClass(busFactoryClass)) {\n343               return busFactoryClass;\n344           }\n345   \n346           try {\n347               // next, check for the services stuff in the jar file\n348               String serviceId = \"META-INF/services/\" + BusFactory.BUS_FACTORY_PROPERTY_NAME;\n349               InputStream is;\n350   \n351               if (classLoader == null) {\n352                   classLoader = Thread.currentThread().getContextClassLoader();\n353               }\n354   \n355               if (classLoader == null) {\n356                   is = ClassLoader.getSystemResourceAsStream(serviceId);\n357               } else {\n358                   is = classLoader.getResourceAsStream(serviceId);\n359               }\n360               if (is == null) {\n361                   serviceId = \"META-INF/cxf/\" + BusFactory.BUS_FACTORY_PROPERTY_NAME;\n362   \n363                   if (classLoader == null) {\n364                       classLoader = Thread.currentThread().getContextClassLoader();\n365                   }\n366   \n367                   if (classLoader == null) {\n368                       is = ClassLoader.getSystemResourceAsStream(serviceId);\n369                   } else {\n370                       is = classLoader.getResourceAsStream(serviceId);\n371                   }\n372               }\n373   \n374               String busFactoryCondition = null;\n375   \n376               if (is != null) {\n377                   try (BufferedReader rd = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8))) {\n378                       busFactoryClass = rd.readLine();\n379                       busFactoryCondition = rd.readLine();\n380                   }\n381               }\n382               if (isValidBusFactoryClass(busFactoryClass)\n383                   && busFactoryCondition != null) {\n384                   try {\n385                       Class<?> cls = ClassLoaderUtils.loadClass(busFactoryClass, BusFactory.class)\n386                           .asSubclass(BusFactory.class);\n387                       if (busFactoryCondition.startsWith(\"#\")) {\n388                           busFactoryCondition = busFactoryCondition.substring(1);\n389                       }\n390                       int idx = busFactoryCondition.indexOf(',');\n391                       while (idx != -1) {\n392                           cls.getClassLoader().loadClass(busFactoryCondition.substring(0, idx));\n393                           busFactoryCondition = busFactoryCondition.substring(idx + 1);\n394                           idx = busFactoryCondition.indexOf(',');\n395                       }\n396                       cls.getClassLoader().loadClass(busFactoryCondition);\n397                   } catch (ClassNotFoundException | NoClassDefFoundError e) {\n398                       busFactoryClass = DEFAULT_BUS_FACTORY;\n399                   }\n400   \n401               }\n402   \n403           } catch (Exception ex) {\n404               LogUtils.log(LOG, Level.SEVERE, \"FAILED_TO_DETERMINE_BUS_FACTORY_EXC\", ex);\n405           }\n406           return busFactoryClass;\n407       }\n",
            "cost": 0.09115500000000001,
            "harness_id": "id_3",
            "sanitizer": "load arbitrary library",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/BusFactory.java:396:52",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 6
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java:\n 659       public static ResourceTypes getAllRequestResponseTypes(List<ClassResourceInfo> cris,\n 660                                                              boolean jaxbOnly,\n 661                                                              MessageBodyWriter<?> jaxbWriter) {\n 662           ResourceTypes types = new ResourceTypes();\n 663           for (ClassResourceInfo resource : cris) {\n 664               getAllTypesForResource(resource, types, jaxbOnly, jaxbWriter);\n 665           }\n 666           return types;\n 667       }\n 680       private static void getAllTypesForResource(ClassResourceInfo resource,\n 681                                                  ResourceTypes types,\n 682                                                  boolean jaxbOnly,\n 683                                                  MessageBodyWriter<?> jaxbWriter) {\n 684           Class<?> jaxbElement = null;\n 685           try {\n 686               jaxbElement = ClassLoaderUtils.loadClass(\"javax.xml.bind.JAXBElement\", ResourceUtils.class);\n 687           } catch (final ClassNotFoundException e) {\n 688               // no-op\n 689           }\n 690   \n 691           for (OperationResourceInfo ori : resource.getMethodDispatcher().getOperationResourceInfos()) {\n 692               Method method = ori.getAnnotatedMethod() == null ? ori.getMethodToInvoke() : ori.getAnnotatedMethod();\n 693               Class<?> realReturnType = method.getReturnType();\n 694               Class<?> cls = realReturnType;\n 695               if (cls == Response.class || ori.isAsync()) {\n 696                   cls = getActualJaxbType(cls, method, false);\n 697               }\n 698               Type type = method.getGenericReturnType();\n 699               if (jaxbOnly) {\n 700                   checkJaxbType(resource.getServiceClass(), cls, realReturnType == Response.class || ori.isAsync()\n 701                       ? cls : type, types, method.getAnnotations(), jaxbWriter, jaxbElement);\n 702               } else {\n 703                   types.getAllTypes().put(cls, type);\n 704               }\n 705   \n 706               for (Parameter pm : ori.getParameters()) {\n 707                   if (pm.getType() == ParameterType.REQUEST_BODY) {\n 708                       Class<?> inType = method.getParameterTypes()[pm.getIndex()];\n 709                       if (inType != AsyncResponse.class) {\n 710                           Type paramType = method.getGenericParameterTypes()[pm.getIndex()];\n 711                           if (jaxbOnly) {\n 712                               checkJaxbType(resource.getServiceClass(), inType, paramType, types,\n 713                                             method.getParameterAnnotations()[pm.getIndex()], jaxbWriter, jaxbElement);\n 714                           } else {\n 715                               types.getAllTypes().put(inType, paramType);\n 716                           }\n 717                       }\n 718                   }\n 719               }\n 720   \n 721           }\n 722   \n 723           for (ClassResourceInfo sub : resource.getSubResources()) {\n 724               if (!isRecursiveSubResource(resource, sub)) {\n 725                   getAllTypesForResource(sub, types, jaxbOnly, jaxbWriter);\n 726               }\n 727           }\n 728       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/common/classloader/ClassLoaderUtils.java:\n268       public static Class<?> loadClass(String className, Class<?> callingClass)\n269           throws ClassNotFoundException {\n270           try {\n271               ClassLoader cl = getContextClassLoader();\n272   \n273               if (cl != null) {\n274                   return cl.loadClass(className);\n275               }\n276           } catch (ClassNotFoundException e) {\n277               //ignore\n278           }\n279           return loadClass2(className, callingClass);\n280       }\n305       private static Class<?> loadClass2(String className, Class<?> callingClass)\n306           throws ClassNotFoundException {\n307           try {\n308               return Class.forName(className);\n309           } catch (ClassNotFoundException ex) {\n310               try {\n311                   final ClassLoader loader = getClassLoader(ClassLoaderUtils.class);\n312                   if (loader != null) {\n313                       return loader.loadClass(className);\n314                   }\n315               } catch (ClassNotFoundException exc) {\n316                   if (callingClass != null) {\n317                       final ClassLoader callingClassLoader = getClassLoader(callingClass);\n318                       if (callingClassLoader != null) {\n319                           return callingClassLoader.loadClass(className);\n320                       }\n321                   }\n322               }\n323               throw ex;\n324           }\n325       }\n",
            "cost": 0.086645,
            "harness_id": "id_3",
            "sanitizer": "load arbitrary library",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/common/classloader/ClassLoaderUtils.java:308:34",
            "status": "corpus",
            "valid_path": "NO",
            "id": 7
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java:\n 659       public static ResourceTypes getAllRequestResponseTypes(List<ClassResourceInfo> cris,\n 660                                                              boolean jaxbOnly,\n 661                                                              MessageBodyWriter<?> jaxbWriter) {\n 662           ResourceTypes types = new ResourceTypes();\n 663           for (ClassResourceInfo resource : cris) {\n 664               getAllTypesForResource(resource, types, jaxbOnly, jaxbWriter);\n 665           }\n 666           return types;\n 667       }\n 680       private static void getAllTypesForResource(ClassResourceInfo resource,\n 681                                                  ResourceTypes types,\n 682                                                  boolean jaxbOnly,\n 683                                                  MessageBodyWriter<?> jaxbWriter) {\n 684           Class<?> jaxbElement = null;\n 685           try {\n 686               jaxbElement = ClassLoaderUtils.loadClass(\"javax.xml.bind.JAXBElement\", ResourceUtils.class);\n 687           } catch (final ClassNotFoundException e) {\n 688               // no-op\n 689           }\n 690   \n 691           for (OperationResourceInfo ori : resource.getMethodDispatcher().getOperationResourceInfos()) {\n 692               Method method = ori.getAnnotatedMethod() == null ? ori.getMethodToInvoke() : ori.getAnnotatedMethod();\n 693               Class<?> realReturnType = method.getReturnType();\n 694               Class<?> cls = realReturnType;\n 695               if (cls == Response.class || ori.isAsync()) {\n 696                   cls = getActualJaxbType(cls, method, false);\n 697               }\n 698               Type type = method.getGenericReturnType();\n 699               if (jaxbOnly) {\n 700                   checkJaxbType(resource.getServiceClass(), cls, realReturnType == Response.class || ori.isAsync()\n 701                       ? cls : type, types, method.getAnnotations(), jaxbWriter, jaxbElement);\n 702               } else {\n 703                   types.getAllTypes().put(cls, type);\n 704               }\n 705   \n 706               for (Parameter pm : ori.getParameters()) {\n 707                   if (pm.getType() == ParameterType.REQUEST_BODY) {\n 708                       Class<?> inType = method.getParameterTypes()[pm.getIndex()];\n 709                       if (inType != AsyncResponse.class) {\n 710                           Type paramType = method.getGenericParameterTypes()[pm.getIndex()];\n 711                           if (jaxbOnly) {\n 712                               checkJaxbType(resource.getServiceClass(), inType, paramType, types,\n 713                                             method.getParameterAnnotations()[pm.getIndex()], jaxbWriter, jaxbElement);\n 714                           } else {\n 715                               types.getAllTypes().put(inType, paramType);\n 716                           }\n 717                       }\n 718                   }\n 719               }\n 720   \n 721           }\n 722   \n 723           for (ClassResourceInfo sub : resource.getSubResources()) {\n 724               if (!isRecursiveSubResource(resource, sub)) {\n 725                   getAllTypesForResource(sub, types, jaxbOnly, jaxbWriter);\n 726               }\n 727           }\n 728       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/common/classloader/ClassLoaderUtils.java:\n268       public static Class<?> loadClass(String className, Class<?> callingClass)\n269           throws ClassNotFoundException {\n270           try {\n271               ClassLoader cl = getContextClassLoader();\n272   \n273               if (cl != null) {\n274                   return cl.loadClass(className);\n275               }\n276           } catch (ClassNotFoundException e) {\n277               //ignore\n278           }\n279           return loadClass2(className, callingClass);\n280       }\n305       private static Class<?> loadClass2(String className, Class<?> callingClass)\n306           throws ClassNotFoundException {\n307           try {\n308               return Class.forName(className);\n309           } catch (ClassNotFoundException ex) {\n310               try {\n311                   final ClassLoader loader = getClassLoader(ClassLoaderUtils.class);\n312                   if (loader != null) {\n313                       return loader.loadClass(className);\n314                   }\n315               } catch (ClassNotFoundException exc) {\n316                   if (callingClass != null) {\n317                       final ClassLoader callingClassLoader = getClassLoader(callingClass);\n318                       if (callingClassLoader != null) {\n319                           return callingClassLoader.loadClass(className);\n320                       }\n321                   }\n322               }\n323               throw ex;\n324           }\n325       }\n",
            "cost": 0.08604500000000001,
            "harness_id": "id_3",
            "sanitizer": "load arbitrary library",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/common/classloader/ClassLoaderUtils.java:313:45",
            "status": "corpus",
            "valid_path": "NO",
            "id": 8
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java:\n 659       public static ResourceTypes getAllRequestResponseTypes(List<ClassResourceInfo> cris,\n 660                                                              boolean jaxbOnly,\n 661                                                              MessageBodyWriter<?> jaxbWriter) {\n 662           ResourceTypes types = new ResourceTypes();\n 663           for (ClassResourceInfo resource : cris) {\n 664               getAllTypesForResource(resource, types, jaxbOnly, jaxbWriter);\n 665           }\n 666           return types;\n 667       }\n 680       private static void getAllTypesForResource(ClassResourceInfo resource,\n 681                                                  ResourceTypes types,\n 682                                                  boolean jaxbOnly,\n 683                                                  MessageBodyWriter<?> jaxbWriter) {\n 684           Class<?> jaxbElement = null;\n 685           try {\n 686               jaxbElement = ClassLoaderUtils.loadClass(\"javax.xml.bind.JAXBElement\", ResourceUtils.class);\n 687           } catch (final ClassNotFoundException e) {\n 688               // no-op\n 689           }\n 690   \n 691           for (OperationResourceInfo ori : resource.getMethodDispatcher().getOperationResourceInfos()) {\n 692               Method method = ori.getAnnotatedMethod() == null ? ori.getMethodToInvoke() : ori.getAnnotatedMethod();\n 693               Class<?> realReturnType = method.getReturnType();\n 694               Class<?> cls = realReturnType;\n 695               if (cls == Response.class || ori.isAsync()) {\n 696                   cls = getActualJaxbType(cls, method, false);\n 697               }\n 698               Type type = method.getGenericReturnType();\n 699               if (jaxbOnly) {\n 700                   checkJaxbType(resource.getServiceClass(), cls, realReturnType == Response.class || ori.isAsync()\n 701                       ? cls : type, types, method.getAnnotations(), jaxbWriter, jaxbElement);\n 702               } else {\n 703                   types.getAllTypes().put(cls, type);\n 704               }\n 705   \n 706               for (Parameter pm : ori.getParameters()) {\n 707                   if (pm.getType() == ParameterType.REQUEST_BODY) {\n 708                       Class<?> inType = method.getParameterTypes()[pm.getIndex()];\n 709                       if (inType != AsyncResponse.class) {\n 710                           Type paramType = method.getGenericParameterTypes()[pm.getIndex()];\n 711                           if (jaxbOnly) {\n 712                               checkJaxbType(resource.getServiceClass(), inType, paramType, types,\n 713                                             method.getParameterAnnotations()[pm.getIndex()], jaxbWriter, jaxbElement);\n 714                           } else {\n 715                               types.getAllTypes().put(inType, paramType);\n 716                           }\n 717                       }\n 718                   }\n 719               }\n 720   \n 721           }\n 722   \n 723           for (ClassResourceInfo sub : resource.getSubResources()) {\n 724               if (!isRecursiveSubResource(resource, sub)) {\n 725                   getAllTypesForResource(sub, types, jaxbOnly, jaxbWriter);\n 726               }\n 727           }\n 728       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/common/classloader/ClassLoaderUtils.java:\n268       public static Class<?> loadClass(String className, Class<?> callingClass)\n269           throws ClassNotFoundException {\n270           try {\n271               ClassLoader cl = getContextClassLoader();\n272   \n273               if (cl != null) {\n274                   return cl.loadClass(className);\n275               }\n276           } catch (ClassNotFoundException e) {\n277               //ignore\n278           }\n279           return loadClass2(className, callingClass);\n280       }\n305       private static Class<?> loadClass2(String className, Class<?> callingClass)\n306           throws ClassNotFoundException {\n307           try {\n308               return Class.forName(className);\n309           } catch (ClassNotFoundException ex) {\n310               try {\n311                   final ClassLoader loader = getClassLoader(ClassLoaderUtils.class);\n312                   if (loader != null) {\n313                       return loader.loadClass(className);\n314                   }\n315               } catch (ClassNotFoundException exc) {\n316                   if (callingClass != null) {\n317                       final ClassLoader callingClassLoader = getClassLoader(callingClass);\n318                       if (callingClassLoader != null) {\n319                           return callingClassLoader.loadClass(className);\n320                       }\n321                   }\n322               }\n323               throw ex;\n324           }\n325       }\n",
            "cost": 0.088995,
            "harness_id": "id_3",
            "sanitizer": "load arbitrary library",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/common/classloader/ClassLoaderUtils.java:319:61",
            "status": "corpus",
            "valid_path": "NO",
            "id": 9
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java:\n 605       public static InputStream getClasspathResourceStream(String path, Class<?> callingClass, Bus bus) {\n 606           InputStream is = ClassLoaderUtils.getResourceAsStream(path, callingClass);\n 607           return is == null ? getResource(path, InputStream.class, bus) : is;\n 608       }\n 615       public static <T> T getResource(String path, Class<T> resourceClass, Bus bus) {\n 616           if (bus != null) {\n 617               ResourceManager rm = bus.getExtension(ResourceManager.class);\n 618               if (rm != null) {\n 619                   return rm.resolveResource(path, resourceClass);\n 620               }\n 621           }\n 622           return null;\n 623       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerBus.java:\n169       public final <T> T getExtension(Class<T> extensionType) {\n170           Object obj = extensions.get(extensionType);\n171           if (obj == null) {\n172               if (missingExtensions.contains(extensionType)) {\n173                   //already know we cannot find it\n174                   return null;\n175               }\n176               ConfiguredBeanLocator loc = (ConfiguredBeanLocator)extensions.get(ConfiguredBeanLocator.class);\n177               if (loc == null) {\n178                   loc = createConfiguredBeanLocator();\n179               }\n180               if (loc != null) {\n181                   obj = loc.getBeanOfType(extensionType.getName(), extensionType);\n182                   if (obj != null) {\n183                       extensions.put(extensionType, obj);\n184                   } else {\n185                       //force loading\n186                       Collection<?> objs = loc.getBeansOfType(extensionType);\n187                       if (objs != null && !objs.isEmpty()) {\n188                           extensions.put(extensionType, objs.iterator().next());\n189                       }\n190                       obj = extensions.get(extensionType);\n191                   }\n192               }\n193           }\n194           if (null != obj) {\n195               return extensionType.cast(obj);\n196           }\n197           //record that it couldn't be found to avoid expensive searches again in the future\n198           missingExtensions.add(extensionType);\n199           return null;\n200       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerImpl.java:\n311       public <T> Collection<? extends T> getBeansOfType(Class<T> type) {\n312           List<T> ret = new LinkedList<>();\n313           Extension ext = all.get(type.getName());\n314           if (ext != null) {\n315               Class<?> cls = ext.getClassObject(loader);\n316               if (cls != null && type.isAssignableFrom(cls)) {\n317                   synchronized (ext) {\n318                       if (ext.getLoadedObject() == null) {\n319                           loadAndRegister(ext);\n320                       }\n321                       if (ext.getLoadedObject() != null) {\n322                           ret.add(type.cast(ext.getLoadedObject()));\n323                       }\n324                   }\n325               }\n326           }\n327           for (Extension ex : ordered) {\n328               if (ex != ext) {\n329                   Class<?> cls = ex.getClassObject(loader);\n330                   if (cls != null && type.isAssignableFrom(cls)) {\n331                       synchronized (ex) {\n332                           if (ex.getLoadedObject() == null) {\n333                               loadAndRegister(ex);\n334                           }\n335                           if (ex.getLoadedObject() != null) {\n336                               ret.add(type.cast(ex.getLoadedObject()));\n337                           }\n338                       }\n339                   }\n340               }\n341           }\n342           return ret;\n343       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/Extension.java:\n163       protected Class<?> tryClass(String name, ClassLoader cl) {\n164           Throwable origEx = null;\n165           if (classloader != null) {\n166               try {\n167                   return classloader.loadClass(name);\n168               } catch (Throwable nex) {\n169                   //ignore, fall into the stuff below\n170                   //save the exception though as this is likely the important one\n171                   origEx = nex;\n172               }\n173           }\n174           try {\n175               return cl.loadClass(name);\n176           } catch (Throwable ex) {\n177               try {\n178                   // using the extension classloader as a fallback\n179                   return this.getClass().getClassLoader().loadClass(name);\n180               } catch (Throwable nex) {\n181                   notFound = true;\n182                   if (!optional) {\n183                       throw new ExtensionException(new Message(\"PROBLEM_LOADING_EXTENSION_CLASS\", LOG, name),\n184                           origEx != null ? origEx : ex);\n185                   }\n186               }\n187           }\n188           return null;\n189       }\n191       public Class<?> getClassObject(ClassLoader cl) {\n192           if (notFound) {\n193               return null;\n194           }\n195           if (clazz != null) {\n196               return clazz;\n197           }\n198           synchronized (this) {\n199               if (clazz == null) {\n200                   clazz = tryClass(className, cl);\n201               }\n202           }\n203           return clazz;\n204       }\n",
            "cost": 0.097835,
            "harness_id": "id_3",
            "sanitizer": "load arbitrary library",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/bus/extension/Extension.java:167:46",
            "status": "corpus",
            "valid_path": "NO",
            "id": 10
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java:\n 605       public static InputStream getClasspathResourceStream(String path, Class<?> callingClass, Bus bus) {\n 606           InputStream is = ClassLoaderUtils.getResourceAsStream(path, callingClass);\n 607           return is == null ? getResource(path, InputStream.class, bus) : is;\n 608       }\n 615       public static <T> T getResource(String path, Class<T> resourceClass, Bus bus) {\n 616           if (bus != null) {\n 617               ResourceManager rm = bus.getExtension(ResourceManager.class);\n 618               if (rm != null) {\n 619                   return rm.resolveResource(path, resourceClass);\n 620               }\n 621           }\n 622           return null;\n 623       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerBus.java:\n169       public final <T> T getExtension(Class<T> extensionType) {\n170           Object obj = extensions.get(extensionType);\n171           if (obj == null) {\n172               if (missingExtensions.contains(extensionType)) {\n173                   //already know we cannot find it\n174                   return null;\n175               }\n176               ConfiguredBeanLocator loc = (ConfiguredBeanLocator)extensions.get(ConfiguredBeanLocator.class);\n177               if (loc == null) {\n178                   loc = createConfiguredBeanLocator();\n179               }\n180               if (loc != null) {\n181                   obj = loc.getBeanOfType(extensionType.getName(), extensionType);\n182                   if (obj != null) {\n183                       extensions.put(extensionType, obj);\n184                   } else {\n185                       //force loading\n186                       Collection<?> objs = loc.getBeansOfType(extensionType);\n187                       if (objs != null && !objs.isEmpty()) {\n188                           extensions.put(extensionType, objs.iterator().next());\n189                       }\n190                       obj = extensions.get(extensionType);\n191                   }\n192               }\n193           }\n194           if (null != obj) {\n195               return extensionType.cast(obj);\n196           }\n197           //record that it couldn't be found to avoid expensive searches again in the future\n198           missingExtensions.add(extensionType);\n199           return null;\n200       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerImpl.java:\n311       public <T> Collection<? extends T> getBeansOfType(Class<T> type) {\n312           List<T> ret = new LinkedList<>();\n313           Extension ext = all.get(type.getName());\n314           if (ext != null) {\n315               Class<?> cls = ext.getClassObject(loader);\n316               if (cls != null && type.isAssignableFrom(cls)) {\n317                   synchronized (ext) {\n318                       if (ext.getLoadedObject() == null) {\n319                           loadAndRegister(ext);\n320                       }\n321                       if (ext.getLoadedObject() != null) {\n322                           ret.add(type.cast(ext.getLoadedObject()));\n323                       }\n324                   }\n325               }\n326           }\n327           for (Extension ex : ordered) {\n328               if (ex != ext) {\n329                   Class<?> cls = ex.getClassObject(loader);\n330                   if (cls != null && type.isAssignableFrom(cls)) {\n331                       synchronized (ex) {\n332                           if (ex.getLoadedObject() == null) {\n333                               loadAndRegister(ex);\n334                           }\n335                           if (ex.getLoadedObject() != null) {\n336                               ret.add(type.cast(ex.getLoadedObject()));\n337                           }\n338                       }\n339                   }\n340               }\n341           }\n342           return ret;\n343       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/Extension.java:\n163       protected Class<?> tryClass(String name, ClassLoader cl) {\n164           Throwable origEx = null;\n165           if (classloader != null) {\n166               try {\n167                   return classloader.loadClass(name);\n168               } catch (Throwable nex) {\n169                   //ignore, fall into the stuff below\n170                   //save the exception though as this is likely the important one\n171                   origEx = nex;\n172               }\n173           }\n174           try {\n175               return cl.loadClass(name);\n176           } catch (Throwable ex) {\n177               try {\n178                   // using the extension classloader as a fallback\n179                   return this.getClass().getClassLoader().loadClass(name);\n180               } catch (Throwable nex) {\n181                   notFound = true;\n182                   if (!optional) {\n183                       throw new ExtensionException(new Message(\"PROBLEM_LOADING_EXTENSION_CLASS\", LOG, name),\n184                           origEx != null ? origEx : ex);\n185                   }\n186               }\n187           }\n188           return null;\n189       }\n191       public Class<?> getClassObject(ClassLoader cl) {\n192           if (notFound) {\n193               return null;\n194           }\n195           if (clazz != null) {\n196               return clazz;\n197           }\n198           synchronized (this) {\n199               if (clazz == null) {\n200                   clazz = tryClass(className, cl);\n201               }\n202           }\n203           return clazz;\n204       }\n",
            "cost": 0.10073499999999999,
            "harness_id": "id_3",
            "sanitizer": "load arbitrary library",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/bus/extension/Extension.java:175:33",
            "status": "corpus",
            "valid_path": "NO",
            "id": 11
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java:\n 605       public static InputStream getClasspathResourceStream(String path, Class<?> callingClass, Bus bus) {\n 606           InputStream is = ClassLoaderUtils.getResourceAsStream(path, callingClass);\n 607           return is == null ? getResource(path, InputStream.class, bus) : is;\n 608       }\n 615       public static <T> T getResource(String path, Class<T> resourceClass, Bus bus) {\n 616           if (bus != null) {\n 617               ResourceManager rm = bus.getExtension(ResourceManager.class);\n 618               if (rm != null) {\n 619                   return rm.resolveResource(path, resourceClass);\n 620               }\n 621           }\n 622           return null;\n 623       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerBus.java:\n169       public final <T> T getExtension(Class<T> extensionType) {\n170           Object obj = extensions.get(extensionType);\n171           if (obj == null) {\n172               if (missingExtensions.contains(extensionType)) {\n173                   //already know we cannot find it\n174                   return null;\n175               }\n176               ConfiguredBeanLocator loc = (ConfiguredBeanLocator)extensions.get(ConfiguredBeanLocator.class);\n177               if (loc == null) {\n178                   loc = createConfiguredBeanLocator();\n179               }\n180               if (loc != null) {\n181                   obj = loc.getBeanOfType(extensionType.getName(), extensionType);\n182                   if (obj != null) {\n183                       extensions.put(extensionType, obj);\n184                   } else {\n185                       //force loading\n186                       Collection<?> objs = loc.getBeansOfType(extensionType);\n187                       if (objs != null && !objs.isEmpty()) {\n188                           extensions.put(extensionType, objs.iterator().next());\n189                       }\n190                       obj = extensions.get(extensionType);\n191                   }\n192               }\n193           }\n194           if (null != obj) {\n195               return extensionType.cast(obj);\n196           }\n197           //record that it couldn't be found to avoid expensive searches again in the future\n198           missingExtensions.add(extensionType);\n199           return null;\n200       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerImpl.java:\n311       public <T> Collection<? extends T> getBeansOfType(Class<T> type) {\n312           List<T> ret = new LinkedList<>();\n313           Extension ext = all.get(type.getName());\n314           if (ext != null) {\n315               Class<?> cls = ext.getClassObject(loader);\n316               if (cls != null && type.isAssignableFrom(cls)) {\n317                   synchronized (ext) {\n318                       if (ext.getLoadedObject() == null) {\n319                           loadAndRegister(ext);\n320                       }\n321                       if (ext.getLoadedObject() != null) {\n322                           ret.add(type.cast(ext.getLoadedObject()));\n323                       }\n324                   }\n325               }\n326           }\n327           for (Extension ex : ordered) {\n328               if (ex != ext) {\n329                   Class<?> cls = ex.getClassObject(loader);\n330                   if (cls != null && type.isAssignableFrom(cls)) {\n331                       synchronized (ex) {\n332                           if (ex.getLoadedObject() == null) {\n333                               loadAndRegister(ex);\n334                           }\n335                           if (ex.getLoadedObject() != null) {\n336                               ret.add(type.cast(ex.getLoadedObject()));\n337                           }\n338                       }\n339                   }\n340               }\n341           }\n342           return ret;\n343       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/Extension.java:\n163       protected Class<?> tryClass(String name, ClassLoader cl) {\n164           Throwable origEx = null;\n165           if (classloader != null) {\n166               try {\n167                   return classloader.loadClass(name);\n168               } catch (Throwable nex) {\n169                   //ignore, fall into the stuff below\n170                   //save the exception though as this is likely the important one\n171                   origEx = nex;\n172               }\n173           }\n174           try {\n175               return cl.loadClass(name);\n176           } catch (Throwable ex) {\n177               try {\n178                   // using the extension classloader as a fallback\n179                   return this.getClass().getClassLoader().loadClass(name);\n180               } catch (Throwable nex) {\n181                   notFound = true;\n182                   if (!optional) {\n183                       throw new ExtensionException(new Message(\"PROBLEM_LOADING_EXTENSION_CLASS\", LOG, name),\n184                           origEx != null ? origEx : ex);\n185                   }\n186               }\n187           }\n188           return null;\n189       }\n191       public Class<?> getClassObject(ClassLoader cl) {\n192           if (notFound) {\n193               return null;\n194           }\n195           if (clazz != null) {\n196               return clazz;\n197           }\n198           synchronized (this) {\n199               if (clazz == null) {\n200                   clazz = tryClass(className, cl);\n201               }\n202           }\n203           return clazz;\n204       }\n",
            "cost": 0.099135,
            "harness_id": "id_3",
            "sanitizer": "load arbitrary library",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/bus/extension/Extension.java:179:67",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 12
        },
        {
            "blob": [
                "R0VUADAAamF6emVyX2hvbmV5cG90LnhzbA=="
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXBUtils.java:\n 45       public static JAXBContext createJaxbContext(Set<Class<?>> classes, Class<?>[] extraClass,\n 46                                                   Map<String, Object> contextProperties) {\n 47           if (classes == null || classes.isEmpty()) {\n 48               return null;\n 49           }\n 50           org.apache.cxf.common.jaxb.JAXBUtils.scanPackages(classes, extraClass, null);\n 51   \n 52           JAXBContext ctx;\n 53           try {\n 54               ctx = JAXBContext.newInstance(classes.toArray(new Class[0]), contextProperties);\n 55               return ctx;\n 56           } catch (JAXBException ex) {\n 57               LOG.log(Level.SEVERE, \"No JAXB context can be created\", ex);\n 58           }\n 59           return null;\n 60       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/common/jaxb/JAXBUtils.java:\n 845       public static void scanPackages(Set<Class<?>> classes,\n 846                                       Class<?>[] extraClass,\n 847                                       Map<Package, CachedClass> objectFactoryCache) {\n 848   \n 849           // add user extra class into jaxb context\n 850           if (extraClass != null && extraClass.length > 0) {\n 851               for (Class<?> clz : extraClass) {\n 852                   classes.add(clz);\n 853               }\n 854           }\n 855   \n 856           // try and read any jaxb.index files that are with the other classes.\n 857           // This should\n 858           // allow loading of extra classes (such as subclasses for inheritance\n 859           // reasons)\n 860           // that are in the same package. Also check for ObjectFactory classes\n 861           Map<String, InputStream> packages = new HashMap<>();\n 862           Map<String, ClassLoader> packageLoaders = new HashMap<>();\n 863           Set<Class<?>> objectFactories = new HashSet<>();\n 864           for (Class<?> jcls : classes) {\n 865               String pkgName = PackageUtils.getPackageName(jcls);\n 866               if (!packages.containsKey(pkgName)) {\n 867                   Package pkg = jcls.getPackage();\n 868   \n 869                   packages.put(pkgName, jcls.getResourceAsStream(\"jaxb.index\"));\n 870                   packageLoaders.put(pkgName, getClassLoader(jcls));\n 871                   String objectFactoryClassName = pkgName + \".\" + \"ObjectFactory\";\n 872                   Class<?> ofactory = null;\n 873                   CachedClass cachedFactory = null;\n 874                   if (pkg != null && objectFactoryCache != null) {\n 875                       synchronized (objectFactoryCache) {\n 876                           cachedFactory = objectFactoryCache.get(pkg);\n 877                       }\n 878                   }\n 879                   if (cachedFactory != null) {\n 880                       ofactory = cachedFactory.getCachedClass();\n 881                   }\n 882                   if (ofactory == null) {\n 883                       try {\n 884                           ofactory = Class.forName(objectFactoryClassName, false, getClassLoader(jcls));\n 885                           objectFactories.add(ofactory);\n 886                           addToObjectFactoryCache(pkg, ofactory, objectFactoryCache);\n 887                       } catch (ClassNotFoundException e) {\n 888                           addToObjectFactoryCache(pkg, null, objectFactoryCache);\n 889                       }\n 890                   } else {\n 891                       objectFactories.add(ofactory);\n 892                   }\n 893               }\n 894           }\n 895           for (Map.Entry<String, InputStream> entry : packages.entrySet()) {\n 896               if (entry.getValue() != null) {\n 897                   try (BufferedReader reader = new BufferedReader(\n 898                           new InputStreamReader(entry.getValue(), StandardCharsets.UTF_8))) {\n 899                       String pkg = entry.getKey();\n 900                       ClassLoader loader = packageLoaders.get(pkg);\n 901                       if (!StringUtils.isEmpty(pkg)) {\n 902                           pkg += \".\";\n 903                       }\n 904   \n 905                       String line = reader.readLine();\n 906                       while (line != null) {\n 907                           line = line.trim();\n 908                           if (line.indexOf('#') != -1) {\n 909                               line = line.substring(0, line.indexOf('#'));\n 910                           }\n 911                           if (!StringUtils.isEmpty(line)) {\n 912                               try {\n 913                                   Class<?> ncls = Class.forName(pkg + line, false, loader);\n 914                                   classes.add(ncls);\n 915                               } catch (Exception e) {\n 916                                   // ignore\n 917                               }\n 918                           }\n 919                           line = reader.readLine();\n 920                       }\n 921                   } catch (IOException e) {\n 922                       // ignore\n 923                   } finally {\n 924                       try {\n 925                           entry.getValue().close();\n 926                       } catch (IOException e) {\n 927                           // ignore\n 928                       }\n 929                   }\n 930               }\n 931           }\n 932           classes.addAll(objectFactories);\n 933       }\n",
            "cost": 0.6308250000000001,
            "harness_id": "id_3",
            "sanitizer": "load arbitrary library",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/common/jaxb/JAXBUtils.java:884:50",
            "status": "corpus",
            "valid_path": "YES",
            "id": 13
        },
        {
            "blob": [
                "R0VUADAAamF6emVyX2hvbmV5cG90LnhzbA=="
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXBUtils.java:\n 45       public static JAXBContext createJaxbContext(Set<Class<?>> classes, Class<?>[] extraClass,\n 46                                                   Map<String, Object> contextProperties) {\n 47           if (classes == null || classes.isEmpty()) {\n 48               return null;\n 49           }\n 50           org.apache.cxf.common.jaxb.JAXBUtils.scanPackages(classes, extraClass, null);\n 51   \n 52           JAXBContext ctx;\n 53           try {\n 54               ctx = JAXBContext.newInstance(classes.toArray(new Class[0]), contextProperties);\n 55               return ctx;\n 56           } catch (JAXBException ex) {\n 57               LOG.log(Level.SEVERE, \"No JAXB context can be created\", ex);\n 58           }\n 59           return null;\n 60       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/common/jaxb/JAXBUtils.java:\n 845       public static void scanPackages(Set<Class<?>> classes,\n 846                                       Class<?>[] extraClass,\n 847                                       Map<Package, CachedClass> objectFactoryCache) {\n 848   \n 849           // add user extra class into jaxb context\n 850           if (extraClass != null && extraClass.length > 0) {\n 851               for (Class<?> clz : extraClass) {\n 852                   classes.add(clz);\n 853               }\n 854           }\n 855   \n 856           // try and read any jaxb.index files that are with the other classes.\n 857           // This should\n 858           // allow loading of extra classes (such as subclasses for inheritance\n 859           // reasons)\n 860           // that are in the same package. Also check for ObjectFactory classes\n 861           Map<String, InputStream> packages = new HashMap<>();\n 862           Map<String, ClassLoader> packageLoaders = new HashMap<>();\n 863           Set<Class<?>> objectFactories = new HashSet<>();\n 864           for (Class<?> jcls : classes) {\n 865               String pkgName = PackageUtils.getPackageName(jcls);\n 866               if (!packages.containsKey(pkgName)) {\n 867                   Package pkg = jcls.getPackage();\n 868   \n 869                   packages.put(pkgName, jcls.getResourceAsStream(\"jaxb.index\"));\n 870                   packageLoaders.put(pkgName, getClassLoader(jcls));\n 871                   String objectFactoryClassName = pkgName + \".\" + \"ObjectFactory\";\n 872                   Class<?> ofactory = null;\n 873                   CachedClass cachedFactory = null;\n 874                   if (pkg != null && objectFactoryCache != null) {\n 875                       synchronized (objectFactoryCache) {\n 876                           cachedFactory = objectFactoryCache.get(pkg);\n 877                       }\n 878                   }\n 879                   if (cachedFactory != null) {\n 880                       ofactory = cachedFactory.getCachedClass();\n 881                   }\n 882                   if (ofactory == null) {\n 883                       try {\n 884                           ofactory = Class.forName(objectFactoryClassName, false, getClassLoader(jcls));\n 885                           objectFactories.add(ofactory);\n 886                           addToObjectFactoryCache(pkg, ofactory, objectFactoryCache);\n 887                       } catch (ClassNotFoundException e) {\n 888                           addToObjectFactoryCache(pkg, null, objectFactoryCache);\n 889                       }\n 890                   } else {\n 891                       objectFactories.add(ofactory);\n 892                   }\n 893               }\n 894           }\n 895           for (Map.Entry<String, InputStream> entry : packages.entrySet()) {\n 896               if (entry.getValue() != null) {\n 897                   try (BufferedReader reader = new BufferedReader(\n 898                           new InputStreamReader(entry.getValue(), StandardCharsets.UTF_8))) {\n 899                       String pkg = entry.getKey();\n 900                       ClassLoader loader = packageLoaders.get(pkg);\n 901                       if (!StringUtils.isEmpty(pkg)) {\n 902                           pkg += \".\";\n 903                       }\n 904   \n 905                       String line = reader.readLine();\n 906                       while (line != null) {\n 907                           line = line.trim();\n 908                           if (line.indexOf('#') != -1) {\n 909                               line = line.substring(0, line.indexOf('#'));\n 910                           }\n 911                           if (!StringUtils.isEmpty(line)) {\n 912                               try {\n 913                                   Class<?> ncls = Class.forName(pkg + line, false, loader);\n 914                                   classes.add(ncls);\n 915                               } catch (Exception e) {\n 916                                   // ignore\n 917                               }\n 918                           }\n 919                           line = reader.readLine();\n 920                       }\n 921                   } catch (IOException e) {\n 922                       // ignore\n 923                   } finally {\n 924                       try {\n 925                           entry.getValue().close();\n 926                       } catch (IOException e) {\n 927                           // ignore\n 928                       }\n 929                   }\n 930               }\n 931           }\n 932           classes.addAll(objectFactories);\n 933       }\n",
            "cost": 0.6583249999999999,
            "harness_id": "id_3",
            "sanitizer": "load arbitrary library",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/common/jaxb/JAXBUtils.java:913:63",
            "status": "corpus",
            "valid_path": "YES",
            "id": 14
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java:\n 659       public static ResourceTypes getAllRequestResponseTypes(List<ClassResourceInfo> cris,\n 660                                                              boolean jaxbOnly,\n 661                                                              MessageBodyWriter<?> jaxbWriter) {\n 662           ResourceTypes types = new ResourceTypes();\n 663           for (ClassResourceInfo resource : cris) {\n 664               getAllTypesForResource(resource, types, jaxbOnly, jaxbWriter);\n 665           }\n 666           return types;\n 667       }\n 680       private static void getAllTypesForResource(ClassResourceInfo resource,\n 681                                                  ResourceTypes types,\n 682                                                  boolean jaxbOnly,\n 683                                                  MessageBodyWriter<?> jaxbWriter) {\n 684           Class<?> jaxbElement = null;\n 685           try {\n 686               jaxbElement = ClassLoaderUtils.loadClass(\"javax.xml.bind.JAXBElement\", ResourceUtils.class);\n 687           } catch (final ClassNotFoundException e) {\n 688               // no-op\n 689           }\n 690   \n 691           for (OperationResourceInfo ori : resource.getMethodDispatcher().getOperationResourceInfos()) {\n 692               Method method = ori.getAnnotatedMethod() == null ? ori.getMethodToInvoke() : ori.getAnnotatedMethod();\n 693               Class<?> realReturnType = method.getReturnType();\n 694               Class<?> cls = realReturnType;\n 695               if (cls == Response.class || ori.isAsync()) {\n 696                   cls = getActualJaxbType(cls, method, false);\n 697               }\n 698               Type type = method.getGenericReturnType();\n 699               if (jaxbOnly) {\n 700                   checkJaxbType(resource.getServiceClass(), cls, realReturnType == Response.class || ori.isAsync()\n 701                       ? cls : type, types, method.getAnnotations(), jaxbWriter, jaxbElement);\n 702               } else {\n 703                   types.getAllTypes().put(cls, type);\n 704               }\n 705   \n 706               for (Parameter pm : ori.getParameters()) {\n 707                   if (pm.getType() == ParameterType.REQUEST_BODY) {\n 708                       Class<?> inType = method.getParameterTypes()[pm.getIndex()];\n 709                       if (inType != AsyncResponse.class) {\n 710                           Type paramType = method.getGenericParameterTypes()[pm.getIndex()];\n 711                           if (jaxbOnly) {\n 712                               checkJaxbType(resource.getServiceClass(), inType, paramType, types,\n 713                                             method.getParameterAnnotations()[pm.getIndex()], jaxbWriter, jaxbElement);\n 714                           } else {\n 715                               types.getAllTypes().put(inType, paramType);\n 716                           }\n 717                       }\n 718                   }\n 719               }\n 720   \n 721           }\n 722   \n 723           for (ClassResourceInfo sub : resource.getSubResources()) {\n 724               if (!isRecursiveSubResource(resource, sub)) {\n 725                   getAllTypesForResource(sub, types, jaxbOnly, jaxbWriter);\n 726               }\n 727           }\n 728       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/common/classloader/ClassLoaderUtils.java:\n268       public static Class<?> loadClass(String className, Class<?> callingClass)\n269           throws ClassNotFoundException {\n270           try {\n271               ClassLoader cl = getContextClassLoader();\n272   \n273               if (cl != null) {\n274                   return cl.loadClass(className);\n275               }\n276           } catch (ClassNotFoundException e) {\n277               //ignore\n278           }\n279           return loadClass2(className, callingClass);\n280       }\n",
            "cost": 0.079805,
            "harness_id": "id_3",
            "sanitizer": "load arbitrary library",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/common/classloader/ClassLoaderUtils.java:274:37",
            "status": "corpus",
            "valid_path": "NO",
            "id": 15
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/BusFactory.java:\n 95       public static synchronized Bus getDefaultBus() {\n 96           return getDefaultBus(true);\n 97       }\n105       public static synchronized Bus getDefaultBus(boolean createIfNeeded) {\n106           if (defaultBus == null && createIfNeeded) {\n107               defaultBus = newInstance().createBus();\n108           }\n109           if (defaultBus == null) {\n110               // never set up.\n111               return null;\n112           }\n113           return defaultBus;\n114       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/CXFBusFactory.java:\n31       public Bus createBus() {\n32           return createBus(new HashMap<>());\n33       }\n35       public Bus createBus(Map<Class<?>, Object> e) {\n36           return createBus(e, new HashMap<>());\n37       }\n39       public Bus createBus(Map<Class<?>, Object> e, Map<String, Object> properties) {\n40           ExtensionManagerBus bus = new ExtensionManagerBus(e, properties);\n41           possiblySetDefaultBus(bus);\n42           initializeBus(bus);\n43           bus.initialize();\n44           return bus;\n45       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerBus.java:\n 73       public ExtensionManagerBus(Map<Class<?>, Object> extensions, Map<String, Object> props,\n 74             ClassLoader extensionClassLoader) {\n 75           this.extensions = extensions == null ? new ConcurrentHashMap<>(16, 0.75f, 4)\n 76                   : new ConcurrentHashMap<>(extensions);\n 77           this.missingExtensions = new CopyOnWriteArraySet<>();\n 78   \n 79   \n 80           state = BusState.INITIAL;\n 81   \n 82           BusFactory.possiblySetDefaultBus(this);\n 83           if (null != props) {\n 84               properties.putAll(props);\n 85           }\n 86   \n 87           Configurer configurer = (Configurer)this.extensions.get(Configurer.class);\n 88           if (null == configurer) {\n 89               configurer = new NullConfigurer();\n 90               this.extensions.put(Configurer.class, configurer);\n 91           }\n 92   \n 93           id = getBusId(properties);\n 94   \n 95           ResourceManager resourceManager = new DefaultResourceManager();\n 96   \n 97           properties.put(BUS_ID_PROPERTY_NAME, BUS_PROPERTY_NAME);\n 98           properties.put(BUS_PROPERTY_NAME, this);\n 99           properties.put(DEFAULT_BUS_ID, this);\n100   \n101           ResourceResolver propertiesResolver = new PropertiesResolver(properties);\n102           resourceManager.addResourceResolver(propertiesResolver);\n103   \n104           ResourceResolver busResolver = new SinglePropertyResolver(BUS_PROPERTY_NAME, this);\n105           resourceManager.addResourceResolver(busResolver);\n106           resourceManager.addResourceResolver(new ObjectTypeResolver(this));\n107   \n108           busResolver = new SinglePropertyResolver(DEFAULT_BUS_ID, this);\n109           resourceManager.addResourceResolver(busResolver);\n110           resourceManager.addResourceResolver(new ObjectTypeResolver(this));\n111           resourceManager.addResourceResolver(new ResourceResolver() {\n112               public <T> T resolve(String resourceName, Class<T> resourceType) {\n113                   if (extensionManager != null) {\n114                       return extensionManager.getExtension(resourceName, resourceType);\n115                   }\n116                   return null;\n117               }\n118               public InputStream getAsStream(String name) {\n119                   return null;\n120               }\n121           });\n122   \n123           this.extensions.put(ResourceManager.class, resourceManager);\n124   \n125           extensionManager = new ExtensionManagerImpl(new String[0],\n126                                                       extensionClassLoader,\n127                                                       this.extensions,\n128                                                       resourceManager,\n129                                                       this);\n130   \n131           setState(BusState.INITIAL);\n132   \n133           if (null == this.getExtension(DestinationFactoryManager.class)) {\n134               new DestinationFactoryManagerImpl(this);\n135           }\n136   \n137           if (null == this.getExtension(ConduitInitiatorManager.class)) {\n138               new ConduitInitiatorManagerImpl(this);\n139           }\n140   \n141           if (null == this.getExtension(BindingFactoryManager.class)) {\n142               new BindingFactoryManagerImpl(this);\n143           }\n144           extensionManager.load(new String[] {ExtensionManagerImpl.BUS_EXTENSION_RESOURCE});\n145           extensionManager.activateAllByType(ResourceResolver.class);\n146   \n147           this.extensions.put(ExtensionManager.class, extensionManager);\n148       }\n150       public ExtensionManagerBus(Map<Class<?>, Object> e, Map<String, Object> properties) {\n151           this(e, properties, Thread.currentThread().getContextClassLoader());\n152       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerImpl.java:\n 96       final void load(String[] resources) {\n 97           if (resources == null) {\n 98               return;\n 99           }\n100           try {\n101               for (String resource : resources) {\n102                   load(resource);\n103               }\n104           } catch (IOException ex) {\n105               throw new ExtensionException(ex);\n106           }\n107       }\n153       final void load(String resource) throws IOException {\n154           if (loader != getClass().getClassLoader()) {\n155               load(resource, getClass().getClassLoader());\n156           }\n157           load(resource, loader);\n158       }\n159       final synchronized void load(String resource, ClassLoader l) throws IOException {\n160   \n161           Enumeration<URL> urls = l.getResources(resource);\n162   \n163           while (urls.hasMoreElements()) {\n164               final URL url = urls.nextElement();\n165               try (InputStream is = AccessController.doPrivileged(new PrivilegedExceptionAction<InputStream>() {\n166                       public InputStream run() throws Exception {\n167                           return url.openStream();\n168                       }\n169                   })) {\n170                   List<Extension> exts = new TextExtensionFragmentParser(loader).getExtensions(is);\n171                   for (Extension e : exts) {\n172                       if (loader != l) {\n173                           e.classloader = l;\n174                       }\n175                       if (!all.containsKey(e.getName())) {\n176                           all.put(e.getName(), e);\n177                           ordered.add(e);\n178                       }\n179                   }\n180               } catch (PrivilegedActionException pae) {\n181                   throw (IOException)pae.getException();\n182               }\n183           }\n184       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/TextExtensionFragmentParser.java:\n 61       public List<Extension> getExtensions(InputStream is) throws IOException {\n 62           List<Extension> extensions = new ArrayList<>();\n 63           BufferedReader reader = new BufferedReader(new InputStreamReader(is, StandardCharsets.UTF_8));\n 64           String line = reader.readLine();\n 65           while (line != null) {\n 66               final Extension extension = getExtensionFromTextLine(line);\n 67               if (extension != null) {\n 68                   extensions.add(extension);\n 69               }\n 70               line = reader.readLine();\n 71           }\n 72           return extensions;\n 73       }\n 75       private Extension getExtensionFromTextLine(String line) {\n 76           line = line.trim();\n 77           if (line.isEmpty() || line.charAt(0) == '#') {\n 78               return null;\n 79           }\n 80           final Extension ext = new Extension(loader);\n 81           final String[] parts = line.split(\":\");\n 82           ext.setClassname(parts[0]);\n 83           if (ext.getClassname() == null) {\n 84               return null;\n 85           }\n 86           if (parts.length >= 2) {\n 87               String interfaceName = parts[1];\n 88               if (interfaceName != null && interfaceName.isEmpty()) {\n 89                   interfaceName = null;\n 90               }\n 91               ext.setInterfaceName(interfaceName);\n 92           }\n 93           if (parts.length >= 3) {\n 94               ext.setDeferred(Boolean.parseBoolean(parts[2]));\n 95           }\n 96           if (parts.length >= 4) {\n 97               ext.setOptional(Boolean.parseBoolean(parts[3]));\n 98           }\n 99           return ext;\n100       }\n",
            "cost": 0.11349000000000001,
            "harness_id": "id_3",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/bus/extension/TextExtensionFragmentParser.java:81:43",
            "status": "corpus",
            "valid_path": "NO",
            "id": 16
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/BusFactory.java:\n 95       public static synchronized Bus getDefaultBus() {\n 96           return getDefaultBus(true);\n 97       }\n105       public static synchronized Bus getDefaultBus(boolean createIfNeeded) {\n106           if (defaultBus == null && createIfNeeded) {\n107               defaultBus = newInstance().createBus();\n108           }\n109           if (defaultBus == null) {\n110               // never set up.\n111               return null;\n112           }\n113           return defaultBus;\n114       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/CXFBusFactory.java:\n31       public Bus createBus() {\n32           return createBus(new HashMap<>());\n33       }\n35       public Bus createBus(Map<Class<?>, Object> e) {\n36           return createBus(e, new HashMap<>());\n37       }\n39       public Bus createBus(Map<Class<?>, Object> e, Map<String, Object> properties) {\n40           ExtensionManagerBus bus = new ExtensionManagerBus(e, properties);\n41           possiblySetDefaultBus(bus);\n42           initializeBus(bus);\n43           bus.initialize();\n44           return bus;\n45       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerBus.java:\n241       public void initialize() {\n242           setState(BusState.INITIALIZING);\n243   \n244           Collection<? extends BusCreationListener> ls = getExtension(ConfiguredBeanLocator.class)\n245               .getBeansOfType(BusCreationListener.class);\n246           for (BusCreationListener l : ls) {\n247               l.busCreated(this);\n248           }\n249   \n250           doInitializeInternal();\n251   \n252           BusLifeCycleManager lifeCycleManager = this.getExtension(BusLifeCycleManager.class);\n253           if (null != lifeCycleManager) {\n254               lifeCycleManager.initComplete();\n255           }\n256           setState(BusState.RUNNING);\n257       }\n259       protected void doInitializeInternal() {\n260           extensionManager.initialize();\n261           initializeFeatures();\n262       }\n268       protected void initializeFeatures() {\n269           loadAdditionalFeatures();\n270           for (Feature f : features) {\n271               f.initialize(this);\n272           }\n273       }\n\nsrc/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/https/CertConstraintsFeature.java:\n100           @Override\n101           public void initialize(Bus bus) {\n102               if (contraints == null) {\n103                   return;\n104               }\n105               doInitializeProvider(bus, bus);\n106               CertConstraints c = CertConstraintsJaxBUtils.createCertConstraints(contraints);\n107               bus.setProperty(CertConstraints.class.getName(), c);\n108           }\n\nsrc/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/https/CertConstraintsJaxBUtils.java:\n 40       public static CertConstraints createCertConstraints(\n 41           CertificateConstraintsType certConstraints\n 42       ) {\n 43           List<String> subjectRegexps = getSubjectConstraints(certConstraints);\n 44           CertConstraints.Combinator subjectCombinator =\n 45               getSubjectConstraintsCombinator(certConstraints);\n 46           List<String> issuerRegexps = getIssuerConstraints(certConstraints);\n 47           CertConstraints.Combinator issuerCombinator =\n 48               getIssuerConstraintsCombinator(certConstraints);\n 49   \n 50           return new CertConstraints(\n 51               subjectRegexps, subjectCombinator, issuerRegexps, issuerCombinator);\n 52       }\n\nsrc/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/https/CertConstraints.java:\n 53           DNConstraints(\n 54               final java.util.List<String> patterns,\n 55               final Combinator patternCombinator\n 56           ) throws java.util.regex.PatternSyntaxException {\n 57               if (patterns == null) {\n 58                   combinator = Combinator.ALL;\n 59                   return;\n 60               }\n 61               combinator = patternCombinator;\n 62               for (String expression : patterns) {\n 63                   dnPatterns.add(Pattern.compile(expression));\n 64               }\n 65           }\n122       public CertConstraints(\n123           final java.util.List<String> subjectConstraints,\n124           final Combinator subjectConstraintsCombinator,\n125           final java.util.List<String> issuerConstraints,\n126           final Combinator issuerConstraintsCombinator\n127       ) throws java.util.regex.PatternSyntaxException {\n128           this.subjectDNConstraints =\n129               new DNConstraints(subjectConstraints, subjectConstraintsCombinator);\n130           this.issuerDNConstraints =\n131               new DNConstraints(issuerConstraints, issuerConstraintsCombinator);\n132       }\n",
            "cost": 0.10687500000000001,
            "harness_id": "id_3",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/https/CertConstraints.java:63:48",
            "status": "corpus",
            "valid_path": "NO",
            "id": 17
        },
        {
            "blob": [
                "R0VUADAAL2V4cGxvaXR7Lip9L2luamVjdA=="
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n1209       public List<ClassResourceInfo> getResourcesList(Message m, UriInfo ui) {\n1210           final String slash = \"/\";\n1211           String path = ui.getPath();\n1212           if (!path.startsWith(slash)) {\n1213               path = slash + path;\n1214           }\n1215           List<ClassResourceInfo> all = ((JAXRSServiceImpl)m.getExchange().getService())\n1216               .getClassResourceInfos();\n1217           boolean absolutePathSlashOn = checkAbsolutePathSlash && ui.getAbsolutePath().getPath().endsWith(slash);\n1218           if (slash.equals(path) && !absolutePathSlashOn) {\n1219               return all;\n1220           }\n1221           List<ClassResourceInfo> cris = new LinkedList<>();\n1222           for (ClassResourceInfo cri : all) {\n1223               MultivaluedMap<String, String> map = new MetadataMap<>();\n1224               if (cri.getURITemplate().match(path, map)\n1225                   && slash.equals(map.getFirst(URITemplate.FINAL_MATCH_GROUP))) {\n1226                   cris.add(cri);\n1227               }\n1228           }\n1229           return cris;\n1230       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/model/URITemplate.java:\n179       public boolean match(String uri, MultivaluedMap<String, String> templateVariableToValue) {\n180   \n181           if (uri == null) {\n182               return (templateRegexPattern == null) ? true : false;\n183           }\n184   \n185           if (templateRegexPattern == null) {\n186               return false;\n187           }\n188   \n189           Matcher m = templateRegexPattern.matcher(uri);\n190           if (!m.matches() || template.equals(SLASH) && uri.startsWith(SLASH_QUOTE)) {\n191               if (uri.contains(\";\")) {\n192                   // we might be trying to match one or few path segments\n193                   // containing matrix\n194                   // parameters against a clear path segment as in @Path(\"base\").\n195                   List<PathSegment> pList = JAXRSUtils.getPathSegments(template, false);\n196                   List<PathSegment> uList = JAXRSUtils.getPathSegments(uri, false);\n197                   StringBuilder sb = new StringBuilder();\n198                   for (int i = 0; i < uList.size(); i++) {\n199                       final String segment;\n200                       if (pList.size() > i && pList.get(i).getPath().indexOf('{') == -1) {\n201                           segment = uList.get(i).getPath();\n202                       } else {\n203                           segment = HttpUtils.fromPathSegment(uList.get(i));\n204                       }\n205                       if (!segment.isEmpty()) {\n206                           sb.append(SLASH);\n207                       }\n208                       sb.append(segment);\n209                   }\n210                   uri = sb.toString();\n211                   if (uri.isEmpty()) {\n212                       uri = SLASH;\n213                   }\n214                   m = templateRegexPattern.matcher(uri);\n215                   if (!m.matches()) {\n216                       return false;\n217                   }\n218               } else {\n219                   return false;\n220               }\n221           }\n222   \n223           // Assign the matched template values to template variables\n224           int groupCount = m.groupCount();\n225   \n226           int i = 1;\n227           for (String name : variables) {\n228               while (i <= groupCount) {\n229                   String value = m.group(i++);\n230                   if ((value == null || value.length() == 0 && i < groupCount)\n231                       && variables.size() + 1 < groupCount) {\n232                       continue;\n233                   }\n234                   templateVariableToValue.add(name, value);\n235                   break;\n236               }\n237           }\n238           // The right hand side value, might be used to further resolve\n239           // sub-resources.\n240   \n241           String finalGroup = i > groupCount ? SLASH : m.group(groupCount);\n242           if (finalGroup == null || finalGroup.startsWith(SLASH_QUOTE)) {\n243               finalGroup = SLASH;\n244           }\n245   \n246           templateVariableToValue.putSingle(FINAL_MATCH_GROUP, finalGroup);\n247   \n248           return true;\n249       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXRSUtils.java:\n 283       public static List<PathSegment> getPathSegments(String thePath, boolean decode) {\n 284           return getPathSegments(thePath, decode, true);\n 285       }\n 298       public static List<PathSegment> getPathSegments(String thePath, boolean decode,\n 299                                                       boolean ignoreLastSlash) {\n 300           \n 301           final List<PathSegment> segments = new ArrayList<>();\n 302           int templateDepth = 0;\n 303           int start = 0;\n 304           for (int i = 0; i < thePath.length(); ++i) {\n 305               if (thePath.charAt(i) == '/') {\n 306                   // The '/' is in template (possibly, with arbitrary regex) definition\n 307                   if (templateDepth != 0) {\n 308                       continue;\n 309                   } else if (start != i) {\n 310                       final String segment = thePath.substring(start, i);\n 311                       segments.add(new PathSegmentImpl(segment, decode));\n 312                   }\n 313                   \n 314                   // advance the positions, empty path segments\n 315                   start = i + 1;\n 316               } else if (thePath.charAt(i) == '{') {\n 317                   ++templateDepth;\n 318               } else if (thePath.charAt(i) == '}') {\n 319                   --templateDepth; // could go negative, since the template could be unbalanced\n 320               }\n 321           }\n 322           \n 323           // the URI has unbalanced curly braces, backtrack to the last seen position of the path\n 324           // segment separator and just split segments as-is from there\n 325           if (templateDepth != 0) {\n 326               segments.addAll(\n 327                   Arrays\n 328                       .stream(thePath.substring(start).split(\"/\"))\n 329                       .filter(StringUtils.notEmpty())\n 330                       .map(p -> new PathSegmentImpl(p, decode))\n 331                       .collect(Collectors.toList()));\n 332   \n 333               int len = thePath.length();\n 334               if (len > 0 && thePath.charAt(len - 1) == '/') {\n 335                   String value = ignoreLastSlash ? \"\" : \"/\";\n 336                   segments.add(new PathSegmentImpl(value, false));\n 337               }\n 338           } else {\n 339               // the last symbol is slash\n 340               if (start == thePath.length() && start > 0 && thePath.charAt(start - 1) == '/') {\n 341                   String value = ignoreLastSlash ? \"\" : \"/\";\n 342                   segments.add(new PathSegmentImpl(value, false));\n 343               } else if (!thePath.isEmpty()) {\n 344                   final String segment = thePath.substring(start);\n 345                   segments.add(new PathSegmentImpl(segment, decode));\n 346               }\n 347           }\n 348           \n 349           return segments;\n 350       }\n",
            "cost": 0.5894699999999999,
            "harness_id": "id_3",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXRSUtils.java:328:60",
            "status": "corpus",
            "valid_path": "YES",
            "id": 18
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java:\n 605       public static InputStream getClasspathResourceStream(String path, Class<?> callingClass, Bus bus) {\n 606           InputStream is = ClassLoaderUtils.getResourceAsStream(path, callingClass);\n 607           return is == null ? getResource(path, InputStream.class, bus) : is;\n 608       }\n 615       public static <T> T getResource(String path, Class<T> resourceClass, Bus bus) {\n 616           if (bus != null) {\n 617               ResourceManager rm = bus.getExtension(ResourceManager.class);\n 618               if (rm != null) {\n 619                   return rm.resolveResource(path, resourceClass);\n 620               }\n 621           }\n 622           return null;\n 623       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerBus.java:\n169       public final <T> T getExtension(Class<T> extensionType) {\n170           Object obj = extensions.get(extensionType);\n171           if (obj == null) {\n172               if (missingExtensions.contains(extensionType)) {\n173                   //already know we cannot find it\n174                   return null;\n175               }\n176               ConfiguredBeanLocator loc = (ConfiguredBeanLocator)extensions.get(ConfiguredBeanLocator.class);\n177               if (loc == null) {\n178                   loc = createConfiguredBeanLocator();\n179               }\n180               if (loc != null) {\n181                   obj = loc.getBeanOfType(extensionType.getName(), extensionType);\n182                   if (obj != null) {\n183                       extensions.put(extensionType, obj);\n184                   } else {\n185                       //force loading\n186                       Collection<?> objs = loc.getBeansOfType(extensionType);\n187                       if (objs != null && !objs.isEmpty()) {\n188                           extensions.put(extensionType, objs.iterator().next());\n189                       }\n190                       obj = extensions.get(extensionType);\n191                   }\n192               }\n193           }\n194           if (null != obj) {\n195               return extensionType.cast(obj);\n196           }\n197           //record that it couldn't be found to avoid expensive searches again in the future\n198           missingExtensions.add(extensionType);\n199           return null;\n200       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerImpl.java:\n186       final void loadAndRegister(Extension e) {\n187           Class<?> cls;\n188           if (null != e.getInterfaceName() && !\"\".equals(e.getInterfaceName())) {\n189               cls = e.loadInterface(loader);\n190           }  else {\n191               cls = e.getClassObject(loader);\n192           }\n193           if (null != activated && null != cls && null != activated.get(cls)) {\n194               return;\n195           }\n196   \n197           synchronized (e) {\n198               Object obj = e.load(loader, bus);\n199               if (obj == null) {\n200                   return;\n201               }\n202   \n203               if (null != activated) {\n204                   Configurer configurer = (Configurer)(activated.get(Configurer.class));\n205                   if (null != configurer) {\n206                       configurer.configureBean(obj);\n207                   }\n208               }\n209   \n210               // let the object know for which namespaces it has been activated\n211               ResourceResolver namespacesResolver = null;\n212               if (null != e.getNamespaces()) {\n213                   namespacesResolver = new SinglePropertyResolver(ACTIVATION_NAMESPACES_PROPERTY_NAME,\n214                                                                   e.getNamespaces());\n215                   resourceManager.addResourceResolver(namespacesResolver);\n216               }\n217   \n218               // Since we need to support spring2.5 by removing @Resource(\"activationNamespaces\")\n219               // Now we call the setActivationNamespaces method directly here\n220               if (e.getNamespaces() != null && !e.getNamespaces().isEmpty()) {\n221                   invokeSetterActivationNSMethod(obj, e.getNamespaces());\n222               }\n223   \n224               ResourceInjector injector = new ResourceInjector(resourceManager);\n225   \n226               try {\n227                   injector.inject(obj);\n228                   injector.construct(obj);\n229               } finally {\n230                   if (null != namespacesResolver) {\n231                       resourceManager.removeResourceResolver(namespacesResolver);\n232                   }\n233               }\n234   \n235               if (null != activated) {\n236                   if (cls == null) {\n237                       cls = obj.getClass();\n238                   }\n239                   activated.put(cls, obj);\n240               }\n241           }\n242       }\n298       public <T> T getBeanOfType(String name, Class<T> type) {\n299           if (name == null) {\n300               return null;\n301           }\n302           Extension ex = all.get(name);\n303           if (ex != null) {\n304               if (ex.getLoadedObject() == null) {\n305                   loadAndRegister(ex);\n306               }\n307               return type.cast(ex.getLoadedObject());\n308           }\n309           return null;\n310       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/blueprint/ConfigurerImpl.java:\n 97       public void configureBean(Object beanInstance) {\n 98           configureBean(null, beanInstance, true);\n 99       }\n104       public synchronized void configureBean(String bn, Object beanInstance, boolean checkWildcards) {\n105           if (null == bn) {\n106               bn = getBeanName(beanInstance);\n107           }\n108   \n109           if (null == bn) {\n110               return;\n111           }\n112           if (checkWildcards) {\n113               configureWithWildCard(bn, beanInstance);\n114           }\n115   \n116           if (container instanceof ExtendedBlueprintContainer) {\n117               try {\n118                   final ComponentMetadata cm = container.getComponentMetadata(bn);\n119                   if (cm instanceof BeanMetadata) {\n120                       ((ExtendedBlueprintContainer)container).injectBeanInstance((BeanMetadata)cm, beanInstance);\n121                   }\n122               } catch (NoSuchComponentException nsce) {\n123               }\n124           }\n125       }\n149       protected String getBeanName(Object beanInstance) {\n150           if (beanInstance instanceof Configurable) {\n151               return ((Configurable)beanInstance).getBeanName();\n152           }\n153           String beanName = null;\n154           Method m = null;\n155           try {\n156               m = beanInstance.getClass().getDeclaredMethod(\"getBeanName\", (Class[])null);\n157           } catch (NoSuchMethodException ex) {\n158               try {\n159                   m = beanInstance.getClass().getMethod(\"getBeanName\", (Class[])null);\n160               } catch (NoSuchMethodException e) {\n161                   //ignore\n162               }\n163           }\n164           if (m != null) {\n165               try {\n166                   beanName = (String)(m.invoke(beanInstance));\n167               } catch (Exception ex) {\n168                   LogUtils.log(LOG, Level.WARNING, \"ERROR_DETERMINING_BEAN_NAME_EXC\", ex);\n169               }\n170           }\n171   \n172           if (null == beanName) {\n173               LogUtils.log(LOG, Level.FINE, \"COULD_NOT_DETERMINE_BEAN_NAME_MSG\",\n174                            beanInstance.getClass().getName());\n175           }\n176   \n177           return beanName;\n178       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/JAXRSServiceImpl.java:\n 92       public String getBeanName() {\n 93           return getName().toString();\n 94       }\n 96       public QName getName() {\n 97           if (serviceName != null) {\n 98               return serviceName;\n 99           }\n100           if (address == null && !classResourceInfos.isEmpty()) {\n101               Class<?> primaryClass = classResourceInfos.get(0).getServiceClass();\n102               String ns = PackageUtils.getNamespace(PackageUtils.getPackageName(primaryClass));\n103               return new QName(ns, primaryClass.getSimpleName());\n104           }\n105           return new QName(address, \"WebClient\");\n106       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/common/util/PackageUtils.java:\n172       public static String getNamespace(String packageName) {\n173           if (packageName == null || packageName.isEmpty()) {\n174               return null;\n175           }\n176           final List<String> parts = Arrays.asList(packageName.split(\"\\\\.\"));\n177           Collections.reverse(parts);\n178           return \"http://\" + String.join(\".\", parts) + '/';\n179       }\n",
            "cost": 0.11513000000000001,
            "harness_id": "id_3",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/common/util/PackageUtils.java:176:68",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 19
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n 432       protected void handleResource(StringBuilder sb, Set<Class<?>> jaxbTypes,\n 433                                     ElementQNameResolver qnameResolver, Map<Class<?>, QName> clsMap,\n 434                                     ClassResourceInfo cri, Set<ClassResourceInfo> visitedResources,\n 435                                     boolean isJson) {\n 436           visitedResources.add(cri);\n 437           Map<Parameter, Object> classParams = getClassParameters(cri);\n 438   \n 439           List<OperationResourceInfo> sortedOps = sortOperationsByPath(cri.getMethodDispatcher()\n 440               .getOperationResourceInfos());\n 441   \n 442           boolean resourceTagOpened = false;\n 443           for (int i = 0; i < sortedOps.size(); i++) {\n 444               OperationResourceInfo ori = sortedOps.get(i);\n 445               if (i > 0 && ignoreOverloadedMethods\n 446                   && ori.getMethodToInvoke().getName().equals(sortedOps.get(i - 1).getMethodToInvoke().getName())) {\n 447                   continue;\n 448               }\n 449               if (ori.getHttpMethod() == null) {\n 450                   Class<?> cls = getMethod(ori).getReturnType();\n 451                   ClassResourceInfo subcri = cri.findResource(cls, cls);\n 452                   if (subcri != null && !visitedResources.contains(subcri)) {\n 453                       startResourceTag(sb, subcri, ori.getURITemplate().getValue());\n 454                       handleDocs(subcri.getServiceClass().getAnnotations(), sb, DocTarget.RESOURCE, true,\n 455                                  isJson);\n 456                       handlePathAndMatrixParams(sb, ori, isJson);\n 457                       handleResource(sb, jaxbTypes, qnameResolver, clsMap, subcri, visitedResources, isJson);\n 458                       sb.append(\"</resource>\");\n 459                   } else {\n 460                       handleDynamicSubresource(sb, jaxbTypes, qnameResolver, clsMap, ori, subcri, isJson);\n 461                   }\n 462                   continue;\n 463               }\n 464               OperationResourceInfo nextOp = i + 1 < sortedOps.size() ? sortedOps.get(i + 1) : null;\n 465               resourceTagOpened = handleOperation(sb, jaxbTypes, qnameResolver, clsMap, ori, classParams,\n 466                                                   nextOp, resourceTagOpened, isJson, i);\n 467           }\n 468       }\n 594       protected boolean handleOperation(StringBuilder sb, Set<Class<?>> jaxbTypes, //NOPMD\n 595                                         ElementQNameResolver qnameResolver, Map<Class<?>, QName> clsMap,\n 596                                         OperationResourceInfo ori, Map<Parameter, Object> classParams,\n 597                                         OperationResourceInfo nextOp, boolean resourceTagOpened,\n 598                                         boolean isJson, int index) {\n 599           Annotation[] anns = getMethod(ori).getAnnotations();\n 600           // CHECKSTYLE:ON\n 601           boolean samePathOperationFollows = singleResourceMultipleMethods && compareOperations(ori, nextOp);\n 602   \n 603           String path = ori.getURITemplate().getValue();\n 604           if (!resourceTagOpened && openResource(path)) {\n 605               resourceTagOpened = true;\n 606               URITemplate template = ori.getClassResourceInfo().getURITemplate();\n 607               if (template != null) {\n 608                   String parentPath = template.getValue();\n 609                   if (parentPath.endsWith(\"/\") && path.startsWith(\"/\") && path.length() > 1) {\n 610                       path = path.substring(1);\n 611                   }\n 612               }\n 613               startResourceTag(sb, ori, getPath(path));\n 614               handleDocs(anns, sb, DocTarget.RESOURCE, false, isJson);\n 615               handlePathAndMatrixClassParams(ori, sb, classParams, isJson);\n 616               handlePathAndMatrixParams(sb, ori, isJson);\n 617           } else if (index == 0) {\n 618               handlePathAndMatrixClassParams(ori, sb, classParams, isJson);\n 619               handlePathAndMatrixParams(sb, ori, isJson);\n 620           }\n 621   \n 622           startMethodTag(sb, ori);\n 623           if (!handleDocs(anns, sb, DocTarget.METHOD, true, isJson)) {\n 624               handleOperJavaDocs(ori, sb);\n 625           }\n 626           int numOfParams = getMethod(ori).getParameterTypes().length;\n 627           if ((numOfParams > 1 || numOfParams == 1 && !ori.isAsync()) || !classParams.isEmpty()) {\n 628   \n 629               startMethodRequestTag(sb, ori);\n 630               handleDocs(anns, sb, DocTarget.REQUEST, false, isJson);\n 631   \n 632               boolean isForm = isFormRequest(ori);\n 633   \n 634               doHandleClassParams(ori, sb, classParams, isJson, ParameterType.QUERY, ParameterType.HEADER);\n 635               doHandleJaxrsBeanParamClassParams(ori, sb, classParams, isJson,\n 636                                                 ParameterType.QUERY, ParameterType.HEADER);\n 637               for (Parameter p : ori.getParameters()) {\n 638                   if (isForm && p.getType() == ParameterType.REQUEST_BODY) {\n 639                       continue;\n 640                   }\n 641                   handleParameter(sb, jaxbTypes, qnameResolver, clsMap, ori, p, isJson);\n 642               }\n 643               if (isForm) {\n 644                   handleFormRepresentation(sb, jaxbTypes, qnameResolver, clsMap, ori, getFormClass(ori), isJson);\n 645               }\n 646               endMethodRequestTag(sb, ori);\n 647           }\n 648           startMethodResponseTag(sb, ori);\n 649           Class<?> returnType = getMethod(ori).getReturnType();\n 650           boolean isVoid = void.class == returnType && !ori.isAsync();\n 651           ResponseStatus responseStatus = getMethod(ori).getAnnotation(ResponseStatus.class);\n 652           if (responseStatus != null) {\n 653               setResponseStatus(sb, responseStatus.value());\n 654           } else if (isVoid) {\n 655               boolean oneway = getMethod(ori).getAnnotation(Oneway.class) != null;\n 656               setResponseStatus(sb, oneway ? Response.Status.ACCEPTED : Response.Status.NO_CONTENT);\n 657           }\n 658           sb.append('>');\n 659           handleDocs(anns, sb, DocTarget.RESPONSE, false, isJson);\n 660           if (!isVoid) {\n 661               handleRepresentation(sb, jaxbTypes, qnameResolver, clsMap, ori, returnType, isJson, false);\n 662           }\n 663           endMethodResponseTag(sb, ori);\n 664   \n 665           endMethodTag(sb, ori);\n 666   \n 667           if (resourceTagOpened && !samePathOperationFollows) {\n 668               endResourceTag(sb, ori);\n 669               resourceTagOpened = false;\n 670           }\n 671           return resourceTagOpened;\n 672       }\n1777       protected void handleOperJavaDocs(OperationResourceInfo ori, StringBuilder sb) {\n1778           for (DocumentationProvider docProvider : docProviders) {\n1779               addProvidedDocs(sb, docProvider.getMethodDoc(ori));\n1780           }\n1781       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/model/doc/JavaDocProvider.java:\n100       @Override\n101       public String getMethodDoc(OperationResourceInfo ori) {\n102           try {\n103               MethodDocs doc = getOperationDocInternal(ori);\n104               if (doc == null) {\n105                   return null;\n106               }\n107               return doc.getMethodInfo();\n108           } catch (Exception ex) {\n109               // ignore\n110           }\n111           return null;\n112       }\n187       private MethodDocs getOperationDocInternal(OperationResourceInfo ori) throws Exception {\n188           Method method = ori.getAnnotatedMethod() == null\n189                   ? ori.getMethodToInvoke()\n190                   : ori.getAnnotatedMethod();\n191           ClassDocs classDoc = getClassDocInternal(method.getDeclaringClass());\n192           if (classDoc == null) {\n193               return null;\n194           }\n195           MethodDocs mDocs = classDoc.getMethodDocs(method);\n196           if (mDocs == null) {\n197               String operLink = getOperLink();\n198               String operMarker = operLink + method.getName() + getOperationMarkerOpen();\n199   \n200               int operMarkerIndex = classDoc.getClassDoc().indexOf(operMarker);\n201               while (operMarkerIndex != -1) {\n202                   int startOfOpSigIndex = operMarkerIndex + operMarker.length();\n203                   int endOfOpSigIndex = classDoc.getClassDoc().indexOf(getOperationMarkerClose(),\n204                                                                        startOfOpSigIndex);\n205                   int paramLen = method.getParameterTypes().length;\n206                   if (endOfOpSigIndex == startOfOpSigIndex && paramLen == 0) {\n207                       break;\n208                   } else if (endOfOpSigIndex > startOfOpSigIndex + 1) {\n209                       String paramSequence = classDoc.getClassDoc().substring(operMarkerIndex, endOfOpSigIndex);\n210                       if (paramSequence.startsWith(operMarker)) {\n211                           paramSequence = paramSequence.substring(operMarker.length());\n212                           String[] opBits = paramSequence.split(getOperationParamSeparator());\n213                           if (opBits.length == paramLen) {\n214                               break;\n215                           }\n216                       }\n217                   }\n218                   operMarkerIndex = classDoc.getClassDoc().indexOf(operMarker,\n219                                                                    operMarkerIndex + operMarker.length());\n220               }\n221   \n222               if (operMarkerIndex == -1) {\n223                   return null;\n224               }\n225   \n226               String operDoc = classDoc.getClassDoc().substring(operMarkerIndex + operMarker.length());\n227               String operInfoTag = getOperInfoTag();\n228               String operInfo = getJavaDocText(operDoc, operInfoTag, operLink, 0);\n229               String responseInfo = null;\n230               List<String> paramDocs = new LinkedList<>();\n231               if (!StringUtils.isEmpty(operInfo)) {\n232                   int returnsIndex = operDoc.indexOf(\"Returns:\", operLink.length());\n233                   int nextOpIndex = operDoc.indexOf(operLink);\n234                   if (returnsIndex != -1 && (nextOpIndex > returnsIndex || nextOpIndex == -1)) {\n235                       responseInfo = getJavaDocText(operDoc, getResponseMarker(), operLink, returnsIndex + 8);\n236                   }\n237   \n238                   int paramIndex = operDoc.indexOf(\"Parameters:\");\n239                   if (paramIndex != -1 && (nextOpIndex == -1 || paramIndex < nextOpIndex)) {\n240                       String paramString = returnsIndex == -1 ? operDoc.substring(paramIndex)\n241                           : operDoc.substring(paramIndex, returnsIndex);\n242   \n243                       String codeTag = getCodeTag();\n244   \n245                       int codeIndex = paramString.indexOf(codeTag);\n246                       while (codeIndex != -1) {\n247                           int next = paramString.indexOf('<', codeIndex + 7);\n248                           if (next == -1) {\n249                               next = paramString.length();\n250                           }\n251                           String param = paramString.substring(codeIndex + 7, next).trim();\n252                           if (param.startsWith(\"-\")) {\n253                               param = param.substring(1).trim();\n254                           }\n255                           paramDocs.add(param);\n256                           if (next == paramString.length()) {\n257                               break;\n258                           }\n259                           codeIndex = next + 1;\n260                           codeIndex = paramString.indexOf(codeTag, codeIndex);\n261                       }\n262   \n263                   }\n264               }\n265               mDocs = new MethodDocs(operInfo, paramDocs, responseInfo);\n266               classDoc.addMethodDocs(method, mDocs);\n267           }\n268   \n269           return mDocs;\n270       }\n",
            "cost": 0.11477000000000001,
            "harness_id": "id_3",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/model/doc/JavaDocProvider.java:212:63",
            "status": "corpus",
            "valid_path": "NO",
            "id": 20
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/BusFactory.java:\n 95       public static synchronized Bus getDefaultBus() {\n 96           return getDefaultBus(true);\n 97       }\n105       public static synchronized Bus getDefaultBus(boolean createIfNeeded) {\n106           if (defaultBus == null && createIfNeeded) {\n107               defaultBus = newInstance().createBus();\n108           }\n109           if (defaultBus == null) {\n110               // never set up.\n111               return null;\n112           }\n113           return defaultBus;\n114       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBusFactory.java:\n 82       public Bus createBus() {\n 83           return createBus((String)null);\n 84       }\n 93       public Bus createBus(String cfgFile) {\n 94           return createBus(cfgFile, defaultBusNotExists());\n 95       }\n101       protected Bus finishCreatingBus(ConfigurableApplicationContext bac) {\n102           final Bus bus = (Bus)bac.getBean(Bus.DEFAULT_BUS_ID);\n103   \n104           bus.setExtension(bac, ApplicationContext.class);\n105           if (bac instanceof BusApplicationContext) {\n106               bus.setExtension((BusApplicationContext)bac, BusApplicationContext.class);\n107           }\n108           possiblySetDefaultBus(bus);\n109   \n110           initializeBus(bus);\n111   \n112           registerApplicationContextLifeCycleListener(bus, bac);\n113   \n114           if (bus instanceof SpringBus && defaultBusNotExists()) {\n115               ((SpringBus)bus).setCloseContext(true);\n116           }\n117           return bus;\n118       }\n120       public Bus createBus(String cfgFile, boolean includeDefaults) {\n121           if (cfgFile == null) {\n122               return createBus((String[])null, includeDefaults);\n123           }\n124           return createBus(new String[] {cfgFile}, includeDefaults);\n125       }\n127       public Bus createBus(String[] cfgFiles, boolean includeDefaults) {\n128           try {\n129               String userCfgFile\n130                   = SystemPropertyAction.getPropertyOrNull(Configurer.USER_CFG_FILE_PROPERTY_NAME);\n131               String sysCfgFileUrl\n132                   = SystemPropertyAction.getPropertyOrNull(Configurer.USER_CFG_FILE_PROPERTY_URL);\n133               final Resource r = BusApplicationContext.findResource(Configurer.DEFAULT_USER_CFG_FILE);\n134   \n135               boolean exists = true;\n136               if (r != null) {\n137                   exists = AccessController\n138                       .doPrivileged(new PrivilegedAction<Boolean>() {\n139                           public Boolean run() {\n140                               return r.exists();\n141                           }\n142                       });\n143               }\n144               if (context == null && userCfgFile == null && cfgFiles == null && sysCfgFileUrl == null\n145                   && (r == null || !exists) && includeDefaults) {\n146                   return new org.apache.cxf.bus.CXFBusFactory().createBus();\n147               }\n148               return finishCreatingBus(createApplicationContext(cfgFiles, includeDefaults));\n149           } catch (BeansException ex) {\n150               LogUtils.log(LOG, Level.WARNING, \"APP_CONTEXT_CREATION_FAILED_MSG\", ex, (Object[])null);\n151               throw new RuntimeException(ex);\n152           }\n153       }\n201       void registerApplicationContextLifeCycleListener(Bus bus, ConfigurableApplicationContext bac) {\n202           BusLifeCycleManager lm = bus.getExtension(BusLifeCycleManager.class);\n203           if (null != lm) {\n204               lm.registerLifeCycleListener(new BusApplicationContextLifeCycleListener(bac));\n205           }\n206       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/managers/CXFBusLifeCycleManager.java:\n 62       public final void registerLifeCycleListener(BusLifeCycleListener listener) {\n 63           listeners.addIfAbsent(listener);\n 64           if (initCalled) {\n 65               listener.initComplete();\n 66           }\n 67   \n 68       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/osgi/OSGIBusListener.java:\n 96       public void initComplete() {\n 97           ManagedWorkQueueList wqList = bus.getExtension(ManagedWorkQueueList.class);\n 98           if (wqList != null) {\n 99               WorkQueueManager manager = bus.getExtension(WorkQueueManager.class);\n100               wqList.addAllToWorkQueueManager(manager);\n101           }\n102           registerBusAsService();\n103       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/osgi/ManagedWorkQueueList.java:\n110       public void addAllToWorkQueueManager(WorkQueueManager manager) {\n111           if (manager != null) {\n112               for (AutomaticWorkQueueImpl wq : queues.values()) {\n113                   if (manager.getNamedWorkQueue(wq.getName()) == null) {\n114                       manager.addNamedWorkQueue(wq.getName(), wq);\n115                   }\n116               }\n117           }\n118       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/managers/WorkQueueManagerImpl.java:\n172       public final void addNamedWorkQueue(String name, AutomaticWorkQueue q) {\n173           namedQueues.put(name, q);\n174           if (q instanceof AutomaticWorkQueueImpl) {\n175               AutomaticWorkQueueImpl impl = (AutomaticWorkQueueImpl)q;\n176               if (impl.isShared()) {\n177                   synchronized (impl) {\n178                       if (impl.getShareCount() == 0\n179                           && imanager != null\n180                           && imanager.getMBeanServer() != null) {\n181                           try {\n182                               imanager.register(new WorkQueueImplMBeanWrapper((AutomaticWorkQueueImpl)q, this));\n183                           } catch (JMException jmex) {\n184                               LOG.log(Level.WARNING, jmex.getMessage(), jmex);\n185                           }\n186                       }\n187                       impl.addSharedUser();\n188                   }\n189               } else if (imanager != null) {\n190                   try {\n191                       imanager.register(new WorkQueueImplMBeanWrapper((AutomaticWorkQueueImpl)q, this));\n192                   } catch (JMException jmex) {\n193                       LOG.log(Level.WARNING, jmex.getMessage(), jmex);\n194                   }\n195               }\n196           }\n197       }\n\nsrc/cxf/rt/management/src/main/java/org/apache/cxf/management/jmx/InstrumentationManagerImpl.java:\n206       public void register(Object obj, ObjectName name, boolean forceRegistration) throws JMException {\n207           if (!isEnabled() || connectFailed) {\n208               return;\n209           }\n210           //Try to register as a Standard MBean\n211           try {\n212               registerMBeanWithServer(obj, persist(name), forceRegistration);\n213           } catch (NotCompliantMBeanException e) {\n214               //If this is not a \"normal\" MBean, then try to deploy it using JMX annotations\n215               ModelMBeanAssembler assembler = new ModelMBeanAssembler();\n216               ModelMBeanInfo mbi = assembler.getModelMbeanInfo(obj.getClass());\n217               register(obj, name, mbi, forceRegistration);\n218           }\n219       }\n221       public ObjectName register(ManagedComponent i) throws JMException {\n222           return register(i, false);\n223       }\n225       public ObjectName register(ManagedComponent i, boolean forceRegistration) throws JMException {\n226           ObjectName name = i.getObjectName();\n227           register(i, name, forceRegistration);\n228           return name;\n229       }\n329       private ObjectName persist(ObjectName original) throws JMException {\n330           ObjectName persisted = original;\n331           if (!(persistentBusId == null\n332                 || \"\".equals(persistentBusId)\n333                 || persistentBusId.startsWith(\"${\"))) {\n334               String originalStr = original.toString();\n335               if (originalStr.indexOf(ManagementConstants.BUS_ID_PROP) != -1) {\n336                   String persistedStr =\n337                       originalStr.replaceFirst(ManagementConstants.BUS_ID_PROP + \"=\" + bus.getId(),\n338                                                ManagementConstants.BUS_ID_PROP + \"=\" + persistentBusId);\n339                   persisted = new ObjectName(persistedStr);\n340               }\n341           }\n342           return persisted;\n343       }\n",
            "cost": 0.117225,
            "harness_id": "id_3",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/cxf/rt/management/src/main/java/org/apache/cxf/management/jmx/InstrumentationManagerImpl.java:337:46",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 21
        },
        {
            "blob": [
                "R0VUADAAamF6IisiemVy"
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1934       protected SchemaWriter createSchemaWriter(ResourceTypes resourceTypes, JAXBContext context, UriInfo ui) {\n1935           // if neither externalSchemaLinks nor externalSchemasCache is set\n1936           // then JAXBContext will be used to generate the schema\n1937           if (externalSchemaLinks != null && externalSchemasCache == null) {\n1938               return new ExternalSchemaWriter(externalSchemaLinks, ui);\n1939           } else if (externalSchemasCache != null) {\n1940               return new StringSchemaWriter(externalSchemasCache, externalSchemaLinks, ui);\n1941           } else {\n1942               SchemaCollection coll = getSchemaCollection(resourceTypes, context);\n1943               if (coll != null) {\n1944                   return new SchemaCollectionWriter(coll);\n1945               }\n1946           }\n1947           return null;\n1948       }\n1977           StringSchemaWriter(List<String> schemas, List<URI> links, UriInfo ui) {\n1978               this.theSchemas = new LinkedList<>();\n1979               // we'll need to do the proper schema caching eventually\n1980               for (String s : schemas) {\n1981                   XMLSource source = new XMLSource(new ByteArrayInputStream(s.getBytes(StandardCharsets.UTF_8)));\n1982                   source.setBuffering();\n1983                   Map<String, String> locs = getLocationsMap(source, \"import\", links, ui);\n1984                   locs.putAll(getLocationsMap(source, \"include\", links, ui));\n1985                   String actualSchema = !locs.isEmpty() ? transformSchema(s, locs) : s;\n1986                   theSchemas.add(actualSchema);\n1987               }\n1988           }\n1990           private Map<String, String> getLocationsMap(XMLSource source, String elementName, List<URI> links,\n1991                                                       UriInfo ui) {\n1992               Map<String, String> nsMap = Collections.singletonMap(\"xs\", Constants.URI_2001_SCHEMA_XSD);\n1993               String[] locations = source.getValues(\"/*/xs:\" + elementName + \"/@schemaLocation\", nsMap);\n1994   \n1995               Map<String, String> locs = new HashMap<>();\n1996               if (locations == null) {\n1997                   return locs;\n1998               }\n1999   \n2000               for (String loc : locations) {\n2001                   try {\n2002                       URI uri = URI.create(loc);\n2003                       if (!uri.isAbsolute()) {\n2004                           if (links != null) {\n2005                               for (URI overwriteURI : links) {\n2006                                   if (overwriteURI.toString().endsWith(loc)) {\n2007                                       if (overwriteURI.isAbsolute()) {\n2008                                           locs.put(loc, overwriteURI.toString());\n2009                                       } else {\n2010                                           locs.put(loc, ui.getBaseUriBuilder().path(overwriteURI.toString())\n2011                                               .build().toString());\n2012                                       }\n2013                                       break;\n2014                                   }\n2015                               }\n2016                           }\n2017                           if (!locs.containsKey(loc)) {\n2018                               locs.put(loc, ui.getBaseUriBuilder().path(loc).build().toString());\n2019                           }\n2020                       }\n2021                   } catch (Exception ex) {\n2022                       // continue\n2023                   }\n2024               }\n2025               return locs;\n2026           }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/ext/xml/XMLSource.java:\n147       @SuppressWarnings(\"unchecked\")\n148       public <T> T[] getNodes(String expression, Map<String, String> namespaces, Class<T> cls) {\n149   \n150           NodeList nodes = (NodeList)evaluate(expression, namespaces, XPathConstants.NODESET);\n151           if (nodes == null || nodes.getLength() == 0) {\n152               return null;\n153           }\n154           T[] values = (T[])Array.newInstance(cls, nodes.getLength());\n155           for (int i = 0; i < nodes.getLength(); i++) {\n156               Node node = nodes.item(i);\n157               if (InjectionUtils.isPrimitive(cls)) {\n158                   values[i] = (T)readPrimitiveValue(node, cls);\n159               } else {\n160                   values[i] = readNode(node, cls);\n161               }\n162           }\n163           return values;\n164       }\n262       public String[] getValues(String expression, Map<String, String> namespaces) {\n263           return getNodes(expression, namespaces, String.class);\n264       }\n345       private <T> Object readPrimitiveValue(Node node, Class<T> cls) {\n346           if (String.class == cls) {\n347               if (node.getNodeType() == Node.ELEMENT_NODE) {\n348                   return StaxUtils.toString((Element)node);\n349               }\n350               return cls.cast(node.getNodeValue());\n351           }\n352   \n353           return InjectionUtils.convertStringToPrimitive(node.getNodeValue(), cls);\n354       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java:\n1464       public static Object convertStringToPrimitive(String value, Class<?> cls) {\n1465           return convertStringToPrimitive(value, cls, new Annotation[]{});\n1466       }\n1467       public static Object convertStringToPrimitive(String value, Class<?> cls, Annotation[] anns) {\n1468           Message m = JAXRSUtils.getCurrentMessage();\n1469           Object obj = createFromParameterHandler(value, cls, cls, anns, m);\n1470           if (obj != null) {\n1471               return obj;\n1472           }\n1473           if (String.class == cls) {\n1474               return value;\n1475           } else if (cls.isPrimitive()) {\n1476               return PrimitiveUtils.read(value, cls);\n1477           } else if (cls.isEnum()) {\n1478               if (m != null && !MessageUtils.getContextualBoolean(m, ENUM_CONVERSION_CASE_SENSITIVE, false)) {\n1479                   obj = invokeValueOf(value.toUpperCase(), cls);\n1480               }\n1481               if (obj == null) {\n1482                   try {\n1483                       obj = invokeValueOf(value, cls);\n1484                   } catch (RuntimeException ex) {\n1485                       if (m == null) {\n1486                           obj = invokeValueOf(value.toUpperCase(), cls);\n1487                       } else {\n1488                           throw ex;\n1489                       }\n1490                   }\n1491               }\n1492               return obj;\n1493           } else {\n1494               try {\n1495                   Constructor<?> c = cls.getConstructor(new Class<?>[]{String.class});\n1496                   return c.newInstance(new Object[]{value});\n1497               } catch (Throwable ex) {\n1498                   // try valueOf\n1499               }\n1500               return invokeValueOf(value, cls);\n1501           }\n1502       }\n1504       private static Object invokeValueOf(String value, Class<?> cls) {\n1505           try {\n1506               Method m = cls.getMethod(\"valueOf\", new Class[]{String.class});\n1507               return m.invoke(null, value);\n1508           } catch (Exception ex) {\n1509               throw new RuntimeException(ex);\n1510           }\n1511       }\n",
            "cost": 0.708205,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java:1507:20",
            "status": "corpus",
            "valid_path": "YES",
            "id": 22
        },
        {
            "blob": [
                "R0VUADAAIiJqYXoiKyJ6ZXIiIg=="
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1934       protected SchemaWriter createSchemaWriter(ResourceTypes resourceTypes, JAXBContext context, UriInfo ui) {\n1935           // if neither externalSchemaLinks nor externalSchemasCache is set\n1936           // then JAXBContext will be used to generate the schema\n1937           if (externalSchemaLinks != null && externalSchemasCache == null) {\n1938               return new ExternalSchemaWriter(externalSchemaLinks, ui);\n1939           } else if (externalSchemasCache != null) {\n1940               return new StringSchemaWriter(externalSchemasCache, externalSchemaLinks, ui);\n1941           } else {\n1942               SchemaCollection coll = getSchemaCollection(resourceTypes, context);\n1943               if (coll != null) {\n1944                   return new SchemaCollectionWriter(coll);\n1945               }\n1946           }\n1947           return null;\n1948       }\n1977           StringSchemaWriter(List<String> schemas, List<URI> links, UriInfo ui) {\n1978               this.theSchemas = new LinkedList<>();\n1979               // we'll need to do the proper schema caching eventually\n1980               for (String s : schemas) {\n1981                   XMLSource source = new XMLSource(new ByteArrayInputStream(s.getBytes(StandardCharsets.UTF_8)));\n1982                   source.setBuffering();\n1983                   Map<String, String> locs = getLocationsMap(source, \"import\", links, ui);\n1984                   locs.putAll(getLocationsMap(source, \"include\", links, ui));\n1985                   String actualSchema = !locs.isEmpty() ? transformSchema(s, locs) : s;\n1986                   theSchemas.add(actualSchema);\n1987               }\n1988           }\n1990           private Map<String, String> getLocationsMap(XMLSource source, String elementName, List<URI> links,\n1991                                                       UriInfo ui) {\n1992               Map<String, String> nsMap = Collections.singletonMap(\"xs\", Constants.URI_2001_SCHEMA_XSD);\n1993               String[] locations = source.getValues(\"/*/xs:\" + elementName + \"/@schemaLocation\", nsMap);\n1994   \n1995               Map<String, String> locs = new HashMap<>();\n1996               if (locations == null) {\n1997                   return locs;\n1998               }\n1999   \n2000               for (String loc : locations) {\n2001                   try {\n2002                       URI uri = URI.create(loc);\n2003                       if (!uri.isAbsolute()) {\n2004                           if (links != null) {\n2005                               for (URI overwriteURI : links) {\n2006                                   if (overwriteURI.toString().endsWith(loc)) {\n2007                                       if (overwriteURI.isAbsolute()) {\n2008                                           locs.put(loc, overwriteURI.toString());\n2009                                       } else {\n2010                                           locs.put(loc, ui.getBaseUriBuilder().path(overwriteURI.toString())\n2011                                               .build().toString());\n2012                                       }\n2013                                       break;\n2014                                   }\n2015                               }\n2016                           }\n2017                           if (!locs.containsKey(loc)) {\n2018                               locs.put(loc, ui.getBaseUriBuilder().path(loc).build().toString());\n2019                           }\n2020                       }\n2021                   } catch (Exception ex) {\n2022                       // continue\n2023                   }\n2024               }\n2025               return locs;\n2026           }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/ext/xml/XMLSource.java:\n147       @SuppressWarnings(\"unchecked\")\n148       public <T> T[] getNodes(String expression, Map<String, String> namespaces, Class<T> cls) {\n149   \n150           NodeList nodes = (NodeList)evaluate(expression, namespaces, XPathConstants.NODESET);\n151           if (nodes == null || nodes.getLength() == 0) {\n152               return null;\n153           }\n154           T[] values = (T[])Array.newInstance(cls, nodes.getLength());\n155           for (int i = 0; i < nodes.getLength(); i++) {\n156               Node node = nodes.item(i);\n157               if (InjectionUtils.isPrimitive(cls)) {\n158                   values[i] = (T)readPrimitiveValue(node, cls);\n159               } else {\n160                   values[i] = readNode(node, cls);\n161               }\n162           }\n163           return values;\n164       }\n262       public String[] getValues(String expression, Map<String, String> namespaces) {\n263           return getNodes(expression, namespaces, String.class);\n264       }\n345       private <T> Object readPrimitiveValue(Node node, Class<T> cls) {\n346           if (String.class == cls) {\n347               if (node.getNodeType() == Node.ELEMENT_NODE) {\n348                   return StaxUtils.toString((Element)node);\n349               }\n350               return cls.cast(node.getNodeValue());\n351           }\n352   \n353           return InjectionUtils.convertStringToPrimitive(node.getNodeValue(), cls);\n354       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java:\n1464       public static Object convertStringToPrimitive(String value, Class<?> cls) {\n1465           return convertStringToPrimitive(value, cls, new Annotation[]{});\n1466       }\n1467       public static Object convertStringToPrimitive(String value, Class<?> cls, Annotation[] anns) {\n1468           Message m = JAXRSUtils.getCurrentMessage();\n1469           Object obj = createFromParameterHandler(value, cls, cls, anns, m);\n1470           if (obj != null) {\n1471               return obj;\n1472           }\n1473           if (String.class == cls) {\n1474               return value;\n1475           } else if (cls.isPrimitive()) {\n1476               return PrimitiveUtils.read(value, cls);\n1477           } else if (cls.isEnum()) {\n1478               if (m != null && !MessageUtils.getContextualBoolean(m, ENUM_CONVERSION_CASE_SENSITIVE, false)) {\n1479                   obj = invokeValueOf(value.toUpperCase(), cls);\n1480               }\n1481               if (obj == null) {\n1482                   try {\n1483                       obj = invokeValueOf(value, cls);\n1484                   } catch (RuntimeException ex) {\n1485                       if (m == null) {\n1486                           obj = invokeValueOf(value.toUpperCase(), cls);\n1487                       } else {\n1488                           throw ex;\n1489                       }\n1490                   }\n1491               }\n1492               return obj;\n1493           } else {\n1494               try {\n1495                   Constructor<?> c = cls.getConstructor(new Class<?>[]{String.class});\n1496                   return c.newInstance(new Object[]{value});\n1497               } catch (Throwable ex) {\n1498                   // try valueOf\n1499               }\n1500               return invokeValueOf(value, cls);\n1501           }\n1502       }\n1504       private static Object invokeValueOf(String value, Class<?> cls) {\n1505           try {\n1506               Method m = cls.getMethod(\"valueOf\", new Class[]{String.class});\n1507               return m.invoke(null, value);\n1508           } catch (Exception ex) {\n1509               throw new RuntimeException(ex);\n1510           }\n1511       }\n",
            "cost": 0.67795,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java:1507:29",
            "status": "corpus",
            "valid_path": "YES",
            "id": 23
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1934       protected SchemaWriter createSchemaWriter(ResourceTypes resourceTypes, JAXBContext context, UriInfo ui) {\n1935           // if neither externalSchemaLinks nor externalSchemasCache is set\n1936           // then JAXBContext will be used to generate the schema\n1937           if (externalSchemaLinks != null && externalSchemasCache == null) {\n1938               return new ExternalSchemaWriter(externalSchemaLinks, ui);\n1939           } else if (externalSchemasCache != null) {\n1940               return new StringSchemaWriter(externalSchemasCache, externalSchemaLinks, ui);\n1941           } else {\n1942               SchemaCollection coll = getSchemaCollection(resourceTypes, context);\n1943               if (coll != null) {\n1944                   return new SchemaCollectionWriter(coll);\n1945               }\n1946           }\n1947           return null;\n1948       }\n1977           StringSchemaWriter(List<String> schemas, List<URI> links, UriInfo ui) {\n1978               this.theSchemas = new LinkedList<>();\n1979               // we'll need to do the proper schema caching eventually\n1980               for (String s : schemas) {\n1981                   XMLSource source = new XMLSource(new ByteArrayInputStream(s.getBytes(StandardCharsets.UTF_8)));\n1982                   source.setBuffering();\n1983                   Map<String, String> locs = getLocationsMap(source, \"import\", links, ui);\n1984                   locs.putAll(getLocationsMap(source, \"include\", links, ui));\n1985                   String actualSchema = !locs.isEmpty() ? transformSchema(s, locs) : s;\n1986                   theSchemas.add(actualSchema);\n1987               }\n1988           }\n1990           private Map<String, String> getLocationsMap(XMLSource source, String elementName, List<URI> links,\n1991                                                       UriInfo ui) {\n1992               Map<String, String> nsMap = Collections.singletonMap(\"xs\", Constants.URI_2001_SCHEMA_XSD);\n1993               String[] locations = source.getValues(\"/*/xs:\" + elementName + \"/@schemaLocation\", nsMap);\n1994   \n1995               Map<String, String> locs = new HashMap<>();\n1996               if (locations == null) {\n1997                   return locs;\n1998               }\n1999   \n2000               for (String loc : locations) {\n2001                   try {\n2002                       URI uri = URI.create(loc);\n2003                       if (!uri.isAbsolute()) {\n2004                           if (links != null) {\n2005                               for (URI overwriteURI : links) {\n2006                                   if (overwriteURI.toString().endsWith(loc)) {\n2007                                       if (overwriteURI.isAbsolute()) {\n2008                                           locs.put(loc, overwriteURI.toString());\n2009                                       } else {\n2010                                           locs.put(loc, ui.getBaseUriBuilder().path(overwriteURI.toString())\n2011                                               .build().toString());\n2012                                       }\n2013                                       break;\n2014                                   }\n2015                               }\n2016                           }\n2017                           if (!locs.containsKey(loc)) {\n2018                               locs.put(loc, ui.getBaseUriBuilder().path(loc).build().toString());\n2019                           }\n2020                       }\n2021                   } catch (Exception ex) {\n2022                       // continue\n2023                   }\n2024               }\n2025               return locs;\n2026           }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/ext/xml/XMLSource.java:\n147       @SuppressWarnings(\"unchecked\")\n148       public <T> T[] getNodes(String expression, Map<String, String> namespaces, Class<T> cls) {\n149   \n150           NodeList nodes = (NodeList)evaluate(expression, namespaces, XPathConstants.NODESET);\n151           if (nodes == null || nodes.getLength() == 0) {\n152               return null;\n153           }\n154           T[] values = (T[])Array.newInstance(cls, nodes.getLength());\n155           for (int i = 0; i < nodes.getLength(); i++) {\n156               Node node = nodes.item(i);\n157               if (InjectionUtils.isPrimitive(cls)) {\n158                   values[i] = (T)readPrimitiveValue(node, cls);\n159               } else {\n160                   values[i] = readNode(node, cls);\n161               }\n162           }\n163           return values;\n164       }\n262       public String[] getValues(String expression, Map<String, String> namespaces) {\n263           return getNodes(expression, namespaces, String.class);\n264       }\n345       private <T> Object readPrimitiveValue(Node node, Class<T> cls) {\n346           if (String.class == cls) {\n347               if (node.getNodeType() == Node.ELEMENT_NODE) {\n348                   return StaxUtils.toString((Element)node);\n349               }\n350               return cls.cast(node.getNodeValue());\n351           }\n352   \n353           return InjectionUtils.convertStringToPrimitive(node.getNodeValue(), cls);\n354       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java:\n 378       public static void injectThroughMethod(Object requestObject,\n 379                                                  Method method,\n 380                                                  Object parameterValue,\n 381                                                  Message inMessage) {\n 382           try {\n 383               Method methodToInvoke = checkProxy(method, requestObject);\n 384               methodToInvoke.invoke(requestObject, new Object[]{parameterValue});\n 385           } catch (IllegalAccessException ex) {\n 386               reportServerError(\"METHOD_ACCESS_FAILURE\", method.getName());\n 387           } catch (InvocationTargetException ex) {\n 388               LOG.log(Level.SEVERE, ex.getCause().getMessage(), ex);\n 389               Response r = JAXRSUtils.convertFaultToResponse(ex.getCause(), inMessage);\n 390               if (r != null) {\n 391                   inMessage.getExchange().put(Response.class, r);\n 392                   throw new WebApplicationException();\n 393               }\n 394               reportServerError(\"METHOD_ACCESS_FAILURE\", method.getName());\n 395           } catch (Exception ex) {\n 396               reportServerError(\"METHOD_INJECTION_FAILURE\", method.getName());\n 397           }\n 398       }\n 551       public static <T> Optional<ParamConverter<T>> getParamConverter(Class<T> pClass,\n 552               Type genericType, Annotation[] anns, Message message) {\n 553           \n 554           if (message != null) {\n 555               ServerProviderFactory pf = ServerProviderFactory.getInstance(message);\n 556               ParamConverter<T> pm = pf.createParameterHandler(pClass, genericType, anns, message);\n 557               return Optional.ofNullable(pm);\n 558           }\n 559           \n 560           return Optional.empty();\n 561       }\n 563       public static <T> T createFromParameterHandler(String value,\n 564                                                       Class<T> pClass,\n 565                                                       Type genericType,\n 566                                                       Annotation[] anns,\n 567                                                       Message message) {\n 568           return getParamConverter(pClass, genericType, anns, message)\n 569               .map(pm -> pm.fromString(value))\n 570               .orElse(null);\n 571       }\n1257       public static void injectContexts(Object requestObject,\n1258                                    AbstractResourceInfo resource,\n1259                                    Message message) {\n1260           if (resource.contextsAvailable()) {\n1261               injectContextMethods(requestObject, resource, message);\n1262               injectContextFields(requestObject, resource, message);\n1263               injectConstructorProxies(requestObject, resource, message);\n1264           }\n1265       }\n1267       @SuppressWarnings(\"unchecked\")\n1268       public static void injectContextMethods(Object requestObject,\n1269                                               AbstractResourceInfo cri,\n1270                                               Message message) {\n1271   \n1272           for (Map.Entry<Class<?>, Method> entry : cri.getContextMethods().entrySet()) {\n1273               Method method = entry.getValue();\n1274               if (VALUE_CONTEXTS.contains(method.getParameterTypes()[0].getName()) && cri.isSingleton()) {\n1275                   continue;\n1276               }\n1277               Object o = JAXRSUtils.createContextValue(message,\n1278                                                 method.getGenericParameterTypes()[0],\n1279                                                 entry.getKey());\n1280   \n1281               if (o != null) {\n1282                   if (!cri.isSingleton()) {\n1283                       InjectionUtils.injectThroughMethod(requestObject, method, o, message);\n1284                   } else {\n1285                       ThreadLocalProxy<Object> proxy\n1286                           = (ThreadLocalProxy<Object>)cri.getContextSetterProxy(method);\n1287                       if (proxy != null) {\n1288                           proxy.set(o);\n1289                       }\n1290                   }\n1291   \n1292               }\n1293           }\n1294       }\n1464       public static Object convertStringToPrimitive(String value, Class<?> cls) {\n1465           return convertStringToPrimitive(value, cls, new Annotation[]{});\n1466       }\n1467       public static Object convertStringToPrimitive(String value, Class<?> cls, Annotation[] anns) {\n1468           Message m = JAXRSUtils.getCurrentMessage();\n1469           Object obj = createFromParameterHandler(value, cls, cls, anns, m);\n1470           if (obj != null) {\n1471               return obj;\n1472           }\n1473           if (String.class == cls) {\n1474               return value;\n1475           } else if (cls.isPrimitive()) {\n1476               return PrimitiveUtils.read(value, cls);\n1477           } else if (cls.isEnum()) {\n1478               if (m != null && !MessageUtils.getContextualBoolean(m, ENUM_CONVERSION_CASE_SENSITIVE, false)) {\n1479                   obj = invokeValueOf(value.toUpperCase(), cls);\n1480               }\n1481               if (obj == null) {\n1482                   try {\n1483                       obj = invokeValueOf(value, cls);\n1484                   } catch (RuntimeException ex) {\n1485                       if (m == null) {\n1486                           obj = invokeValueOf(value.toUpperCase(), cls);\n1487                       } else {\n1488                           throw ex;\n1489                       }\n1490                   }\n1491               }\n1492               return obj;\n1493           } else {\n1494               try {\n1495                   Constructor<?> c = cls.getConstructor(new Class<?>[]{String.class});\n1496                   return c.newInstance(new Object[]{value});\n1497               } catch (Throwable ex) {\n1498                   // try valueOf\n1499               }\n1500               return invokeValueOf(value, cls);\n1501           }\n1502       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/ProviderFactory.java:\n 337       public <T> ParamConverter<T> createParameterHandler(Class<T> paramType,\n 338                                                           Type genericType,\n 339                                                           Annotation[] anns,\n 340                                                           Message m) {\n 341   \n 342           anns = anns != null ? anns : new Annotation[]{};\n 343           for (ProviderInfo<ParamConverterProvider> pi : paramConverters) {\n 344               injectContextValues(pi, m);\n 345               ParamConverter<T> converter = pi.getProvider().getConverter(paramType, genericType, anns);\n 346               if (converter != null) {\n 347                   return converter;\n 348               }\n 349               pi.clearThreadLocalProxies();\n 350           }\n 351           return null;\n 352       }\n 696       protected void injectContextValues(ProviderInfo<?> pi, Message m) {\n 697           if (m != null) {\n 698               InjectionUtils.injectContexts(pi.getProvider(), pi, m);\n 699           }\n 700       }\n",
            "cost": 0.13133,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java:384:13",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 24
        },
        {
            "blob": [
                "R0VUADEAIiJqYXoiKyJ6ZXIiIg=="
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1934       protected SchemaWriter createSchemaWriter(ResourceTypes resourceTypes, JAXBContext context, UriInfo ui) {\n1935           // if neither externalSchemaLinks nor externalSchemasCache is set\n1936           // then JAXBContext will be used to generate the schema\n1937           if (externalSchemaLinks != null && externalSchemasCache == null) {\n1938               return new ExternalSchemaWriter(externalSchemaLinks, ui);\n1939           } else if (externalSchemasCache != null) {\n1940               return new StringSchemaWriter(externalSchemasCache, externalSchemaLinks, ui);\n1941           } else {\n1942               SchemaCollection coll = getSchemaCollection(resourceTypes, context);\n1943               if (coll != null) {\n1944                   return new SchemaCollectionWriter(coll);\n1945               }\n1946           }\n1947           return null;\n1948       }\n1977           StringSchemaWriter(List<String> schemas, List<URI> links, UriInfo ui) {\n1978               this.theSchemas = new LinkedList<>();\n1979               // we'll need to do the proper schema caching eventually\n1980               for (String s : schemas) {\n1981                   XMLSource source = new XMLSource(new ByteArrayInputStream(s.getBytes(StandardCharsets.UTF_8)));\n1982                   source.setBuffering();\n1983                   Map<String, String> locs = getLocationsMap(source, \"import\", links, ui);\n1984                   locs.putAll(getLocationsMap(source, \"include\", links, ui));\n1985                   String actualSchema = !locs.isEmpty() ? transformSchema(s, locs) : s;\n1986                   theSchemas.add(actualSchema);\n1987               }\n1988           }\n1990           private Map<String, String> getLocationsMap(XMLSource source, String elementName, List<URI> links,\n1991                                                       UriInfo ui) {\n1992               Map<String, String> nsMap = Collections.singletonMap(\"xs\", Constants.URI_2001_SCHEMA_XSD);\n1993               String[] locations = source.getValues(\"/*/xs:\" + elementName + \"/@schemaLocation\", nsMap);\n1994   \n1995               Map<String, String> locs = new HashMap<>();\n1996               if (locations == null) {\n1997                   return locs;\n1998               }\n1999   \n2000               for (String loc : locations) {\n2001                   try {\n2002                       URI uri = URI.create(loc);\n2003                       if (!uri.isAbsolute()) {\n2004                           if (links != null) {\n2005                               for (URI overwriteURI : links) {\n2006                                   if (overwriteURI.toString().endsWith(loc)) {\n2007                                       if (overwriteURI.isAbsolute()) {\n2008                                           locs.put(loc, overwriteURI.toString());\n2009                                       } else {\n2010                                           locs.put(loc, ui.getBaseUriBuilder().path(overwriteURI.toString())\n2011                                               .build().toString());\n2012                                       }\n2013                                       break;\n2014                                   }\n2015                               }\n2016                           }\n2017                           if (!locs.containsKey(loc)) {\n2018                               locs.put(loc, ui.getBaseUriBuilder().path(loc).build().toString());\n2019                           }\n2020                       }\n2021                   } catch (Exception ex) {\n2022                       // continue\n2023                   }\n2024               }\n2025               return locs;\n2026           }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/ext/xml/XMLSource.java:\n147       @SuppressWarnings(\"unchecked\")\n148       public <T> T[] getNodes(String expression, Map<String, String> namespaces, Class<T> cls) {\n149   \n150           NodeList nodes = (NodeList)evaluate(expression, namespaces, XPathConstants.NODESET);\n151           if (nodes == null || nodes.getLength() == 0) {\n152               return null;\n153           }\n154           T[] values = (T[])Array.newInstance(cls, nodes.getLength());\n155           for (int i = 0; i < nodes.getLength(); i++) {\n156               Node node = nodes.item(i);\n157               if (InjectionUtils.isPrimitive(cls)) {\n158                   values[i] = (T)readPrimitiveValue(node, cls);\n159               } else {\n160                   values[i] = readNode(node, cls);\n161               }\n162           }\n163           return values;\n164       }\n262       public String[] getValues(String expression, Map<String, String> namespaces) {\n263           return getNodes(expression, namespaces, String.class);\n264       }\n345       private <T> Object readPrimitiveValue(Node node, Class<T> cls) {\n346           if (String.class == cls) {\n347               if (node.getNodeType() == Node.ELEMENT_NODE) {\n348                   return StaxUtils.toString((Element)node);\n349               }\n350               return cls.cast(node.getNodeValue());\n351           }\n352   \n353           return InjectionUtils.convertStringToPrimitive(node.getNodeValue(), cls);\n354       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java:\n 378       public static void injectThroughMethod(Object requestObject,\n 379                                                  Method method,\n 380                                                  Object parameterValue,\n 381                                                  Message inMessage) {\n 382           try {\n 383               Method methodToInvoke = checkProxy(method, requestObject);\n 384               methodToInvoke.invoke(requestObject, new Object[]{parameterValue});\n 385           } catch (IllegalAccessException ex) {\n 386               reportServerError(\"METHOD_ACCESS_FAILURE\", method.getName());\n 387           } catch (InvocationTargetException ex) {\n 388               LOG.log(Level.SEVERE, ex.getCause().getMessage(), ex);\n 389               Response r = JAXRSUtils.convertFaultToResponse(ex.getCause(), inMessage);\n 390               if (r != null) {\n 391                   inMessage.getExchange().put(Response.class, r);\n 392                   throw new WebApplicationException();\n 393               }\n 394               reportServerError(\"METHOD_ACCESS_FAILURE\", method.getName());\n 395           } catch (Exception ex) {\n 396               reportServerError(\"METHOD_INJECTION_FAILURE\", method.getName());\n 397           }\n 398       }\n 551       public static <T> Optional<ParamConverter<T>> getParamConverter(Class<T> pClass,\n 552               Type genericType, Annotation[] anns, Message message) {\n 553           \n 554           if (message != null) {\n 555               ServerProviderFactory pf = ServerProviderFactory.getInstance(message);\n 556               ParamConverter<T> pm = pf.createParameterHandler(pClass, genericType, anns, message);\n 557               return Optional.ofNullable(pm);\n 558           }\n 559           \n 560           return Optional.empty();\n 561       }\n 563       public static <T> T createFromParameterHandler(String value,\n 564                                                       Class<T> pClass,\n 565                                                       Type genericType,\n 566                                                       Annotation[] anns,\n 567                                                       Message message) {\n 568           return getParamConverter(pClass, genericType, anns, message)\n 569               .map(pm -> pm.fromString(value))\n 570               .orElse(null);\n 571       }\n1257       public static void injectContexts(Object requestObject,\n1258                                    AbstractResourceInfo resource,\n1259                                    Message message) {\n1260           if (resource.contextsAvailable()) {\n1261               injectContextMethods(requestObject, resource, message);\n1262               injectContextFields(requestObject, resource, message);\n1263               injectConstructorProxies(requestObject, resource, message);\n1264           }\n1265       }\n1267       @SuppressWarnings(\"unchecked\")\n1268       public static void injectContextMethods(Object requestObject,\n1269                                               AbstractResourceInfo cri,\n1270                                               Message message) {\n1271   \n1272           for (Map.Entry<Class<?>, Method> entry : cri.getContextMethods().entrySet()) {\n1273               Method method = entry.getValue();\n1274               if (VALUE_CONTEXTS.contains(method.getParameterTypes()[0].getName()) && cri.isSingleton()) {\n1275                   continue;\n1276               }\n1277               Object o = JAXRSUtils.createContextValue(message,\n1278                                                 method.getGenericParameterTypes()[0],\n1279                                                 entry.getKey());\n1280   \n1281               if (o != null) {\n1282                   if (!cri.isSingleton()) {\n1283                       InjectionUtils.injectThroughMethod(requestObject, method, o, message);\n1284                   } else {\n1285                       ThreadLocalProxy<Object> proxy\n1286                           = (ThreadLocalProxy<Object>)cri.getContextSetterProxy(method);\n1287                       if (proxy != null) {\n1288                           proxy.set(o);\n1289                       }\n1290                   }\n1291   \n1292               }\n1293           }\n1294       }\n1464       public static Object convertStringToPrimitive(String value, Class<?> cls) {\n1465           return convertStringToPrimitive(value, cls, new Annotation[]{});\n1466       }\n1467       public static Object convertStringToPrimitive(String value, Class<?> cls, Annotation[] anns) {\n1468           Message m = JAXRSUtils.getCurrentMessage();\n1469           Object obj = createFromParameterHandler(value, cls, cls, anns, m);\n1470           if (obj != null) {\n1471               return obj;\n1472           }\n1473           if (String.class == cls) {\n1474               return value;\n1475           } else if (cls.isPrimitive()) {\n1476               return PrimitiveUtils.read(value, cls);\n1477           } else if (cls.isEnum()) {\n1478               if (m != null && !MessageUtils.getContextualBoolean(m, ENUM_CONVERSION_CASE_SENSITIVE, false)) {\n1479                   obj = invokeValueOf(value.toUpperCase(), cls);\n1480               }\n1481               if (obj == null) {\n1482                   try {\n1483                       obj = invokeValueOf(value, cls);\n1484                   } catch (RuntimeException ex) {\n1485                       if (m == null) {\n1486                           obj = invokeValueOf(value.toUpperCase(), cls);\n1487                       } else {\n1488                           throw ex;\n1489                       }\n1490                   }\n1491               }\n1492               return obj;\n1493           } else {\n1494               try {\n1495                   Constructor<?> c = cls.getConstructor(new Class<?>[]{String.class});\n1496                   return c.newInstance(new Object[]{value});\n1497               } catch (Throwable ex) {\n1498                   // try valueOf\n1499               }\n1500               return invokeValueOf(value, cls);\n1501           }\n1502       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/ProviderFactory.java:\n 337       public <T> ParamConverter<T> createParameterHandler(Class<T> paramType,\n 338                                                           Type genericType,\n 339                                                           Annotation[] anns,\n 340                                                           Message m) {\n 341   \n 342           anns = anns != null ? anns : new Annotation[]{};\n 343           for (ProviderInfo<ParamConverterProvider> pi : paramConverters) {\n 344               injectContextValues(pi, m);\n 345               ParamConverter<T> converter = pi.getProvider().getConverter(paramType, genericType, anns);\n 346               if (converter != null) {\n 347                   return converter;\n 348               }\n 349               pi.clearThreadLocalProxies();\n 350           }\n 351           return null;\n 352       }\n 696       protected void injectContextValues(ProviderInfo<?> pi, Message m) {\n 697           if (m != null) {\n 698               InjectionUtils.injectContexts(pi.getProvider(), pi, m);\n 699           }\n 700       }\n",
            "cost": 0.7848200000000001,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java:384:35",
            "status": "corpus",
            "valid_path": "YES",
            "id": 25
        },
        {
            "blob": [
                "R0VUADAAIiJqYXoiKyJ6ZXIiIg=="
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java:\n 605       public static InputStream getClasspathResourceStream(String path, Class<?> callingClass, Bus bus) {\n 606           InputStream is = ClassLoaderUtils.getResourceAsStream(path, callingClass);\n 607           return is == null ? getResource(path, InputStream.class, bus) : is;\n 608       }\n 615       public static <T> T getResource(String path, Class<T> resourceClass, Bus bus) {\n 616           if (bus != null) {\n 617               ResourceManager rm = bus.getExtension(ResourceManager.class);\n 618               if (rm != null) {\n 619                   return rm.resolveResource(path, resourceClass);\n 620               }\n 621           }\n 622           return null;\n 623       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerBus.java:\n169       public final <T> T getExtension(Class<T> extensionType) {\n170           Object obj = extensions.get(extensionType);\n171           if (obj == null) {\n172               if (missingExtensions.contains(extensionType)) {\n173                   //already know we cannot find it\n174                   return null;\n175               }\n176               ConfiguredBeanLocator loc = (ConfiguredBeanLocator)extensions.get(ConfiguredBeanLocator.class);\n177               if (loc == null) {\n178                   loc = createConfiguredBeanLocator();\n179               }\n180               if (loc != null) {\n181                   obj = loc.getBeanOfType(extensionType.getName(), extensionType);\n182                   if (obj != null) {\n183                       extensions.put(extensionType, obj);\n184                   } else {\n185                       //force loading\n186                       Collection<?> objs = loc.getBeansOfType(extensionType);\n187                       if (objs != null && !objs.isEmpty()) {\n188                           extensions.put(extensionType, objs.iterator().next());\n189                       }\n190                       obj = extensions.get(extensionType);\n191                   }\n192               }\n193           }\n194           if (null != obj) {\n195               return extensionType.cast(obj);\n196           }\n197           //record that it couldn't be found to avoid expensive searches again in the future\n198           missingExtensions.add(extensionType);\n199           return null;\n200       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerImpl.java:\n186       final void loadAndRegister(Extension e) {\n187           Class<?> cls;\n188           if (null != e.getInterfaceName() && !\"\".equals(e.getInterfaceName())) {\n189               cls = e.loadInterface(loader);\n190           }  else {\n191               cls = e.getClassObject(loader);\n192           }\n193           if (null != activated && null != cls && null != activated.get(cls)) {\n194               return;\n195           }\n196   \n197           synchronized (e) {\n198               Object obj = e.load(loader, bus);\n199               if (obj == null) {\n200                   return;\n201               }\n202   \n203               if (null != activated) {\n204                   Configurer configurer = (Configurer)(activated.get(Configurer.class));\n205                   if (null != configurer) {\n206                       configurer.configureBean(obj);\n207                   }\n208               }\n209   \n210               // let the object know for which namespaces it has been activated\n211               ResourceResolver namespacesResolver = null;\n212               if (null != e.getNamespaces()) {\n213                   namespacesResolver = new SinglePropertyResolver(ACTIVATION_NAMESPACES_PROPERTY_NAME,\n214                                                                   e.getNamespaces());\n215                   resourceManager.addResourceResolver(namespacesResolver);\n216               }\n217   \n218               // Since we need to support spring2.5 by removing @Resource(\"activationNamespaces\")\n219               // Now we call the setActivationNamespaces method directly here\n220               if (e.getNamespaces() != null && !e.getNamespaces().isEmpty()) {\n221                   invokeSetterActivationNSMethod(obj, e.getNamespaces());\n222               }\n223   \n224               ResourceInjector injector = new ResourceInjector(resourceManager);\n225   \n226               try {\n227                   injector.inject(obj);\n228                   injector.construct(obj);\n229               } finally {\n230                   if (null != namespacesResolver) {\n231                       resourceManager.removeResourceResolver(namespacesResolver);\n232                   }\n233               }\n234   \n235               if (null != activated) {\n236                   if (cls == null) {\n237                       cls = obj.getClass();\n238                   }\n239                   activated.put(cls, obj);\n240               }\n241           }\n242       }\n298       public <T> T getBeanOfType(String name, Class<T> type) {\n299           if (name == null) {\n300               return null;\n301           }\n302           Extension ex = all.get(name);\n303           if (ex != null) {\n304               if (ex.getLoadedObject() == null) {\n305                   loadAndRegister(ex);\n306               }\n307               return type.cast(ex.getLoadedObject());\n308           }\n309           return null;\n310       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/common/injection/ResourceInjector.java:\n116       public void inject(Object o) {\n117           inject(o, o.getClass());\n118       }\n120       public void inject(Object o, Class<?> claz) {\n121           if (processable(claz, o)) {\n122               AnnotationProcessor processor = new AnnotationProcessor(o);\n123               processor.accept(this, claz);\n124           }\n125       }\n223       public final void visitMethod(final Method method, final Annotation annotation) {\n224   \n225           assert annotation instanceof Resource : annotation;\n226   \n227           Resource res = (Resource)annotation;\n228   \n229           String resourceName = getResourceName(res, method);\n230           Class<?> clz = getResourceType(res, method);\n231   \n232           Object resource = resolveResource(resourceName, clz);\n233           if (resource == null\n234               && \"\".equals(res.name())) {\n235               resource = resolveResource(null, clz);\n236           }\n237           if (resource != null) {\n238               invokeSetter(method, resource);\n239           } else {\n240               LOG.log(Level.FINE, \"RESOURCE_RESOLVE_FAILED\", new Object[] {resourceName, clz});\n241           }\n242       }\n286       private void invokeSetter(Method method, Object resource) {\n287           try {\n288               ReflectionUtil.setAccessible(method);\n289               if (method.getDeclaringClass().isAssignableFrom(getTarget().getClass())) {\n290                   method.invoke(getTarget(), resource);\n291               } else { // deal with the proxy setter method\n292                   Method targetMethod = getTarget().getClass().getMethod(method.getName(),\n293                                                                          method.getParameterTypes());\n294                   targetMethod.invoke(getTarget(), resource);\n295               }\n296           } catch (IllegalAccessException e) {\n297               LOG.log(Level.SEVERE, \"INJECTION_SETTER_NOT_VISIBLE\", method);\n298           } catch (InvocationTargetException | SecurityException e) {\n299               LogUtils.log(LOG, Level.SEVERE, \"INJECTION_SETTER_RAISED_EXCEPTION\", e, method);\n300           } catch (NoSuchMethodException e) {\n301               LOG.log(Level.SEVERE, \"INJECTION_SETTER_METHOD_NOT_FOUND\", new Object[] {method.getName()});\n302           }\n303       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/common/annotation/AnnotationProcessor.java:\n 61       public void accept(AnnotationVisitor visitor, Class<?> claz) {\n 62   \n 63           if (visitor == null) {\n 64               throw new IllegalArgumentException();\n 65           }\n 66   \n 67           annotationTypes = visitor.getTargetAnnotations();\n 68           visitor.setTarget(target);\n 69           //recursively check annotation in super class\n 70           processClass(visitor, claz);\n 71           processFields(visitor, claz);\n 72           processMethods(visitor, claz);\n 73       }\n 80       private void processMethods(AnnotationVisitor visitor, Class<? extends Object> targetClass) {\n 81   \n 82           if (targetClass.getSuperclass() != null) {\n 83               processMethods(visitor, targetClass.getSuperclass());\n 84           }\n 85           for (Method element : ReflectionUtil.getDeclaredMethods(targetClass)) {\n 86               for (Class<? extends Annotation> clz : annotationTypes) {\n 87                   Annotation ann = element.getAnnotation(clz);\n 88                   if (ann != null) {\n 89                       visitor.visitMethod(element, ann);\n 90                   }\n 91               }\n 92           }\n 93       }\n",
            "cost": 0.80193,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/common/injection/ResourceInjector.java:290:17",
            "status": "corpus",
            "valid_path": "YES",
            "id": 26
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java:\n 605       public static InputStream getClasspathResourceStream(String path, Class<?> callingClass, Bus bus) {\n 606           InputStream is = ClassLoaderUtils.getResourceAsStream(path, callingClass);\n 607           return is == null ? getResource(path, InputStream.class, bus) : is;\n 608       }\n 615       public static <T> T getResource(String path, Class<T> resourceClass, Bus bus) {\n 616           if (bus != null) {\n 617               ResourceManager rm = bus.getExtension(ResourceManager.class);\n 618               if (rm != null) {\n 619                   return rm.resolveResource(path, resourceClass);\n 620               }\n 621           }\n 622           return null;\n 623       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerBus.java:\n169       public final <T> T getExtension(Class<T> extensionType) {\n170           Object obj = extensions.get(extensionType);\n171           if (obj == null) {\n172               if (missingExtensions.contains(extensionType)) {\n173                   //already know we cannot find it\n174                   return null;\n175               }\n176               ConfiguredBeanLocator loc = (ConfiguredBeanLocator)extensions.get(ConfiguredBeanLocator.class);\n177               if (loc == null) {\n178                   loc = createConfiguredBeanLocator();\n179               }\n180               if (loc != null) {\n181                   obj = loc.getBeanOfType(extensionType.getName(), extensionType);\n182                   if (obj != null) {\n183                       extensions.put(extensionType, obj);\n184                   } else {\n185                       //force loading\n186                       Collection<?> objs = loc.getBeansOfType(extensionType);\n187                       if (objs != null && !objs.isEmpty()) {\n188                           extensions.put(extensionType, objs.iterator().next());\n189                       }\n190                       obj = extensions.get(extensionType);\n191                   }\n192               }\n193           }\n194           if (null != obj) {\n195               return extensionType.cast(obj);\n196           }\n197           //record that it couldn't be found to avoid expensive searches again in the future\n198           missingExtensions.add(extensionType);\n199           return null;\n200       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerImpl.java:\n186       final void loadAndRegister(Extension e) {\n187           Class<?> cls;\n188           if (null != e.getInterfaceName() && !\"\".equals(e.getInterfaceName())) {\n189               cls = e.loadInterface(loader);\n190           }  else {\n191               cls = e.getClassObject(loader);\n192           }\n193           if (null != activated && null != cls && null != activated.get(cls)) {\n194               return;\n195           }\n196   \n197           synchronized (e) {\n198               Object obj = e.load(loader, bus);\n199               if (obj == null) {\n200                   return;\n201               }\n202   \n203               if (null != activated) {\n204                   Configurer configurer = (Configurer)(activated.get(Configurer.class));\n205                   if (null != configurer) {\n206                       configurer.configureBean(obj);\n207                   }\n208               }\n209   \n210               // let the object know for which namespaces it has been activated\n211               ResourceResolver namespacesResolver = null;\n212               if (null != e.getNamespaces()) {\n213                   namespacesResolver = new SinglePropertyResolver(ACTIVATION_NAMESPACES_PROPERTY_NAME,\n214                                                                   e.getNamespaces());\n215                   resourceManager.addResourceResolver(namespacesResolver);\n216               }\n217   \n218               // Since we need to support spring2.5 by removing @Resource(\"activationNamespaces\")\n219               // Now we call the setActivationNamespaces method directly here\n220               if (e.getNamespaces() != null && !e.getNamespaces().isEmpty()) {\n221                   invokeSetterActivationNSMethod(obj, e.getNamespaces());\n222               }\n223   \n224               ResourceInjector injector = new ResourceInjector(resourceManager);\n225   \n226               try {\n227                   injector.inject(obj);\n228                   injector.construct(obj);\n229               } finally {\n230                   if (null != namespacesResolver) {\n231                       resourceManager.removeResourceResolver(namespacesResolver);\n232                   }\n233               }\n234   \n235               if (null != activated) {\n236                   if (cls == null) {\n237                       cls = obj.getClass();\n238                   }\n239                   activated.put(cls, obj);\n240               }\n241           }\n242       }\n298       public <T> T getBeanOfType(String name, Class<T> type) {\n299           if (name == null) {\n300               return null;\n301           }\n302           Extension ex = all.get(name);\n303           if (ex != null) {\n304               if (ex.getLoadedObject() == null) {\n305                   loadAndRegister(ex);\n306               }\n307               return type.cast(ex.getLoadedObject());\n308           }\n309           return null;\n310       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/common/injection/ResourceInjector.java:\n116       public void inject(Object o) {\n117           inject(o, o.getClass());\n118       }\n120       public void inject(Object o, Class<?> claz) {\n121           if (processable(claz, o)) {\n122               AnnotationProcessor processor = new AnnotationProcessor(o);\n123               processor.accept(this, claz);\n124           }\n125       }\n223       public final void visitMethod(final Method method, final Annotation annotation) {\n224   \n225           assert annotation instanceof Resource : annotation;\n226   \n227           Resource res = (Resource)annotation;\n228   \n229           String resourceName = getResourceName(res, method);\n230           Class<?> clz = getResourceType(res, method);\n231   \n232           Object resource = resolveResource(resourceName, clz);\n233           if (resource == null\n234               && \"\".equals(res.name())) {\n235               resource = resolveResource(null, clz);\n236           }\n237           if (resource != null) {\n238               invokeSetter(method, resource);\n239           } else {\n240               LOG.log(Level.FINE, \"RESOURCE_RESOLVE_FAILED\", new Object[] {resourceName, clz});\n241           }\n242       }\n286       private void invokeSetter(Method method, Object resource) {\n287           try {\n288               ReflectionUtil.setAccessible(method);\n289               if (method.getDeclaringClass().isAssignableFrom(getTarget().getClass())) {\n290                   method.invoke(getTarget(), resource);\n291               } else { // deal with the proxy setter method\n292                   Method targetMethod = getTarget().getClass().getMethod(method.getName(),\n293                                                                          method.getParameterTypes());\n294                   targetMethod.invoke(getTarget(), resource);\n295               }\n296           } catch (IllegalAccessException e) {\n297               LOG.log(Level.SEVERE, \"INJECTION_SETTER_NOT_VISIBLE\", method);\n298           } catch (InvocationTargetException | SecurityException e) {\n299               LogUtils.log(LOG, Level.SEVERE, \"INJECTION_SETTER_RAISED_EXCEPTION\", e, method);\n300           } catch (NoSuchMethodException e) {\n301               LOG.log(Level.SEVERE, \"INJECTION_SETTER_METHOD_NOT_FOUND\", new Object[] {method.getName()});\n302           }\n303       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/common/annotation/AnnotationProcessor.java:\n 61       public void accept(AnnotationVisitor visitor, Class<?> claz) {\n 62   \n 63           if (visitor == null) {\n 64               throw new IllegalArgumentException();\n 65           }\n 66   \n 67           annotationTypes = visitor.getTargetAnnotations();\n 68           visitor.setTarget(target);\n 69           //recursively check annotation in super class\n 70           processClass(visitor, claz);\n 71           processFields(visitor, claz);\n 72           processMethods(visitor, claz);\n 73       }\n 80       private void processMethods(AnnotationVisitor visitor, Class<? extends Object> targetClass) {\n 81   \n 82           if (targetClass.getSuperclass() != null) {\n 83               processMethods(visitor, targetClass.getSuperclass());\n 84           }\n 85           for (Method element : ReflectionUtil.getDeclaredMethods(targetClass)) {\n 86               for (Class<? extends Annotation> clz : annotationTypes) {\n 87                   Annotation ann = element.getAnnotation(clz);\n 88                   if (ann != null) {\n 89                       visitor.visitMethod(element, ann);\n 90                   }\n 91               }\n 92           }\n 93       }\n",
            "cost": 0.11832000000000001,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/common/injection/ResourceInjector.java:290:31",
            "status": "corpus",
            "valid_path": "NO",
            "id": 27
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java:\n 605       public static InputStream getClasspathResourceStream(String path, Class<?> callingClass, Bus bus) {\n 606           InputStream is = ClassLoaderUtils.getResourceAsStream(path, callingClass);\n 607           return is == null ? getResource(path, InputStream.class, bus) : is;\n 608       }\n 615       public static <T> T getResource(String path, Class<T> resourceClass, Bus bus) {\n 616           if (bus != null) {\n 617               ResourceManager rm = bus.getExtension(ResourceManager.class);\n 618               if (rm != null) {\n 619                   return rm.resolveResource(path, resourceClass);\n 620               }\n 621           }\n 622           return null;\n 623       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerBus.java:\n169       public final <T> T getExtension(Class<T> extensionType) {\n170           Object obj = extensions.get(extensionType);\n171           if (obj == null) {\n172               if (missingExtensions.contains(extensionType)) {\n173                   //already know we cannot find it\n174                   return null;\n175               }\n176               ConfiguredBeanLocator loc = (ConfiguredBeanLocator)extensions.get(ConfiguredBeanLocator.class);\n177               if (loc == null) {\n178                   loc = createConfiguredBeanLocator();\n179               }\n180               if (loc != null) {\n181                   obj = loc.getBeanOfType(extensionType.getName(), extensionType);\n182                   if (obj != null) {\n183                       extensions.put(extensionType, obj);\n184                   } else {\n185                       //force loading\n186                       Collection<?> objs = loc.getBeansOfType(extensionType);\n187                       if (objs != null && !objs.isEmpty()) {\n188                           extensions.put(extensionType, objs.iterator().next());\n189                       }\n190                       obj = extensions.get(extensionType);\n191                   }\n192               }\n193           }\n194           if (null != obj) {\n195               return extensionType.cast(obj);\n196           }\n197           //record that it couldn't be found to avoid expensive searches again in the future\n198           missingExtensions.add(extensionType);\n199           return null;\n200       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerImpl.java:\n186       final void loadAndRegister(Extension e) {\n187           Class<?> cls;\n188           if (null != e.getInterfaceName() && !\"\".equals(e.getInterfaceName())) {\n189               cls = e.loadInterface(loader);\n190           }  else {\n191               cls = e.getClassObject(loader);\n192           }\n193           if (null != activated && null != cls && null != activated.get(cls)) {\n194               return;\n195           }\n196   \n197           synchronized (e) {\n198               Object obj = e.load(loader, bus);\n199               if (obj == null) {\n200                   return;\n201               }\n202   \n203               if (null != activated) {\n204                   Configurer configurer = (Configurer)(activated.get(Configurer.class));\n205                   if (null != configurer) {\n206                       configurer.configureBean(obj);\n207                   }\n208               }\n209   \n210               // let the object know for which namespaces it has been activated\n211               ResourceResolver namespacesResolver = null;\n212               if (null != e.getNamespaces()) {\n213                   namespacesResolver = new SinglePropertyResolver(ACTIVATION_NAMESPACES_PROPERTY_NAME,\n214                                                                   e.getNamespaces());\n215                   resourceManager.addResourceResolver(namespacesResolver);\n216               }\n217   \n218               // Since we need to support spring2.5 by removing @Resource(\"activationNamespaces\")\n219               // Now we call the setActivationNamespaces method directly here\n220               if (e.getNamespaces() != null && !e.getNamespaces().isEmpty()) {\n221                   invokeSetterActivationNSMethod(obj, e.getNamespaces());\n222               }\n223   \n224               ResourceInjector injector = new ResourceInjector(resourceManager);\n225   \n226               try {\n227                   injector.inject(obj);\n228                   injector.construct(obj);\n229               } finally {\n230                   if (null != namespacesResolver) {\n231                       resourceManager.removeResourceResolver(namespacesResolver);\n232                   }\n233               }\n234   \n235               if (null != activated) {\n236                   if (cls == null) {\n237                       cls = obj.getClass();\n238                   }\n239                   activated.put(cls, obj);\n240               }\n241           }\n242       }\n298       public <T> T getBeanOfType(String name, Class<T> type) {\n299           if (name == null) {\n300               return null;\n301           }\n302           Extension ex = all.get(name);\n303           if (ex != null) {\n304               if (ex.getLoadedObject() == null) {\n305                   loadAndRegister(ex);\n306               }\n307               return type.cast(ex.getLoadedObject());\n308           }\n309           return null;\n310       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/common/injection/ResourceInjector.java:\n116       public void inject(Object o) {\n117           inject(o, o.getClass());\n118       }\n120       public void inject(Object o, Class<?> claz) {\n121           if (processable(claz, o)) {\n122               AnnotationProcessor processor = new AnnotationProcessor(o);\n123               processor.accept(this, claz);\n124           }\n125       }\n223       public final void visitMethod(final Method method, final Annotation annotation) {\n224   \n225           assert annotation instanceof Resource : annotation;\n226   \n227           Resource res = (Resource)annotation;\n228   \n229           String resourceName = getResourceName(res, method);\n230           Class<?> clz = getResourceType(res, method);\n231   \n232           Object resource = resolveResource(resourceName, clz);\n233           if (resource == null\n234               && \"\".equals(res.name())) {\n235               resource = resolveResource(null, clz);\n236           }\n237           if (resource != null) {\n238               invokeSetter(method, resource);\n239           } else {\n240               LOG.log(Level.FINE, \"RESOURCE_RESOLVE_FAILED\", new Object[] {resourceName, clz});\n241           }\n242       }\n286       private void invokeSetter(Method method, Object resource) {\n287           try {\n288               ReflectionUtil.setAccessible(method);\n289               if (method.getDeclaringClass().isAssignableFrom(getTarget().getClass())) {\n290                   method.invoke(getTarget(), resource);\n291               } else { // deal with the proxy setter method\n292                   Method targetMethod = getTarget().getClass().getMethod(method.getName(),\n293                                                                          method.getParameterTypes());\n294                   targetMethod.invoke(getTarget(), resource);\n295               }\n296           } catch (IllegalAccessException e) {\n297               LOG.log(Level.SEVERE, \"INJECTION_SETTER_NOT_VISIBLE\", method);\n298           } catch (InvocationTargetException | SecurityException e) {\n299               LogUtils.log(LOG, Level.SEVERE, \"INJECTION_SETTER_RAISED_EXCEPTION\", e, method);\n300           } catch (NoSuchMethodException e) {\n301               LOG.log(Level.SEVERE, \"INJECTION_SETTER_METHOD_NOT_FOUND\", new Object[] {method.getName()});\n302           }\n303       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/common/annotation/AnnotationProcessor.java:\n 61       public void accept(AnnotationVisitor visitor, Class<?> claz) {\n 62   \n 63           if (visitor == null) {\n 64               throw new IllegalArgumentException();\n 65           }\n 66   \n 67           annotationTypes = visitor.getTargetAnnotations();\n 68           visitor.setTarget(target);\n 69           //recursively check annotation in super class\n 70           processClass(visitor, claz);\n 71           processFields(visitor, claz);\n 72           processMethods(visitor, claz);\n 73       }\n 80       private void processMethods(AnnotationVisitor visitor, Class<? extends Object> targetClass) {\n 81   \n 82           if (targetClass.getSuperclass() != null) {\n 83               processMethods(visitor, targetClass.getSuperclass());\n 84           }\n 85           for (Method element : ReflectionUtil.getDeclaredMethods(targetClass)) {\n 86               for (Class<? extends Annotation> clz : annotationTypes) {\n 87                   Annotation ann = element.getAnnotation(clz);\n 88                   if (ann != null) {\n 89                       visitor.visitMethod(element, ann);\n 90                   }\n 91               }\n 92           }\n 93       }\n",
            "cost": 0.11662,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/common/injection/ResourceInjector.java:294:17",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 28
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java:\n 605       public static InputStream getClasspathResourceStream(String path, Class<?> callingClass, Bus bus) {\n 606           InputStream is = ClassLoaderUtils.getResourceAsStream(path, callingClass);\n 607           return is == null ? getResource(path, InputStream.class, bus) : is;\n 608       }\n 615       public static <T> T getResource(String path, Class<T> resourceClass, Bus bus) {\n 616           if (bus != null) {\n 617               ResourceManager rm = bus.getExtension(ResourceManager.class);\n 618               if (rm != null) {\n 619                   return rm.resolveResource(path, resourceClass);\n 620               }\n 621           }\n 622           return null;\n 623       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerBus.java:\n169       public final <T> T getExtension(Class<T> extensionType) {\n170           Object obj = extensions.get(extensionType);\n171           if (obj == null) {\n172               if (missingExtensions.contains(extensionType)) {\n173                   //already know we cannot find it\n174                   return null;\n175               }\n176               ConfiguredBeanLocator loc = (ConfiguredBeanLocator)extensions.get(ConfiguredBeanLocator.class);\n177               if (loc == null) {\n178                   loc = createConfiguredBeanLocator();\n179               }\n180               if (loc != null) {\n181                   obj = loc.getBeanOfType(extensionType.getName(), extensionType);\n182                   if (obj != null) {\n183                       extensions.put(extensionType, obj);\n184                   } else {\n185                       //force loading\n186                       Collection<?> objs = loc.getBeansOfType(extensionType);\n187                       if (objs != null && !objs.isEmpty()) {\n188                           extensions.put(extensionType, objs.iterator().next());\n189                       }\n190                       obj = extensions.get(extensionType);\n191                   }\n192               }\n193           }\n194           if (null != obj) {\n195               return extensionType.cast(obj);\n196           }\n197           //record that it couldn't be found to avoid expensive searches again in the future\n198           missingExtensions.add(extensionType);\n199           return null;\n200       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerImpl.java:\n186       final void loadAndRegister(Extension e) {\n187           Class<?> cls;\n188           if (null != e.getInterfaceName() && !\"\".equals(e.getInterfaceName())) {\n189               cls = e.loadInterface(loader);\n190           }  else {\n191               cls = e.getClassObject(loader);\n192           }\n193           if (null != activated && null != cls && null != activated.get(cls)) {\n194               return;\n195           }\n196   \n197           synchronized (e) {\n198               Object obj = e.load(loader, bus);\n199               if (obj == null) {\n200                   return;\n201               }\n202   \n203               if (null != activated) {\n204                   Configurer configurer = (Configurer)(activated.get(Configurer.class));\n205                   if (null != configurer) {\n206                       configurer.configureBean(obj);\n207                   }\n208               }\n209   \n210               // let the object know for which namespaces it has been activated\n211               ResourceResolver namespacesResolver = null;\n212               if (null != e.getNamespaces()) {\n213                   namespacesResolver = new SinglePropertyResolver(ACTIVATION_NAMESPACES_PROPERTY_NAME,\n214                                                                   e.getNamespaces());\n215                   resourceManager.addResourceResolver(namespacesResolver);\n216               }\n217   \n218               // Since we need to support spring2.5 by removing @Resource(\"activationNamespaces\")\n219               // Now we call the setActivationNamespaces method directly here\n220               if (e.getNamespaces() != null && !e.getNamespaces().isEmpty()) {\n221                   invokeSetterActivationNSMethod(obj, e.getNamespaces());\n222               }\n223   \n224               ResourceInjector injector = new ResourceInjector(resourceManager);\n225   \n226               try {\n227                   injector.inject(obj);\n228                   injector.construct(obj);\n229               } finally {\n230                   if (null != namespacesResolver) {\n231                       resourceManager.removeResourceResolver(namespacesResolver);\n232                   }\n233               }\n234   \n235               if (null != activated) {\n236                   if (cls == null) {\n237                       cls = obj.getClass();\n238                   }\n239                   activated.put(cls, obj);\n240               }\n241           }\n242       }\n298       public <T> T getBeanOfType(String name, Class<T> type) {\n299           if (name == null) {\n300               return null;\n301           }\n302           Extension ex = all.get(name);\n303           if (ex != null) {\n304               if (ex.getLoadedObject() == null) {\n305                   loadAndRegister(ex);\n306               }\n307               return type.cast(ex.getLoadedObject());\n308           }\n309           return null;\n310       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/common/injection/ResourceInjector.java:\n116       public void inject(Object o) {\n117           inject(o, o.getClass());\n118       }\n120       public void inject(Object o, Class<?> claz) {\n121           if (processable(claz, o)) {\n122               AnnotationProcessor processor = new AnnotationProcessor(o);\n123               processor.accept(this, claz);\n124           }\n125       }\n223       public final void visitMethod(final Method method, final Annotation annotation) {\n224   \n225           assert annotation instanceof Resource : annotation;\n226   \n227           Resource res = (Resource)annotation;\n228   \n229           String resourceName = getResourceName(res, method);\n230           Class<?> clz = getResourceType(res, method);\n231   \n232           Object resource = resolveResource(resourceName, clz);\n233           if (resource == null\n234               && \"\".equals(res.name())) {\n235               resource = resolveResource(null, clz);\n236           }\n237           if (resource != null) {\n238               invokeSetter(method, resource);\n239           } else {\n240               LOG.log(Level.FINE, \"RESOURCE_RESOLVE_FAILED\", new Object[] {resourceName, clz});\n241           }\n242       }\n286       private void invokeSetter(Method method, Object resource) {\n287           try {\n288               ReflectionUtil.setAccessible(method);\n289               if (method.getDeclaringClass().isAssignableFrom(getTarget().getClass())) {\n290                   method.invoke(getTarget(), resource);\n291               } else { // deal with the proxy setter method\n292                   Method targetMethod = getTarget().getClass().getMethod(method.getName(),\n293                                                                          method.getParameterTypes());\n294                   targetMethod.invoke(getTarget(), resource);\n295               }\n296           } catch (IllegalAccessException e) {\n297               LOG.log(Level.SEVERE, \"INJECTION_SETTER_NOT_VISIBLE\", method);\n298           } catch (InvocationTargetException | SecurityException e) {\n299               LogUtils.log(LOG, Level.SEVERE, \"INJECTION_SETTER_RAISED_EXCEPTION\", e, method);\n300           } catch (NoSuchMethodException e) {\n301               LOG.log(Level.SEVERE, \"INJECTION_SETTER_METHOD_NOT_FOUND\", new Object[] {method.getName()});\n302           }\n303       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/common/annotation/AnnotationProcessor.java:\n 61       public void accept(AnnotationVisitor visitor, Class<?> claz) {\n 62   \n 63           if (visitor == null) {\n 64               throw new IllegalArgumentException();\n 65           }\n 66   \n 67           annotationTypes = visitor.getTargetAnnotations();\n 68           visitor.setTarget(target);\n 69           //recursively check annotation in super class\n 70           processClass(visitor, claz);\n 71           processFields(visitor, claz);\n 72           processMethods(visitor, claz);\n 73       }\n 80       private void processMethods(AnnotationVisitor visitor, Class<? extends Object> targetClass) {\n 81   \n 82           if (targetClass.getSuperclass() != null) {\n 83               processMethods(visitor, targetClass.getSuperclass());\n 84           }\n 85           for (Method element : ReflectionUtil.getDeclaredMethods(targetClass)) {\n 86               for (Class<? extends Annotation> clz : annotationTypes) {\n 87                   Annotation ann = element.getAnnotation(clz);\n 88                   if (ann != null) {\n 89                       visitor.visitMethod(element, ann);\n 90                   }\n 91               }\n 92           }\n 93       }\n",
            "cost": 0.11717,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/common/injection/ResourceInjector.java:294:37",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 29
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java:\n 605       public static InputStream getClasspathResourceStream(String path, Class<?> callingClass, Bus bus) {\n 606           InputStream is = ClassLoaderUtils.getResourceAsStream(path, callingClass);\n 607           return is == null ? getResource(path, InputStream.class, bus) : is;\n 608       }\n 615       public static <T> T getResource(String path, Class<T> resourceClass, Bus bus) {\n 616           if (bus != null) {\n 617               ResourceManager rm = bus.getExtension(ResourceManager.class);\n 618               if (rm != null) {\n 619                   return rm.resolveResource(path, resourceClass);\n 620               }\n 621           }\n 622           return null;\n 623       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerBus.java:\n169       public final <T> T getExtension(Class<T> extensionType) {\n170           Object obj = extensions.get(extensionType);\n171           if (obj == null) {\n172               if (missingExtensions.contains(extensionType)) {\n173                   //already know we cannot find it\n174                   return null;\n175               }\n176               ConfiguredBeanLocator loc = (ConfiguredBeanLocator)extensions.get(ConfiguredBeanLocator.class);\n177               if (loc == null) {\n178                   loc = createConfiguredBeanLocator();\n179               }\n180               if (loc != null) {\n181                   obj = loc.getBeanOfType(extensionType.getName(), extensionType);\n182                   if (obj != null) {\n183                       extensions.put(extensionType, obj);\n184                   } else {\n185                       //force loading\n186                       Collection<?> objs = loc.getBeansOfType(extensionType);\n187                       if (objs != null && !objs.isEmpty()) {\n188                           extensions.put(extensionType, objs.iterator().next());\n189                       }\n190                       obj = extensions.get(extensionType);\n191                   }\n192               }\n193           }\n194           if (null != obj) {\n195               return extensionType.cast(obj);\n196           }\n197           //record that it couldn't be found to avoid expensive searches again in the future\n198           missingExtensions.add(extensionType);\n199           return null;\n200       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBeanLocator.java:\n144       public <T> Collection<? extends T> getBeansOfType(Class<T> type) {\n145           Set<String> s = new LinkedHashSet<>(Arrays.asList(context.getBeanNamesForType(type,\n146                                                                                               false,\n147                                                                                               false)));\n148           s.removeAll(passThroughs);\n149           List<T> lst = new LinkedList<>();\n150           for (String n : s) {\n151               lst.add(type.cast(context.getBean(n, type)));\n152           }\n153           lst.addAll(orig.getBeansOfType(type));\n154           if (lst.isEmpty()) {\n155               tryOSGI(lst, type);\n156           }\n157           return lst;\n158       }\n159       private <T> void tryOSGI(Collection<T> lst, Class<T> type) {\n160           if (!osgi) {\n161               return;\n162           }\n163           try {\n164               //use a little reflection to allow this to work without the spring-dm jars\n165               //for the non-osgi cases\n166               Class<?> contextClass = findContextClass(bundleContext.getClass());\n167   \n168               Method m = contextClass.getMethod(\"getServiceReference\", String.class);\n169               ReflectionUtil.setAccessible(m);\n170               Object o = m.invoke(bundleContext, type.getName());\n171               if (o != null) {\n172                   m = contextClass.getMethod(\"getService\", m.getReturnType());\n173                   ReflectionUtil.setAccessible(m);\n174                   o = m.invoke(bundleContext, o);\n175                   lst.add(type.cast(o));\n176               }\n177           } catch (NoSuchMethodException e) {\n178               osgi = false;\n179               //not using OSGi\n180           } catch (Throwable e) {\n181               //ignore\n182               LOG.log(Level.WARNING, \"Could not get service for \" + type.getName(), e);\n183           }\n184       }\n",
            "cost": 0.09592500000000001,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBeanLocator.java:170:24",
            "status": "corpus",
            "valid_path": "NO",
            "id": 30
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java:\n 605       public static InputStream getClasspathResourceStream(String path, Class<?> callingClass, Bus bus) {\n 606           InputStream is = ClassLoaderUtils.getResourceAsStream(path, callingClass);\n 607           return is == null ? getResource(path, InputStream.class, bus) : is;\n 608       }\n 615       public static <T> T getResource(String path, Class<T> resourceClass, Bus bus) {\n 616           if (bus != null) {\n 617               ResourceManager rm = bus.getExtension(ResourceManager.class);\n 618               if (rm != null) {\n 619                   return rm.resolveResource(path, resourceClass);\n 620               }\n 621           }\n 622           return null;\n 623       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerBus.java:\n169       public final <T> T getExtension(Class<T> extensionType) {\n170           Object obj = extensions.get(extensionType);\n171           if (obj == null) {\n172               if (missingExtensions.contains(extensionType)) {\n173                   //already know we cannot find it\n174                   return null;\n175               }\n176               ConfiguredBeanLocator loc = (ConfiguredBeanLocator)extensions.get(ConfiguredBeanLocator.class);\n177               if (loc == null) {\n178                   loc = createConfiguredBeanLocator();\n179               }\n180               if (loc != null) {\n181                   obj = loc.getBeanOfType(extensionType.getName(), extensionType);\n182                   if (obj != null) {\n183                       extensions.put(extensionType, obj);\n184                   } else {\n185                       //force loading\n186                       Collection<?> objs = loc.getBeansOfType(extensionType);\n187                       if (objs != null && !objs.isEmpty()) {\n188                           extensions.put(extensionType, objs.iterator().next());\n189                       }\n190                       obj = extensions.get(extensionType);\n191                   }\n192               }\n193           }\n194           if (null != obj) {\n195               return extensionType.cast(obj);\n196           }\n197           //record that it couldn't be found to avoid expensive searches again in the future\n198           missingExtensions.add(extensionType);\n199           return null;\n200       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBeanLocator.java:\n144       public <T> Collection<? extends T> getBeansOfType(Class<T> type) {\n145           Set<String> s = new LinkedHashSet<>(Arrays.asList(context.getBeanNamesForType(type,\n146                                                                                               false,\n147                                                                                               false)));\n148           s.removeAll(passThroughs);\n149           List<T> lst = new LinkedList<>();\n150           for (String n : s) {\n151               lst.add(type.cast(context.getBean(n, type)));\n152           }\n153           lst.addAll(orig.getBeansOfType(type));\n154           if (lst.isEmpty()) {\n155               tryOSGI(lst, type);\n156           }\n157           return lst;\n158       }\n159       private <T> void tryOSGI(Collection<T> lst, Class<T> type) {\n160           if (!osgi) {\n161               return;\n162           }\n163           try {\n164               //use a little reflection to allow this to work without the spring-dm jars\n165               //for the non-osgi cases\n166               Class<?> contextClass = findContextClass(bundleContext.getClass());\n167   \n168               Method m = contextClass.getMethod(\"getServiceReference\", String.class);\n169               ReflectionUtil.setAccessible(m);\n170               Object o = m.invoke(bundleContext, type.getName());\n171               if (o != null) {\n172                   m = contextClass.getMethod(\"getService\", m.getReturnType());\n173                   ReflectionUtil.setAccessible(m);\n174                   o = m.invoke(bundleContext, o);\n175                   lst.add(type.cast(o));\n176               }\n177           } catch (NoSuchMethodException e) {\n178               osgi = false;\n179               //not using OSGi\n180           } catch (Throwable e) {\n181               //ignore\n182               LOG.log(Level.WARNING, \"Could not get service for \" + type.getName(), e);\n183           }\n184       }\n",
            "cost": 0.09682500000000001,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBeanLocator.java:170:33",
            "status": "corpus",
            "valid_path": "NO",
            "id": 31
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java:\n 605       public static InputStream getClasspathResourceStream(String path, Class<?> callingClass, Bus bus) {\n 606           InputStream is = ClassLoaderUtils.getResourceAsStream(path, callingClass);\n 607           return is == null ? getResource(path, InputStream.class, bus) : is;\n 608       }\n 615       public static <T> T getResource(String path, Class<T> resourceClass, Bus bus) {\n 616           if (bus != null) {\n 617               ResourceManager rm = bus.getExtension(ResourceManager.class);\n 618               if (rm != null) {\n 619                   return rm.resolveResource(path, resourceClass);\n 620               }\n 621           }\n 622           return null;\n 623       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerBus.java:\n169       public final <T> T getExtension(Class<T> extensionType) {\n170           Object obj = extensions.get(extensionType);\n171           if (obj == null) {\n172               if (missingExtensions.contains(extensionType)) {\n173                   //already know we cannot find it\n174                   return null;\n175               }\n176               ConfiguredBeanLocator loc = (ConfiguredBeanLocator)extensions.get(ConfiguredBeanLocator.class);\n177               if (loc == null) {\n178                   loc = createConfiguredBeanLocator();\n179               }\n180               if (loc != null) {\n181                   obj = loc.getBeanOfType(extensionType.getName(), extensionType);\n182                   if (obj != null) {\n183                       extensions.put(extensionType, obj);\n184                   } else {\n185                       //force loading\n186                       Collection<?> objs = loc.getBeansOfType(extensionType);\n187                       if (objs != null && !objs.isEmpty()) {\n188                           extensions.put(extensionType, objs.iterator().next());\n189                       }\n190                       obj = extensions.get(extensionType);\n191                   }\n192               }\n193           }\n194           if (null != obj) {\n195               return extensionType.cast(obj);\n196           }\n197           //record that it couldn't be found to avoid expensive searches again in the future\n198           missingExtensions.add(extensionType);\n199           return null;\n200       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBeanLocator.java:\n144       public <T> Collection<? extends T> getBeansOfType(Class<T> type) {\n145           Set<String> s = new LinkedHashSet<>(Arrays.asList(context.getBeanNamesForType(type,\n146                                                                                               false,\n147                                                                                               false)));\n148           s.removeAll(passThroughs);\n149           List<T> lst = new LinkedList<>();\n150           for (String n : s) {\n151               lst.add(type.cast(context.getBean(n, type)));\n152           }\n153           lst.addAll(orig.getBeansOfType(type));\n154           if (lst.isEmpty()) {\n155               tryOSGI(lst, type);\n156           }\n157           return lst;\n158       }\n159       private <T> void tryOSGI(Collection<T> lst, Class<T> type) {\n160           if (!osgi) {\n161               return;\n162           }\n163           try {\n164               //use a little reflection to allow this to work without the spring-dm jars\n165               //for the non-osgi cases\n166               Class<?> contextClass = findContextClass(bundleContext.getClass());\n167   \n168               Method m = contextClass.getMethod(\"getServiceReference\", String.class);\n169               ReflectionUtil.setAccessible(m);\n170               Object o = m.invoke(bundleContext, type.getName());\n171               if (o != null) {\n172                   m = contextClass.getMethod(\"getService\", m.getReturnType());\n173                   ReflectionUtil.setAccessible(m);\n174                   o = m.invoke(bundleContext, o);\n175                   lst.add(type.cast(o));\n176               }\n177           } catch (NoSuchMethodException e) {\n178               osgi = false;\n179               //not using OSGi\n180           } catch (Throwable e) {\n181               //ignore\n182               LOG.log(Level.WARNING, \"Could not get service for \" + type.getName(), e);\n183           }\n184       }\n",
            "cost": 0.09237500000000001,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBeanLocator.java:174:21",
            "status": "corpus",
            "valid_path": "NO",
            "id": 32
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java:\n 605       public static InputStream getClasspathResourceStream(String path, Class<?> callingClass, Bus bus) {\n 606           InputStream is = ClassLoaderUtils.getResourceAsStream(path, callingClass);\n 607           return is == null ? getResource(path, InputStream.class, bus) : is;\n 608       }\n 615       public static <T> T getResource(String path, Class<T> resourceClass, Bus bus) {\n 616           if (bus != null) {\n 617               ResourceManager rm = bus.getExtension(ResourceManager.class);\n 618               if (rm != null) {\n 619                   return rm.resolveResource(path, resourceClass);\n 620               }\n 621           }\n 622           return null;\n 623       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerBus.java:\n169       public final <T> T getExtension(Class<T> extensionType) {\n170           Object obj = extensions.get(extensionType);\n171           if (obj == null) {\n172               if (missingExtensions.contains(extensionType)) {\n173                   //already know we cannot find it\n174                   return null;\n175               }\n176               ConfiguredBeanLocator loc = (ConfiguredBeanLocator)extensions.get(ConfiguredBeanLocator.class);\n177               if (loc == null) {\n178                   loc = createConfiguredBeanLocator();\n179               }\n180               if (loc != null) {\n181                   obj = loc.getBeanOfType(extensionType.getName(), extensionType);\n182                   if (obj != null) {\n183                       extensions.put(extensionType, obj);\n184                   } else {\n185                       //force loading\n186                       Collection<?> objs = loc.getBeansOfType(extensionType);\n187                       if (objs != null && !objs.isEmpty()) {\n188                           extensions.put(extensionType, objs.iterator().next());\n189                       }\n190                       obj = extensions.get(extensionType);\n191                   }\n192               }\n193           }\n194           if (null != obj) {\n195               return extensionType.cast(obj);\n196           }\n197           //record that it couldn't be found to avoid expensive searches again in the future\n198           missingExtensions.add(extensionType);\n199           return null;\n200       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBeanLocator.java:\n144       public <T> Collection<? extends T> getBeansOfType(Class<T> type) {\n145           Set<String> s = new LinkedHashSet<>(Arrays.asList(context.getBeanNamesForType(type,\n146                                                                                               false,\n147                                                                                               false)));\n148           s.removeAll(passThroughs);\n149           List<T> lst = new LinkedList<>();\n150           for (String n : s) {\n151               lst.add(type.cast(context.getBean(n, type)));\n152           }\n153           lst.addAll(orig.getBeansOfType(type));\n154           if (lst.isEmpty()) {\n155               tryOSGI(lst, type);\n156           }\n157           return lst;\n158       }\n159       private <T> void tryOSGI(Collection<T> lst, Class<T> type) {\n160           if (!osgi) {\n161               return;\n162           }\n163           try {\n164               //use a little reflection to allow this to work without the spring-dm jars\n165               //for the non-osgi cases\n166               Class<?> contextClass = findContextClass(bundleContext.getClass());\n167   \n168               Method m = contextClass.getMethod(\"getServiceReference\", String.class);\n169               ReflectionUtil.setAccessible(m);\n170               Object o = m.invoke(bundleContext, type.getName());\n171               if (o != null) {\n172                   m = contextClass.getMethod(\"getService\", m.getReturnType());\n173                   ReflectionUtil.setAccessible(m);\n174                   o = m.invoke(bundleContext, o);\n175                   lst.add(type.cast(o));\n176               }\n177           } catch (NoSuchMethodException e) {\n178               osgi = false;\n179               //not using OSGi\n180           } catch (Throwable e) {\n181               //ignore\n182               LOG.log(Level.WARNING, \"Could not get service for \" + type.getName(), e);\n183           }\n184       }\n",
            "cost": 0.09532500000000001,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBeanLocator.java:174:30",
            "status": "corpus",
            "valid_path": "NO",
            "id": 33
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/BusFactory.java:\n 95       public static synchronized Bus getDefaultBus() {\n 96           return getDefaultBus(true);\n 97       }\n105       public static synchronized Bus getDefaultBus(boolean createIfNeeded) {\n106           if (defaultBus == null && createIfNeeded) {\n107               defaultBus = newInstance().createBus();\n108           }\n109           if (defaultBus == null) {\n110               // never set up.\n111               return null;\n112           }\n113           return defaultBus;\n114       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBusFactory.java:\n 82       public Bus createBus() {\n 83           return createBus((String)null);\n 84       }\n 93       public Bus createBus(String cfgFile) {\n 94           return createBus(cfgFile, defaultBusNotExists());\n 95       }\n101       protected Bus finishCreatingBus(ConfigurableApplicationContext bac) {\n102           final Bus bus = (Bus)bac.getBean(Bus.DEFAULT_BUS_ID);\n103   \n104           bus.setExtension(bac, ApplicationContext.class);\n105           if (bac instanceof BusApplicationContext) {\n106               bus.setExtension((BusApplicationContext)bac, BusApplicationContext.class);\n107           }\n108           possiblySetDefaultBus(bus);\n109   \n110           initializeBus(bus);\n111   \n112           registerApplicationContextLifeCycleListener(bus, bac);\n113   \n114           if (bus instanceof SpringBus && defaultBusNotExists()) {\n115               ((SpringBus)bus).setCloseContext(true);\n116           }\n117           return bus;\n118       }\n120       public Bus createBus(String cfgFile, boolean includeDefaults) {\n121           if (cfgFile == null) {\n122               return createBus((String[])null, includeDefaults);\n123           }\n124           return createBus(new String[] {cfgFile}, includeDefaults);\n125       }\n127       public Bus createBus(String[] cfgFiles, boolean includeDefaults) {\n128           try {\n129               String userCfgFile\n130                   = SystemPropertyAction.getPropertyOrNull(Configurer.USER_CFG_FILE_PROPERTY_NAME);\n131               String sysCfgFileUrl\n132                   = SystemPropertyAction.getPropertyOrNull(Configurer.USER_CFG_FILE_PROPERTY_URL);\n133               final Resource r = BusApplicationContext.findResource(Configurer.DEFAULT_USER_CFG_FILE);\n134   \n135               boolean exists = true;\n136               if (r != null) {\n137                   exists = AccessController\n138                       .doPrivileged(new PrivilegedAction<Boolean>() {\n139                           public Boolean run() {\n140                               return r.exists();\n141                           }\n142                       });\n143               }\n144               if (context == null && userCfgFile == null && cfgFiles == null && sysCfgFileUrl == null\n145                   && (r == null || !exists) && includeDefaults) {\n146                   return new org.apache.cxf.bus.CXFBusFactory().createBus();\n147               }\n148               return finishCreatingBus(createApplicationContext(cfgFiles, includeDefaults));\n149           } catch (BeansException ex) {\n150               LogUtils.log(LOG, Level.WARNING, \"APP_CONTEXT_CREATION_FAILED_MSG\", ex, (Object[])null);\n151               throw new RuntimeException(ex);\n152           }\n153       }\n201       void registerApplicationContextLifeCycleListener(Bus bus, ConfigurableApplicationContext bac) {\n202           BusLifeCycleManager lm = bus.getExtension(BusLifeCycleManager.class);\n203           if (null != lm) {\n204               lm.registerLifeCycleListener(new BusApplicationContextLifeCycleListener(bac));\n205           }\n206       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/managers/CXFBusLifeCycleManager.java:\n 62       public final void registerLifeCycleListener(BusLifeCycleListener listener) {\n 63           listeners.addIfAbsent(listener);\n 64           if (initCalled) {\n 65               listener.initComplete();\n 66           }\n 67   \n 68       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/osgi/OSGIBusListener.java:\n 96       public void initComplete() {\n 97           ManagedWorkQueueList wqList = bus.getExtension(ManagedWorkQueueList.class);\n 98           if (wqList != null) {\n 99               WorkQueueManager manager = bus.getExtension(WorkQueueManager.class);\n100               wqList.addAllToWorkQueueManager(manager);\n101           }\n102           registerBusAsService();\n103       }\n212       private void registerBusAsService() {\n213           BundleContext context = bus.getExtension(BundleContext.class);\n214           if (context != null) {\n215               Map<String, Object> props = new HashMap<>();\n216               props.put(CONTEXT_SYMBOLIC_NAME_PROPERTY, context.getBundle().getSymbolicName());\n217               props.put(CONTEXT_VERSION_PROPERTY, getBundleVersion(context.getBundle()));\n218               props.put(CONTEXT_NAME_PROPERTY, bus.getId());\n219   \n220               service = context.registerService(Bus.class.getName(), bus, CollectionUtils.toDictionary(props));\n221           }\n222       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBus.java:\n132       @Override\n133       public String getId() {\n134           if (id == null) {\n135               try {\n136                   Class<?> clsbc = Class.forName(\"org.osgi.framework.BundleContext\");\n137                   Class<?> clsb = Class.forName(\"org.osgi.framework.Bundle\");\n138                   Object o = getExtension(clsbc);\n139                   Object o2 = clsbc.getMethod(\"getBundle\").invoke(o);\n140                   String s = (String)clsb.getMethod(\"getSymbolicName\").invoke(o2);\n141                   id = s + '-' + DEFAULT_BUS_ID + Integer.toString(this.hashCode());\n142               } catch (Throwable t) {\n143                   id = super.getId();\n144               }\n145           }\n146           return id;\n147       }\n",
            "cost": 0.107115,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBus.java:139:29",
            "status": "corpus",
            "valid_path": "NO",
            "id": 34
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/BusFactory.java:\n 95       public static synchronized Bus getDefaultBus() {\n 96           return getDefaultBus(true);\n 97       }\n105       public static synchronized Bus getDefaultBus(boolean createIfNeeded) {\n106           if (defaultBus == null && createIfNeeded) {\n107               defaultBus = newInstance().createBus();\n108           }\n109           if (defaultBus == null) {\n110               // never set up.\n111               return null;\n112           }\n113           return defaultBus;\n114       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBusFactory.java:\n 82       public Bus createBus() {\n 83           return createBus((String)null);\n 84       }\n 93       public Bus createBus(String cfgFile) {\n 94           return createBus(cfgFile, defaultBusNotExists());\n 95       }\n101       protected Bus finishCreatingBus(ConfigurableApplicationContext bac) {\n102           final Bus bus = (Bus)bac.getBean(Bus.DEFAULT_BUS_ID);\n103   \n104           bus.setExtension(bac, ApplicationContext.class);\n105           if (bac instanceof BusApplicationContext) {\n106               bus.setExtension((BusApplicationContext)bac, BusApplicationContext.class);\n107           }\n108           possiblySetDefaultBus(bus);\n109   \n110           initializeBus(bus);\n111   \n112           registerApplicationContextLifeCycleListener(bus, bac);\n113   \n114           if (bus instanceof SpringBus && defaultBusNotExists()) {\n115               ((SpringBus)bus).setCloseContext(true);\n116           }\n117           return bus;\n118       }\n120       public Bus createBus(String cfgFile, boolean includeDefaults) {\n121           if (cfgFile == null) {\n122               return createBus((String[])null, includeDefaults);\n123           }\n124           return createBus(new String[] {cfgFile}, includeDefaults);\n125       }\n127       public Bus createBus(String[] cfgFiles, boolean includeDefaults) {\n128           try {\n129               String userCfgFile\n130                   = SystemPropertyAction.getPropertyOrNull(Configurer.USER_CFG_FILE_PROPERTY_NAME);\n131               String sysCfgFileUrl\n132                   = SystemPropertyAction.getPropertyOrNull(Configurer.USER_CFG_FILE_PROPERTY_URL);\n133               final Resource r = BusApplicationContext.findResource(Configurer.DEFAULT_USER_CFG_FILE);\n134   \n135               boolean exists = true;\n136               if (r != null) {\n137                   exists = AccessController\n138                       .doPrivileged(new PrivilegedAction<Boolean>() {\n139                           public Boolean run() {\n140                               return r.exists();\n141                           }\n142                       });\n143               }\n144               if (context == null && userCfgFile == null && cfgFiles == null && sysCfgFileUrl == null\n145                   && (r == null || !exists) && includeDefaults) {\n146                   return new org.apache.cxf.bus.CXFBusFactory().createBus();\n147               }\n148               return finishCreatingBus(createApplicationContext(cfgFiles, includeDefaults));\n149           } catch (BeansException ex) {\n150               LogUtils.log(LOG, Level.WARNING, \"APP_CONTEXT_CREATION_FAILED_MSG\", ex, (Object[])null);\n151               throw new RuntimeException(ex);\n152           }\n153       }\n201       void registerApplicationContextLifeCycleListener(Bus bus, ConfigurableApplicationContext bac) {\n202           BusLifeCycleManager lm = bus.getExtension(BusLifeCycleManager.class);\n203           if (null != lm) {\n204               lm.registerLifeCycleListener(new BusApplicationContextLifeCycleListener(bac));\n205           }\n206       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/managers/CXFBusLifeCycleManager.java:\n 62       public final void registerLifeCycleListener(BusLifeCycleListener listener) {\n 63           listeners.addIfAbsent(listener);\n 64           if (initCalled) {\n 65               listener.initComplete();\n 66           }\n 67   \n 68       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/osgi/OSGIBusListener.java:\n 96       public void initComplete() {\n 97           ManagedWorkQueueList wqList = bus.getExtension(ManagedWorkQueueList.class);\n 98           if (wqList != null) {\n 99               WorkQueueManager manager = bus.getExtension(WorkQueueManager.class);\n100               wqList.addAllToWorkQueueManager(manager);\n101           }\n102           registerBusAsService();\n103       }\n212       private void registerBusAsService() {\n213           BundleContext context = bus.getExtension(BundleContext.class);\n214           if (context != null) {\n215               Map<String, Object> props = new HashMap<>();\n216               props.put(CONTEXT_SYMBOLIC_NAME_PROPERTY, context.getBundle().getSymbolicName());\n217               props.put(CONTEXT_VERSION_PROPERTY, getBundleVersion(context.getBundle()));\n218               props.put(CONTEXT_NAME_PROPERTY, bus.getId());\n219   \n220               service = context.registerService(Bus.class.getName(), bus, CollectionUtils.toDictionary(props));\n221           }\n222       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBus.java:\n132       @Override\n133       public String getId() {\n134           if (id == null) {\n135               try {\n136                   Class<?> clsbc = Class.forName(\"org.osgi.framework.BundleContext\");\n137                   Class<?> clsb = Class.forName(\"org.osgi.framework.Bundle\");\n138                   Object o = getExtension(clsbc);\n139                   Object o2 = clsbc.getMethod(\"getBundle\").invoke(o);\n140                   String s = (String)clsb.getMethod(\"getSymbolicName\").invoke(o2);\n141                   id = s + '-' + DEFAULT_BUS_ID + Integer.toString(this.hashCode());\n142               } catch (Throwable t) {\n143                   id = super.getId();\n144               }\n145           }\n146           return id;\n147       }\n",
            "cost": 0.105865,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBus.java:139:65",
            "status": "corpus",
            "valid_path": "NO",
            "id": 35
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/BusFactory.java:\n 95       public static synchronized Bus getDefaultBus() {\n 96           return getDefaultBus(true);\n 97       }\n105       public static synchronized Bus getDefaultBus(boolean createIfNeeded) {\n106           if (defaultBus == null && createIfNeeded) {\n107               defaultBus = newInstance().createBus();\n108           }\n109           if (defaultBus == null) {\n110               // never set up.\n111               return null;\n112           }\n113           return defaultBus;\n114       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBusFactory.java:\n 82       public Bus createBus() {\n 83           return createBus((String)null);\n 84       }\n 93       public Bus createBus(String cfgFile) {\n 94           return createBus(cfgFile, defaultBusNotExists());\n 95       }\n101       protected Bus finishCreatingBus(ConfigurableApplicationContext bac) {\n102           final Bus bus = (Bus)bac.getBean(Bus.DEFAULT_BUS_ID);\n103   \n104           bus.setExtension(bac, ApplicationContext.class);\n105           if (bac instanceof BusApplicationContext) {\n106               bus.setExtension((BusApplicationContext)bac, BusApplicationContext.class);\n107           }\n108           possiblySetDefaultBus(bus);\n109   \n110           initializeBus(bus);\n111   \n112           registerApplicationContextLifeCycleListener(bus, bac);\n113   \n114           if (bus instanceof SpringBus && defaultBusNotExists()) {\n115               ((SpringBus)bus).setCloseContext(true);\n116           }\n117           return bus;\n118       }\n120       public Bus createBus(String cfgFile, boolean includeDefaults) {\n121           if (cfgFile == null) {\n122               return createBus((String[])null, includeDefaults);\n123           }\n124           return createBus(new String[] {cfgFile}, includeDefaults);\n125       }\n127       public Bus createBus(String[] cfgFiles, boolean includeDefaults) {\n128           try {\n129               String userCfgFile\n130                   = SystemPropertyAction.getPropertyOrNull(Configurer.USER_CFG_FILE_PROPERTY_NAME);\n131               String sysCfgFileUrl\n132                   = SystemPropertyAction.getPropertyOrNull(Configurer.USER_CFG_FILE_PROPERTY_URL);\n133               final Resource r = BusApplicationContext.findResource(Configurer.DEFAULT_USER_CFG_FILE);\n134   \n135               boolean exists = true;\n136               if (r != null) {\n137                   exists = AccessController\n138                       .doPrivileged(new PrivilegedAction<Boolean>() {\n139                           public Boolean run() {\n140                               return r.exists();\n141                           }\n142                       });\n143               }\n144               if (context == null && userCfgFile == null && cfgFiles == null && sysCfgFileUrl == null\n145                   && (r == null || !exists) && includeDefaults) {\n146                   return new org.apache.cxf.bus.CXFBusFactory().createBus();\n147               }\n148               return finishCreatingBus(createApplicationContext(cfgFiles, includeDefaults));\n149           } catch (BeansException ex) {\n150               LogUtils.log(LOG, Level.WARNING, \"APP_CONTEXT_CREATION_FAILED_MSG\", ex, (Object[])null);\n151               throw new RuntimeException(ex);\n152           }\n153       }\n201       void registerApplicationContextLifeCycleListener(Bus bus, ConfigurableApplicationContext bac) {\n202           BusLifeCycleManager lm = bus.getExtension(BusLifeCycleManager.class);\n203           if (null != lm) {\n204               lm.registerLifeCycleListener(new BusApplicationContextLifeCycleListener(bac));\n205           }\n206       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/managers/CXFBusLifeCycleManager.java:\n 62       public final void registerLifeCycleListener(BusLifeCycleListener listener) {\n 63           listeners.addIfAbsent(listener);\n 64           if (initCalled) {\n 65               listener.initComplete();\n 66           }\n 67   \n 68       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/osgi/OSGIBusListener.java:\n 96       public void initComplete() {\n 97           ManagedWorkQueueList wqList = bus.getExtension(ManagedWorkQueueList.class);\n 98           if (wqList != null) {\n 99               WorkQueueManager manager = bus.getExtension(WorkQueueManager.class);\n100               wqList.addAllToWorkQueueManager(manager);\n101           }\n102           registerBusAsService();\n103       }\n212       private void registerBusAsService() {\n213           BundleContext context = bus.getExtension(BundleContext.class);\n214           if (context != null) {\n215               Map<String, Object> props = new HashMap<>();\n216               props.put(CONTEXT_SYMBOLIC_NAME_PROPERTY, context.getBundle().getSymbolicName());\n217               props.put(CONTEXT_VERSION_PROPERTY, getBundleVersion(context.getBundle()));\n218               props.put(CONTEXT_NAME_PROPERTY, bus.getId());\n219   \n220               service = context.registerService(Bus.class.getName(), bus, CollectionUtils.toDictionary(props));\n221           }\n222       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBus.java:\n132       @Override\n133       public String getId() {\n134           if (id == null) {\n135               try {\n136                   Class<?> clsbc = Class.forName(\"org.osgi.framework.BundleContext\");\n137                   Class<?> clsb = Class.forName(\"org.osgi.framework.Bundle\");\n138                   Object o = getExtension(clsbc);\n139                   Object o2 = clsbc.getMethod(\"getBundle\").invoke(o);\n140                   String s = (String)clsb.getMethod(\"getSymbolicName\").invoke(o2);\n141                   id = s + '-' + DEFAULT_BUS_ID + Integer.toString(this.hashCode());\n142               } catch (Throwable t) {\n143                   id = super.getId();\n144               }\n145           }\n146           return id;\n147       }\n",
            "cost": 0.107765,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBus.java:140:36",
            "status": "corpus",
            "valid_path": "NO",
            "id": 36
        },
        {
            "blob": [
                "R0VUADAAIiJqYXoiKyJ6ZXIiIg=="
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/BusFactory.java:\n 95       public static synchronized Bus getDefaultBus() {\n 96           return getDefaultBus(true);\n 97       }\n105       public static synchronized Bus getDefaultBus(boolean createIfNeeded) {\n106           if (defaultBus == null && createIfNeeded) {\n107               defaultBus = newInstance().createBus();\n108           }\n109           if (defaultBus == null) {\n110               // never set up.\n111               return null;\n112           }\n113           return defaultBus;\n114       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBusFactory.java:\n 82       public Bus createBus() {\n 83           return createBus((String)null);\n 84       }\n 93       public Bus createBus(String cfgFile) {\n 94           return createBus(cfgFile, defaultBusNotExists());\n 95       }\n101       protected Bus finishCreatingBus(ConfigurableApplicationContext bac) {\n102           final Bus bus = (Bus)bac.getBean(Bus.DEFAULT_BUS_ID);\n103   \n104           bus.setExtension(bac, ApplicationContext.class);\n105           if (bac instanceof BusApplicationContext) {\n106               bus.setExtension((BusApplicationContext)bac, BusApplicationContext.class);\n107           }\n108           possiblySetDefaultBus(bus);\n109   \n110           initializeBus(bus);\n111   \n112           registerApplicationContextLifeCycleListener(bus, bac);\n113   \n114           if (bus instanceof SpringBus && defaultBusNotExists()) {\n115               ((SpringBus)bus).setCloseContext(true);\n116           }\n117           return bus;\n118       }\n120       public Bus createBus(String cfgFile, boolean includeDefaults) {\n121           if (cfgFile == null) {\n122               return createBus((String[])null, includeDefaults);\n123           }\n124           return createBus(new String[] {cfgFile}, includeDefaults);\n125       }\n127       public Bus createBus(String[] cfgFiles, boolean includeDefaults) {\n128           try {\n129               String userCfgFile\n130                   = SystemPropertyAction.getPropertyOrNull(Configurer.USER_CFG_FILE_PROPERTY_NAME);\n131               String sysCfgFileUrl\n132                   = SystemPropertyAction.getPropertyOrNull(Configurer.USER_CFG_FILE_PROPERTY_URL);\n133               final Resource r = BusApplicationContext.findResource(Configurer.DEFAULT_USER_CFG_FILE);\n134   \n135               boolean exists = true;\n136               if (r != null) {\n137                   exists = AccessController\n138                       .doPrivileged(new PrivilegedAction<Boolean>() {\n139                           public Boolean run() {\n140                               return r.exists();\n141                           }\n142                       });\n143               }\n144               if (context == null && userCfgFile == null && cfgFiles == null && sysCfgFileUrl == null\n145                   && (r == null || !exists) && includeDefaults) {\n146                   return new org.apache.cxf.bus.CXFBusFactory().createBus();\n147               }\n148               return finishCreatingBus(createApplicationContext(cfgFiles, includeDefaults));\n149           } catch (BeansException ex) {\n150               LogUtils.log(LOG, Level.WARNING, \"APP_CONTEXT_CREATION_FAILED_MSG\", ex, (Object[])null);\n151               throw new RuntimeException(ex);\n152           }\n153       }\n201       void registerApplicationContextLifeCycleListener(Bus bus, ConfigurableApplicationContext bac) {\n202           BusLifeCycleManager lm = bus.getExtension(BusLifeCycleManager.class);\n203           if (null != lm) {\n204               lm.registerLifeCycleListener(new BusApplicationContextLifeCycleListener(bac));\n205           }\n206       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/managers/CXFBusLifeCycleManager.java:\n 62       public final void registerLifeCycleListener(BusLifeCycleListener listener) {\n 63           listeners.addIfAbsent(listener);\n 64           if (initCalled) {\n 65               listener.initComplete();\n 66           }\n 67   \n 68       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/osgi/OSGIBusListener.java:\n 96       public void initComplete() {\n 97           ManagedWorkQueueList wqList = bus.getExtension(ManagedWorkQueueList.class);\n 98           if (wqList != null) {\n 99               WorkQueueManager manager = bus.getExtension(WorkQueueManager.class);\n100               wqList.addAllToWorkQueueManager(manager);\n101           }\n102           registerBusAsService();\n103       }\n212       private void registerBusAsService() {\n213           BundleContext context = bus.getExtension(BundleContext.class);\n214           if (context != null) {\n215               Map<String, Object> props = new HashMap<>();\n216               props.put(CONTEXT_SYMBOLIC_NAME_PROPERTY, context.getBundle().getSymbolicName());\n217               props.put(CONTEXT_VERSION_PROPERTY, getBundleVersion(context.getBundle()));\n218               props.put(CONTEXT_NAME_PROPERTY, bus.getId());\n219   \n220               service = context.registerService(Bus.class.getName(), bus, CollectionUtils.toDictionary(props));\n221           }\n222       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBus.java:\n132       @Override\n133       public String getId() {\n134           if (id == null) {\n135               try {\n136                   Class<?> clsbc = Class.forName(\"org.osgi.framework.BundleContext\");\n137                   Class<?> clsb = Class.forName(\"org.osgi.framework.Bundle\");\n138                   Object o = getExtension(clsbc);\n139                   Object o2 = clsbc.getMethod(\"getBundle\").invoke(o);\n140                   String s = (String)clsb.getMethod(\"getSymbolicName\").invoke(o2);\n141                   id = s + '-' + DEFAULT_BUS_ID + Integer.toString(this.hashCode());\n142               } catch (Throwable t) {\n143                   id = super.getId();\n144               }\n145           }\n146           return id;\n147       }\n",
            "cost": 0.6860050000000001,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBus.java:140:77",
            "status": "corpus",
            "valid_path": "YES",
            "id": 37
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n 432       protected void handleResource(StringBuilder sb, Set<Class<?>> jaxbTypes,\n 433                                     ElementQNameResolver qnameResolver, Map<Class<?>, QName> clsMap,\n 434                                     ClassResourceInfo cri, Set<ClassResourceInfo> visitedResources,\n 435                                     boolean isJson) {\n 436           visitedResources.add(cri);\n 437           Map<Parameter, Object> classParams = getClassParameters(cri);\n 438   \n 439           List<OperationResourceInfo> sortedOps = sortOperationsByPath(cri.getMethodDispatcher()\n 440               .getOperationResourceInfos());\n 441   \n 442           boolean resourceTagOpened = false;\n 443           for (int i = 0; i < sortedOps.size(); i++) {\n 444               OperationResourceInfo ori = sortedOps.get(i);\n 445               if (i > 0 && ignoreOverloadedMethods\n 446                   && ori.getMethodToInvoke().getName().equals(sortedOps.get(i - 1).getMethodToInvoke().getName())) {\n 447                   continue;\n 448               }\n 449               if (ori.getHttpMethod() == null) {\n 450                   Class<?> cls = getMethod(ori).getReturnType();\n 451                   ClassResourceInfo subcri = cri.findResource(cls, cls);\n 452                   if (subcri != null && !visitedResources.contains(subcri)) {\n 453                       startResourceTag(sb, subcri, ori.getURITemplate().getValue());\n 454                       handleDocs(subcri.getServiceClass().getAnnotations(), sb, DocTarget.RESOURCE, true,\n 455                                  isJson);\n 456                       handlePathAndMatrixParams(sb, ori, isJson);\n 457                       handleResource(sb, jaxbTypes, qnameResolver, clsMap, subcri, visitedResources, isJson);\n 458                       sb.append(\"</resource>\");\n 459                   } else {\n 460                       handleDynamicSubresource(sb, jaxbTypes, qnameResolver, clsMap, ori, subcri, isJson);\n 461                   }\n 462                   continue;\n 463               }\n 464               OperationResourceInfo nextOp = i + 1 < sortedOps.size() ? sortedOps.get(i + 1) : null;\n 465               resourceTagOpened = handleOperation(sb, jaxbTypes, qnameResolver, clsMap, ori, classParams,\n 466                                                   nextOp, resourceTagOpened, isJson, i);\n 467           }\n 468       }\n 594       protected boolean handleOperation(StringBuilder sb, Set<Class<?>> jaxbTypes, //NOPMD\n 595                                         ElementQNameResolver qnameResolver, Map<Class<?>, QName> clsMap,\n 596                                         OperationResourceInfo ori, Map<Parameter, Object> classParams,\n 597                                         OperationResourceInfo nextOp, boolean resourceTagOpened,\n 598                                         boolean isJson, int index) {\n 599           Annotation[] anns = getMethod(ori).getAnnotations();\n 600           // CHECKSTYLE:ON\n 601           boolean samePathOperationFollows = singleResourceMultipleMethods && compareOperations(ori, nextOp);\n 602   \n 603           String path = ori.getURITemplate().getValue();\n 604           if (!resourceTagOpened && openResource(path)) {\n 605               resourceTagOpened = true;\n 606               URITemplate template = ori.getClassResourceInfo().getURITemplate();\n 607               if (template != null) {\n 608                   String parentPath = template.getValue();\n 609                   if (parentPath.endsWith(\"/\") && path.startsWith(\"/\") && path.length() > 1) {\n 610                       path = path.substring(1);\n 611                   }\n 612               }\n 613               startResourceTag(sb, ori, getPath(path));\n 614               handleDocs(anns, sb, DocTarget.RESOURCE, false, isJson);\n 615               handlePathAndMatrixClassParams(ori, sb, classParams, isJson);\n 616               handlePathAndMatrixParams(sb, ori, isJson);\n 617           } else if (index == 0) {\n 618               handlePathAndMatrixClassParams(ori, sb, classParams, isJson);\n 619               handlePathAndMatrixParams(sb, ori, isJson);\n 620           }\n 621   \n 622           startMethodTag(sb, ori);\n 623           if (!handleDocs(anns, sb, DocTarget.METHOD, true, isJson)) {\n 624               handleOperJavaDocs(ori, sb);\n 625           }\n 626           int numOfParams = getMethod(ori).getParameterTypes().length;\n 627           if ((numOfParams > 1 || numOfParams == 1 && !ori.isAsync()) || !classParams.isEmpty()) {\n 628   \n 629               startMethodRequestTag(sb, ori);\n 630               handleDocs(anns, sb, DocTarget.REQUEST, false, isJson);\n 631   \n 632               boolean isForm = isFormRequest(ori);\n 633   \n 634               doHandleClassParams(ori, sb, classParams, isJson, ParameterType.QUERY, ParameterType.HEADER);\n 635               doHandleJaxrsBeanParamClassParams(ori, sb, classParams, isJson,\n 636                                                 ParameterType.QUERY, ParameterType.HEADER);\n 637               for (Parameter p : ori.getParameters()) {\n 638                   if (isForm && p.getType() == ParameterType.REQUEST_BODY) {\n 639                       continue;\n 640                   }\n 641                   handleParameter(sb, jaxbTypes, qnameResolver, clsMap, ori, p, isJson);\n 642               }\n 643               if (isForm) {\n 644                   handleFormRepresentation(sb, jaxbTypes, qnameResolver, clsMap, ori, getFormClass(ori), isJson);\n 645               }\n 646               endMethodRequestTag(sb, ori);\n 647           }\n 648           startMethodResponseTag(sb, ori);\n 649           Class<?> returnType = getMethod(ori).getReturnType();\n 650           boolean isVoid = void.class == returnType && !ori.isAsync();\n 651           ResponseStatus responseStatus = getMethod(ori).getAnnotation(ResponseStatus.class);\n 652           if (responseStatus != null) {\n 653               setResponseStatus(sb, responseStatus.value());\n 654           } else if (isVoid) {\n 655               boolean oneway = getMethod(ori).getAnnotation(Oneway.class) != null;\n 656               setResponseStatus(sb, oneway ? Response.Status.ACCEPTED : Response.Status.NO_CONTENT);\n 657           }\n 658           sb.append('>');\n 659           handleDocs(anns, sb, DocTarget.RESPONSE, false, isJson);\n 660           if (!isVoid) {\n 661               handleRepresentation(sb, jaxbTypes, qnameResolver, clsMap, ori, returnType, isJson, false);\n 662           }\n 663           endMethodResponseTag(sb, ori);\n 664   \n 665           endMethodTag(sb, ori);\n 666   \n 667           if (resourceTagOpened && !samePathOperationFollows) {\n 668               endResourceTag(sb, ori);\n 669               resourceTagOpened = false;\n 670           }\n 671           return resourceTagOpened;\n 672       }\n 751       protected void doHandleClassParams(OperationResourceInfo ori,\n 752                                          StringBuilder sb,\n 753                                          Map<Parameter, Object> params,\n 754                                          boolean isJson,\n 755                                          ParameterType... pType) {\n 756           Set<ParameterType> pTypes = new LinkedHashSet<>(Arrays.asList(pType));\n 757           for (Map.Entry<Parameter, Object> entry : params.entrySet()) {\n 758               Parameter pm = entry.getKey();\n 759               Object obj = entry.getValue();\n 760               if (pTypes.contains(pm.getType())) {\n 761                   Class<?> cls = obj instanceof Method ? ((Method)obj).getParameterTypes()[0] : ((Field)obj)\n 762                       .getType();\n 763                   Type type = obj instanceof Method\n 764                       ? ((Method)obj).getGenericParameterTypes()[0] : ((Field)obj).getGenericType();\n 765                   Annotation[] ann = obj instanceof Method\n 766                       ? ((Method)obj).getParameterAnnotations()[0] : ((Field)obj).getAnnotations();\n 767                   doWriteParam(ori, sb, pm, cls, type, pm.getName(), ann, isJson);\n 768               }\n 769           }\n 770       }\n 959       protected void doWriteParam(OperationResourceInfo ori,\n 960                                   StringBuilder sb,\n 961                                   Parameter pm,\n 962                                   Class<?> type,\n 963                                   Type genericType,\n 964                                   String paramName,\n 965                                   Annotation[] anns,\n 966                                   boolean isJson) {\n 967         //CHECKSTYLE:ON\n 968           ParameterType pType = pm.getType();\n 969           boolean isForm = isFormParameter(pm, type, anns);\n 970           if (paramName == null && isForm) {\n 971               Multipart m = AnnotationUtils.getAnnotation(anns, Multipart.class);\n 972               if (m != null) {\n 973                   paramName = m.value();\n 974               }\n 975           }\n 976           sb.append(\"<param name=\\\"\").append(paramName).append(\"\\\" \");\n 977           String style = ParameterType.PATH == pType ? \"template\" : isForm\n 978               ? \"query\" : ParameterType.REQUEST_BODY == pType ? \"plain\" : pType.toString().toLowerCase();\n 979           sb.append(\"style=\\\"\").append(style).append('\"');\n 980           if (pm.getDefaultValue() != null) {\n 981               sb.append(\" default=\\\"\").append(xmlEncodeIfNeeded(pm.getDefaultValue()))\n 982                   .append('\"');\n 983           }\n 984           if (InjectionUtils.isSupportedCollectionOrArray(type)) {\n 985               type = InjectionUtils.getActualType(genericType);\n 986               sb.append(\" repeating=\\\"true\\\"\");\n 987           }\n 988   \n 989           String value = XmlSchemaPrimitiveUtils.getSchemaRepresentation(type);\n 990           if (value == null) {\n 991               if (type.isEnum()) {\n 992                   value = \"xs:string\";\n 993               } else if (type == InputStream.class) {\n 994                   value = \"xs:anyType\";\n 995               }\n 996           }\n 997           if (value != null) {\n 998               if (isJson) {\n 999                   value = value.substring(3);\n1000               }\n1001               sb.append(\" type=\\\"\").append(value).append('\"');\n1002           }\n1003           if (type.isEnum()) {\n1004               sb.append('>');\n1005               handleDocs(anns, sb, DocTarget.PARAM, true, isJson);\n1006               setEnumOptions(sb, type);\n1007               sb.append(\"</param>\");\n1008           } else {\n1009               addDocsAndCloseElement(ori, pm.getIndex(), sb, anns, \"param\", DocTarget.PARAM, true, isJson);\n1010           }\n1011       }\n1013       private void setEnumOptions(StringBuilder sb, Class<?> enumClass) {\n1014           try {\n1015               Method m = enumClass.getMethod(\"values\", new Class<?>[] {});\n1016               Object[] values = (Object[])m.invoke(null, new Object[] {});\n1017               m = enumClass.getMethod(\"name\", new Class<?>[] {});\n1018               for (Object o : values) {\n1019                   String str = (String)m.invoke(o, new Object[] {});\n1020                   sb.append(\"<option value=\\\"\").append(str).append(\"\\\"/>\");\n1021               }\n1022   \n1023           } catch (Throwable ex) {\n1024               // ignore\n1025           }\n1026       }\n",
            "cost": 0.114535,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:1016:41",
            "status": "corpus",
            "valid_path": "NO",
            "id": 38
        },
        {
            "blob": [
                "R0VUADAAamF6emVyLnhzbA=="
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n 432       protected void handleResource(StringBuilder sb, Set<Class<?>> jaxbTypes,\n 433                                     ElementQNameResolver qnameResolver, Map<Class<?>, QName> clsMap,\n 434                                     ClassResourceInfo cri, Set<ClassResourceInfo> visitedResources,\n 435                                     boolean isJson) {\n 436           visitedResources.add(cri);\n 437           Map<Parameter, Object> classParams = getClassParameters(cri);\n 438   \n 439           List<OperationResourceInfo> sortedOps = sortOperationsByPath(cri.getMethodDispatcher()\n 440               .getOperationResourceInfos());\n 441   \n 442           boolean resourceTagOpened = false;\n 443           for (int i = 0; i < sortedOps.size(); i++) {\n 444               OperationResourceInfo ori = sortedOps.get(i);\n 445               if (i > 0 && ignoreOverloadedMethods\n 446                   && ori.getMethodToInvoke().getName().equals(sortedOps.get(i - 1).getMethodToInvoke().getName())) {\n 447                   continue;\n 448               }\n 449               if (ori.getHttpMethod() == null) {\n 450                   Class<?> cls = getMethod(ori).getReturnType();\n 451                   ClassResourceInfo subcri = cri.findResource(cls, cls);\n 452                   if (subcri != null && !visitedResources.contains(subcri)) {\n 453                       startResourceTag(sb, subcri, ori.getURITemplate().getValue());\n 454                       handleDocs(subcri.getServiceClass().getAnnotations(), sb, DocTarget.RESOURCE, true,\n 455                                  isJson);\n 456                       handlePathAndMatrixParams(sb, ori, isJson);\n 457                       handleResource(sb, jaxbTypes, qnameResolver, clsMap, subcri, visitedResources, isJson);\n 458                       sb.append(\"</resource>\");\n 459                   } else {\n 460                       handleDynamicSubresource(sb, jaxbTypes, qnameResolver, clsMap, ori, subcri, isJson);\n 461                   }\n 462                   continue;\n 463               }\n 464               OperationResourceInfo nextOp = i + 1 < sortedOps.size() ? sortedOps.get(i + 1) : null;\n 465               resourceTagOpened = handleOperation(sb, jaxbTypes, qnameResolver, clsMap, ori, classParams,\n 466                                                   nextOp, resourceTagOpened, isJson, i);\n 467           }\n 468       }\n 594       protected boolean handleOperation(StringBuilder sb, Set<Class<?>> jaxbTypes, //NOPMD\n 595                                         ElementQNameResolver qnameResolver, Map<Class<?>, QName> clsMap,\n 596                                         OperationResourceInfo ori, Map<Parameter, Object> classParams,\n 597                                         OperationResourceInfo nextOp, boolean resourceTagOpened,\n 598                                         boolean isJson, int index) {\n 599           Annotation[] anns = getMethod(ori).getAnnotations();\n 600           // CHECKSTYLE:ON\n 601           boolean samePathOperationFollows = singleResourceMultipleMethods && compareOperations(ori, nextOp);\n 602   \n 603           String path = ori.getURITemplate().getValue();\n 604           if (!resourceTagOpened && openResource(path)) {\n 605               resourceTagOpened = true;\n 606               URITemplate template = ori.getClassResourceInfo().getURITemplate();\n 607               if (template != null) {\n 608                   String parentPath = template.getValue();\n 609                   if (parentPath.endsWith(\"/\") && path.startsWith(\"/\") && path.length() > 1) {\n 610                       path = path.substring(1);\n 611                   }\n 612               }\n 613               startResourceTag(sb, ori, getPath(path));\n 614               handleDocs(anns, sb, DocTarget.RESOURCE, false, isJson);\n 615               handlePathAndMatrixClassParams(ori, sb, classParams, isJson);\n 616               handlePathAndMatrixParams(sb, ori, isJson);\n 617           } else if (index == 0) {\n 618               handlePathAndMatrixClassParams(ori, sb, classParams, isJson);\n 619               handlePathAndMatrixParams(sb, ori, isJson);\n 620           }\n 621   \n 622           startMethodTag(sb, ori);\n 623           if (!handleDocs(anns, sb, DocTarget.METHOD, true, isJson)) {\n 624               handleOperJavaDocs(ori, sb);\n 625           }\n 626           int numOfParams = getMethod(ori).getParameterTypes().length;\n 627           if ((numOfParams > 1 || numOfParams == 1 && !ori.isAsync()) || !classParams.isEmpty()) {\n 628   \n 629               startMethodRequestTag(sb, ori);\n 630               handleDocs(anns, sb, DocTarget.REQUEST, false, isJson);\n 631   \n 632               boolean isForm = isFormRequest(ori);\n 633   \n 634               doHandleClassParams(ori, sb, classParams, isJson, ParameterType.QUERY, ParameterType.HEADER);\n 635               doHandleJaxrsBeanParamClassParams(ori, sb, classParams, isJson,\n 636                                                 ParameterType.QUERY, ParameterType.HEADER);\n 637               for (Parameter p : ori.getParameters()) {\n 638                   if (isForm && p.getType() == ParameterType.REQUEST_BODY) {\n 639                       continue;\n 640                   }\n 641                   handleParameter(sb, jaxbTypes, qnameResolver, clsMap, ori, p, isJson);\n 642               }\n 643               if (isForm) {\n 644                   handleFormRepresentation(sb, jaxbTypes, qnameResolver, clsMap, ori, getFormClass(ori), isJson);\n 645               }\n 646               endMethodRequestTag(sb, ori);\n 647           }\n 648           startMethodResponseTag(sb, ori);\n 649           Class<?> returnType = getMethod(ori).getReturnType();\n 650           boolean isVoid = void.class == returnType && !ori.isAsync();\n 651           ResponseStatus responseStatus = getMethod(ori).getAnnotation(ResponseStatus.class);\n 652           if (responseStatus != null) {\n 653               setResponseStatus(sb, responseStatus.value());\n 654           } else if (isVoid) {\n 655               boolean oneway = getMethod(ori).getAnnotation(Oneway.class) != null;\n 656               setResponseStatus(sb, oneway ? Response.Status.ACCEPTED : Response.Status.NO_CONTENT);\n 657           }\n 658           sb.append('>');\n 659           handleDocs(anns, sb, DocTarget.RESPONSE, false, isJson);\n 660           if (!isVoid) {\n 661               handleRepresentation(sb, jaxbTypes, qnameResolver, clsMap, ori, returnType, isJson, false);\n 662           }\n 663           endMethodResponseTag(sb, ori);\n 664   \n 665           endMethodTag(sb, ori);\n 666   \n 667           if (resourceTagOpened && !samePathOperationFollows) {\n 668               endResourceTag(sb, ori);\n 669               resourceTagOpened = false;\n 670           }\n 671           return resourceTagOpened;\n 672       }\n 751       protected void doHandleClassParams(OperationResourceInfo ori,\n 752                                          StringBuilder sb,\n 753                                          Map<Parameter, Object> params,\n 754                                          boolean isJson,\n 755                                          ParameterType... pType) {\n 756           Set<ParameterType> pTypes = new LinkedHashSet<>(Arrays.asList(pType));\n 757           for (Map.Entry<Parameter, Object> entry : params.entrySet()) {\n 758               Parameter pm = entry.getKey();\n 759               Object obj = entry.getValue();\n 760               if (pTypes.contains(pm.getType())) {\n 761                   Class<?> cls = obj instanceof Method ? ((Method)obj).getParameterTypes()[0] : ((Field)obj)\n 762                       .getType();\n 763                   Type type = obj instanceof Method\n 764                       ? ((Method)obj).getGenericParameterTypes()[0] : ((Field)obj).getGenericType();\n 765                   Annotation[] ann = obj instanceof Method\n 766                       ? ((Method)obj).getParameterAnnotations()[0] : ((Field)obj).getAnnotations();\n 767                   doWriteParam(ori, sb, pm, cls, type, pm.getName(), ann, isJson);\n 768               }\n 769           }\n 770       }\n 959       protected void doWriteParam(OperationResourceInfo ori,\n 960                                   StringBuilder sb,\n 961                                   Parameter pm,\n 962                                   Class<?> type,\n 963                                   Type genericType,\n 964                                   String paramName,\n 965                                   Annotation[] anns,\n 966                                   boolean isJson) {\n 967         //CHECKSTYLE:ON\n 968           ParameterType pType = pm.getType();\n 969           boolean isForm = isFormParameter(pm, type, anns);\n 970           if (paramName == null && isForm) {\n 971               Multipart m = AnnotationUtils.getAnnotation(anns, Multipart.class);\n 972               if (m != null) {\n 973                   paramName = m.value();\n 974               }\n 975           }\n 976           sb.append(\"<param name=\\\"\").append(paramName).append(\"\\\" \");\n 977           String style = ParameterType.PATH == pType ? \"template\" : isForm\n 978               ? \"query\" : ParameterType.REQUEST_BODY == pType ? \"plain\" : pType.toString().toLowerCase();\n 979           sb.append(\"style=\\\"\").append(style).append('\"');\n 980           if (pm.getDefaultValue() != null) {\n 981               sb.append(\" default=\\\"\").append(xmlEncodeIfNeeded(pm.getDefaultValue()))\n 982                   .append('\"');\n 983           }\n 984           if (InjectionUtils.isSupportedCollectionOrArray(type)) {\n 985               type = InjectionUtils.getActualType(genericType);\n 986               sb.append(\" repeating=\\\"true\\\"\");\n 987           }\n 988   \n 989           String value = XmlSchemaPrimitiveUtils.getSchemaRepresentation(type);\n 990           if (value == null) {\n 991               if (type.isEnum()) {\n 992                   value = \"xs:string\";\n 993               } else if (type == InputStream.class) {\n 994                   value = \"xs:anyType\";\n 995               }\n 996           }\n 997           if (value != null) {\n 998               if (isJson) {\n 999                   value = value.substring(3);\n1000               }\n1001               sb.append(\" type=\\\"\").append(value).append('\"');\n1002           }\n1003           if (type.isEnum()) {\n1004               sb.append('>');\n1005               handleDocs(anns, sb, DocTarget.PARAM, true, isJson);\n1006               setEnumOptions(sb, type);\n1007               sb.append(\"</param>\");\n1008           } else {\n1009               addDocsAndCloseElement(ori, pm.getIndex(), sb, anns, \"param\", DocTarget.PARAM, true, isJson);\n1010           }\n1011       }\n1013       private void setEnumOptions(StringBuilder sb, Class<?> enumClass) {\n1014           try {\n1015               Method m = enumClass.getMethod(\"values\", new Class<?>[] {});\n1016               Object[] values = (Object[])m.invoke(null, new Object[] {});\n1017               m = enumClass.getMethod(\"name\", new Class<?>[] {});\n1018               for (Object o : values) {\n1019                   String str = (String)m.invoke(o, new Object[] {});\n1020                   sb.append(\"<option value=\\\"\").append(str).append(\"\\\"/>\");\n1021               }\n1022   \n1023           } catch (Throwable ex) {\n1024               // ignore\n1025           }\n1026       }\n",
            "cost": 0.788475,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:1016:50",
            "status": "corpus",
            "valid_path": "YES",
            "id": 39
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n 432       protected void handleResource(StringBuilder sb, Set<Class<?>> jaxbTypes,\n 433                                     ElementQNameResolver qnameResolver, Map<Class<?>, QName> clsMap,\n 434                                     ClassResourceInfo cri, Set<ClassResourceInfo> visitedResources,\n 435                                     boolean isJson) {\n 436           visitedResources.add(cri);\n 437           Map<Parameter, Object> classParams = getClassParameters(cri);\n 438   \n 439           List<OperationResourceInfo> sortedOps = sortOperationsByPath(cri.getMethodDispatcher()\n 440               .getOperationResourceInfos());\n 441   \n 442           boolean resourceTagOpened = false;\n 443           for (int i = 0; i < sortedOps.size(); i++) {\n 444               OperationResourceInfo ori = sortedOps.get(i);\n 445               if (i > 0 && ignoreOverloadedMethods\n 446                   && ori.getMethodToInvoke().getName().equals(sortedOps.get(i - 1).getMethodToInvoke().getName())) {\n 447                   continue;\n 448               }\n 449               if (ori.getHttpMethod() == null) {\n 450                   Class<?> cls = getMethod(ori).getReturnType();\n 451                   ClassResourceInfo subcri = cri.findResource(cls, cls);\n 452                   if (subcri != null && !visitedResources.contains(subcri)) {\n 453                       startResourceTag(sb, subcri, ori.getURITemplate().getValue());\n 454                       handleDocs(subcri.getServiceClass().getAnnotations(), sb, DocTarget.RESOURCE, true,\n 455                                  isJson);\n 456                       handlePathAndMatrixParams(sb, ori, isJson);\n 457                       handleResource(sb, jaxbTypes, qnameResolver, clsMap, subcri, visitedResources, isJson);\n 458                       sb.append(\"</resource>\");\n 459                   } else {\n 460                       handleDynamicSubresource(sb, jaxbTypes, qnameResolver, clsMap, ori, subcri, isJson);\n 461                   }\n 462                   continue;\n 463               }\n 464               OperationResourceInfo nextOp = i + 1 < sortedOps.size() ? sortedOps.get(i + 1) : null;\n 465               resourceTagOpened = handleOperation(sb, jaxbTypes, qnameResolver, clsMap, ori, classParams,\n 466                                                   nextOp, resourceTagOpened, isJson, i);\n 467           }\n 468       }\n 594       protected boolean handleOperation(StringBuilder sb, Set<Class<?>> jaxbTypes, //NOPMD\n 595                                         ElementQNameResolver qnameResolver, Map<Class<?>, QName> clsMap,\n 596                                         OperationResourceInfo ori, Map<Parameter, Object> classParams,\n 597                                         OperationResourceInfo nextOp, boolean resourceTagOpened,\n 598                                         boolean isJson, int index) {\n 599           Annotation[] anns = getMethod(ori).getAnnotations();\n 600           // CHECKSTYLE:ON\n 601           boolean samePathOperationFollows = singleResourceMultipleMethods && compareOperations(ori, nextOp);\n 602   \n 603           String path = ori.getURITemplate().getValue();\n 604           if (!resourceTagOpened && openResource(path)) {\n 605               resourceTagOpened = true;\n 606               URITemplate template = ori.getClassResourceInfo().getURITemplate();\n 607               if (template != null) {\n 608                   String parentPath = template.getValue();\n 609                   if (parentPath.endsWith(\"/\") && path.startsWith(\"/\") && path.length() > 1) {\n 610                       path = path.substring(1);\n 611                   }\n 612               }\n 613               startResourceTag(sb, ori, getPath(path));\n 614               handleDocs(anns, sb, DocTarget.RESOURCE, false, isJson);\n 615               handlePathAndMatrixClassParams(ori, sb, classParams, isJson);\n 616               handlePathAndMatrixParams(sb, ori, isJson);\n 617           } else if (index == 0) {\n 618               handlePathAndMatrixClassParams(ori, sb, classParams, isJson);\n 619               handlePathAndMatrixParams(sb, ori, isJson);\n 620           }\n 621   \n 622           startMethodTag(sb, ori);\n 623           if (!handleDocs(anns, sb, DocTarget.METHOD, true, isJson)) {\n 624               handleOperJavaDocs(ori, sb);\n 625           }\n 626           int numOfParams = getMethod(ori).getParameterTypes().length;\n 627           if ((numOfParams > 1 || numOfParams == 1 && !ori.isAsync()) || !classParams.isEmpty()) {\n 628   \n 629               startMethodRequestTag(sb, ori);\n 630               handleDocs(anns, sb, DocTarget.REQUEST, false, isJson);\n 631   \n 632               boolean isForm = isFormRequest(ori);\n 633   \n 634               doHandleClassParams(ori, sb, classParams, isJson, ParameterType.QUERY, ParameterType.HEADER);\n 635               doHandleJaxrsBeanParamClassParams(ori, sb, classParams, isJson,\n 636                                                 ParameterType.QUERY, ParameterType.HEADER);\n 637               for (Parameter p : ori.getParameters()) {\n 638                   if (isForm && p.getType() == ParameterType.REQUEST_BODY) {\n 639                       continue;\n 640                   }\n 641                   handleParameter(sb, jaxbTypes, qnameResolver, clsMap, ori, p, isJson);\n 642               }\n 643               if (isForm) {\n 644                   handleFormRepresentation(sb, jaxbTypes, qnameResolver, clsMap, ori, getFormClass(ori), isJson);\n 645               }\n 646               endMethodRequestTag(sb, ori);\n 647           }\n 648           startMethodResponseTag(sb, ori);\n 649           Class<?> returnType = getMethod(ori).getReturnType();\n 650           boolean isVoid = void.class == returnType && !ori.isAsync();\n 651           ResponseStatus responseStatus = getMethod(ori).getAnnotation(ResponseStatus.class);\n 652           if (responseStatus != null) {\n 653               setResponseStatus(sb, responseStatus.value());\n 654           } else if (isVoid) {\n 655               boolean oneway = getMethod(ori).getAnnotation(Oneway.class) != null;\n 656               setResponseStatus(sb, oneway ? Response.Status.ACCEPTED : Response.Status.NO_CONTENT);\n 657           }\n 658           sb.append('>');\n 659           handleDocs(anns, sb, DocTarget.RESPONSE, false, isJson);\n 660           if (!isVoid) {\n 661               handleRepresentation(sb, jaxbTypes, qnameResolver, clsMap, ori, returnType, isJson, false);\n 662           }\n 663           endMethodResponseTag(sb, ori);\n 664   \n 665           endMethodTag(sb, ori);\n 666   \n 667           if (resourceTagOpened && !samePathOperationFollows) {\n 668               endResourceTag(sb, ori);\n 669               resourceTagOpened = false;\n 670           }\n 671           return resourceTagOpened;\n 672       }\n 751       protected void doHandleClassParams(OperationResourceInfo ori,\n 752                                          StringBuilder sb,\n 753                                          Map<Parameter, Object> params,\n 754                                          boolean isJson,\n 755                                          ParameterType... pType) {\n 756           Set<ParameterType> pTypes = new LinkedHashSet<>(Arrays.asList(pType));\n 757           for (Map.Entry<Parameter, Object> entry : params.entrySet()) {\n 758               Parameter pm = entry.getKey();\n 759               Object obj = entry.getValue();\n 760               if (pTypes.contains(pm.getType())) {\n 761                   Class<?> cls = obj instanceof Method ? ((Method)obj).getParameterTypes()[0] : ((Field)obj)\n 762                       .getType();\n 763                   Type type = obj instanceof Method\n 764                       ? ((Method)obj).getGenericParameterTypes()[0] : ((Field)obj).getGenericType();\n 765                   Annotation[] ann = obj instanceof Method\n 766                       ? ((Method)obj).getParameterAnnotations()[0] : ((Field)obj).getAnnotations();\n 767                   doWriteParam(ori, sb, pm, cls, type, pm.getName(), ann, isJson);\n 768               }\n 769           }\n 770       }\n 959       protected void doWriteParam(OperationResourceInfo ori,\n 960                                   StringBuilder sb,\n 961                                   Parameter pm,\n 962                                   Class<?> type,\n 963                                   Type genericType,\n 964                                   String paramName,\n 965                                   Annotation[] anns,\n 966                                   boolean isJson) {\n 967         //CHECKSTYLE:ON\n 968           ParameterType pType = pm.getType();\n 969           boolean isForm = isFormParameter(pm, type, anns);\n 970           if (paramName == null && isForm) {\n 971               Multipart m = AnnotationUtils.getAnnotation(anns, Multipart.class);\n 972               if (m != null) {\n 973                   paramName = m.value();\n 974               }\n 975           }\n 976           sb.append(\"<param name=\\\"\").append(paramName).append(\"\\\" \");\n 977           String style = ParameterType.PATH == pType ? \"template\" : isForm\n 978               ? \"query\" : ParameterType.REQUEST_BODY == pType ? \"plain\" : pType.toString().toLowerCase();\n 979           sb.append(\"style=\\\"\").append(style).append('\"');\n 980           if (pm.getDefaultValue() != null) {\n 981               sb.append(\" default=\\\"\").append(xmlEncodeIfNeeded(pm.getDefaultValue()))\n 982                   .append('\"');\n 983           }\n 984           if (InjectionUtils.isSupportedCollectionOrArray(type)) {\n 985               type = InjectionUtils.getActualType(genericType);\n 986               sb.append(\" repeating=\\\"true\\\"\");\n 987           }\n 988   \n 989           String value = XmlSchemaPrimitiveUtils.getSchemaRepresentation(type);\n 990           if (value == null) {\n 991               if (type.isEnum()) {\n 992                   value = \"xs:string\";\n 993               } else if (type == InputStream.class) {\n 994                   value = \"xs:anyType\";\n 995               }\n 996           }\n 997           if (value != null) {\n 998               if (isJson) {\n 999                   value = value.substring(3);\n1000               }\n1001               sb.append(\" type=\\\"\").append(value).append('\"');\n1002           }\n1003           if (type.isEnum()) {\n1004               sb.append('>');\n1005               handleDocs(anns, sb, DocTarget.PARAM, true, isJson);\n1006               setEnumOptions(sb, type);\n1007               sb.append(\"</param>\");\n1008           } else {\n1009               addDocsAndCloseElement(ori, pm.getIndex(), sb, anns, \"param\", DocTarget.PARAM, true, isJson);\n1010           }\n1011       }\n1013       private void setEnumOptions(StringBuilder sb, Class<?> enumClass) {\n1014           try {\n1015               Method m = enumClass.getMethod(\"values\", new Class<?>[] {});\n1016               Object[] values = (Object[])m.invoke(null, new Object[] {});\n1017               m = enumClass.getMethod(\"name\", new Class<?>[] {});\n1018               for (Object o : values) {\n1019                   String str = (String)m.invoke(o, new Object[] {});\n1020                   sb.append(\"<option value=\\\"\").append(str).append(\"\\\"/>\");\n1021               }\n1022   \n1023           } catch (Throwable ex) {\n1024               // ignore\n1025           }\n1026       }\n",
            "cost": 0.115385,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:1019:38",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 40
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n 432       protected void handleResource(StringBuilder sb, Set<Class<?>> jaxbTypes,\n 433                                     ElementQNameResolver qnameResolver, Map<Class<?>, QName> clsMap,\n 434                                     ClassResourceInfo cri, Set<ClassResourceInfo> visitedResources,\n 435                                     boolean isJson) {\n 436           visitedResources.add(cri);\n 437           Map<Parameter, Object> classParams = getClassParameters(cri);\n 438   \n 439           List<OperationResourceInfo> sortedOps = sortOperationsByPath(cri.getMethodDispatcher()\n 440               .getOperationResourceInfos());\n 441   \n 442           boolean resourceTagOpened = false;\n 443           for (int i = 0; i < sortedOps.size(); i++) {\n 444               OperationResourceInfo ori = sortedOps.get(i);\n 445               if (i > 0 && ignoreOverloadedMethods\n 446                   && ori.getMethodToInvoke().getName().equals(sortedOps.get(i - 1).getMethodToInvoke().getName())) {\n 447                   continue;\n 448               }\n 449               if (ori.getHttpMethod() == null) {\n 450                   Class<?> cls = getMethod(ori).getReturnType();\n 451                   ClassResourceInfo subcri = cri.findResource(cls, cls);\n 452                   if (subcri != null && !visitedResources.contains(subcri)) {\n 453                       startResourceTag(sb, subcri, ori.getURITemplate().getValue());\n 454                       handleDocs(subcri.getServiceClass().getAnnotations(), sb, DocTarget.RESOURCE, true,\n 455                                  isJson);\n 456                       handlePathAndMatrixParams(sb, ori, isJson);\n 457                       handleResource(sb, jaxbTypes, qnameResolver, clsMap, subcri, visitedResources, isJson);\n 458                       sb.append(\"</resource>\");\n 459                   } else {\n 460                       handleDynamicSubresource(sb, jaxbTypes, qnameResolver, clsMap, ori, subcri, isJson);\n 461                   }\n 462                   continue;\n 463               }\n 464               OperationResourceInfo nextOp = i + 1 < sortedOps.size() ? sortedOps.get(i + 1) : null;\n 465               resourceTagOpened = handleOperation(sb, jaxbTypes, qnameResolver, clsMap, ori, classParams,\n 466                                                   nextOp, resourceTagOpened, isJson, i);\n 467           }\n 468       }\n 594       protected boolean handleOperation(StringBuilder sb, Set<Class<?>> jaxbTypes, //NOPMD\n 595                                         ElementQNameResolver qnameResolver, Map<Class<?>, QName> clsMap,\n 596                                         OperationResourceInfo ori, Map<Parameter, Object> classParams,\n 597                                         OperationResourceInfo nextOp, boolean resourceTagOpened,\n 598                                         boolean isJson, int index) {\n 599           Annotation[] anns = getMethod(ori).getAnnotations();\n 600           // CHECKSTYLE:ON\n 601           boolean samePathOperationFollows = singleResourceMultipleMethods && compareOperations(ori, nextOp);\n 602   \n 603           String path = ori.getURITemplate().getValue();\n 604           if (!resourceTagOpened && openResource(path)) {\n 605               resourceTagOpened = true;\n 606               URITemplate template = ori.getClassResourceInfo().getURITemplate();\n 607               if (template != null) {\n 608                   String parentPath = template.getValue();\n 609                   if (parentPath.endsWith(\"/\") && path.startsWith(\"/\") && path.length() > 1) {\n 610                       path = path.substring(1);\n 611                   }\n 612               }\n 613               startResourceTag(sb, ori, getPath(path));\n 614               handleDocs(anns, sb, DocTarget.RESOURCE, false, isJson);\n 615               handlePathAndMatrixClassParams(ori, sb, classParams, isJson);\n 616               handlePathAndMatrixParams(sb, ori, isJson);\n 617           } else if (index == 0) {\n 618               handlePathAndMatrixClassParams(ori, sb, classParams, isJson);\n 619               handlePathAndMatrixParams(sb, ori, isJson);\n 620           }\n 621   \n 622           startMethodTag(sb, ori);\n 623           if (!handleDocs(anns, sb, DocTarget.METHOD, true, isJson)) {\n 624               handleOperJavaDocs(ori, sb);\n 625           }\n 626           int numOfParams = getMethod(ori).getParameterTypes().length;\n 627           if ((numOfParams > 1 || numOfParams == 1 && !ori.isAsync()) || !classParams.isEmpty()) {\n 628   \n 629               startMethodRequestTag(sb, ori);\n 630               handleDocs(anns, sb, DocTarget.REQUEST, false, isJson);\n 631   \n 632               boolean isForm = isFormRequest(ori);\n 633   \n 634               doHandleClassParams(ori, sb, classParams, isJson, ParameterType.QUERY, ParameterType.HEADER);\n 635               doHandleJaxrsBeanParamClassParams(ori, sb, classParams, isJson,\n 636                                                 ParameterType.QUERY, ParameterType.HEADER);\n 637               for (Parameter p : ori.getParameters()) {\n 638                   if (isForm && p.getType() == ParameterType.REQUEST_BODY) {\n 639                       continue;\n 640                   }\n 641                   handleParameter(sb, jaxbTypes, qnameResolver, clsMap, ori, p, isJson);\n 642               }\n 643               if (isForm) {\n 644                   handleFormRepresentation(sb, jaxbTypes, qnameResolver, clsMap, ori, getFormClass(ori), isJson);\n 645               }\n 646               endMethodRequestTag(sb, ori);\n 647           }\n 648           startMethodResponseTag(sb, ori);\n 649           Class<?> returnType = getMethod(ori).getReturnType();\n 650           boolean isVoid = void.class == returnType && !ori.isAsync();\n 651           ResponseStatus responseStatus = getMethod(ori).getAnnotation(ResponseStatus.class);\n 652           if (responseStatus != null) {\n 653               setResponseStatus(sb, responseStatus.value());\n 654           } else if (isVoid) {\n 655               boolean oneway = getMethod(ori).getAnnotation(Oneway.class) != null;\n 656               setResponseStatus(sb, oneway ? Response.Status.ACCEPTED : Response.Status.NO_CONTENT);\n 657           }\n 658           sb.append('>');\n 659           handleDocs(anns, sb, DocTarget.RESPONSE, false, isJson);\n 660           if (!isVoid) {\n 661               handleRepresentation(sb, jaxbTypes, qnameResolver, clsMap, ori, returnType, isJson, false);\n 662           }\n 663           endMethodResponseTag(sb, ori);\n 664   \n 665           endMethodTag(sb, ori);\n 666   \n 667           if (resourceTagOpened && !samePathOperationFollows) {\n 668               endResourceTag(sb, ori);\n 669               resourceTagOpened = false;\n 670           }\n 671           return resourceTagOpened;\n 672       }\n 751       protected void doHandleClassParams(OperationResourceInfo ori,\n 752                                          StringBuilder sb,\n 753                                          Map<Parameter, Object> params,\n 754                                          boolean isJson,\n 755                                          ParameterType... pType) {\n 756           Set<ParameterType> pTypes = new LinkedHashSet<>(Arrays.asList(pType));\n 757           for (Map.Entry<Parameter, Object> entry : params.entrySet()) {\n 758               Parameter pm = entry.getKey();\n 759               Object obj = entry.getValue();\n 760               if (pTypes.contains(pm.getType())) {\n 761                   Class<?> cls = obj instanceof Method ? ((Method)obj).getParameterTypes()[0] : ((Field)obj)\n 762                       .getType();\n 763                   Type type = obj instanceof Method\n 764                       ? ((Method)obj).getGenericParameterTypes()[0] : ((Field)obj).getGenericType();\n 765                   Annotation[] ann = obj instanceof Method\n 766                       ? ((Method)obj).getParameterAnnotations()[0] : ((Field)obj).getAnnotations();\n 767                   doWriteParam(ori, sb, pm, cls, type, pm.getName(), ann, isJson);\n 768               }\n 769           }\n 770       }\n 959       protected void doWriteParam(OperationResourceInfo ori,\n 960                                   StringBuilder sb,\n 961                                   Parameter pm,\n 962                                   Class<?> type,\n 963                                   Type genericType,\n 964                                   String paramName,\n 965                                   Annotation[] anns,\n 966                                   boolean isJson) {\n 967         //CHECKSTYLE:ON\n 968           ParameterType pType = pm.getType();\n 969           boolean isForm = isFormParameter(pm, type, anns);\n 970           if (paramName == null && isForm) {\n 971               Multipart m = AnnotationUtils.getAnnotation(anns, Multipart.class);\n 972               if (m != null) {\n 973                   paramName = m.value();\n 974               }\n 975           }\n 976           sb.append(\"<param name=\\\"\").append(paramName).append(\"\\\" \");\n 977           String style = ParameterType.PATH == pType ? \"template\" : isForm\n 978               ? \"query\" : ParameterType.REQUEST_BODY == pType ? \"plain\" : pType.toString().toLowerCase();\n 979           sb.append(\"style=\\\"\").append(style).append('\"');\n 980           if (pm.getDefaultValue() != null) {\n 981               sb.append(\" default=\\\"\").append(xmlEncodeIfNeeded(pm.getDefaultValue()))\n 982                   .append('\"');\n 983           }\n 984           if (InjectionUtils.isSupportedCollectionOrArray(type)) {\n 985               type = InjectionUtils.getActualType(genericType);\n 986               sb.append(\" repeating=\\\"true\\\"\");\n 987           }\n 988   \n 989           String value = XmlSchemaPrimitiveUtils.getSchemaRepresentation(type);\n 990           if (value == null) {\n 991               if (type.isEnum()) {\n 992                   value = \"xs:string\";\n 993               } else if (type == InputStream.class) {\n 994                   value = \"xs:anyType\";\n 995               }\n 996           }\n 997           if (value != null) {\n 998               if (isJson) {\n 999                   value = value.substring(3);\n1000               }\n1001               sb.append(\" type=\\\"\").append(value).append('\"');\n1002           }\n1003           if (type.isEnum()) {\n1004               sb.append('>');\n1005               handleDocs(anns, sb, DocTarget.PARAM, true, isJson);\n1006               setEnumOptions(sb, type);\n1007               sb.append(\"</param>\");\n1008           } else {\n1009               addDocsAndCloseElement(ori, pm.getIndex(), sb, anns, \"param\", DocTarget.PARAM, true, isJson);\n1010           }\n1011       }\n1013       private void setEnumOptions(StringBuilder sb, Class<?> enumClass) {\n1014           try {\n1015               Method m = enumClass.getMethod(\"values\", new Class<?>[] {});\n1016               Object[] values = (Object[])m.invoke(null, new Object[] {});\n1017               m = enumClass.getMethod(\"name\", new Class<?>[] {});\n1018               for (Object o : values) {\n1019                   String str = (String)m.invoke(o, new Object[] {});\n1020                   sb.append(\"<option value=\\\"\").append(str).append(\"\\\"/>\");\n1021               }\n1022   \n1023           } catch (Throwable ex) {\n1024               // ignore\n1025           }\n1026       }\n",
            "cost": 0.120285,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:1019:47",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 41
        },
        {
            "blob": [
                "R0VUADAAamF6K3plcg=="
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java:\n 605       public static InputStream getClasspathResourceStream(String path, Class<?> callingClass, Bus bus) {\n 606           InputStream is = ClassLoaderUtils.getResourceAsStream(path, callingClass);\n 607           return is == null ? getResource(path, InputStream.class, bus) : is;\n 608       }\n 615       public static <T> T getResource(String path, Class<T> resourceClass, Bus bus) {\n 616           if (bus != null) {\n 617               ResourceManager rm = bus.getExtension(ResourceManager.class);\n 618               if (rm != null) {\n 619                   return rm.resolveResource(path, resourceClass);\n 620               }\n 621           }\n 622           return null;\n 623       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerBus.java:\n169       public final <T> T getExtension(Class<T> extensionType) {\n170           Object obj = extensions.get(extensionType);\n171           if (obj == null) {\n172               if (missingExtensions.contains(extensionType)) {\n173                   //already know we cannot find it\n174                   return null;\n175               }\n176               ConfiguredBeanLocator loc = (ConfiguredBeanLocator)extensions.get(ConfiguredBeanLocator.class);\n177               if (loc == null) {\n178                   loc = createConfiguredBeanLocator();\n179               }\n180               if (loc != null) {\n181                   obj = loc.getBeanOfType(extensionType.getName(), extensionType);\n182                   if (obj != null) {\n183                       extensions.put(extensionType, obj);\n184                   } else {\n185                       //force loading\n186                       Collection<?> objs = loc.getBeansOfType(extensionType);\n187                       if (objs != null && !objs.isEmpty()) {\n188                           extensions.put(extensionType, objs.iterator().next());\n189                       }\n190                       obj = extensions.get(extensionType);\n191                   }\n192               }\n193           }\n194           if (null != obj) {\n195               return extensionType.cast(obj);\n196           }\n197           //record that it couldn't be found to avoid expensive searches again in the future\n198           missingExtensions.add(extensionType);\n199           return null;\n200       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerImpl.java:\n186       final void loadAndRegister(Extension e) {\n187           Class<?> cls;\n188           if (null != e.getInterfaceName() && !\"\".equals(e.getInterfaceName())) {\n189               cls = e.loadInterface(loader);\n190           }  else {\n191               cls = e.getClassObject(loader);\n192           }\n193           if (null != activated && null != cls && null != activated.get(cls)) {\n194               return;\n195           }\n196   \n197           synchronized (e) {\n198               Object obj = e.load(loader, bus);\n199               if (obj == null) {\n200                   return;\n201               }\n202   \n203               if (null != activated) {\n204                   Configurer configurer = (Configurer)(activated.get(Configurer.class));\n205                   if (null != configurer) {\n206                       configurer.configureBean(obj);\n207                   }\n208               }\n209   \n210               // let the object know for which namespaces it has been activated\n211               ResourceResolver namespacesResolver = null;\n212               if (null != e.getNamespaces()) {\n213                   namespacesResolver = new SinglePropertyResolver(ACTIVATION_NAMESPACES_PROPERTY_NAME,\n214                                                                   e.getNamespaces());\n215                   resourceManager.addResourceResolver(namespacesResolver);\n216               }\n217   \n218               // Since we need to support spring2.5 by removing @Resource(\"activationNamespaces\")\n219               // Now we call the setActivationNamespaces method directly here\n220               if (e.getNamespaces() != null && !e.getNamespaces().isEmpty()) {\n221                   invokeSetterActivationNSMethod(obj, e.getNamespaces());\n222               }\n223   \n224               ResourceInjector injector = new ResourceInjector(resourceManager);\n225   \n226               try {\n227                   injector.inject(obj);\n228                   injector.construct(obj);\n229               } finally {\n230                   if (null != namespacesResolver) {\n231                       resourceManager.removeResourceResolver(namespacesResolver);\n232                   }\n233               }\n234   \n235               if (null != activated) {\n236                   if (cls == null) {\n237                       cls = obj.getClass();\n238                   }\n239                   activated.put(cls, obj);\n240               }\n241           }\n242       }\n298       public <T> T getBeanOfType(String name, Class<T> type) {\n299           if (name == null) {\n300               return null;\n301           }\n302           Extension ex = all.get(name);\n303           if (ex != null) {\n304               if (ex.getLoadedObject() == null) {\n305                   loadAndRegister(ex);\n306               }\n307               return type.cast(ex.getLoadedObject());\n308           }\n309           return null;\n310       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/configuration/spring/ConfigurerImpl.java:\n128       public void configureBean(Object beanInstance) {\n129           configureBean(null, beanInstance, true);\n130       }\n135       public synchronized void configureBean(String bn, Object beanInstance, boolean checkWildcards) {\n136   \n137           if (null == appContexts) {\n138               return;\n139           }\n140   \n141           if (null == bn) {\n142               bn = getBeanName(beanInstance);\n143               if (null == bn) {\n144                   return;\n145               }\n146           }\n147   \n148           if (checkWildcards) {\n149               configureWithWildCard(bn, beanInstance);\n150           }\n151   \n152           final String beanName = bn;\n153           setBeanWiringInfoResolver(new BeanWiringInfoResolver() {\n154               public BeanWiringInfo resolveWiringInfo(Object instance) {\n155                   if (!beanName.isEmpty()) {\n156                       return new BeanWiringInfo(beanName);\n157                   }\n158                   return null;\n159               }\n160           });\n161   \n162           for (ApplicationContext appContext : appContexts) {\n163               if (appContext.containsBean(bn)) {\n164                   this.setBeanFactory(appContext.getAutowireCapableBeanFactory());\n165               }\n166           }\n167   \n168           try {\n169               //this will prevent a call into the AbstractBeanFactory.markBeanAsCreated(...)\n170               //which saves ALL the names into a HashSet.  For URL based configuration,\n171               //this can leak memory\n172               if (beanFactory instanceof AbstractBeanFactory) {\n173                   ((AbstractBeanFactory)beanFactory).getMergedBeanDefinition(bn);\n174               }\n175               super.configureBean(beanInstance);\n176               if (LOG.isLoggable(Level.FINE)) {\n177                   LOG.fine(\"Successfully performed injection.\");\n178               }\n179           } catch (NoSuchBeanDefinitionException ex) {\n180               // users often wonder why the settings in their configuration files seem\n181               // to have no effect - the most common cause is that they have been using\n182               // incorrect bean ids\n183               if (LOG.isLoggable(Level.FINE)) {\n184                   LOG.log(Level.FINE, \"NO_MATCHING_BEAN_MSG\", beanName);\n185               }\n186           }\n187       }\n216       protected String getBeanName(Object beanInstance) {\n217           if (beanInstance instanceof Configurable) {\n218               return ((Configurable)beanInstance).getBeanName();\n219           }\n220           String beanName = null;\n221           Method m = null;\n222           try {\n223               m = beanInstance.getClass().getDeclaredMethod(\"getBeanName\", (Class[])null);\n224           } catch (NoSuchMethodException ex) {\n225               try {\n226                   m = beanInstance.getClass().getMethod(\"getBeanName\", (Class[])null);\n227               } catch (NoSuchMethodException e) {\n228                   //ignore\n229               }\n230           }\n231           if (m != null) {\n232               try {\n233                   beanName = (String)(m.invoke(beanInstance));\n234               } catch (Exception ex) {\n235                   LogUtils.log(LOG, Level.WARNING, \"ERROR_DETERMINING_BEAN_NAME_EXC\", ex);\n236               }\n237           }\n238   \n239           if (null == beanName) {\n240               LogUtils.log(LOG, Level.FINE, \"COULD_NOT_DETERMINE_BEAN_NAME_MSG\",\n241                            beanInstance.getClass().getName());\n242           }\n243   \n244           return beanName;\n245       }\n",
            "cost": 0.76318,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/configuration/spring/ConfigurerImpl.java:233:37",
            "status": "corpus",
            "valid_path": "YES",
            "id": 42
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java:\n 605       public static InputStream getClasspathResourceStream(String path, Class<?> callingClass, Bus bus) {\n 606           InputStream is = ClassLoaderUtils.getResourceAsStream(path, callingClass);\n 607           return is == null ? getResource(path, InputStream.class, bus) : is;\n 608       }\n 615       public static <T> T getResource(String path, Class<T> resourceClass, Bus bus) {\n 616           if (bus != null) {\n 617               ResourceManager rm = bus.getExtension(ResourceManager.class);\n 618               if (rm != null) {\n 619                   return rm.resolveResource(path, resourceClass);\n 620               }\n 621           }\n 622           return null;\n 623       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerBus.java:\n169       public final <T> T getExtension(Class<T> extensionType) {\n170           Object obj = extensions.get(extensionType);\n171           if (obj == null) {\n172               if (missingExtensions.contains(extensionType)) {\n173                   //already know we cannot find it\n174                   return null;\n175               }\n176               ConfiguredBeanLocator loc = (ConfiguredBeanLocator)extensions.get(ConfiguredBeanLocator.class);\n177               if (loc == null) {\n178                   loc = createConfiguredBeanLocator();\n179               }\n180               if (loc != null) {\n181                   obj = loc.getBeanOfType(extensionType.getName(), extensionType);\n182                   if (obj != null) {\n183                       extensions.put(extensionType, obj);\n184                   } else {\n185                       //force loading\n186                       Collection<?> objs = loc.getBeansOfType(extensionType);\n187                       if (objs != null && !objs.isEmpty()) {\n188                           extensions.put(extensionType, objs.iterator().next());\n189                       }\n190                       obj = extensions.get(extensionType);\n191                   }\n192               }\n193           }\n194           if (null != obj) {\n195               return extensionType.cast(obj);\n196           }\n197           //record that it couldn't be found to avoid expensive searches again in the future\n198           missingExtensions.add(extensionType);\n199           return null;\n200       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerImpl.java:\n186       final void loadAndRegister(Extension e) {\n187           Class<?> cls;\n188           if (null != e.getInterfaceName() && !\"\".equals(e.getInterfaceName())) {\n189               cls = e.loadInterface(loader);\n190           }  else {\n191               cls = e.getClassObject(loader);\n192           }\n193           if (null != activated && null != cls && null != activated.get(cls)) {\n194               return;\n195           }\n196   \n197           synchronized (e) {\n198               Object obj = e.load(loader, bus);\n199               if (obj == null) {\n200                   return;\n201               }\n202   \n203               if (null != activated) {\n204                   Configurer configurer = (Configurer)(activated.get(Configurer.class));\n205                   if (null != configurer) {\n206                       configurer.configureBean(obj);\n207                   }\n208               }\n209   \n210               // let the object know for which namespaces it has been activated\n211               ResourceResolver namespacesResolver = null;\n212               if (null != e.getNamespaces()) {\n213                   namespacesResolver = new SinglePropertyResolver(ACTIVATION_NAMESPACES_PROPERTY_NAME,\n214                                                                   e.getNamespaces());\n215                   resourceManager.addResourceResolver(namespacesResolver);\n216               }\n217   \n218               // Since we need to support spring2.5 by removing @Resource(\"activationNamespaces\")\n219               // Now we call the setActivationNamespaces method directly here\n220               if (e.getNamespaces() != null && !e.getNamespaces().isEmpty()) {\n221                   invokeSetterActivationNSMethod(obj, e.getNamespaces());\n222               }\n223   \n224               ResourceInjector injector = new ResourceInjector(resourceManager);\n225   \n226               try {\n227                   injector.inject(obj);\n228                   injector.construct(obj);\n229               } finally {\n230                   if (null != namespacesResolver) {\n231                       resourceManager.removeResourceResolver(namespacesResolver);\n232                   }\n233               }\n234   \n235               if (null != activated) {\n236                   if (cls == null) {\n237                       cls = obj.getClass();\n238                   }\n239                   activated.put(cls, obj);\n240               }\n241           }\n242       }\n298       public <T> T getBeanOfType(String name, Class<T> type) {\n299           if (name == null) {\n300               return null;\n301           }\n302           Extension ex = all.get(name);\n303           if (ex != null) {\n304               if (ex.getLoadedObject() == null) {\n305                   loadAndRegister(ex);\n306               }\n307               return type.cast(ex.getLoadedObject());\n308           }\n309           return null;\n310       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/configuration/spring/ConfigurerImpl.java:\n128       public void configureBean(Object beanInstance) {\n129           configureBean(null, beanInstance, true);\n130       }\n135       public synchronized void configureBean(String bn, Object beanInstance, boolean checkWildcards) {\n136   \n137           if (null == appContexts) {\n138               return;\n139           }\n140   \n141           if (null == bn) {\n142               bn = getBeanName(beanInstance);\n143               if (null == bn) {\n144                   return;\n145               }\n146           }\n147   \n148           if (checkWildcards) {\n149               configureWithWildCard(bn, beanInstance);\n150           }\n151   \n152           final String beanName = bn;\n153           setBeanWiringInfoResolver(new BeanWiringInfoResolver() {\n154               public BeanWiringInfo resolveWiringInfo(Object instance) {\n155                   if (!beanName.isEmpty()) {\n156                       return new BeanWiringInfo(beanName);\n157                   }\n158                   return null;\n159               }\n160           });\n161   \n162           for (ApplicationContext appContext : appContexts) {\n163               if (appContext.containsBean(bn)) {\n164                   this.setBeanFactory(appContext.getAutowireCapableBeanFactory());\n165               }\n166           }\n167   \n168           try {\n169               //this will prevent a call into the AbstractBeanFactory.markBeanAsCreated(...)\n170               //which saves ALL the names into a HashSet.  For URL based configuration,\n171               //this can leak memory\n172               if (beanFactory instanceof AbstractBeanFactory) {\n173                   ((AbstractBeanFactory)beanFactory).getMergedBeanDefinition(bn);\n174               }\n175               super.configureBean(beanInstance);\n176               if (LOG.isLoggable(Level.FINE)) {\n177                   LOG.fine(\"Successfully performed injection.\");\n178               }\n179           } catch (NoSuchBeanDefinitionException ex) {\n180               // users often wonder why the settings in their configuration files seem\n181               // to have no effect - the most common cause is that they have been using\n182               // incorrect bean ids\n183               if (LOG.isLoggable(Level.FINE)) {\n184                   LOG.log(Level.FINE, \"NO_MATCHING_BEAN_MSG\", beanName);\n185               }\n186           }\n187       }\n216       protected String getBeanName(Object beanInstance) {\n217           if (beanInstance instanceof Configurable) {\n218               return ((Configurable)beanInstance).getBeanName();\n219           }\n220           String beanName = null;\n221           Method m = null;\n222           try {\n223               m = beanInstance.getClass().getDeclaredMethod(\"getBeanName\", (Class[])null);\n224           } catch (NoSuchMethodException ex) {\n225               try {\n226                   m = beanInstance.getClass().getMethod(\"getBeanName\", (Class[])null);\n227               } catch (NoSuchMethodException e) {\n228                   //ignore\n229               }\n230           }\n231           if (m != null) {\n232               try {\n233                   beanName = (String)(m.invoke(beanInstance));\n234               } catch (Exception ex) {\n235                   LogUtils.log(LOG, Level.WARNING, \"ERROR_DETERMINING_BEAN_NAME_EXC\", ex);\n236               }\n237           }\n238   \n239           if (null == beanName) {\n240               LogUtils.log(LOG, Level.FINE, \"COULD_NOT_DETERMINE_BEAN_NAME_MSG\",\n241                            beanInstance.getClass().getName());\n242           }\n243   \n244           return beanName;\n245       }\n",
            "cost": 0.11284,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/configuration/spring/ConfigurerImpl.java:233:46",
            "status": "corpus",
            "valid_path": "NO",
            "id": 43
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java:\n 605       public static InputStream getClasspathResourceStream(String path, Class<?> callingClass, Bus bus) {\n 606           InputStream is = ClassLoaderUtils.getResourceAsStream(path, callingClass);\n 607           return is == null ? getResource(path, InputStream.class, bus) : is;\n 608       }\n 615       public static <T> T getResource(String path, Class<T> resourceClass, Bus bus) {\n 616           if (bus != null) {\n 617               ResourceManager rm = bus.getExtension(ResourceManager.class);\n 618               if (rm != null) {\n 619                   return rm.resolveResource(path, resourceClass);\n 620               }\n 621           }\n 622           return null;\n 623       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerBus.java:\n169       public final <T> T getExtension(Class<T> extensionType) {\n170           Object obj = extensions.get(extensionType);\n171           if (obj == null) {\n172               if (missingExtensions.contains(extensionType)) {\n173                   //already know we cannot find it\n174                   return null;\n175               }\n176               ConfiguredBeanLocator loc = (ConfiguredBeanLocator)extensions.get(ConfiguredBeanLocator.class);\n177               if (loc == null) {\n178                   loc = createConfiguredBeanLocator();\n179               }\n180               if (loc != null) {\n181                   obj = loc.getBeanOfType(extensionType.getName(), extensionType);\n182                   if (obj != null) {\n183                       extensions.put(extensionType, obj);\n184                   } else {\n185                       //force loading\n186                       Collection<?> objs = loc.getBeansOfType(extensionType);\n187                       if (objs != null && !objs.isEmpty()) {\n188                           extensions.put(extensionType, objs.iterator().next());\n189                       }\n190                       obj = extensions.get(extensionType);\n191                   }\n192               }\n193           }\n194           if (null != obj) {\n195               return extensionType.cast(obj);\n196           }\n197           //record that it couldn't be found to avoid expensive searches again in the future\n198           missingExtensions.add(extensionType);\n199           return null;\n200       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerImpl.java:\n186       final void loadAndRegister(Extension e) {\n187           Class<?> cls;\n188           if (null != e.getInterfaceName() && !\"\".equals(e.getInterfaceName())) {\n189               cls = e.loadInterface(loader);\n190           }  else {\n191               cls = e.getClassObject(loader);\n192           }\n193           if (null != activated && null != cls && null != activated.get(cls)) {\n194               return;\n195           }\n196   \n197           synchronized (e) {\n198               Object obj = e.load(loader, bus);\n199               if (obj == null) {\n200                   return;\n201               }\n202   \n203               if (null != activated) {\n204                   Configurer configurer = (Configurer)(activated.get(Configurer.class));\n205                   if (null != configurer) {\n206                       configurer.configureBean(obj);\n207                   }\n208               }\n209   \n210               // let the object know for which namespaces it has been activated\n211               ResourceResolver namespacesResolver = null;\n212               if (null != e.getNamespaces()) {\n213                   namespacesResolver = new SinglePropertyResolver(ACTIVATION_NAMESPACES_PROPERTY_NAME,\n214                                                                   e.getNamespaces());\n215                   resourceManager.addResourceResolver(namespacesResolver);\n216               }\n217   \n218               // Since we need to support spring2.5 by removing @Resource(\"activationNamespaces\")\n219               // Now we call the setActivationNamespaces method directly here\n220               if (e.getNamespaces() != null && !e.getNamespaces().isEmpty()) {\n221                   invokeSetterActivationNSMethod(obj, e.getNamespaces());\n222               }\n223   \n224               ResourceInjector injector = new ResourceInjector(resourceManager);\n225   \n226               try {\n227                   injector.inject(obj);\n228                   injector.construct(obj);\n229               } finally {\n230                   if (null != namespacesResolver) {\n231                       resourceManager.removeResourceResolver(namespacesResolver);\n232                   }\n233               }\n234   \n235               if (null != activated) {\n236                   if (cls == null) {\n237                       cls = obj.getClass();\n238                   }\n239                   activated.put(cls, obj);\n240               }\n241           }\n242       }\n298       public <T> T getBeanOfType(String name, Class<T> type) {\n299           if (name == null) {\n300               return null;\n301           }\n302           Extension ex = all.get(name);\n303           if (ex != null) {\n304               if (ex.getLoadedObject() == null) {\n305                   loadAndRegister(ex);\n306               }\n307               return type.cast(ex.getLoadedObject());\n308           }\n309           return null;\n310       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/common/injection/ResourceInjector.java:\n127       public void construct(Object o) {\n128           setTarget(o);\n129           if (processable(targetClass, o)) {\n130               invokePostConstruct();\n131           }\n132       }\n339       public void invokePostConstruct() {\n340   \n341           boolean accessible = false;\n342           for (Method method : getPostConstructMethods()) {\n343               PostConstruct pc = method.getAnnotation(PostConstruct.class);\n344               if (pc != null) {\n345                   try {\n346                       ReflectionUtil.setAccessible(method);\n347                       method.invoke(target);\n348                   } catch (IllegalAccessException e) {\n349                       LOG.log(Level.WARNING, \"INJECTION_COMPLETE_NOT_VISIBLE\", method);\n350                   } catch (InvocationTargetException e) {\n351                       LOG.log(Level.WARNING, \"INJECTION_COMPLETE_THREW_EXCEPTION\", e);\n352                   } finally {\n353                       ReflectionUtil.setAccessible(method, accessible);\n354                   }\n355               }\n356           }\n357       }\n",
            "cost": 0.10051000000000002,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/common/injection/ResourceInjector.java:347:21",
            "status": "corpus",
            "valid_path": "NO",
            "id": 44
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java:\n 605       public static InputStream getClasspathResourceStream(String path, Class<?> callingClass, Bus bus) {\n 606           InputStream is = ClassLoaderUtils.getResourceAsStream(path, callingClass);\n 607           return is == null ? getResource(path, InputStream.class, bus) : is;\n 608       }\n 615       public static <T> T getResource(String path, Class<T> resourceClass, Bus bus) {\n 616           if (bus != null) {\n 617               ResourceManager rm = bus.getExtension(ResourceManager.class);\n 618               if (rm != null) {\n 619                   return rm.resolveResource(path, resourceClass);\n 620               }\n 621           }\n 622           return null;\n 623       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerBus.java:\n169       public final <T> T getExtension(Class<T> extensionType) {\n170           Object obj = extensions.get(extensionType);\n171           if (obj == null) {\n172               if (missingExtensions.contains(extensionType)) {\n173                   //already know we cannot find it\n174                   return null;\n175               }\n176               ConfiguredBeanLocator loc = (ConfiguredBeanLocator)extensions.get(ConfiguredBeanLocator.class);\n177               if (loc == null) {\n178                   loc = createConfiguredBeanLocator();\n179               }\n180               if (loc != null) {\n181                   obj = loc.getBeanOfType(extensionType.getName(), extensionType);\n182                   if (obj != null) {\n183                       extensions.put(extensionType, obj);\n184                   } else {\n185                       //force loading\n186                       Collection<?> objs = loc.getBeansOfType(extensionType);\n187                       if (objs != null && !objs.isEmpty()) {\n188                           extensions.put(extensionType, objs.iterator().next());\n189                       }\n190                       obj = extensions.get(extensionType);\n191                   }\n192               }\n193           }\n194           if (null != obj) {\n195               return extensionType.cast(obj);\n196           }\n197           //record that it couldn't be found to avoid expensive searches again in the future\n198           missingExtensions.add(extensionType);\n199           return null;\n200       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerImpl.java:\n186       final void loadAndRegister(Extension e) {\n187           Class<?> cls;\n188           if (null != e.getInterfaceName() && !\"\".equals(e.getInterfaceName())) {\n189               cls = e.loadInterface(loader);\n190           }  else {\n191               cls = e.getClassObject(loader);\n192           }\n193           if (null != activated && null != cls && null != activated.get(cls)) {\n194               return;\n195           }\n196   \n197           synchronized (e) {\n198               Object obj = e.load(loader, bus);\n199               if (obj == null) {\n200                   return;\n201               }\n202   \n203               if (null != activated) {\n204                   Configurer configurer = (Configurer)(activated.get(Configurer.class));\n205                   if (null != configurer) {\n206                       configurer.configureBean(obj);\n207                   }\n208               }\n209   \n210               // let the object know for which namespaces it has been activated\n211               ResourceResolver namespacesResolver = null;\n212               if (null != e.getNamespaces()) {\n213                   namespacesResolver = new SinglePropertyResolver(ACTIVATION_NAMESPACES_PROPERTY_NAME,\n214                                                                   e.getNamespaces());\n215                   resourceManager.addResourceResolver(namespacesResolver);\n216               }\n217   \n218               // Since we need to support spring2.5 by removing @Resource(\"activationNamespaces\")\n219               // Now we call the setActivationNamespaces method directly here\n220               if (e.getNamespaces() != null && !e.getNamespaces().isEmpty()) {\n221                   invokeSetterActivationNSMethod(obj, e.getNamespaces());\n222               }\n223   \n224               ResourceInjector injector = new ResourceInjector(resourceManager);\n225   \n226               try {\n227                   injector.inject(obj);\n228                   injector.construct(obj);\n229               } finally {\n230                   if (null != namespacesResolver) {\n231                       resourceManager.removeResourceResolver(namespacesResolver);\n232                   }\n233               }\n234   \n235               if (null != activated) {\n236                   if (cls == null) {\n237                       cls = obj.getClass();\n238                   }\n239                   activated.put(cls, obj);\n240               }\n241           }\n242       }\n298       public <T> T getBeanOfType(String name, Class<T> type) {\n299           if (name == null) {\n300               return null;\n301           }\n302           Extension ex = all.get(name);\n303           if (ex != null) {\n304               if (ex.getLoadedObject() == null) {\n305                   loadAndRegister(ex);\n306               }\n307               return type.cast(ex.getLoadedObject());\n308           }\n309           return null;\n310       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/common/injection/ResourceInjector.java:\n127       public void construct(Object o) {\n128           setTarget(o);\n129           if (processable(targetClass, o)) {\n130               invokePostConstruct();\n131           }\n132       }\n339       public void invokePostConstruct() {\n340   \n341           boolean accessible = false;\n342           for (Method method : getPostConstructMethods()) {\n343               PostConstruct pc = method.getAnnotation(PostConstruct.class);\n344               if (pc != null) {\n345                   try {\n346                       ReflectionUtil.setAccessible(method);\n347                       method.invoke(target);\n348                   } catch (IllegalAccessException e) {\n349                       LOG.log(Level.WARNING, \"INJECTION_COMPLETE_NOT_VISIBLE\", method);\n350                   } catch (InvocationTargetException e) {\n351                       LOG.log(Level.WARNING, \"INJECTION_COMPLETE_THREW_EXCEPTION\", e);\n352                   } finally {\n353                       ReflectionUtil.setAccessible(method, accessible);\n354                   }\n355               }\n356           }\n357       }\n",
            "cost": 0.10076,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/common/injection/ResourceInjector.java:347:35",
            "status": "corpus",
            "valid_path": "NO",
            "id": 45
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java:\n 605       public static InputStream getClasspathResourceStream(String path, Class<?> callingClass, Bus bus) {\n 606           InputStream is = ClassLoaderUtils.getResourceAsStream(path, callingClass);\n 607           return is == null ? getResource(path, InputStream.class, bus) : is;\n 608       }\n 615       public static <T> T getResource(String path, Class<T> resourceClass, Bus bus) {\n 616           if (bus != null) {\n 617               ResourceManager rm = bus.getExtension(ResourceManager.class);\n 618               if (rm != null) {\n 619                   return rm.resolveResource(path, resourceClass);\n 620               }\n 621           }\n 622           return null;\n 623       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerBus.java:\n169       public final <T> T getExtension(Class<T> extensionType) {\n170           Object obj = extensions.get(extensionType);\n171           if (obj == null) {\n172               if (missingExtensions.contains(extensionType)) {\n173                   //already know we cannot find it\n174                   return null;\n175               }\n176               ConfiguredBeanLocator loc = (ConfiguredBeanLocator)extensions.get(ConfiguredBeanLocator.class);\n177               if (loc == null) {\n178                   loc = createConfiguredBeanLocator();\n179               }\n180               if (loc != null) {\n181                   obj = loc.getBeanOfType(extensionType.getName(), extensionType);\n182                   if (obj != null) {\n183                       extensions.put(extensionType, obj);\n184                   } else {\n185                       //force loading\n186                       Collection<?> objs = loc.getBeansOfType(extensionType);\n187                       if (objs != null && !objs.isEmpty()) {\n188                           extensions.put(extensionType, objs.iterator().next());\n189                       }\n190                       obj = extensions.get(extensionType);\n191                   }\n192               }\n193           }\n194           if (null != obj) {\n195               return extensionType.cast(obj);\n196           }\n197           //record that it couldn't be found to avoid expensive searches again in the future\n198           missingExtensions.add(extensionType);\n199           return null;\n200       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerImpl.java:\n186       final void loadAndRegister(Extension e) {\n187           Class<?> cls;\n188           if (null != e.getInterfaceName() && !\"\".equals(e.getInterfaceName())) {\n189               cls = e.loadInterface(loader);\n190           }  else {\n191               cls = e.getClassObject(loader);\n192           }\n193           if (null != activated && null != cls && null != activated.get(cls)) {\n194               return;\n195           }\n196   \n197           synchronized (e) {\n198               Object obj = e.load(loader, bus);\n199               if (obj == null) {\n200                   return;\n201               }\n202   \n203               if (null != activated) {\n204                   Configurer configurer = (Configurer)(activated.get(Configurer.class));\n205                   if (null != configurer) {\n206                       configurer.configureBean(obj);\n207                   }\n208               }\n209   \n210               // let the object know for which namespaces it has been activated\n211               ResourceResolver namespacesResolver = null;\n212               if (null != e.getNamespaces()) {\n213                   namespacesResolver = new SinglePropertyResolver(ACTIVATION_NAMESPACES_PROPERTY_NAME,\n214                                                                   e.getNamespaces());\n215                   resourceManager.addResourceResolver(namespacesResolver);\n216               }\n217   \n218               // Since we need to support spring2.5 by removing @Resource(\"activationNamespaces\")\n219               // Now we call the setActivationNamespaces method directly here\n220               if (e.getNamespaces() != null && !e.getNamespaces().isEmpty()) {\n221                   invokeSetterActivationNSMethod(obj, e.getNamespaces());\n222               }\n223   \n224               ResourceInjector injector = new ResourceInjector(resourceManager);\n225   \n226               try {\n227                   injector.inject(obj);\n228                   injector.construct(obj);\n229               } finally {\n230                   if (null != namespacesResolver) {\n231                       resourceManager.removeResourceResolver(namespacesResolver);\n232                   }\n233               }\n234   \n235               if (null != activated) {\n236                   if (cls == null) {\n237                       cls = obj.getClass();\n238                   }\n239                   activated.put(cls, obj);\n240               }\n241           }\n242       }\n263       private void invokeSetterActivationNSMethod(Object target, Object value) {\n264           Class<?> clazz = target.getClass();\n265           String methodName = ACTIVATION_NAMESPACES_SETTER_METHOD_NAME;\n266           while (clazz != Object.class) {\n267               Method[] methods = clazz.getMethods();\n268               for (int i = 0; i < methods.length; i++) {\n269                   Method method = methods[i];\n270                   Class<?>[] params = method.getParameterTypes();\n271                   if (method.getName().equals(methodName) && params.length == 1) {\n272                       Class<?> paramType = params[0];\n273                       if (paramType.isInstance(value)) {\n274                           try {\n275                               method.invoke(target, new Object[] {value});\n276                           } catch (Exception e) {\n277                               // do nothing here\n278                           }\n279                           return;\n280                       }\n281                   }\n282               }\n283               clazz = clazz.getSuperclass();\n284           }\n285       }\n298       public <T> T getBeanOfType(String name, Class<T> type) {\n299           if (name == null) {\n300               return null;\n301           }\n302           Extension ex = all.get(name);\n303           if (ex != null) {\n304               if (ex.getLoadedObject() == null) {\n305                   loadAndRegister(ex);\n306               }\n307               return type.cast(ex.getLoadedObject());\n308           }\n309           return null;\n310       }\n",
            "cost": 0.10230500000000001,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerImpl.java:275:29",
            "status": "corpus",
            "valid_path": "NO",
            "id": 46
        },
        {
            "blob": [
                "R0VUADAAL3BhdGgvdG8vdnVsbmVyYWJsZS9lbmRwb2ludC9qYXp6ZXI="
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java:\n 605       public static InputStream getClasspathResourceStream(String path, Class<?> callingClass, Bus bus) {\n 606           InputStream is = ClassLoaderUtils.getResourceAsStream(path, callingClass);\n 607           return is == null ? getResource(path, InputStream.class, bus) : is;\n 608       }\n 615       public static <T> T getResource(String path, Class<T> resourceClass, Bus bus) {\n 616           if (bus != null) {\n 617               ResourceManager rm = bus.getExtension(ResourceManager.class);\n 618               if (rm != null) {\n 619                   return rm.resolveResource(path, resourceClass);\n 620               }\n 621           }\n 622           return null;\n 623       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerBus.java:\n169       public final <T> T getExtension(Class<T> extensionType) {\n170           Object obj = extensions.get(extensionType);\n171           if (obj == null) {\n172               if (missingExtensions.contains(extensionType)) {\n173                   //already know we cannot find it\n174                   return null;\n175               }\n176               ConfiguredBeanLocator loc = (ConfiguredBeanLocator)extensions.get(ConfiguredBeanLocator.class);\n177               if (loc == null) {\n178                   loc = createConfiguredBeanLocator();\n179               }\n180               if (loc != null) {\n181                   obj = loc.getBeanOfType(extensionType.getName(), extensionType);\n182                   if (obj != null) {\n183                       extensions.put(extensionType, obj);\n184                   } else {\n185                       //force loading\n186                       Collection<?> objs = loc.getBeansOfType(extensionType);\n187                       if (objs != null && !objs.isEmpty()) {\n188                           extensions.put(extensionType, objs.iterator().next());\n189                       }\n190                       obj = extensions.get(extensionType);\n191                   }\n192               }\n193           }\n194           if (null != obj) {\n195               return extensionType.cast(obj);\n196           }\n197           //record that it couldn't be found to avoid expensive searches again in the future\n198           missingExtensions.add(extensionType);\n199           return null;\n200       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerImpl.java:\n186       final void loadAndRegister(Extension e) {\n187           Class<?> cls;\n188           if (null != e.getInterfaceName() && !\"\".equals(e.getInterfaceName())) {\n189               cls = e.loadInterface(loader);\n190           }  else {\n191               cls = e.getClassObject(loader);\n192           }\n193           if (null != activated && null != cls && null != activated.get(cls)) {\n194               return;\n195           }\n196   \n197           synchronized (e) {\n198               Object obj = e.load(loader, bus);\n199               if (obj == null) {\n200                   return;\n201               }\n202   \n203               if (null != activated) {\n204                   Configurer configurer = (Configurer)(activated.get(Configurer.class));\n205                   if (null != configurer) {\n206                       configurer.configureBean(obj);\n207                   }\n208               }\n209   \n210               // let the object know for which namespaces it has been activated\n211               ResourceResolver namespacesResolver = null;\n212               if (null != e.getNamespaces()) {\n213                   namespacesResolver = new SinglePropertyResolver(ACTIVATION_NAMESPACES_PROPERTY_NAME,\n214                                                                   e.getNamespaces());\n215                   resourceManager.addResourceResolver(namespacesResolver);\n216               }\n217   \n218               // Since we need to support spring2.5 by removing @Resource(\"activationNamespaces\")\n219               // Now we call the setActivationNamespaces method directly here\n220               if (e.getNamespaces() != null && !e.getNamespaces().isEmpty()) {\n221                   invokeSetterActivationNSMethod(obj, e.getNamespaces());\n222               }\n223   \n224               ResourceInjector injector = new ResourceInjector(resourceManager);\n225   \n226               try {\n227                   injector.inject(obj);\n228                   injector.construct(obj);\n229               } finally {\n230                   if (null != namespacesResolver) {\n231                       resourceManager.removeResourceResolver(namespacesResolver);\n232                   }\n233               }\n234   \n235               if (null != activated) {\n236                   if (cls == null) {\n237                       cls = obj.getClass();\n238                   }\n239                   activated.put(cls, obj);\n240               }\n241           }\n242       }\n263       private void invokeSetterActivationNSMethod(Object target, Object value) {\n264           Class<?> clazz = target.getClass();\n265           String methodName = ACTIVATION_NAMESPACES_SETTER_METHOD_NAME;\n266           while (clazz != Object.class) {\n267               Method[] methods = clazz.getMethods();\n268               for (int i = 0; i < methods.length; i++) {\n269                   Method method = methods[i];\n270                   Class<?>[] params = method.getParameterTypes();\n271                   if (method.getName().equals(methodName) && params.length == 1) {\n272                       Class<?> paramType = params[0];\n273                       if (paramType.isInstance(value)) {\n274                           try {\n275                               method.invoke(target, new Object[] {value});\n276                           } catch (Exception e) {\n277                               // do nothing here\n278                           }\n279                           return;\n280                       }\n281                   }\n282               }\n283               clazz = clazz.getSuperclass();\n284           }\n285       }\n298       public <T> T getBeanOfType(String name, Class<T> type) {\n299           if (name == null) {\n300               return null;\n301           }\n302           Extension ex = all.get(name);\n303           if (ex != null) {\n304               if (ex.getLoadedObject() == null) {\n305                   loadAndRegister(ex);\n306               }\n307               return type.cast(ex.getLoadedObject());\n308           }\n309           return null;\n310       }\n",
            "cost": 0.71674,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerImpl.java:275:43",
            "status": "corpus",
            "valid_path": "YES",
            "id": 47
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java:\n 605       public static InputStream getClasspathResourceStream(String path, Class<?> callingClass, Bus bus) {\n 606           InputStream is = ClassLoaderUtils.getResourceAsStream(path, callingClass);\n 607           return is == null ? getResource(path, InputStream.class, bus) : is;\n 608       }\n 615       public static <T> T getResource(String path, Class<T> resourceClass, Bus bus) {\n 616           if (bus != null) {\n 617               ResourceManager rm = bus.getExtension(ResourceManager.class);\n 618               if (rm != null) {\n 619                   return rm.resolveResource(path, resourceClass);\n 620               }\n 621           }\n 622           return null;\n 623       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerBus.java:\n169       public final <T> T getExtension(Class<T> extensionType) {\n170           Object obj = extensions.get(extensionType);\n171           if (obj == null) {\n172               if (missingExtensions.contains(extensionType)) {\n173                   //already know we cannot find it\n174                   return null;\n175               }\n176               ConfiguredBeanLocator loc = (ConfiguredBeanLocator)extensions.get(ConfiguredBeanLocator.class);\n177               if (loc == null) {\n178                   loc = createConfiguredBeanLocator();\n179               }\n180               if (loc != null) {\n181                   obj = loc.getBeanOfType(extensionType.getName(), extensionType);\n182                   if (obj != null) {\n183                       extensions.put(extensionType, obj);\n184                   } else {\n185                       //force loading\n186                       Collection<?> objs = loc.getBeansOfType(extensionType);\n187                       if (objs != null && !objs.isEmpty()) {\n188                           extensions.put(extensionType, objs.iterator().next());\n189                       }\n190                       obj = extensions.get(extensionType);\n191                   }\n192               }\n193           }\n194           if (null != obj) {\n195               return extensionType.cast(obj);\n196           }\n197           //record that it couldn't be found to avoid expensive searches again in the future\n198           missingExtensions.add(extensionType);\n199           return null;\n200       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerImpl.java:\n186       final void loadAndRegister(Extension e) {\n187           Class<?> cls;\n188           if (null != e.getInterfaceName() && !\"\".equals(e.getInterfaceName())) {\n189               cls = e.loadInterface(loader);\n190           }  else {\n191               cls = e.getClassObject(loader);\n192           }\n193           if (null != activated && null != cls && null != activated.get(cls)) {\n194               return;\n195           }\n196   \n197           synchronized (e) {\n198               Object obj = e.load(loader, bus);\n199               if (obj == null) {\n200                   return;\n201               }\n202   \n203               if (null != activated) {\n204                   Configurer configurer = (Configurer)(activated.get(Configurer.class));\n205                   if (null != configurer) {\n206                       configurer.configureBean(obj);\n207                   }\n208               }\n209   \n210               // let the object know for which namespaces it has been activated\n211               ResourceResolver namespacesResolver = null;\n212               if (null != e.getNamespaces()) {\n213                   namespacesResolver = new SinglePropertyResolver(ACTIVATION_NAMESPACES_PROPERTY_NAME,\n214                                                                   e.getNamespaces());\n215                   resourceManager.addResourceResolver(namespacesResolver);\n216               }\n217   \n218               // Since we need to support spring2.5 by removing @Resource(\"activationNamespaces\")\n219               // Now we call the setActivationNamespaces method directly here\n220               if (e.getNamespaces() != null && !e.getNamespaces().isEmpty()) {\n221                   invokeSetterActivationNSMethod(obj, e.getNamespaces());\n222               }\n223   \n224               ResourceInjector injector = new ResourceInjector(resourceManager);\n225   \n226               try {\n227                   injector.inject(obj);\n228                   injector.construct(obj);\n229               } finally {\n230                   if (null != namespacesResolver) {\n231                       resourceManager.removeResourceResolver(namespacesResolver);\n232                   }\n233               }\n234   \n235               if (null != activated) {\n236                   if (cls == null) {\n237                       cls = obj.getClass();\n238                   }\n239                   activated.put(cls, obj);\n240               }\n241           }\n242       }\n298       public <T> T getBeanOfType(String name, Class<T> type) {\n299           if (name == null) {\n300               return null;\n301           }\n302           Extension ex = all.get(name);\n303           if (ex != null) {\n304               if (ex.getLoadedObject() == null) {\n305                   loadAndRegister(ex);\n306               }\n307               return type.cast(ex.getLoadedObject());\n308           }\n309           return null;\n310       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/blueprint/ConfigurerImpl.java:\n 97       public void configureBean(Object beanInstance) {\n 98           configureBean(null, beanInstance, true);\n 99       }\n104       public synchronized void configureBean(String bn, Object beanInstance, boolean checkWildcards) {\n105           if (null == bn) {\n106               bn = getBeanName(beanInstance);\n107           }\n108   \n109           if (null == bn) {\n110               return;\n111           }\n112           if (checkWildcards) {\n113               configureWithWildCard(bn, beanInstance);\n114           }\n115   \n116           if (container instanceof ExtendedBlueprintContainer) {\n117               try {\n118                   final ComponentMetadata cm = container.getComponentMetadata(bn);\n119                   if (cm instanceof BeanMetadata) {\n120                       ((ExtendedBlueprintContainer)container).injectBeanInstance((BeanMetadata)cm, beanInstance);\n121                   }\n122               } catch (NoSuchComponentException nsce) {\n123               }\n124           }\n125       }\n149       protected String getBeanName(Object beanInstance) {\n150           if (beanInstance instanceof Configurable) {\n151               return ((Configurable)beanInstance).getBeanName();\n152           }\n153           String beanName = null;\n154           Method m = null;\n155           try {\n156               m = beanInstance.getClass().getDeclaredMethod(\"getBeanName\", (Class[])null);\n157           } catch (NoSuchMethodException ex) {\n158               try {\n159                   m = beanInstance.getClass().getMethod(\"getBeanName\", (Class[])null);\n160               } catch (NoSuchMethodException e) {\n161                   //ignore\n162               }\n163           }\n164           if (m != null) {\n165               try {\n166                   beanName = (String)(m.invoke(beanInstance));\n167               } catch (Exception ex) {\n168                   LogUtils.log(LOG, Level.WARNING, \"ERROR_DETERMINING_BEAN_NAME_EXC\", ex);\n169               }\n170           }\n171   \n172           if (null == beanName) {\n173               LogUtils.log(LOG, Level.FINE, \"COULD_NOT_DETERMINE_BEAN_NAME_MSG\",\n174                            beanInstance.getClass().getName());\n175           }\n176   \n177           return beanName;\n178       }\n",
            "cost": 0.10889,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/bus/blueprint/ConfigurerImpl.java:166:37",
            "status": "corpus",
            "valid_path": "NO",
            "id": 48
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java:\n 605       public static InputStream getClasspathResourceStream(String path, Class<?> callingClass, Bus bus) {\n 606           InputStream is = ClassLoaderUtils.getResourceAsStream(path, callingClass);\n 607           return is == null ? getResource(path, InputStream.class, bus) : is;\n 608       }\n 615       public static <T> T getResource(String path, Class<T> resourceClass, Bus bus) {\n 616           if (bus != null) {\n 617               ResourceManager rm = bus.getExtension(ResourceManager.class);\n 618               if (rm != null) {\n 619                   return rm.resolveResource(path, resourceClass);\n 620               }\n 621           }\n 622           return null;\n 623       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerBus.java:\n169       public final <T> T getExtension(Class<T> extensionType) {\n170           Object obj = extensions.get(extensionType);\n171           if (obj == null) {\n172               if (missingExtensions.contains(extensionType)) {\n173                   //already know we cannot find it\n174                   return null;\n175               }\n176               ConfiguredBeanLocator loc = (ConfiguredBeanLocator)extensions.get(ConfiguredBeanLocator.class);\n177               if (loc == null) {\n178                   loc = createConfiguredBeanLocator();\n179               }\n180               if (loc != null) {\n181                   obj = loc.getBeanOfType(extensionType.getName(), extensionType);\n182                   if (obj != null) {\n183                       extensions.put(extensionType, obj);\n184                   } else {\n185                       //force loading\n186                       Collection<?> objs = loc.getBeansOfType(extensionType);\n187                       if (objs != null && !objs.isEmpty()) {\n188                           extensions.put(extensionType, objs.iterator().next());\n189                       }\n190                       obj = extensions.get(extensionType);\n191                   }\n192               }\n193           }\n194           if (null != obj) {\n195               return extensionType.cast(obj);\n196           }\n197           //record that it couldn't be found to avoid expensive searches again in the future\n198           missingExtensions.add(extensionType);\n199           return null;\n200       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerImpl.java:\n186       final void loadAndRegister(Extension e) {\n187           Class<?> cls;\n188           if (null != e.getInterfaceName() && !\"\".equals(e.getInterfaceName())) {\n189               cls = e.loadInterface(loader);\n190           }  else {\n191               cls = e.getClassObject(loader);\n192           }\n193           if (null != activated && null != cls && null != activated.get(cls)) {\n194               return;\n195           }\n196   \n197           synchronized (e) {\n198               Object obj = e.load(loader, bus);\n199               if (obj == null) {\n200                   return;\n201               }\n202   \n203               if (null != activated) {\n204                   Configurer configurer = (Configurer)(activated.get(Configurer.class));\n205                   if (null != configurer) {\n206                       configurer.configureBean(obj);\n207                   }\n208               }\n209   \n210               // let the object know for which namespaces it has been activated\n211               ResourceResolver namespacesResolver = null;\n212               if (null != e.getNamespaces()) {\n213                   namespacesResolver = new SinglePropertyResolver(ACTIVATION_NAMESPACES_PROPERTY_NAME,\n214                                                                   e.getNamespaces());\n215                   resourceManager.addResourceResolver(namespacesResolver);\n216               }\n217   \n218               // Since we need to support spring2.5 by removing @Resource(\"activationNamespaces\")\n219               // Now we call the setActivationNamespaces method directly here\n220               if (e.getNamespaces() != null && !e.getNamespaces().isEmpty()) {\n221                   invokeSetterActivationNSMethod(obj, e.getNamespaces());\n222               }\n223   \n224               ResourceInjector injector = new ResourceInjector(resourceManager);\n225   \n226               try {\n227                   injector.inject(obj);\n228                   injector.construct(obj);\n229               } finally {\n230                   if (null != namespacesResolver) {\n231                       resourceManager.removeResourceResolver(namespacesResolver);\n232                   }\n233               }\n234   \n235               if (null != activated) {\n236                   if (cls == null) {\n237                       cls = obj.getClass();\n238                   }\n239                   activated.put(cls, obj);\n240               }\n241           }\n242       }\n298       public <T> T getBeanOfType(String name, Class<T> type) {\n299           if (name == null) {\n300               return null;\n301           }\n302           Extension ex = all.get(name);\n303           if (ex != null) {\n304               if (ex.getLoadedObject() == null) {\n305                   loadAndRegister(ex);\n306               }\n307               return type.cast(ex.getLoadedObject());\n308           }\n309           return null;\n310       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/blueprint/ConfigurerImpl.java:\n 97       public void configureBean(Object beanInstance) {\n 98           configureBean(null, beanInstance, true);\n 99       }\n104       public synchronized void configureBean(String bn, Object beanInstance, boolean checkWildcards) {\n105           if (null == bn) {\n106               bn = getBeanName(beanInstance);\n107           }\n108   \n109           if (null == bn) {\n110               return;\n111           }\n112           if (checkWildcards) {\n113               configureWithWildCard(bn, beanInstance);\n114           }\n115   \n116           if (container instanceof ExtendedBlueprintContainer) {\n117               try {\n118                   final ComponentMetadata cm = container.getComponentMetadata(bn);\n119                   if (cm instanceof BeanMetadata) {\n120                       ((ExtendedBlueprintContainer)container).injectBeanInstance((BeanMetadata)cm, beanInstance);\n121                   }\n122               } catch (NoSuchComponentException nsce) {\n123               }\n124           }\n125       }\n149       protected String getBeanName(Object beanInstance) {\n150           if (beanInstance instanceof Configurable) {\n151               return ((Configurable)beanInstance).getBeanName();\n152           }\n153           String beanName = null;\n154           Method m = null;\n155           try {\n156               m = beanInstance.getClass().getDeclaredMethod(\"getBeanName\", (Class[])null);\n157           } catch (NoSuchMethodException ex) {\n158               try {\n159                   m = beanInstance.getClass().getMethod(\"getBeanName\", (Class[])null);\n160               } catch (NoSuchMethodException e) {\n161                   //ignore\n162               }\n163           }\n164           if (m != null) {\n165               try {\n166                   beanName = (String)(m.invoke(beanInstance));\n167               } catch (Exception ex) {\n168                   LogUtils.log(LOG, Level.WARNING, \"ERROR_DETERMINING_BEAN_NAME_EXC\", ex);\n169               }\n170           }\n171   \n172           if (null == beanName) {\n173               LogUtils.log(LOG, Level.FINE, \"COULD_NOT_DETERMINE_BEAN_NAME_MSG\",\n174                            beanInstance.getClass().getName());\n175           }\n176   \n177           return beanName;\n178       }\n",
            "cost": 0.10679,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/bus/blueprint/ConfigurerImpl.java:166:46",
            "status": "corpus",
            "valid_path": "NO",
            "id": 49
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java:\n 605       public static InputStream getClasspathResourceStream(String path, Class<?> callingClass, Bus bus) {\n 606           InputStream is = ClassLoaderUtils.getResourceAsStream(path, callingClass);\n 607           return is == null ? getResource(path, InputStream.class, bus) : is;\n 608       }\n 615       public static <T> T getResource(String path, Class<T> resourceClass, Bus bus) {\n 616           if (bus != null) {\n 617               ResourceManager rm = bus.getExtension(ResourceManager.class);\n 618               if (rm != null) {\n 619                   return rm.resolveResource(path, resourceClass);\n 620               }\n 621           }\n 622           return null;\n 623       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/resource/DefaultResourceManager.java:\n 57       public final <T> T resolveResource(String name, Class<T> type) {\n 58           return findResource(name, type, false, registeredResolvers);\n 59       }\n100       private <T> T findResource(String name, Class<T> type, boolean asStream,\n101                                  List<ResourceResolver> resolvers) {\n102           if (!firstCalled) {\n103               onFirstResolve();\n104           }\n105   \n106           if (LOG.isLoggable(Level.FINE)) {\n107               LOG.fine(\"resolving resource <\" + name + \">\" + (asStream ? \" as stream \"\n108                                                               : \" type <\" + type + \">\"));\n109           }\n110   \n111           T ret = null;\n112   \n113           for (ResourceResolver rr : resolvers != null ? resolvers : registeredResolvers) {\n114               if (asStream) {\n115                   ret = type.cast(rr.getAsStream(name));\n116               } else {\n117                   try  {\n118                       ret = rr.resolve(name, type);\n119                   } catch (RuntimeException ex) {\n120                       //ResourceResolver.resolve method expected to \n121                       //return an instance of the resource or null if the\n122                       //resource cannot be resolved. So we just catch \n123                       //Unchecked exceptions during resolving resource and log it.   \n124                       //So other ResourceResolver get chance to be used\n125                       if (LOG.isLoggable(Level.FINE)) {\n126                           LOG.log(Level.FINE, \n127                                \"run into exception when using\" + rr.getClass().getName(), ex);\n128                       }\n129   \n130                   }\n131               }\n132               if (ret != null) {\n133                   break;\n134               }\n135           }\n136           return ret;\n137       }\n\nsrc/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletContextResourceResolver.java:\n56       public final <T> T resolve(final String entryName, final Class<T> clz) {\n57   \n58           if (clz.isAssignableFrom(URL.class)) {\n59               if (urlMap.containsKey(entryName)) {\n60                   return clz.cast(urlMap.get(entryName));\n61               }\n62               try {\n63                   URL url = servletContext.getResource(entryName);\n64                   if (url != null\n65                       && \"file\".equals(url.getProtocol())\n66                       && !(new File(url.toURI()).exists())) {\n67                       url = null;\n68                   }\n69                   if (url != null) {\n70                       urlMap.put(url.toString(), url);\n71                       return clz.cast(url);\n72                   }\n73               } catch (MalformedURLException e) {\n74                   //fallthrough\n75               } catch (URISyntaxException e) {\n76                   //ignore\n77               }\n78               try {\n79                   URL url = servletContext.getResource(\"/\" + entryName);\n80                   if (url != null\n81                       && \"file\".equals(url.getProtocol())\n82                       && !(new File(url.toURI()).exists())) {\n83                       url = null;\n84                   }\n85                   if (url != null) {\n86                       urlMap.put(url.toString(), url);\n87                       return clz.cast(url);\n88                   }\n89               } catch (MalformedURLException | URISyntaxException e1) {\n90                   //ignore\n91               }\n92           } else if (clz.isAssignableFrom(InputStream.class)) {\n93               return clz.cast(getAsStream(entryName));\n94           }\n95           return null;\n96       }\n",
            "cost": 0.09763,
            "harness_id": "id_3",
            "sanitizer": "File read/write hook path",
            "sink": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletContextResourceResolver.java:63:54",
            "status": "corpus",
            "valid_path": "NO",
            "id": 50
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java:\n 605       public static InputStream getClasspathResourceStream(String path, Class<?> callingClass, Bus bus) {\n 606           InputStream is = ClassLoaderUtils.getResourceAsStream(path, callingClass);\n 607           return is == null ? getResource(path, InputStream.class, bus) : is;\n 608       }\n 615       public static <T> T getResource(String path, Class<T> resourceClass, Bus bus) {\n 616           if (bus != null) {\n 617               ResourceManager rm = bus.getExtension(ResourceManager.class);\n 618               if (rm != null) {\n 619                   return rm.resolveResource(path, resourceClass);\n 620               }\n 621           }\n 622           return null;\n 623       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/resource/DefaultResourceManager.java:\n 57       public final <T> T resolveResource(String name, Class<T> type) {\n 58           return findResource(name, type, false, registeredResolvers);\n 59       }\n100       private <T> T findResource(String name, Class<T> type, boolean asStream,\n101                                  List<ResourceResolver> resolvers) {\n102           if (!firstCalled) {\n103               onFirstResolve();\n104           }\n105   \n106           if (LOG.isLoggable(Level.FINE)) {\n107               LOG.fine(\"resolving resource <\" + name + \">\" + (asStream ? \" as stream \"\n108                                                               : \" type <\" + type + \">\"));\n109           }\n110   \n111           T ret = null;\n112   \n113           for (ResourceResolver rr : resolvers != null ? resolvers : registeredResolvers) {\n114               if (asStream) {\n115                   ret = type.cast(rr.getAsStream(name));\n116               } else {\n117                   try  {\n118                       ret = rr.resolve(name, type);\n119                   } catch (RuntimeException ex) {\n120                       //ResourceResolver.resolve method expected to \n121                       //return an instance of the resource or null if the\n122                       //resource cannot be resolved. So we just catch \n123                       //Unchecked exceptions during resolving resource and log it.   \n124                       //So other ResourceResolver get chance to be used\n125                       if (LOG.isLoggable(Level.FINE)) {\n126                           LOG.log(Level.FINE, \n127                                \"run into exception when using\" + rr.getClass().getName(), ex);\n128                       }\n129   \n130                   }\n131               }\n132               if (ret != null) {\n133                   break;\n134               }\n135           }\n136           return ret;\n137       }\n\nsrc/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletContextResourceResolver.java:\n56       public final <T> T resolve(final String entryName, final Class<T> clz) {\n57   \n58           if (clz.isAssignableFrom(URL.class)) {\n59               if (urlMap.containsKey(entryName)) {\n60                   return clz.cast(urlMap.get(entryName));\n61               }\n62               try {\n63                   URL url = servletContext.getResource(entryName);\n64                   if (url != null\n65                       && \"file\".equals(url.getProtocol())\n66                       && !(new File(url.toURI()).exists())) {\n67                       url = null;\n68                   }\n69                   if (url != null) {\n70                       urlMap.put(url.toString(), url);\n71                       return clz.cast(url);\n72                   }\n73               } catch (MalformedURLException e) {\n74                   //fallthrough\n75               } catch (URISyntaxException e) {\n76                   //ignore\n77               }\n78               try {\n79                   URL url = servletContext.getResource(\"/\" + entryName);\n80                   if (url != null\n81                       && \"file\".equals(url.getProtocol())\n82                       && !(new File(url.toURI()).exists())) {\n83                       url = null;\n84                   }\n85                   if (url != null) {\n86                       urlMap.put(url.toString(), url);\n87                       return clz.cast(url);\n88                   }\n89               } catch (MalformedURLException | URISyntaxException e1) {\n90                   //ignore\n91               }\n92           } else if (clz.isAssignableFrom(InputStream.class)) {\n93               return clz.cast(getAsStream(entryName));\n94           }\n95           return null;\n96       }\n",
            "cost": 0.09788,
            "harness_id": "id_3",
            "sanitizer": "File read/write hook path",
            "sink": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletContextResourceResolver.java:79:54",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 51
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/BusFactory.java:\n 95       public static synchronized Bus getDefaultBus() {\n 96           return getDefaultBus(true);\n 97       }\n105       public static synchronized Bus getDefaultBus(boolean createIfNeeded) {\n106           if (defaultBus == null && createIfNeeded) {\n107               defaultBus = newInstance().createBus();\n108           }\n109           if (defaultBus == null) {\n110               // never set up.\n111               return null;\n112           }\n113           return defaultBus;\n114       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/CXFBusFactory.java:\n31       public Bus createBus() {\n32           return createBus(new HashMap<>());\n33       }\n35       public Bus createBus(Map<Class<?>, Object> e) {\n36           return createBus(e, new HashMap<>());\n37       }\n39       public Bus createBus(Map<Class<?>, Object> e, Map<String, Object> properties) {\n40           ExtensionManagerBus bus = new ExtensionManagerBus(e, properties);\n41           possiblySetDefaultBus(bus);\n42           initializeBus(bus);\n43           bus.initialize();\n44           return bus;\n45       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerBus.java:\n241       public void initialize() {\n242           setState(BusState.INITIALIZING);\n243   \n244           Collection<? extends BusCreationListener> ls = getExtension(ConfiguredBeanLocator.class)\n245               .getBeansOfType(BusCreationListener.class);\n246           for (BusCreationListener l : ls) {\n247               l.busCreated(this);\n248           }\n249   \n250           doInitializeInternal();\n251   \n252           BusLifeCycleManager lifeCycleManager = this.getExtension(BusLifeCycleManager.class);\n253           if (null != lifeCycleManager) {\n254               lifeCycleManager.initComplete();\n255           }\n256           setState(BusState.RUNNING);\n257       }\n259       protected void doInitializeInternal() {\n260           extensionManager.initialize();\n261           initializeFeatures();\n262       }\n268       protected void initializeFeatures() {\n269           loadAdditionalFeatures();\n270           for (Feature f : features) {\n271               f.initialize(this);\n272           }\n273       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/feature/AbstractPortableFeature.java:\n51       default void initialize(Bus bus) {\n52           doInitializeProvider(bus, bus);\n53       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/feature/LoggingFeature.java:\n143           @Override\n144           public void doInitializeProvider(InterceptorProvider provider, Bus bus) {\n145               if (limit == DEFAULT_LIMIT && inLocation == null\n146                       && outLocation == null && !prettyLogging) {\n147                   provider.getInInterceptors().add(IN);\n148                   provider.getInFaultInterceptors().add(IN);\n149                   provider.getOutInterceptors().add(OUT);\n150                   provider.getOutFaultInterceptors().add(OUT);\n151               } else {\n152                   LoggingInInterceptor in = new LoggingInInterceptor(limit);\n153                   in.setOutputLocation(inLocation);\n154                   in.setPrettyLogging(prettyLogging);\n155                   in.setShowBinaryContent(showBinary);\n156                   LoggingOutInterceptor out = new LoggingOutInterceptor(limit);\n157                   out.setOutputLocation(outLocation);\n158                   out.setPrettyLogging(prettyLogging);\n159                   out.setShowBinaryContent(showBinary);\n160   \n161                   provider.getInInterceptors().add(in);\n162                   provider.getInFaultInterceptors().add(in);\n163                   provider.getOutInterceptors().add(out);\n164                   provider.getOutFaultInterceptors().add(out);\n165               }\n166           }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/interceptor/AbstractLoggingInterceptor.java:\n114       public void setOutputLocation(String s) {\n115           if (s == null || \"<logger>\".equals(s)) {\n116               writer = null;\n117           } else if (\"<stdout>\".equals(s)) {\n118               writer = new PrintWriter(System.out, true);\n119           } else if (\"<stderr>\".equals(s)) {\n120               writer = new PrintWriter(System.err, true);\n121           } else {\n122               try {\n123                   URI uri = new URI(s);\n124                   File file = new File(uri);\n125                   writer = new PrintWriter(new FileWriter(file, true), true);\n126               } catch (Exception ex) {\n127                   getLogger().log(Level.WARNING, \"Error configuring log location \" + s, ex);\n128               }\n129           }\n130       }\n",
            "cost": 0.09976,
            "harness_id": "id_3",
            "sanitizer": "File read/write hook path",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/interceptor/AbstractLoggingInterceptor.java:125:57",
            "status": "corpus",
            "valid_path": "NO",
            "id": 52
        },
        {
            "blob": [
                "R0VUADEALi4vLi4vLi4vLi4vamF6emVyLXRyYXZlcnNhbA=="
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java:\n 605       public static InputStream getClasspathResourceStream(String path, Class<?> callingClass, Bus bus) {\n 606           InputStream is = ClassLoaderUtils.getResourceAsStream(path, callingClass);\n 607           return is == null ? getResource(path, InputStream.class, bus) : is;\n 608       }\n 615       public static <T> T getResource(String path, Class<T> resourceClass, Bus bus) {\n 616           if (bus != null) {\n 617               ResourceManager rm = bus.getExtension(ResourceManager.class);\n 618               if (rm != null) {\n 619                   return rm.resolveResource(path, resourceClass);\n 620               }\n 621           }\n 622           return null;\n 623       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/resource/DefaultResourceManager.java:\n 57       public final <T> T resolveResource(String name, Class<T> type) {\n 58           return findResource(name, type, false, registeredResolvers);\n 59       }\n100       private <T> T findResource(String name, Class<T> type, boolean asStream,\n101                                  List<ResourceResolver> resolvers) {\n102           if (!firstCalled) {\n103               onFirstResolve();\n104           }\n105   \n106           if (LOG.isLoggable(Level.FINE)) {\n107               LOG.fine(\"resolving resource <\" + name + \">\" + (asStream ? \" as stream \"\n108                                                               : \" type <\" + type + \">\"));\n109           }\n110   \n111           T ret = null;\n112   \n113           for (ResourceResolver rr : resolvers != null ? resolvers : registeredResolvers) {\n114               if (asStream) {\n115                   ret = type.cast(rr.getAsStream(name));\n116               } else {\n117                   try  {\n118                       ret = rr.resolve(name, type);\n119                   } catch (RuntimeException ex) {\n120                       //ResourceResolver.resolve method expected to \n121                       //return an instance of the resource or null if the\n122                       //resource cannot be resolved. So we just catch \n123                       //Unchecked exceptions during resolving resource and log it.   \n124                       //So other ResourceResolver get chance to be used\n125                       if (LOG.isLoggable(Level.FINE)) {\n126                           LOG.log(Level.FINE, \n127                                \"run into exception when using\" + rr.getClass().getName(), ex);\n128                       }\n129   \n130                   }\n131               }\n132               if (ret != null) {\n133                   break;\n134               }\n135           }\n136           return ret;\n137       }\n\nsrc/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletContextResourceResolver.java:\n45       public final InputStream getAsStream(final String string) {\n46           if (urlMap.containsKey(string)) {\n47               try {\n48                   return urlMap.get(string).openStream();\n49               } catch (IOException e) {\n50                   //ignore\n51               }\n52           }\n53           return servletContext.getResourceAsStream(string);\n54       }\n",
            "cost": 0.6562749999999999,
            "harness_id": "id_3",
            "sanitizer": "File read/write hook path",
            "sink": "src/cxf/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletContextResourceResolver.java:53:51",
            "status": "corpus",
            "valid_path": "YES",
            "id": 53
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1934       protected SchemaWriter createSchemaWriter(ResourceTypes resourceTypes, JAXBContext context, UriInfo ui) {\n1935           // if neither externalSchemaLinks nor externalSchemasCache is set\n1936           // then JAXBContext will be used to generate the schema\n1937           if (externalSchemaLinks != null && externalSchemasCache == null) {\n1938               return new ExternalSchemaWriter(externalSchemaLinks, ui);\n1939           } else if (externalSchemasCache != null) {\n1940               return new StringSchemaWriter(externalSchemasCache, externalSchemaLinks, ui);\n1941           } else {\n1942               SchemaCollection coll = getSchemaCollection(resourceTypes, context);\n1943               if (coll != null) {\n1944                   return new SchemaCollectionWriter(coll);\n1945               }\n1946           }\n1947           return null;\n1948       }\n1977           StringSchemaWriter(List<String> schemas, List<URI> links, UriInfo ui) {\n1978               this.theSchemas = new LinkedList<>();\n1979               // we'll need to do the proper schema caching eventually\n1980               for (String s : schemas) {\n1981                   XMLSource source = new XMLSource(new ByteArrayInputStream(s.getBytes(StandardCharsets.UTF_8)));\n1982                   source.setBuffering();\n1983                   Map<String, String> locs = getLocationsMap(source, \"import\", links, ui);\n1984                   locs.putAll(getLocationsMap(source, \"include\", links, ui));\n1985                   String actualSchema = !locs.isEmpty() ? transformSchema(s, locs) : s;\n1986                   theSchemas.add(actualSchema);\n1987               }\n1988           }\n1990           private Map<String, String> getLocationsMap(XMLSource source, String elementName, List<URI> links,\n1991                                                       UriInfo ui) {\n1992               Map<String, String> nsMap = Collections.singletonMap(\"xs\", Constants.URI_2001_SCHEMA_XSD);\n1993               String[] locations = source.getValues(\"/*/xs:\" + elementName + \"/@schemaLocation\", nsMap);\n1994   \n1995               Map<String, String> locs = new HashMap<>();\n1996               if (locations == null) {\n1997                   return locs;\n1998               }\n1999   \n2000               for (String loc : locations) {\n2001                   try {\n2002                       URI uri = URI.create(loc);\n2003                       if (!uri.isAbsolute()) {\n2004                           if (links != null) {\n2005                               for (URI overwriteURI : links) {\n2006                                   if (overwriteURI.toString().endsWith(loc)) {\n2007                                       if (overwriteURI.isAbsolute()) {\n2008                                           locs.put(loc, overwriteURI.toString());\n2009                                       } else {\n2010                                           locs.put(loc, ui.getBaseUriBuilder().path(overwriteURI.toString())\n2011                                               .build().toString());\n2012                                       }\n2013                                       break;\n2014                                   }\n2015                               }\n2016                           }\n2017                           if (!locs.containsKey(loc)) {\n2018                               locs.put(loc, ui.getBaseUriBuilder().path(loc).build().toString());\n2019                           }\n2020                       }\n2021                   } catch (Exception ex) {\n2022                       // continue\n2023                   }\n2024               }\n2025               return locs;\n2026           }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/ext/xml/XMLSource.java:\n147       @SuppressWarnings(\"unchecked\")\n148       public <T> T[] getNodes(String expression, Map<String, String> namespaces, Class<T> cls) {\n149   \n150           NodeList nodes = (NodeList)evaluate(expression, namespaces, XPathConstants.NODESET);\n151           if (nodes == null || nodes.getLength() == 0) {\n152               return null;\n153           }\n154           T[] values = (T[])Array.newInstance(cls, nodes.getLength());\n155           for (int i = 0; i < nodes.getLength(); i++) {\n156               Node node = nodes.item(i);\n157               if (InjectionUtils.isPrimitive(cls)) {\n158                   values[i] = (T)readPrimitiveValue(node, cls);\n159               } else {\n160                   values[i] = readNode(node, cls);\n161               }\n162           }\n163           return values;\n164       }\n262       public String[] getValues(String expression, Map<String, String> namespaces) {\n263           return getNodes(expression, namespaces, String.class);\n264       }\n345       private <T> Object readPrimitiveValue(Node node, Class<T> cls) {\n346           if (String.class == cls) {\n347               if (node.getNodeType() == Node.ELEMENT_NODE) {\n348                   return StaxUtils.toString((Element)node);\n349               }\n350               return cls.cast(node.getNodeValue());\n351           }\n352   \n353           return InjectionUtils.convertStringToPrimitive(node.getNodeValue(), cls);\n354       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java:\n1464       public static Object convertStringToPrimitive(String value, Class<?> cls) {\n1465           return convertStringToPrimitive(value, cls, new Annotation[]{});\n1466       }\n1467       public static Object convertStringToPrimitive(String value, Class<?> cls, Annotation[] anns) {\n1468           Message m = JAXRSUtils.getCurrentMessage();\n1469           Object obj = createFromParameterHandler(value, cls, cls, anns, m);\n1470           if (obj != null) {\n1471               return obj;\n1472           }\n1473           if (String.class == cls) {\n1474               return value;\n1475           } else if (cls.isPrimitive()) {\n1476               return PrimitiveUtils.read(value, cls);\n1477           } else if (cls.isEnum()) {\n1478               if (m != null && !MessageUtils.getContextualBoolean(m, ENUM_CONVERSION_CASE_SENSITIVE, false)) {\n1479                   obj = invokeValueOf(value.toUpperCase(), cls);\n1480               }\n1481               if (obj == null) {\n1482                   try {\n1483                       obj = invokeValueOf(value, cls);\n1484                   } catch (RuntimeException ex) {\n1485                       if (m == null) {\n1486                           obj = invokeValueOf(value.toUpperCase(), cls);\n1487                       } else {\n1488                           throw ex;\n1489                       }\n1490                   }\n1491               }\n1492               return obj;\n1493           } else {\n1494               try {\n1495                   Constructor<?> c = cls.getConstructor(new Class<?>[]{String.class});\n1496                   return c.newInstance(new Object[]{value});\n1497               } catch (Throwable ex) {\n1498                   // try valueOf\n1499               }\n1500               return invokeValueOf(value, cls);\n1501           }\n1502       }\n1504       private static Object invokeValueOf(String value, Class<?> cls) {\n1505           try {\n1506               Method m = cls.getMethod(\"valueOf\", new Class[]{String.class});\n1507               return m.invoke(null, value);\n1508           } catch (Exception ex) {\n1509               throw new RuntimeException(ex);\n1510           }\n1511       }\n",
            "cost": 0.106855,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java:1507:20",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 54
        },
        {
            "blob": [
                "R0VUADAAamF6IisiemVy"
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1934       protected SchemaWriter createSchemaWriter(ResourceTypes resourceTypes, JAXBContext context, UriInfo ui) {\n1935           // if neither externalSchemaLinks nor externalSchemasCache is set\n1936           // then JAXBContext will be used to generate the schema\n1937           if (externalSchemaLinks != null && externalSchemasCache == null) {\n1938               return new ExternalSchemaWriter(externalSchemaLinks, ui);\n1939           } else if (externalSchemasCache != null) {\n1940               return new StringSchemaWriter(externalSchemasCache, externalSchemaLinks, ui);\n1941           } else {\n1942               SchemaCollection coll = getSchemaCollection(resourceTypes, context);\n1943               if (coll != null) {\n1944                   return new SchemaCollectionWriter(coll);\n1945               }\n1946           }\n1947           return null;\n1948       }\n1977           StringSchemaWriter(List<String> schemas, List<URI> links, UriInfo ui) {\n1978               this.theSchemas = new LinkedList<>();\n1979               // we'll need to do the proper schema caching eventually\n1980               for (String s : schemas) {\n1981                   XMLSource source = new XMLSource(new ByteArrayInputStream(s.getBytes(StandardCharsets.UTF_8)));\n1982                   source.setBuffering();\n1983                   Map<String, String> locs = getLocationsMap(source, \"import\", links, ui);\n1984                   locs.putAll(getLocationsMap(source, \"include\", links, ui));\n1985                   String actualSchema = !locs.isEmpty() ? transformSchema(s, locs) : s;\n1986                   theSchemas.add(actualSchema);\n1987               }\n1988           }\n1990           private Map<String, String> getLocationsMap(XMLSource source, String elementName, List<URI> links,\n1991                                                       UriInfo ui) {\n1992               Map<String, String> nsMap = Collections.singletonMap(\"xs\", Constants.URI_2001_SCHEMA_XSD);\n1993               String[] locations = source.getValues(\"/*/xs:\" + elementName + \"/@schemaLocation\", nsMap);\n1994   \n1995               Map<String, String> locs = new HashMap<>();\n1996               if (locations == null) {\n1997                   return locs;\n1998               }\n1999   \n2000               for (String loc : locations) {\n2001                   try {\n2002                       URI uri = URI.create(loc);\n2003                       if (!uri.isAbsolute()) {\n2004                           if (links != null) {\n2005                               for (URI overwriteURI : links) {\n2006                                   if (overwriteURI.toString().endsWith(loc)) {\n2007                                       if (overwriteURI.isAbsolute()) {\n2008                                           locs.put(loc, overwriteURI.toString());\n2009                                       } else {\n2010                                           locs.put(loc, ui.getBaseUriBuilder().path(overwriteURI.toString())\n2011                                               .build().toString());\n2012                                       }\n2013                                       break;\n2014                                   }\n2015                               }\n2016                           }\n2017                           if (!locs.containsKey(loc)) {\n2018                               locs.put(loc, ui.getBaseUriBuilder().path(loc).build().toString());\n2019                           }\n2020                       }\n2021                   } catch (Exception ex) {\n2022                       // continue\n2023                   }\n2024               }\n2025               return locs;\n2026           }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/ext/xml/XMLSource.java:\n147       @SuppressWarnings(\"unchecked\")\n148       public <T> T[] getNodes(String expression, Map<String, String> namespaces, Class<T> cls) {\n149   \n150           NodeList nodes = (NodeList)evaluate(expression, namespaces, XPathConstants.NODESET);\n151           if (nodes == null || nodes.getLength() == 0) {\n152               return null;\n153           }\n154           T[] values = (T[])Array.newInstance(cls, nodes.getLength());\n155           for (int i = 0; i < nodes.getLength(); i++) {\n156               Node node = nodes.item(i);\n157               if (InjectionUtils.isPrimitive(cls)) {\n158                   values[i] = (T)readPrimitiveValue(node, cls);\n159               } else {\n160                   values[i] = readNode(node, cls);\n161               }\n162           }\n163           return values;\n164       }\n262       public String[] getValues(String expression, Map<String, String> namespaces) {\n263           return getNodes(expression, namespaces, String.class);\n264       }\n345       private <T> Object readPrimitiveValue(Node node, Class<T> cls) {\n346           if (String.class == cls) {\n347               if (node.getNodeType() == Node.ELEMENT_NODE) {\n348                   return StaxUtils.toString((Element)node);\n349               }\n350               return cls.cast(node.getNodeValue());\n351           }\n352   \n353           return InjectionUtils.convertStringToPrimitive(node.getNodeValue(), cls);\n354       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java:\n 378       public static void injectThroughMethod(Object requestObject,\n 379                                                  Method method,\n 380                                                  Object parameterValue,\n 381                                                  Message inMessage) {\n 382           try {\n 383               Method methodToInvoke = checkProxy(method, requestObject);\n 384               methodToInvoke.invoke(requestObject, new Object[]{parameterValue});\n 385           } catch (IllegalAccessException ex) {\n 386               reportServerError(\"METHOD_ACCESS_FAILURE\", method.getName());\n 387           } catch (InvocationTargetException ex) {\n 388               LOG.log(Level.SEVERE, ex.getCause().getMessage(), ex);\n 389               Response r = JAXRSUtils.convertFaultToResponse(ex.getCause(), inMessage);\n 390               if (r != null) {\n 391                   inMessage.getExchange().put(Response.class, r);\n 392                   throw new WebApplicationException();\n 393               }\n 394               reportServerError(\"METHOD_ACCESS_FAILURE\", method.getName());\n 395           } catch (Exception ex) {\n 396               reportServerError(\"METHOD_INJECTION_FAILURE\", method.getName());\n 397           }\n 398       }\n 551       public static <T> Optional<ParamConverter<T>> getParamConverter(Class<T> pClass,\n 552               Type genericType, Annotation[] anns, Message message) {\n 553           \n 554           if (message != null) {\n 555               ServerProviderFactory pf = ServerProviderFactory.getInstance(message);\n 556               ParamConverter<T> pm = pf.createParameterHandler(pClass, genericType, anns, message);\n 557               return Optional.ofNullable(pm);\n 558           }\n 559           \n 560           return Optional.empty();\n 561       }\n 563       public static <T> T createFromParameterHandler(String value,\n 564                                                       Class<T> pClass,\n 565                                                       Type genericType,\n 566                                                       Annotation[] anns,\n 567                                                       Message message) {\n 568           return getParamConverter(pClass, genericType, anns, message)\n 569               .map(pm -> pm.fromString(value))\n 570               .orElse(null);\n 571       }\n1257       public static void injectContexts(Object requestObject,\n1258                                    AbstractResourceInfo resource,\n1259                                    Message message) {\n1260           if (resource.contextsAvailable()) {\n1261               injectContextMethods(requestObject, resource, message);\n1262               injectContextFields(requestObject, resource, message);\n1263               injectConstructorProxies(requestObject, resource, message);\n1264           }\n1265       }\n1267       @SuppressWarnings(\"unchecked\")\n1268       public static void injectContextMethods(Object requestObject,\n1269                                               AbstractResourceInfo cri,\n1270                                               Message message) {\n1271   \n1272           for (Map.Entry<Class<?>, Method> entry : cri.getContextMethods().entrySet()) {\n1273               Method method = entry.getValue();\n1274               if (VALUE_CONTEXTS.contains(method.getParameterTypes()[0].getName()) && cri.isSingleton()) {\n1275                   continue;\n1276               }\n1277               Object o = JAXRSUtils.createContextValue(message,\n1278                                                 method.getGenericParameterTypes()[0],\n1279                                                 entry.getKey());\n1280   \n1281               if (o != null) {\n1282                   if (!cri.isSingleton()) {\n1283                       InjectionUtils.injectThroughMethod(requestObject, method, o, message);\n1284                   } else {\n1285                       ThreadLocalProxy<Object> proxy\n1286                           = (ThreadLocalProxy<Object>)cri.getContextSetterProxy(method);\n1287                       if (proxy != null) {\n1288                           proxy.set(o);\n1289                       }\n1290                   }\n1291   \n1292               }\n1293           }\n1294       }\n1464       public static Object convertStringToPrimitive(String value, Class<?> cls) {\n1465           return convertStringToPrimitive(value, cls, new Annotation[]{});\n1466       }\n1467       public static Object convertStringToPrimitive(String value, Class<?> cls, Annotation[] anns) {\n1468           Message m = JAXRSUtils.getCurrentMessage();\n1469           Object obj = createFromParameterHandler(value, cls, cls, anns, m);\n1470           if (obj != null) {\n1471               return obj;\n1472           }\n1473           if (String.class == cls) {\n1474               return value;\n1475           } else if (cls.isPrimitive()) {\n1476               return PrimitiveUtils.read(value, cls);\n1477           } else if (cls.isEnum()) {\n1478               if (m != null && !MessageUtils.getContextualBoolean(m, ENUM_CONVERSION_CASE_SENSITIVE, false)) {\n1479                   obj = invokeValueOf(value.toUpperCase(), cls);\n1480               }\n1481               if (obj == null) {\n1482                   try {\n1483                       obj = invokeValueOf(value, cls);\n1484                   } catch (RuntimeException ex) {\n1485                       if (m == null) {\n1486                           obj = invokeValueOf(value.toUpperCase(), cls);\n1487                       } else {\n1488                           throw ex;\n1489                       }\n1490                   }\n1491               }\n1492               return obj;\n1493           } else {\n1494               try {\n1495                   Constructor<?> c = cls.getConstructor(new Class<?>[]{String.class});\n1496                   return c.newInstance(new Object[]{value});\n1497               } catch (Throwable ex) {\n1498                   // try valueOf\n1499               }\n1500               return invokeValueOf(value, cls);\n1501           }\n1502       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/ProviderFactory.java:\n 337       public <T> ParamConverter<T> createParameterHandler(Class<T> paramType,\n 338                                                           Type genericType,\n 339                                                           Annotation[] anns,\n 340                                                           Message m) {\n 341   \n 342           anns = anns != null ? anns : new Annotation[]{};\n 343           for (ProviderInfo<ParamConverterProvider> pi : paramConverters) {\n 344               injectContextValues(pi, m);\n 345               ParamConverter<T> converter = pi.getProvider().getConverter(paramType, genericType, anns);\n 346               if (converter != null) {\n 347                   return converter;\n 348               }\n 349               pi.clearThreadLocalProxies();\n 350           }\n 351           return null;\n 352       }\n 696       protected void injectContextValues(ProviderInfo<?> pi, Message m) {\n 697           if (m != null) {\n 698               InjectionUtils.injectContexts(pi.getProvider(), pi, m);\n 699           }\n 700       }\n",
            "cost": 0.8119000000000001,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java:384:13",
            "status": "corpus",
            "valid_path": "YES",
            "id": 55
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java:\n 605       public static InputStream getClasspathResourceStream(String path, Class<?> callingClass, Bus bus) {\n 606           InputStream is = ClassLoaderUtils.getResourceAsStream(path, callingClass);\n 607           return is == null ? getResource(path, InputStream.class, bus) : is;\n 608       }\n 615       public static <T> T getResource(String path, Class<T> resourceClass, Bus bus) {\n 616           if (bus != null) {\n 617               ResourceManager rm = bus.getExtension(ResourceManager.class);\n 618               if (rm != null) {\n 619                   return rm.resolveResource(path, resourceClass);\n 620               }\n 621           }\n 622           return null;\n 623       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerBus.java:\n169       public final <T> T getExtension(Class<T> extensionType) {\n170           Object obj = extensions.get(extensionType);\n171           if (obj == null) {\n172               if (missingExtensions.contains(extensionType)) {\n173                   //already know we cannot find it\n174                   return null;\n175               }\n176               ConfiguredBeanLocator loc = (ConfiguredBeanLocator)extensions.get(ConfiguredBeanLocator.class);\n177               if (loc == null) {\n178                   loc = createConfiguredBeanLocator();\n179               }\n180               if (loc != null) {\n181                   obj = loc.getBeanOfType(extensionType.getName(), extensionType);\n182                   if (obj != null) {\n183                       extensions.put(extensionType, obj);\n184                   } else {\n185                       //force loading\n186                       Collection<?> objs = loc.getBeansOfType(extensionType);\n187                       if (objs != null && !objs.isEmpty()) {\n188                           extensions.put(extensionType, objs.iterator().next());\n189                       }\n190                       obj = extensions.get(extensionType);\n191                   }\n192               }\n193           }\n194           if (null != obj) {\n195               return extensionType.cast(obj);\n196           }\n197           //record that it couldn't be found to avoid expensive searches again in the future\n198           missingExtensions.add(extensionType);\n199           return null;\n200       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerImpl.java:\n186       final void loadAndRegister(Extension e) {\n187           Class<?> cls;\n188           if (null != e.getInterfaceName() && !\"\".equals(e.getInterfaceName())) {\n189               cls = e.loadInterface(loader);\n190           }  else {\n191               cls = e.getClassObject(loader);\n192           }\n193           if (null != activated && null != cls && null != activated.get(cls)) {\n194               return;\n195           }\n196   \n197           synchronized (e) {\n198               Object obj = e.load(loader, bus);\n199               if (obj == null) {\n200                   return;\n201               }\n202   \n203               if (null != activated) {\n204                   Configurer configurer = (Configurer)(activated.get(Configurer.class));\n205                   if (null != configurer) {\n206                       configurer.configureBean(obj);\n207                   }\n208               }\n209   \n210               // let the object know for which namespaces it has been activated\n211               ResourceResolver namespacesResolver = null;\n212               if (null != e.getNamespaces()) {\n213                   namespacesResolver = new SinglePropertyResolver(ACTIVATION_NAMESPACES_PROPERTY_NAME,\n214                                                                   e.getNamespaces());\n215                   resourceManager.addResourceResolver(namespacesResolver);\n216               }\n217   \n218               // Since we need to support spring2.5 by removing @Resource(\"activationNamespaces\")\n219               // Now we call the setActivationNamespaces method directly here\n220               if (e.getNamespaces() != null && !e.getNamespaces().isEmpty()) {\n221                   invokeSetterActivationNSMethod(obj, e.getNamespaces());\n222               }\n223   \n224               ResourceInjector injector = new ResourceInjector(resourceManager);\n225   \n226               try {\n227                   injector.inject(obj);\n228                   injector.construct(obj);\n229               } finally {\n230                   if (null != namespacesResolver) {\n231                       resourceManager.removeResourceResolver(namespacesResolver);\n232                   }\n233               }\n234   \n235               if (null != activated) {\n236                   if (cls == null) {\n237                       cls = obj.getClass();\n238                   }\n239                   activated.put(cls, obj);\n240               }\n241           }\n242       }\n298       public <T> T getBeanOfType(String name, Class<T> type) {\n299           if (name == null) {\n300               return null;\n301           }\n302           Extension ex = all.get(name);\n303           if (ex != null) {\n304               if (ex.getLoadedObject() == null) {\n305                   loadAndRegister(ex);\n306               }\n307               return type.cast(ex.getLoadedObject());\n308           }\n309           return null;\n310       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/common/injection/ResourceInjector.java:\n116       public void inject(Object o) {\n117           inject(o, o.getClass());\n118       }\n120       public void inject(Object o, Class<?> claz) {\n121           if (processable(claz, o)) {\n122               AnnotationProcessor processor = new AnnotationProcessor(o);\n123               processor.accept(this, claz);\n124           }\n125       }\n223       public final void visitMethod(final Method method, final Annotation annotation) {\n224   \n225           assert annotation instanceof Resource : annotation;\n226   \n227           Resource res = (Resource)annotation;\n228   \n229           String resourceName = getResourceName(res, method);\n230           Class<?> clz = getResourceType(res, method);\n231   \n232           Object resource = resolveResource(resourceName, clz);\n233           if (resource == null\n234               && \"\".equals(res.name())) {\n235               resource = resolveResource(null, clz);\n236           }\n237           if (resource != null) {\n238               invokeSetter(method, resource);\n239           } else {\n240               LOG.log(Level.FINE, \"RESOURCE_RESOLVE_FAILED\", new Object[] {resourceName, clz});\n241           }\n242       }\n286       private void invokeSetter(Method method, Object resource) {\n287           try {\n288               ReflectionUtil.setAccessible(method);\n289               if (method.getDeclaringClass().isAssignableFrom(getTarget().getClass())) {\n290                   method.invoke(getTarget(), resource);\n291               } else { // deal with the proxy setter method\n292                   Method targetMethod = getTarget().getClass().getMethod(method.getName(),\n293                                                                          method.getParameterTypes());\n294                   targetMethod.invoke(getTarget(), resource);\n295               }\n296           } catch (IllegalAccessException e) {\n297               LOG.log(Level.SEVERE, \"INJECTION_SETTER_NOT_VISIBLE\", method);\n298           } catch (InvocationTargetException | SecurityException e) {\n299               LogUtils.log(LOG, Level.SEVERE, \"INJECTION_SETTER_RAISED_EXCEPTION\", e, method);\n300           } catch (NoSuchMethodException e) {\n301               LOG.log(Level.SEVERE, \"INJECTION_SETTER_METHOD_NOT_FOUND\", new Object[] {method.getName()});\n302           }\n303       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/common/annotation/AnnotationProcessor.java:\n 61       public void accept(AnnotationVisitor visitor, Class<?> claz) {\n 62   \n 63           if (visitor == null) {\n 64               throw new IllegalArgumentException();\n 65           }\n 66   \n 67           annotationTypes = visitor.getTargetAnnotations();\n 68           visitor.setTarget(target);\n 69           //recursively check annotation in super class\n 70           processClass(visitor, claz);\n 71           processFields(visitor, claz);\n 72           processMethods(visitor, claz);\n 73       }\n 80       private void processMethods(AnnotationVisitor visitor, Class<? extends Object> targetClass) {\n 81   \n 82           if (targetClass.getSuperclass() != null) {\n 83               processMethods(visitor, targetClass.getSuperclass());\n 84           }\n 85           for (Method element : ReflectionUtil.getDeclaredMethods(targetClass)) {\n 86               for (Class<? extends Annotation> clz : annotationTypes) {\n 87                   Annotation ann = element.getAnnotation(clz);\n 88                   if (ann != null) {\n 89                       visitor.visitMethod(element, ann);\n 90                   }\n 91               }\n 92           }\n 93       }\n",
            "cost": 0.11277,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/common/injection/ResourceInjector.java:290:17",
            "status": "corpus",
            "valid_path": "NO",
            "id": 56
        },
        {
            "blob": [
                "R0VUADAAamF6emVy"
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java:\n 605       public static InputStream getClasspathResourceStream(String path, Class<?> callingClass, Bus bus) {\n 606           InputStream is = ClassLoaderUtils.getResourceAsStream(path, callingClass);\n 607           return is == null ? getResource(path, InputStream.class, bus) : is;\n 608       }\n 615       public static <T> T getResource(String path, Class<T> resourceClass, Bus bus) {\n 616           if (bus != null) {\n 617               ResourceManager rm = bus.getExtension(ResourceManager.class);\n 618               if (rm != null) {\n 619                   return rm.resolveResource(path, resourceClass);\n 620               }\n 621           }\n 622           return null;\n 623       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerBus.java:\n169       public final <T> T getExtension(Class<T> extensionType) {\n170           Object obj = extensions.get(extensionType);\n171           if (obj == null) {\n172               if (missingExtensions.contains(extensionType)) {\n173                   //already know we cannot find it\n174                   return null;\n175               }\n176               ConfiguredBeanLocator loc = (ConfiguredBeanLocator)extensions.get(ConfiguredBeanLocator.class);\n177               if (loc == null) {\n178                   loc = createConfiguredBeanLocator();\n179               }\n180               if (loc != null) {\n181                   obj = loc.getBeanOfType(extensionType.getName(), extensionType);\n182                   if (obj != null) {\n183                       extensions.put(extensionType, obj);\n184                   } else {\n185                       //force loading\n186                       Collection<?> objs = loc.getBeansOfType(extensionType);\n187                       if (objs != null && !objs.isEmpty()) {\n188                           extensions.put(extensionType, objs.iterator().next());\n189                       }\n190                       obj = extensions.get(extensionType);\n191                   }\n192               }\n193           }\n194           if (null != obj) {\n195               return extensionType.cast(obj);\n196           }\n197           //record that it couldn't be found to avoid expensive searches again in the future\n198           missingExtensions.add(extensionType);\n199           return null;\n200       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerImpl.java:\n186       final void loadAndRegister(Extension e) {\n187           Class<?> cls;\n188           if (null != e.getInterfaceName() && !\"\".equals(e.getInterfaceName())) {\n189               cls = e.loadInterface(loader);\n190           }  else {\n191               cls = e.getClassObject(loader);\n192           }\n193           if (null != activated && null != cls && null != activated.get(cls)) {\n194               return;\n195           }\n196   \n197           synchronized (e) {\n198               Object obj = e.load(loader, bus);\n199               if (obj == null) {\n200                   return;\n201               }\n202   \n203               if (null != activated) {\n204                   Configurer configurer = (Configurer)(activated.get(Configurer.class));\n205                   if (null != configurer) {\n206                       configurer.configureBean(obj);\n207                   }\n208               }\n209   \n210               // let the object know for which namespaces it has been activated\n211               ResourceResolver namespacesResolver = null;\n212               if (null != e.getNamespaces()) {\n213                   namespacesResolver = new SinglePropertyResolver(ACTIVATION_NAMESPACES_PROPERTY_NAME,\n214                                                                   e.getNamespaces());\n215                   resourceManager.addResourceResolver(namespacesResolver);\n216               }\n217   \n218               // Since we need to support spring2.5 by removing @Resource(\"activationNamespaces\")\n219               // Now we call the setActivationNamespaces method directly here\n220               if (e.getNamespaces() != null && !e.getNamespaces().isEmpty()) {\n221                   invokeSetterActivationNSMethod(obj, e.getNamespaces());\n222               }\n223   \n224               ResourceInjector injector = new ResourceInjector(resourceManager);\n225   \n226               try {\n227                   injector.inject(obj);\n228                   injector.construct(obj);\n229               } finally {\n230                   if (null != namespacesResolver) {\n231                       resourceManager.removeResourceResolver(namespacesResolver);\n232                   }\n233               }\n234   \n235               if (null != activated) {\n236                   if (cls == null) {\n237                       cls = obj.getClass();\n238                   }\n239                   activated.put(cls, obj);\n240               }\n241           }\n242       }\n298       public <T> T getBeanOfType(String name, Class<T> type) {\n299           if (name == null) {\n300               return null;\n301           }\n302           Extension ex = all.get(name);\n303           if (ex != null) {\n304               if (ex.getLoadedObject() == null) {\n305                   loadAndRegister(ex);\n306               }\n307               return type.cast(ex.getLoadedObject());\n308           }\n309           return null;\n310       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/common/injection/ResourceInjector.java:\n116       public void inject(Object o) {\n117           inject(o, o.getClass());\n118       }\n120       public void inject(Object o, Class<?> claz) {\n121           if (processable(claz, o)) {\n122               AnnotationProcessor processor = new AnnotationProcessor(o);\n123               processor.accept(this, claz);\n124           }\n125       }\n223       public final void visitMethod(final Method method, final Annotation annotation) {\n224   \n225           assert annotation instanceof Resource : annotation;\n226   \n227           Resource res = (Resource)annotation;\n228   \n229           String resourceName = getResourceName(res, method);\n230           Class<?> clz = getResourceType(res, method);\n231   \n232           Object resource = resolveResource(resourceName, clz);\n233           if (resource == null\n234               && \"\".equals(res.name())) {\n235               resource = resolveResource(null, clz);\n236           }\n237           if (resource != null) {\n238               invokeSetter(method, resource);\n239           } else {\n240               LOG.log(Level.FINE, \"RESOURCE_RESOLVE_FAILED\", new Object[] {resourceName, clz});\n241           }\n242       }\n286       private void invokeSetter(Method method, Object resource) {\n287           try {\n288               ReflectionUtil.setAccessible(method);\n289               if (method.getDeclaringClass().isAssignableFrom(getTarget().getClass())) {\n290                   method.invoke(getTarget(), resource);\n291               } else { // deal with the proxy setter method\n292                   Method targetMethod = getTarget().getClass().getMethod(method.getName(),\n293                                                                          method.getParameterTypes());\n294                   targetMethod.invoke(getTarget(), resource);\n295               }\n296           } catch (IllegalAccessException e) {\n297               LOG.log(Level.SEVERE, \"INJECTION_SETTER_NOT_VISIBLE\", method);\n298           } catch (InvocationTargetException | SecurityException e) {\n299               LogUtils.log(LOG, Level.SEVERE, \"INJECTION_SETTER_RAISED_EXCEPTION\", e, method);\n300           } catch (NoSuchMethodException e) {\n301               LOG.log(Level.SEVERE, \"INJECTION_SETTER_METHOD_NOT_FOUND\", new Object[] {method.getName()});\n302           }\n303       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/common/annotation/AnnotationProcessor.java:\n 61       public void accept(AnnotationVisitor visitor, Class<?> claz) {\n 62   \n 63           if (visitor == null) {\n 64               throw new IllegalArgumentException();\n 65           }\n 66   \n 67           annotationTypes = visitor.getTargetAnnotations();\n 68           visitor.setTarget(target);\n 69           //recursively check annotation in super class\n 70           processClass(visitor, claz);\n 71           processFields(visitor, claz);\n 72           processMethods(visitor, claz);\n 73       }\n 80       private void processMethods(AnnotationVisitor visitor, Class<? extends Object> targetClass) {\n 81   \n 82           if (targetClass.getSuperclass() != null) {\n 83               processMethods(visitor, targetClass.getSuperclass());\n 84           }\n 85           for (Method element : ReflectionUtil.getDeclaredMethods(targetClass)) {\n 86               for (Class<? extends Annotation> clz : annotationTypes) {\n 87                   Annotation ann = element.getAnnotation(clz);\n 88                   if (ann != null) {\n 89                       visitor.visitMethod(element, ann);\n 90                   }\n 91               }\n 92           }\n 93       }\n",
            "cost": 0.77537,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/common/injection/ResourceInjector.java:294:17",
            "status": "corpus",
            "valid_path": "YES",
            "id": 57
        },
        {
            "blob": [
                "R0VUADAAL3BhdGgvdG8vcmVzb3VyY2UueHNs"
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java:\n 605       public static InputStream getClasspathResourceStream(String path, Class<?> callingClass, Bus bus) {\n 606           InputStream is = ClassLoaderUtils.getResourceAsStream(path, callingClass);\n 607           return is == null ? getResource(path, InputStream.class, bus) : is;\n 608       }\n 615       public static <T> T getResource(String path, Class<T> resourceClass, Bus bus) {\n 616           if (bus != null) {\n 617               ResourceManager rm = bus.getExtension(ResourceManager.class);\n 618               if (rm != null) {\n 619                   return rm.resolveResource(path, resourceClass);\n 620               }\n 621           }\n 622           return null;\n 623       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerBus.java:\n169       public final <T> T getExtension(Class<T> extensionType) {\n170           Object obj = extensions.get(extensionType);\n171           if (obj == null) {\n172               if (missingExtensions.contains(extensionType)) {\n173                   //already know we cannot find it\n174                   return null;\n175               }\n176               ConfiguredBeanLocator loc = (ConfiguredBeanLocator)extensions.get(ConfiguredBeanLocator.class);\n177               if (loc == null) {\n178                   loc = createConfiguredBeanLocator();\n179               }\n180               if (loc != null) {\n181                   obj = loc.getBeanOfType(extensionType.getName(), extensionType);\n182                   if (obj != null) {\n183                       extensions.put(extensionType, obj);\n184                   } else {\n185                       //force loading\n186                       Collection<?> objs = loc.getBeansOfType(extensionType);\n187                       if (objs != null && !objs.isEmpty()) {\n188                           extensions.put(extensionType, objs.iterator().next());\n189                       }\n190                       obj = extensions.get(extensionType);\n191                   }\n192               }\n193           }\n194           if (null != obj) {\n195               return extensionType.cast(obj);\n196           }\n197           //record that it couldn't be found to avoid expensive searches again in the future\n198           missingExtensions.add(extensionType);\n199           return null;\n200       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBeanLocator.java:\n144       public <T> Collection<? extends T> getBeansOfType(Class<T> type) {\n145           Set<String> s = new LinkedHashSet<>(Arrays.asList(context.getBeanNamesForType(type,\n146                                                                                               false,\n147                                                                                               false)));\n148           s.removeAll(passThroughs);\n149           List<T> lst = new LinkedList<>();\n150           for (String n : s) {\n151               lst.add(type.cast(context.getBean(n, type)));\n152           }\n153           lst.addAll(orig.getBeansOfType(type));\n154           if (lst.isEmpty()) {\n155               tryOSGI(lst, type);\n156           }\n157           return lst;\n158       }\n159       private <T> void tryOSGI(Collection<T> lst, Class<T> type) {\n160           if (!osgi) {\n161               return;\n162           }\n163           try {\n164               //use a little reflection to allow this to work without the spring-dm jars\n165               //for the non-osgi cases\n166               Class<?> contextClass = findContextClass(bundleContext.getClass());\n167   \n168               Method m = contextClass.getMethod(\"getServiceReference\", String.class);\n169               ReflectionUtil.setAccessible(m);\n170               Object o = m.invoke(bundleContext, type.getName());\n171               if (o != null) {\n172                   m = contextClass.getMethod(\"getService\", m.getReturnType());\n173                   ReflectionUtil.setAccessible(m);\n174                   o = m.invoke(bundleContext, o);\n175                   lst.add(type.cast(o));\n176               }\n177           } catch (NoSuchMethodException e) {\n178               osgi = false;\n179               //not using OSGi\n180           } catch (Throwable e) {\n181               //ignore\n182               LOG.log(Level.WARNING, \"Could not get service for \" + type.getName(), e);\n183           }\n184       }\n",
            "cost": 0.6959350000000001,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBeanLocator.java:170:24",
            "status": "corpus",
            "valid_path": "YES",
            "id": 58
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java:\n 605       public static InputStream getClasspathResourceStream(String path, Class<?> callingClass, Bus bus) {\n 606           InputStream is = ClassLoaderUtils.getResourceAsStream(path, callingClass);\n 607           return is == null ? getResource(path, InputStream.class, bus) : is;\n 608       }\n 615       public static <T> T getResource(String path, Class<T> resourceClass, Bus bus) {\n 616           if (bus != null) {\n 617               ResourceManager rm = bus.getExtension(ResourceManager.class);\n 618               if (rm != null) {\n 619                   return rm.resolveResource(path, resourceClass);\n 620               }\n 621           }\n 622           return null;\n 623       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerBus.java:\n169       public final <T> T getExtension(Class<T> extensionType) {\n170           Object obj = extensions.get(extensionType);\n171           if (obj == null) {\n172               if (missingExtensions.contains(extensionType)) {\n173                   //already know we cannot find it\n174                   return null;\n175               }\n176               ConfiguredBeanLocator loc = (ConfiguredBeanLocator)extensions.get(ConfiguredBeanLocator.class);\n177               if (loc == null) {\n178                   loc = createConfiguredBeanLocator();\n179               }\n180               if (loc != null) {\n181                   obj = loc.getBeanOfType(extensionType.getName(), extensionType);\n182                   if (obj != null) {\n183                       extensions.put(extensionType, obj);\n184                   } else {\n185                       //force loading\n186                       Collection<?> objs = loc.getBeansOfType(extensionType);\n187                       if (objs != null && !objs.isEmpty()) {\n188                           extensions.put(extensionType, objs.iterator().next());\n189                       }\n190                       obj = extensions.get(extensionType);\n191                   }\n192               }\n193           }\n194           if (null != obj) {\n195               return extensionType.cast(obj);\n196           }\n197           //record that it couldn't be found to avoid expensive searches again in the future\n198           missingExtensions.add(extensionType);\n199           return null;\n200       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBeanLocator.java:\n144       public <T> Collection<? extends T> getBeansOfType(Class<T> type) {\n145           Set<String> s = new LinkedHashSet<>(Arrays.asList(context.getBeanNamesForType(type,\n146                                                                                               false,\n147                                                                                               false)));\n148           s.removeAll(passThroughs);\n149           List<T> lst = new LinkedList<>();\n150           for (String n : s) {\n151               lst.add(type.cast(context.getBean(n, type)));\n152           }\n153           lst.addAll(orig.getBeansOfType(type));\n154           if (lst.isEmpty()) {\n155               tryOSGI(lst, type);\n156           }\n157           return lst;\n158       }\n159       private <T> void tryOSGI(Collection<T> lst, Class<T> type) {\n160           if (!osgi) {\n161               return;\n162           }\n163           try {\n164               //use a little reflection to allow this to work without the spring-dm jars\n165               //for the non-osgi cases\n166               Class<?> contextClass = findContextClass(bundleContext.getClass());\n167   \n168               Method m = contextClass.getMethod(\"getServiceReference\", String.class);\n169               ReflectionUtil.setAccessible(m);\n170               Object o = m.invoke(bundleContext, type.getName());\n171               if (o != null) {\n172                   m = contextClass.getMethod(\"getService\", m.getReturnType());\n173                   ReflectionUtil.setAccessible(m);\n174                   o = m.invoke(bundleContext, o);\n175                   lst.add(type.cast(o));\n176               }\n177           } catch (NoSuchMethodException e) {\n178               osgi = false;\n179               //not using OSGi\n180           } catch (Throwable e) {\n181               //ignore\n182               LOG.log(Level.WARNING, \"Could not get service for \" + type.getName(), e);\n183           }\n184       }\n",
            "cost": 0.09932500000000001,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBeanLocator.java:174:21",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 59
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/BusFactory.java:\n 95       public static synchronized Bus getDefaultBus() {\n 96           return getDefaultBus(true);\n 97       }\n105       public static synchronized Bus getDefaultBus(boolean createIfNeeded) {\n106           if (defaultBus == null && createIfNeeded) {\n107               defaultBus = newInstance().createBus();\n108           }\n109           if (defaultBus == null) {\n110               // never set up.\n111               return null;\n112           }\n113           return defaultBus;\n114       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBusFactory.java:\n 82       public Bus createBus() {\n 83           return createBus((String)null);\n 84       }\n 93       public Bus createBus(String cfgFile) {\n 94           return createBus(cfgFile, defaultBusNotExists());\n 95       }\n101       protected Bus finishCreatingBus(ConfigurableApplicationContext bac) {\n102           final Bus bus = (Bus)bac.getBean(Bus.DEFAULT_BUS_ID);\n103   \n104           bus.setExtension(bac, ApplicationContext.class);\n105           if (bac instanceof BusApplicationContext) {\n106               bus.setExtension((BusApplicationContext)bac, BusApplicationContext.class);\n107           }\n108           possiblySetDefaultBus(bus);\n109   \n110           initializeBus(bus);\n111   \n112           registerApplicationContextLifeCycleListener(bus, bac);\n113   \n114           if (bus instanceof SpringBus && defaultBusNotExists()) {\n115               ((SpringBus)bus).setCloseContext(true);\n116           }\n117           return bus;\n118       }\n120       public Bus createBus(String cfgFile, boolean includeDefaults) {\n121           if (cfgFile == null) {\n122               return createBus((String[])null, includeDefaults);\n123           }\n124           return createBus(new String[] {cfgFile}, includeDefaults);\n125       }\n127       public Bus createBus(String[] cfgFiles, boolean includeDefaults) {\n128           try {\n129               String userCfgFile\n130                   = SystemPropertyAction.getPropertyOrNull(Configurer.USER_CFG_FILE_PROPERTY_NAME);\n131               String sysCfgFileUrl\n132                   = SystemPropertyAction.getPropertyOrNull(Configurer.USER_CFG_FILE_PROPERTY_URL);\n133               final Resource r = BusApplicationContext.findResource(Configurer.DEFAULT_USER_CFG_FILE);\n134   \n135               boolean exists = true;\n136               if (r != null) {\n137                   exists = AccessController\n138                       .doPrivileged(new PrivilegedAction<Boolean>() {\n139                           public Boolean run() {\n140                               return r.exists();\n141                           }\n142                       });\n143               }\n144               if (context == null && userCfgFile == null && cfgFiles == null && sysCfgFileUrl == null\n145                   && (r == null || !exists) && includeDefaults) {\n146                   return new org.apache.cxf.bus.CXFBusFactory().createBus();\n147               }\n148               return finishCreatingBus(createApplicationContext(cfgFiles, includeDefaults));\n149           } catch (BeansException ex) {\n150               LogUtils.log(LOG, Level.WARNING, \"APP_CONTEXT_CREATION_FAILED_MSG\", ex, (Object[])null);\n151               throw new RuntimeException(ex);\n152           }\n153       }\n201       void registerApplicationContextLifeCycleListener(Bus bus, ConfigurableApplicationContext bac) {\n202           BusLifeCycleManager lm = bus.getExtension(BusLifeCycleManager.class);\n203           if (null != lm) {\n204               lm.registerLifeCycleListener(new BusApplicationContextLifeCycleListener(bac));\n205           }\n206       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/managers/CXFBusLifeCycleManager.java:\n 62       public final void registerLifeCycleListener(BusLifeCycleListener listener) {\n 63           listeners.addIfAbsent(listener);\n 64           if (initCalled) {\n 65               listener.initComplete();\n 66           }\n 67   \n 68       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/osgi/OSGIBusListener.java:\n 96       public void initComplete() {\n 97           ManagedWorkQueueList wqList = bus.getExtension(ManagedWorkQueueList.class);\n 98           if (wqList != null) {\n 99               WorkQueueManager manager = bus.getExtension(WorkQueueManager.class);\n100               wqList.addAllToWorkQueueManager(manager);\n101           }\n102           registerBusAsService();\n103       }\n212       private void registerBusAsService() {\n213           BundleContext context = bus.getExtension(BundleContext.class);\n214           if (context != null) {\n215               Map<String, Object> props = new HashMap<>();\n216               props.put(CONTEXT_SYMBOLIC_NAME_PROPERTY, context.getBundle().getSymbolicName());\n217               props.put(CONTEXT_VERSION_PROPERTY, getBundleVersion(context.getBundle()));\n218               props.put(CONTEXT_NAME_PROPERTY, bus.getId());\n219   \n220               service = context.registerService(Bus.class.getName(), bus, CollectionUtils.toDictionary(props));\n221           }\n222       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBus.java:\n132       @Override\n133       public String getId() {\n134           if (id == null) {\n135               try {\n136                   Class<?> clsbc = Class.forName(\"org.osgi.framework.BundleContext\");\n137                   Class<?> clsb = Class.forName(\"org.osgi.framework.Bundle\");\n138                   Object o = getExtension(clsbc);\n139                   Object o2 = clsbc.getMethod(\"getBundle\").invoke(o);\n140                   String s = (String)clsb.getMethod(\"getSymbolicName\").invoke(o2);\n141                   id = s + '-' + DEFAULT_BUS_ID + Integer.toString(this.hashCode());\n142               } catch (Throwable t) {\n143                   id = super.getId();\n144               }\n145           }\n146           return id;\n147       }\n",
            "cost": 0.106665,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBus.java:139:29",
            "status": "corpus",
            "valid_path": "NO",
            "id": 60
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/BusFactory.java:\n 95       public static synchronized Bus getDefaultBus() {\n 96           return getDefaultBus(true);\n 97       }\n105       public static synchronized Bus getDefaultBus(boolean createIfNeeded) {\n106           if (defaultBus == null && createIfNeeded) {\n107               defaultBus = newInstance().createBus();\n108           }\n109           if (defaultBus == null) {\n110               // never set up.\n111               return null;\n112           }\n113           return defaultBus;\n114       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBusFactory.java:\n 82       public Bus createBus() {\n 83           return createBus((String)null);\n 84       }\n 93       public Bus createBus(String cfgFile) {\n 94           return createBus(cfgFile, defaultBusNotExists());\n 95       }\n101       protected Bus finishCreatingBus(ConfigurableApplicationContext bac) {\n102           final Bus bus = (Bus)bac.getBean(Bus.DEFAULT_BUS_ID);\n103   \n104           bus.setExtension(bac, ApplicationContext.class);\n105           if (bac instanceof BusApplicationContext) {\n106               bus.setExtension((BusApplicationContext)bac, BusApplicationContext.class);\n107           }\n108           possiblySetDefaultBus(bus);\n109   \n110           initializeBus(bus);\n111   \n112           registerApplicationContextLifeCycleListener(bus, bac);\n113   \n114           if (bus instanceof SpringBus && defaultBusNotExists()) {\n115               ((SpringBus)bus).setCloseContext(true);\n116           }\n117           return bus;\n118       }\n120       public Bus createBus(String cfgFile, boolean includeDefaults) {\n121           if (cfgFile == null) {\n122               return createBus((String[])null, includeDefaults);\n123           }\n124           return createBus(new String[] {cfgFile}, includeDefaults);\n125       }\n127       public Bus createBus(String[] cfgFiles, boolean includeDefaults) {\n128           try {\n129               String userCfgFile\n130                   = SystemPropertyAction.getPropertyOrNull(Configurer.USER_CFG_FILE_PROPERTY_NAME);\n131               String sysCfgFileUrl\n132                   = SystemPropertyAction.getPropertyOrNull(Configurer.USER_CFG_FILE_PROPERTY_URL);\n133               final Resource r = BusApplicationContext.findResource(Configurer.DEFAULT_USER_CFG_FILE);\n134   \n135               boolean exists = true;\n136               if (r != null) {\n137                   exists = AccessController\n138                       .doPrivileged(new PrivilegedAction<Boolean>() {\n139                           public Boolean run() {\n140                               return r.exists();\n141                           }\n142                       });\n143               }\n144               if (context == null && userCfgFile == null && cfgFiles == null && sysCfgFileUrl == null\n145                   && (r == null || !exists) && includeDefaults) {\n146                   return new org.apache.cxf.bus.CXFBusFactory().createBus();\n147               }\n148               return finishCreatingBus(createApplicationContext(cfgFiles, includeDefaults));\n149           } catch (BeansException ex) {\n150               LogUtils.log(LOG, Level.WARNING, \"APP_CONTEXT_CREATION_FAILED_MSG\", ex, (Object[])null);\n151               throw new RuntimeException(ex);\n152           }\n153       }\n201       void registerApplicationContextLifeCycleListener(Bus bus, ConfigurableApplicationContext bac) {\n202           BusLifeCycleManager lm = bus.getExtension(BusLifeCycleManager.class);\n203           if (null != lm) {\n204               lm.registerLifeCycleListener(new BusApplicationContextLifeCycleListener(bac));\n205           }\n206       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/managers/CXFBusLifeCycleManager.java:\n 62       public final void registerLifeCycleListener(BusLifeCycleListener listener) {\n 63           listeners.addIfAbsent(listener);\n 64           if (initCalled) {\n 65               listener.initComplete();\n 66           }\n 67   \n 68       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/osgi/OSGIBusListener.java:\n 96       public void initComplete() {\n 97           ManagedWorkQueueList wqList = bus.getExtension(ManagedWorkQueueList.class);\n 98           if (wqList != null) {\n 99               WorkQueueManager manager = bus.getExtension(WorkQueueManager.class);\n100               wqList.addAllToWorkQueueManager(manager);\n101           }\n102           registerBusAsService();\n103       }\n212       private void registerBusAsService() {\n213           BundleContext context = bus.getExtension(BundleContext.class);\n214           if (context != null) {\n215               Map<String, Object> props = new HashMap<>();\n216               props.put(CONTEXT_SYMBOLIC_NAME_PROPERTY, context.getBundle().getSymbolicName());\n217               props.put(CONTEXT_VERSION_PROPERTY, getBundleVersion(context.getBundle()));\n218               props.put(CONTEXT_NAME_PROPERTY, bus.getId());\n219   \n220               service = context.registerService(Bus.class.getName(), bus, CollectionUtils.toDictionary(props));\n221           }\n222       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBus.java:\n132       @Override\n133       public String getId() {\n134           if (id == null) {\n135               try {\n136                   Class<?> clsbc = Class.forName(\"org.osgi.framework.BundleContext\");\n137                   Class<?> clsb = Class.forName(\"org.osgi.framework.Bundle\");\n138                   Object o = getExtension(clsbc);\n139                   Object o2 = clsbc.getMethod(\"getBundle\").invoke(o);\n140                   String s = (String)clsb.getMethod(\"getSymbolicName\").invoke(o2);\n141                   id = s + '-' + DEFAULT_BUS_ID + Integer.toString(this.hashCode());\n142               } catch (Throwable t) {\n143                   id = super.getId();\n144               }\n145           }\n146           return id;\n147       }\n",
            "cost": 0.106765,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/bus/spring/SpringBus.java:140:36",
            "status": "corpus",
            "valid_path": "NO",
            "id": 61
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n 432       protected void handleResource(StringBuilder sb, Set<Class<?>> jaxbTypes,\n 433                                     ElementQNameResolver qnameResolver, Map<Class<?>, QName> clsMap,\n 434                                     ClassResourceInfo cri, Set<ClassResourceInfo> visitedResources,\n 435                                     boolean isJson) {\n 436           visitedResources.add(cri);\n 437           Map<Parameter, Object> classParams = getClassParameters(cri);\n 438   \n 439           List<OperationResourceInfo> sortedOps = sortOperationsByPath(cri.getMethodDispatcher()\n 440               .getOperationResourceInfos());\n 441   \n 442           boolean resourceTagOpened = false;\n 443           for (int i = 0; i < sortedOps.size(); i++) {\n 444               OperationResourceInfo ori = sortedOps.get(i);\n 445               if (i > 0 && ignoreOverloadedMethods\n 446                   && ori.getMethodToInvoke().getName().equals(sortedOps.get(i - 1).getMethodToInvoke().getName())) {\n 447                   continue;\n 448               }\n 449               if (ori.getHttpMethod() == null) {\n 450                   Class<?> cls = getMethod(ori).getReturnType();\n 451                   ClassResourceInfo subcri = cri.findResource(cls, cls);\n 452                   if (subcri != null && !visitedResources.contains(subcri)) {\n 453                       startResourceTag(sb, subcri, ori.getURITemplate().getValue());\n 454                       handleDocs(subcri.getServiceClass().getAnnotations(), sb, DocTarget.RESOURCE, true,\n 455                                  isJson);\n 456                       handlePathAndMatrixParams(sb, ori, isJson);\n 457                       handleResource(sb, jaxbTypes, qnameResolver, clsMap, subcri, visitedResources, isJson);\n 458                       sb.append(\"</resource>\");\n 459                   } else {\n 460                       handleDynamicSubresource(sb, jaxbTypes, qnameResolver, clsMap, ori, subcri, isJson);\n 461                   }\n 462                   continue;\n 463               }\n 464               OperationResourceInfo nextOp = i + 1 < sortedOps.size() ? sortedOps.get(i + 1) : null;\n 465               resourceTagOpened = handleOperation(sb, jaxbTypes, qnameResolver, clsMap, ori, classParams,\n 466                                                   nextOp, resourceTagOpened, isJson, i);\n 467           }\n 468       }\n 594       protected boolean handleOperation(StringBuilder sb, Set<Class<?>> jaxbTypes, //NOPMD\n 595                                         ElementQNameResolver qnameResolver, Map<Class<?>, QName> clsMap,\n 596                                         OperationResourceInfo ori, Map<Parameter, Object> classParams,\n 597                                         OperationResourceInfo nextOp, boolean resourceTagOpened,\n 598                                         boolean isJson, int index) {\n 599           Annotation[] anns = getMethod(ori).getAnnotations();\n 600           // CHECKSTYLE:ON\n 601           boolean samePathOperationFollows = singleResourceMultipleMethods && compareOperations(ori, nextOp);\n 602   \n 603           String path = ori.getURITemplate().getValue();\n 604           if (!resourceTagOpened && openResource(path)) {\n 605               resourceTagOpened = true;\n 606               URITemplate template = ori.getClassResourceInfo().getURITemplate();\n 607               if (template != null) {\n 608                   String parentPath = template.getValue();\n 609                   if (parentPath.endsWith(\"/\") && path.startsWith(\"/\") && path.length() > 1) {\n 610                       path = path.substring(1);\n 611                   }\n 612               }\n 613               startResourceTag(sb, ori, getPath(path));\n 614               handleDocs(anns, sb, DocTarget.RESOURCE, false, isJson);\n 615               handlePathAndMatrixClassParams(ori, sb, classParams, isJson);\n 616               handlePathAndMatrixParams(sb, ori, isJson);\n 617           } else if (index == 0) {\n 618               handlePathAndMatrixClassParams(ori, sb, classParams, isJson);\n 619               handlePathAndMatrixParams(sb, ori, isJson);\n 620           }\n 621   \n 622           startMethodTag(sb, ori);\n 623           if (!handleDocs(anns, sb, DocTarget.METHOD, true, isJson)) {\n 624               handleOperJavaDocs(ori, sb);\n 625           }\n 626           int numOfParams = getMethod(ori).getParameterTypes().length;\n 627           if ((numOfParams > 1 || numOfParams == 1 && !ori.isAsync()) || !classParams.isEmpty()) {\n 628   \n 629               startMethodRequestTag(sb, ori);\n 630               handleDocs(anns, sb, DocTarget.REQUEST, false, isJson);\n 631   \n 632               boolean isForm = isFormRequest(ori);\n 633   \n 634               doHandleClassParams(ori, sb, classParams, isJson, ParameterType.QUERY, ParameterType.HEADER);\n 635               doHandleJaxrsBeanParamClassParams(ori, sb, classParams, isJson,\n 636                                                 ParameterType.QUERY, ParameterType.HEADER);\n 637               for (Parameter p : ori.getParameters()) {\n 638                   if (isForm && p.getType() == ParameterType.REQUEST_BODY) {\n 639                       continue;\n 640                   }\n 641                   handleParameter(sb, jaxbTypes, qnameResolver, clsMap, ori, p, isJson);\n 642               }\n 643               if (isForm) {\n 644                   handleFormRepresentation(sb, jaxbTypes, qnameResolver, clsMap, ori, getFormClass(ori), isJson);\n 645               }\n 646               endMethodRequestTag(sb, ori);\n 647           }\n 648           startMethodResponseTag(sb, ori);\n 649           Class<?> returnType = getMethod(ori).getReturnType();\n 650           boolean isVoid = void.class == returnType && !ori.isAsync();\n 651           ResponseStatus responseStatus = getMethod(ori).getAnnotation(ResponseStatus.class);\n 652           if (responseStatus != null) {\n 653               setResponseStatus(sb, responseStatus.value());\n 654           } else if (isVoid) {\n 655               boolean oneway = getMethod(ori).getAnnotation(Oneway.class) != null;\n 656               setResponseStatus(sb, oneway ? Response.Status.ACCEPTED : Response.Status.NO_CONTENT);\n 657           }\n 658           sb.append('>');\n 659           handleDocs(anns, sb, DocTarget.RESPONSE, false, isJson);\n 660           if (!isVoid) {\n 661               handleRepresentation(sb, jaxbTypes, qnameResolver, clsMap, ori, returnType, isJson, false);\n 662           }\n 663           endMethodResponseTag(sb, ori);\n 664   \n 665           endMethodTag(sb, ori);\n 666   \n 667           if (resourceTagOpened && !samePathOperationFollows) {\n 668               endResourceTag(sb, ori);\n 669               resourceTagOpened = false;\n 670           }\n 671           return resourceTagOpened;\n 672       }\n 751       protected void doHandleClassParams(OperationResourceInfo ori,\n 752                                          StringBuilder sb,\n 753                                          Map<Parameter, Object> params,\n 754                                          boolean isJson,\n 755                                          ParameterType... pType) {\n 756           Set<ParameterType> pTypes = new LinkedHashSet<>(Arrays.asList(pType));\n 757           for (Map.Entry<Parameter, Object> entry : params.entrySet()) {\n 758               Parameter pm = entry.getKey();\n 759               Object obj = entry.getValue();\n 760               if (pTypes.contains(pm.getType())) {\n 761                   Class<?> cls = obj instanceof Method ? ((Method)obj).getParameterTypes()[0] : ((Field)obj)\n 762                       .getType();\n 763                   Type type = obj instanceof Method\n 764                       ? ((Method)obj).getGenericParameterTypes()[0] : ((Field)obj).getGenericType();\n 765                   Annotation[] ann = obj instanceof Method\n 766                       ? ((Method)obj).getParameterAnnotations()[0] : ((Field)obj).getAnnotations();\n 767                   doWriteParam(ori, sb, pm, cls, type, pm.getName(), ann, isJson);\n 768               }\n 769           }\n 770       }\n 959       protected void doWriteParam(OperationResourceInfo ori,\n 960                                   StringBuilder sb,\n 961                                   Parameter pm,\n 962                                   Class<?> type,\n 963                                   Type genericType,\n 964                                   String paramName,\n 965                                   Annotation[] anns,\n 966                                   boolean isJson) {\n 967         //CHECKSTYLE:ON\n 968           ParameterType pType = pm.getType();\n 969           boolean isForm = isFormParameter(pm, type, anns);\n 970           if (paramName == null && isForm) {\n 971               Multipart m = AnnotationUtils.getAnnotation(anns, Multipart.class);\n 972               if (m != null) {\n 973                   paramName = m.value();\n 974               }\n 975           }\n 976           sb.append(\"<param name=\\\"\").append(paramName).append(\"\\\" \");\n 977           String style = ParameterType.PATH == pType ? \"template\" : isForm\n 978               ? \"query\" : ParameterType.REQUEST_BODY == pType ? \"plain\" : pType.toString().toLowerCase();\n 979           sb.append(\"style=\\\"\").append(style).append('\"');\n 980           if (pm.getDefaultValue() != null) {\n 981               sb.append(\" default=\\\"\").append(xmlEncodeIfNeeded(pm.getDefaultValue()))\n 982                   .append('\"');\n 983           }\n 984           if (InjectionUtils.isSupportedCollectionOrArray(type)) {\n 985               type = InjectionUtils.getActualType(genericType);\n 986               sb.append(\" repeating=\\\"true\\\"\");\n 987           }\n 988   \n 989           String value = XmlSchemaPrimitiveUtils.getSchemaRepresentation(type);\n 990           if (value == null) {\n 991               if (type.isEnum()) {\n 992                   value = \"xs:string\";\n 993               } else if (type == InputStream.class) {\n 994                   value = \"xs:anyType\";\n 995               }\n 996           }\n 997           if (value != null) {\n 998               if (isJson) {\n 999                   value = value.substring(3);\n1000               }\n1001               sb.append(\" type=\\\"\").append(value).append('\"');\n1002           }\n1003           if (type.isEnum()) {\n1004               sb.append('>');\n1005               handleDocs(anns, sb, DocTarget.PARAM, true, isJson);\n1006               setEnumOptions(sb, type);\n1007               sb.append(\"</param>\");\n1008           } else {\n1009               addDocsAndCloseElement(ori, pm.getIndex(), sb, anns, \"param\", DocTarget.PARAM, true, isJson);\n1010           }\n1011       }\n1013       private void setEnumOptions(StringBuilder sb, Class<?> enumClass) {\n1014           try {\n1015               Method m = enumClass.getMethod(\"values\", new Class<?>[] {});\n1016               Object[] values = (Object[])m.invoke(null, new Object[] {});\n1017               m = enumClass.getMethod(\"name\", new Class<?>[] {});\n1018               for (Object o : values) {\n1019                   String str = (String)m.invoke(o, new Object[] {});\n1020                   sb.append(\"<option value=\\\"\").append(str).append(\"\\\"/>\");\n1021               }\n1022   \n1023           } catch (Throwable ex) {\n1024               // ignore\n1025           }\n1026       }\n",
            "cost": 0.121385,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:1016:41",
            "status": "corpus",
            "valid_path": "NO",
            "id": 62
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n 432       protected void handleResource(StringBuilder sb, Set<Class<?>> jaxbTypes,\n 433                                     ElementQNameResolver qnameResolver, Map<Class<?>, QName> clsMap,\n 434                                     ClassResourceInfo cri, Set<ClassResourceInfo> visitedResources,\n 435                                     boolean isJson) {\n 436           visitedResources.add(cri);\n 437           Map<Parameter, Object> classParams = getClassParameters(cri);\n 438   \n 439           List<OperationResourceInfo> sortedOps = sortOperationsByPath(cri.getMethodDispatcher()\n 440               .getOperationResourceInfos());\n 441   \n 442           boolean resourceTagOpened = false;\n 443           for (int i = 0; i < sortedOps.size(); i++) {\n 444               OperationResourceInfo ori = sortedOps.get(i);\n 445               if (i > 0 && ignoreOverloadedMethods\n 446                   && ori.getMethodToInvoke().getName().equals(sortedOps.get(i - 1).getMethodToInvoke().getName())) {\n 447                   continue;\n 448               }\n 449               if (ori.getHttpMethod() == null) {\n 450                   Class<?> cls = getMethod(ori).getReturnType();\n 451                   ClassResourceInfo subcri = cri.findResource(cls, cls);\n 452                   if (subcri != null && !visitedResources.contains(subcri)) {\n 453                       startResourceTag(sb, subcri, ori.getURITemplate().getValue());\n 454                       handleDocs(subcri.getServiceClass().getAnnotations(), sb, DocTarget.RESOURCE, true,\n 455                                  isJson);\n 456                       handlePathAndMatrixParams(sb, ori, isJson);\n 457                       handleResource(sb, jaxbTypes, qnameResolver, clsMap, subcri, visitedResources, isJson);\n 458                       sb.append(\"</resource>\");\n 459                   } else {\n 460                       handleDynamicSubresource(sb, jaxbTypes, qnameResolver, clsMap, ori, subcri, isJson);\n 461                   }\n 462                   continue;\n 463               }\n 464               OperationResourceInfo nextOp = i + 1 < sortedOps.size() ? sortedOps.get(i + 1) : null;\n 465               resourceTagOpened = handleOperation(sb, jaxbTypes, qnameResolver, clsMap, ori, classParams,\n 466                                                   nextOp, resourceTagOpened, isJson, i);\n 467           }\n 468       }\n 594       protected boolean handleOperation(StringBuilder sb, Set<Class<?>> jaxbTypes, //NOPMD\n 595                                         ElementQNameResolver qnameResolver, Map<Class<?>, QName> clsMap,\n 596                                         OperationResourceInfo ori, Map<Parameter, Object> classParams,\n 597                                         OperationResourceInfo nextOp, boolean resourceTagOpened,\n 598                                         boolean isJson, int index) {\n 599           Annotation[] anns = getMethod(ori).getAnnotations();\n 600           // CHECKSTYLE:ON\n 601           boolean samePathOperationFollows = singleResourceMultipleMethods && compareOperations(ori, nextOp);\n 602   \n 603           String path = ori.getURITemplate().getValue();\n 604           if (!resourceTagOpened && openResource(path)) {\n 605               resourceTagOpened = true;\n 606               URITemplate template = ori.getClassResourceInfo().getURITemplate();\n 607               if (template != null) {\n 608                   String parentPath = template.getValue();\n 609                   if (parentPath.endsWith(\"/\") && path.startsWith(\"/\") && path.length() > 1) {\n 610                       path = path.substring(1);\n 611                   }\n 612               }\n 613               startResourceTag(sb, ori, getPath(path));\n 614               handleDocs(anns, sb, DocTarget.RESOURCE, false, isJson);\n 615               handlePathAndMatrixClassParams(ori, sb, classParams, isJson);\n 616               handlePathAndMatrixParams(sb, ori, isJson);\n 617           } else if (index == 0) {\n 618               handlePathAndMatrixClassParams(ori, sb, classParams, isJson);\n 619               handlePathAndMatrixParams(sb, ori, isJson);\n 620           }\n 621   \n 622           startMethodTag(sb, ori);\n 623           if (!handleDocs(anns, sb, DocTarget.METHOD, true, isJson)) {\n 624               handleOperJavaDocs(ori, sb);\n 625           }\n 626           int numOfParams = getMethod(ori).getParameterTypes().length;\n 627           if ((numOfParams > 1 || numOfParams == 1 && !ori.isAsync()) || !classParams.isEmpty()) {\n 628   \n 629               startMethodRequestTag(sb, ori);\n 630               handleDocs(anns, sb, DocTarget.REQUEST, false, isJson);\n 631   \n 632               boolean isForm = isFormRequest(ori);\n 633   \n 634               doHandleClassParams(ori, sb, classParams, isJson, ParameterType.QUERY, ParameterType.HEADER);\n 635               doHandleJaxrsBeanParamClassParams(ori, sb, classParams, isJson,\n 636                                                 ParameterType.QUERY, ParameterType.HEADER);\n 637               for (Parameter p : ori.getParameters()) {\n 638                   if (isForm && p.getType() == ParameterType.REQUEST_BODY) {\n 639                       continue;\n 640                   }\n 641                   handleParameter(sb, jaxbTypes, qnameResolver, clsMap, ori, p, isJson);\n 642               }\n 643               if (isForm) {\n 644                   handleFormRepresentation(sb, jaxbTypes, qnameResolver, clsMap, ori, getFormClass(ori), isJson);\n 645               }\n 646               endMethodRequestTag(sb, ori);\n 647           }\n 648           startMethodResponseTag(sb, ori);\n 649           Class<?> returnType = getMethod(ori).getReturnType();\n 650           boolean isVoid = void.class == returnType && !ori.isAsync();\n 651           ResponseStatus responseStatus = getMethod(ori).getAnnotation(ResponseStatus.class);\n 652           if (responseStatus != null) {\n 653               setResponseStatus(sb, responseStatus.value());\n 654           } else if (isVoid) {\n 655               boolean oneway = getMethod(ori).getAnnotation(Oneway.class) != null;\n 656               setResponseStatus(sb, oneway ? Response.Status.ACCEPTED : Response.Status.NO_CONTENT);\n 657           }\n 658           sb.append('>');\n 659           handleDocs(anns, sb, DocTarget.RESPONSE, false, isJson);\n 660           if (!isVoid) {\n 661               handleRepresentation(sb, jaxbTypes, qnameResolver, clsMap, ori, returnType, isJson, false);\n 662           }\n 663           endMethodResponseTag(sb, ori);\n 664   \n 665           endMethodTag(sb, ori);\n 666   \n 667           if (resourceTagOpened && !samePathOperationFollows) {\n 668               endResourceTag(sb, ori);\n 669               resourceTagOpened = false;\n 670           }\n 671           return resourceTagOpened;\n 672       }\n 751       protected void doHandleClassParams(OperationResourceInfo ori,\n 752                                          StringBuilder sb,\n 753                                          Map<Parameter, Object> params,\n 754                                          boolean isJson,\n 755                                          ParameterType... pType) {\n 756           Set<ParameterType> pTypes = new LinkedHashSet<>(Arrays.asList(pType));\n 757           for (Map.Entry<Parameter, Object> entry : params.entrySet()) {\n 758               Parameter pm = entry.getKey();\n 759               Object obj = entry.getValue();\n 760               if (pTypes.contains(pm.getType())) {\n 761                   Class<?> cls = obj instanceof Method ? ((Method)obj).getParameterTypes()[0] : ((Field)obj)\n 762                       .getType();\n 763                   Type type = obj instanceof Method\n 764                       ? ((Method)obj).getGenericParameterTypes()[0] : ((Field)obj).getGenericType();\n 765                   Annotation[] ann = obj instanceof Method\n 766                       ? ((Method)obj).getParameterAnnotations()[0] : ((Field)obj).getAnnotations();\n 767                   doWriteParam(ori, sb, pm, cls, type, pm.getName(), ann, isJson);\n 768               }\n 769           }\n 770       }\n 959       protected void doWriteParam(OperationResourceInfo ori,\n 960                                   StringBuilder sb,\n 961                                   Parameter pm,\n 962                                   Class<?> type,\n 963                                   Type genericType,\n 964                                   String paramName,\n 965                                   Annotation[] anns,\n 966                                   boolean isJson) {\n 967         //CHECKSTYLE:ON\n 968           ParameterType pType = pm.getType();\n 969           boolean isForm = isFormParameter(pm, type, anns);\n 970           if (paramName == null && isForm) {\n 971               Multipart m = AnnotationUtils.getAnnotation(anns, Multipart.class);\n 972               if (m != null) {\n 973                   paramName = m.value();\n 974               }\n 975           }\n 976           sb.append(\"<param name=\\\"\").append(paramName).append(\"\\\" \");\n 977           String style = ParameterType.PATH == pType ? \"template\" : isForm\n 978               ? \"query\" : ParameterType.REQUEST_BODY == pType ? \"plain\" : pType.toString().toLowerCase();\n 979           sb.append(\"style=\\\"\").append(style).append('\"');\n 980           if (pm.getDefaultValue() != null) {\n 981               sb.append(\" default=\\\"\").append(xmlEncodeIfNeeded(pm.getDefaultValue()))\n 982                   .append('\"');\n 983           }\n 984           if (InjectionUtils.isSupportedCollectionOrArray(type)) {\n 985               type = InjectionUtils.getActualType(genericType);\n 986               sb.append(\" repeating=\\\"true\\\"\");\n 987           }\n 988   \n 989           String value = XmlSchemaPrimitiveUtils.getSchemaRepresentation(type);\n 990           if (value == null) {\n 991               if (type.isEnum()) {\n 992                   value = \"xs:string\";\n 993               } else if (type == InputStream.class) {\n 994                   value = \"xs:anyType\";\n 995               }\n 996           }\n 997           if (value != null) {\n 998               if (isJson) {\n 999                   value = value.substring(3);\n1000               }\n1001               sb.append(\" type=\\\"\").append(value).append('\"');\n1002           }\n1003           if (type.isEnum()) {\n1004               sb.append('>');\n1005               handleDocs(anns, sb, DocTarget.PARAM, true, isJson);\n1006               setEnumOptions(sb, type);\n1007               sb.append(\"</param>\");\n1008           } else {\n1009               addDocsAndCloseElement(ori, pm.getIndex(), sb, anns, \"param\", DocTarget.PARAM, true, isJson);\n1010           }\n1011       }\n1013       private void setEnumOptions(StringBuilder sb, Class<?> enumClass) {\n1014           try {\n1015               Method m = enumClass.getMethod(\"values\", new Class<?>[] {});\n1016               Object[] values = (Object[])m.invoke(null, new Object[] {});\n1017               m = enumClass.getMethod(\"name\", new Class<?>[] {});\n1018               for (Object o : values) {\n1019                   String str = (String)m.invoke(o, new Object[] {});\n1020                   sb.append(\"<option value=\\\"\").append(str).append(\"\\\"/>\");\n1021               }\n1022   \n1023           } catch (Throwable ex) {\n1024               // ignore\n1025           }\n1026       }\n",
            "cost": 0.118585,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:1019:38",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 63
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java:\n 605       public static InputStream getClasspathResourceStream(String path, Class<?> callingClass, Bus bus) {\n 606           InputStream is = ClassLoaderUtils.getResourceAsStream(path, callingClass);\n 607           return is == null ? getResource(path, InputStream.class, bus) : is;\n 608       }\n 615       public static <T> T getResource(String path, Class<T> resourceClass, Bus bus) {\n 616           if (bus != null) {\n 617               ResourceManager rm = bus.getExtension(ResourceManager.class);\n 618               if (rm != null) {\n 619                   return rm.resolveResource(path, resourceClass);\n 620               }\n 621           }\n 622           return null;\n 623       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerBus.java:\n169       public final <T> T getExtension(Class<T> extensionType) {\n170           Object obj = extensions.get(extensionType);\n171           if (obj == null) {\n172               if (missingExtensions.contains(extensionType)) {\n173                   //already know we cannot find it\n174                   return null;\n175               }\n176               ConfiguredBeanLocator loc = (ConfiguredBeanLocator)extensions.get(ConfiguredBeanLocator.class);\n177               if (loc == null) {\n178                   loc = createConfiguredBeanLocator();\n179               }\n180               if (loc != null) {\n181                   obj = loc.getBeanOfType(extensionType.getName(), extensionType);\n182                   if (obj != null) {\n183                       extensions.put(extensionType, obj);\n184                   } else {\n185                       //force loading\n186                       Collection<?> objs = loc.getBeansOfType(extensionType);\n187                       if (objs != null && !objs.isEmpty()) {\n188                           extensions.put(extensionType, objs.iterator().next());\n189                       }\n190                       obj = extensions.get(extensionType);\n191                   }\n192               }\n193           }\n194           if (null != obj) {\n195               return extensionType.cast(obj);\n196           }\n197           //record that it couldn't be found to avoid expensive searches again in the future\n198           missingExtensions.add(extensionType);\n199           return null;\n200       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerImpl.java:\n186       final void loadAndRegister(Extension e) {\n187           Class<?> cls;\n188           if (null != e.getInterfaceName() && !\"\".equals(e.getInterfaceName())) {\n189               cls = e.loadInterface(loader);\n190           }  else {\n191               cls = e.getClassObject(loader);\n192           }\n193           if (null != activated && null != cls && null != activated.get(cls)) {\n194               return;\n195           }\n196   \n197           synchronized (e) {\n198               Object obj = e.load(loader, bus);\n199               if (obj == null) {\n200                   return;\n201               }\n202   \n203               if (null != activated) {\n204                   Configurer configurer = (Configurer)(activated.get(Configurer.class));\n205                   if (null != configurer) {\n206                       configurer.configureBean(obj);\n207                   }\n208               }\n209   \n210               // let the object know for which namespaces it has been activated\n211               ResourceResolver namespacesResolver = null;\n212               if (null != e.getNamespaces()) {\n213                   namespacesResolver = new SinglePropertyResolver(ACTIVATION_NAMESPACES_PROPERTY_NAME,\n214                                                                   e.getNamespaces());\n215                   resourceManager.addResourceResolver(namespacesResolver);\n216               }\n217   \n218               // Since we need to support spring2.5 by removing @Resource(\"activationNamespaces\")\n219               // Now we call the setActivationNamespaces method directly here\n220               if (e.getNamespaces() != null && !e.getNamespaces().isEmpty()) {\n221                   invokeSetterActivationNSMethod(obj, e.getNamespaces());\n222               }\n223   \n224               ResourceInjector injector = new ResourceInjector(resourceManager);\n225   \n226               try {\n227                   injector.inject(obj);\n228                   injector.construct(obj);\n229               } finally {\n230                   if (null != namespacesResolver) {\n231                       resourceManager.removeResourceResolver(namespacesResolver);\n232                   }\n233               }\n234   \n235               if (null != activated) {\n236                   if (cls == null) {\n237                       cls = obj.getClass();\n238                   }\n239                   activated.put(cls, obj);\n240               }\n241           }\n242       }\n298       public <T> T getBeanOfType(String name, Class<T> type) {\n299           if (name == null) {\n300               return null;\n301           }\n302           Extension ex = all.get(name);\n303           if (ex != null) {\n304               if (ex.getLoadedObject() == null) {\n305                   loadAndRegister(ex);\n306               }\n307               return type.cast(ex.getLoadedObject());\n308           }\n309           return null;\n310       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/configuration/spring/ConfigurerImpl.java:\n128       public void configureBean(Object beanInstance) {\n129           configureBean(null, beanInstance, true);\n130       }\n135       public synchronized void configureBean(String bn, Object beanInstance, boolean checkWildcards) {\n136   \n137           if (null == appContexts) {\n138               return;\n139           }\n140   \n141           if (null == bn) {\n142               bn = getBeanName(beanInstance);\n143               if (null == bn) {\n144                   return;\n145               }\n146           }\n147   \n148           if (checkWildcards) {\n149               configureWithWildCard(bn, beanInstance);\n150           }\n151   \n152           final String beanName = bn;\n153           setBeanWiringInfoResolver(new BeanWiringInfoResolver() {\n154               public BeanWiringInfo resolveWiringInfo(Object instance) {\n155                   if (!beanName.isEmpty()) {\n156                       return new BeanWiringInfo(beanName);\n157                   }\n158                   return null;\n159               }\n160           });\n161   \n162           for (ApplicationContext appContext : appContexts) {\n163               if (appContext.containsBean(bn)) {\n164                   this.setBeanFactory(appContext.getAutowireCapableBeanFactory());\n165               }\n166           }\n167   \n168           try {\n169               //this will prevent a call into the AbstractBeanFactory.markBeanAsCreated(...)\n170               //which saves ALL the names into a HashSet.  For URL based configuration,\n171               //this can leak memory\n172               if (beanFactory instanceof AbstractBeanFactory) {\n173                   ((AbstractBeanFactory)beanFactory).getMergedBeanDefinition(bn);\n174               }\n175               super.configureBean(beanInstance);\n176               if (LOG.isLoggable(Level.FINE)) {\n177                   LOG.fine(\"Successfully performed injection.\");\n178               }\n179           } catch (NoSuchBeanDefinitionException ex) {\n180               // users often wonder why the settings in their configuration files seem\n181               // to have no effect - the most common cause is that they have been using\n182               // incorrect bean ids\n183               if (LOG.isLoggable(Level.FINE)) {\n184                   LOG.log(Level.FINE, \"NO_MATCHING_BEAN_MSG\", beanName);\n185               }\n186           }\n187       }\n216       protected String getBeanName(Object beanInstance) {\n217           if (beanInstance instanceof Configurable) {\n218               return ((Configurable)beanInstance).getBeanName();\n219           }\n220           String beanName = null;\n221           Method m = null;\n222           try {\n223               m = beanInstance.getClass().getDeclaredMethod(\"getBeanName\", (Class[])null);\n224           } catch (NoSuchMethodException ex) {\n225               try {\n226                   m = beanInstance.getClass().getMethod(\"getBeanName\", (Class[])null);\n227               } catch (NoSuchMethodException e) {\n228                   //ignore\n229               }\n230           }\n231           if (m != null) {\n232               try {\n233                   beanName = (String)(m.invoke(beanInstance));\n234               } catch (Exception ex) {\n235                   LogUtils.log(LOG, Level.WARNING, \"ERROR_DETERMINING_BEAN_NAME_EXC\", ex);\n236               }\n237           }\n238   \n239           if (null == beanName) {\n240               LogUtils.log(LOG, Level.FINE, \"COULD_NOT_DETERMINE_BEAN_NAME_MSG\",\n241                            beanInstance.getClass().getName());\n242           }\n243   \n244           return beanName;\n245       }\n",
            "cost": 0.11049,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/configuration/spring/ConfigurerImpl.java:233:37",
            "status": "corpus",
            "valid_path": "NO",
            "id": 64
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java:\n 605       public static InputStream getClasspathResourceStream(String path, Class<?> callingClass, Bus bus) {\n 606           InputStream is = ClassLoaderUtils.getResourceAsStream(path, callingClass);\n 607           return is == null ? getResource(path, InputStream.class, bus) : is;\n 608       }\n 615       public static <T> T getResource(String path, Class<T> resourceClass, Bus bus) {\n 616           if (bus != null) {\n 617               ResourceManager rm = bus.getExtension(ResourceManager.class);\n 618               if (rm != null) {\n 619                   return rm.resolveResource(path, resourceClass);\n 620               }\n 621           }\n 622           return null;\n 623       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerBus.java:\n169       public final <T> T getExtension(Class<T> extensionType) {\n170           Object obj = extensions.get(extensionType);\n171           if (obj == null) {\n172               if (missingExtensions.contains(extensionType)) {\n173                   //already know we cannot find it\n174                   return null;\n175               }\n176               ConfiguredBeanLocator loc = (ConfiguredBeanLocator)extensions.get(ConfiguredBeanLocator.class);\n177               if (loc == null) {\n178                   loc = createConfiguredBeanLocator();\n179               }\n180               if (loc != null) {\n181                   obj = loc.getBeanOfType(extensionType.getName(), extensionType);\n182                   if (obj != null) {\n183                       extensions.put(extensionType, obj);\n184                   } else {\n185                       //force loading\n186                       Collection<?> objs = loc.getBeansOfType(extensionType);\n187                       if (objs != null && !objs.isEmpty()) {\n188                           extensions.put(extensionType, objs.iterator().next());\n189                       }\n190                       obj = extensions.get(extensionType);\n191                   }\n192               }\n193           }\n194           if (null != obj) {\n195               return extensionType.cast(obj);\n196           }\n197           //record that it couldn't be found to avoid expensive searches again in the future\n198           missingExtensions.add(extensionType);\n199           return null;\n200       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerImpl.java:\n186       final void loadAndRegister(Extension e) {\n187           Class<?> cls;\n188           if (null != e.getInterfaceName() && !\"\".equals(e.getInterfaceName())) {\n189               cls = e.loadInterface(loader);\n190           }  else {\n191               cls = e.getClassObject(loader);\n192           }\n193           if (null != activated && null != cls && null != activated.get(cls)) {\n194               return;\n195           }\n196   \n197           synchronized (e) {\n198               Object obj = e.load(loader, bus);\n199               if (obj == null) {\n200                   return;\n201               }\n202   \n203               if (null != activated) {\n204                   Configurer configurer = (Configurer)(activated.get(Configurer.class));\n205                   if (null != configurer) {\n206                       configurer.configureBean(obj);\n207                   }\n208               }\n209   \n210               // let the object know for which namespaces it has been activated\n211               ResourceResolver namespacesResolver = null;\n212               if (null != e.getNamespaces()) {\n213                   namespacesResolver = new SinglePropertyResolver(ACTIVATION_NAMESPACES_PROPERTY_NAME,\n214                                                                   e.getNamespaces());\n215                   resourceManager.addResourceResolver(namespacesResolver);\n216               }\n217   \n218               // Since we need to support spring2.5 by removing @Resource(\"activationNamespaces\")\n219               // Now we call the setActivationNamespaces method directly here\n220               if (e.getNamespaces() != null && !e.getNamespaces().isEmpty()) {\n221                   invokeSetterActivationNSMethod(obj, e.getNamespaces());\n222               }\n223   \n224               ResourceInjector injector = new ResourceInjector(resourceManager);\n225   \n226               try {\n227                   injector.inject(obj);\n228                   injector.construct(obj);\n229               } finally {\n230                   if (null != namespacesResolver) {\n231                       resourceManager.removeResourceResolver(namespacesResolver);\n232                   }\n233               }\n234   \n235               if (null != activated) {\n236                   if (cls == null) {\n237                       cls = obj.getClass();\n238                   }\n239                   activated.put(cls, obj);\n240               }\n241           }\n242       }\n298       public <T> T getBeanOfType(String name, Class<T> type) {\n299           if (name == null) {\n300               return null;\n301           }\n302           Extension ex = all.get(name);\n303           if (ex != null) {\n304               if (ex.getLoadedObject() == null) {\n305                   loadAndRegister(ex);\n306               }\n307               return type.cast(ex.getLoadedObject());\n308           }\n309           return null;\n310       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/common/injection/ResourceInjector.java:\n127       public void construct(Object o) {\n128           setTarget(o);\n129           if (processable(targetClass, o)) {\n130               invokePostConstruct();\n131           }\n132       }\n339       public void invokePostConstruct() {\n340   \n341           boolean accessible = false;\n342           for (Method method : getPostConstructMethods()) {\n343               PostConstruct pc = method.getAnnotation(PostConstruct.class);\n344               if (pc != null) {\n345                   try {\n346                       ReflectionUtil.setAccessible(method);\n347                       method.invoke(target);\n348                   } catch (IllegalAccessException e) {\n349                       LOG.log(Level.WARNING, \"INJECTION_COMPLETE_NOT_VISIBLE\", method);\n350                   } catch (InvocationTargetException e) {\n351                       LOG.log(Level.WARNING, \"INJECTION_COMPLETE_THREW_EXCEPTION\", e);\n352                   } finally {\n353                       ReflectionUtil.setAccessible(method, accessible);\n354                   }\n355               }\n356           }\n357       }\n",
            "cost": 0.10521000000000001,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/common/injection/ResourceInjector.java:347:21",
            "status": "corpus",
            "valid_path": "NO",
            "id": 65
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java:\n 605       public static InputStream getClasspathResourceStream(String path, Class<?> callingClass, Bus bus) {\n 606           InputStream is = ClassLoaderUtils.getResourceAsStream(path, callingClass);\n 607           return is == null ? getResource(path, InputStream.class, bus) : is;\n 608       }\n 615       public static <T> T getResource(String path, Class<T> resourceClass, Bus bus) {\n 616           if (bus != null) {\n 617               ResourceManager rm = bus.getExtension(ResourceManager.class);\n 618               if (rm != null) {\n 619                   return rm.resolveResource(path, resourceClass);\n 620               }\n 621           }\n 622           return null;\n 623       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerBus.java:\n169       public final <T> T getExtension(Class<T> extensionType) {\n170           Object obj = extensions.get(extensionType);\n171           if (obj == null) {\n172               if (missingExtensions.contains(extensionType)) {\n173                   //already know we cannot find it\n174                   return null;\n175               }\n176               ConfiguredBeanLocator loc = (ConfiguredBeanLocator)extensions.get(ConfiguredBeanLocator.class);\n177               if (loc == null) {\n178                   loc = createConfiguredBeanLocator();\n179               }\n180               if (loc != null) {\n181                   obj = loc.getBeanOfType(extensionType.getName(), extensionType);\n182                   if (obj != null) {\n183                       extensions.put(extensionType, obj);\n184                   } else {\n185                       //force loading\n186                       Collection<?> objs = loc.getBeansOfType(extensionType);\n187                       if (objs != null && !objs.isEmpty()) {\n188                           extensions.put(extensionType, objs.iterator().next());\n189                       }\n190                       obj = extensions.get(extensionType);\n191                   }\n192               }\n193           }\n194           if (null != obj) {\n195               return extensionType.cast(obj);\n196           }\n197           //record that it couldn't be found to avoid expensive searches again in the future\n198           missingExtensions.add(extensionType);\n199           return null;\n200       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerImpl.java:\n186       final void loadAndRegister(Extension e) {\n187           Class<?> cls;\n188           if (null != e.getInterfaceName() && !\"\".equals(e.getInterfaceName())) {\n189               cls = e.loadInterface(loader);\n190           }  else {\n191               cls = e.getClassObject(loader);\n192           }\n193           if (null != activated && null != cls && null != activated.get(cls)) {\n194               return;\n195           }\n196   \n197           synchronized (e) {\n198               Object obj = e.load(loader, bus);\n199               if (obj == null) {\n200                   return;\n201               }\n202   \n203               if (null != activated) {\n204                   Configurer configurer = (Configurer)(activated.get(Configurer.class));\n205                   if (null != configurer) {\n206                       configurer.configureBean(obj);\n207                   }\n208               }\n209   \n210               // let the object know for which namespaces it has been activated\n211               ResourceResolver namespacesResolver = null;\n212               if (null != e.getNamespaces()) {\n213                   namespacesResolver = new SinglePropertyResolver(ACTIVATION_NAMESPACES_PROPERTY_NAME,\n214                                                                   e.getNamespaces());\n215                   resourceManager.addResourceResolver(namespacesResolver);\n216               }\n217   \n218               // Since we need to support spring2.5 by removing @Resource(\"activationNamespaces\")\n219               // Now we call the setActivationNamespaces method directly here\n220               if (e.getNamespaces() != null && !e.getNamespaces().isEmpty()) {\n221                   invokeSetterActivationNSMethod(obj, e.getNamespaces());\n222               }\n223   \n224               ResourceInjector injector = new ResourceInjector(resourceManager);\n225   \n226               try {\n227                   injector.inject(obj);\n228                   injector.construct(obj);\n229               } finally {\n230                   if (null != namespacesResolver) {\n231                       resourceManager.removeResourceResolver(namespacesResolver);\n232                   }\n233               }\n234   \n235               if (null != activated) {\n236                   if (cls == null) {\n237                       cls = obj.getClass();\n238                   }\n239                   activated.put(cls, obj);\n240               }\n241           }\n242       }\n263       private void invokeSetterActivationNSMethod(Object target, Object value) {\n264           Class<?> clazz = target.getClass();\n265           String methodName = ACTIVATION_NAMESPACES_SETTER_METHOD_NAME;\n266           while (clazz != Object.class) {\n267               Method[] methods = clazz.getMethods();\n268               for (int i = 0; i < methods.length; i++) {\n269                   Method method = methods[i];\n270                   Class<?>[] params = method.getParameterTypes();\n271                   if (method.getName().equals(methodName) && params.length == 1) {\n272                       Class<?> paramType = params[0];\n273                       if (paramType.isInstance(value)) {\n274                           try {\n275                               method.invoke(target, new Object[] {value});\n276                           } catch (Exception e) {\n277                               // do nothing here\n278                           }\n279                           return;\n280                       }\n281                   }\n282               }\n283               clazz = clazz.getSuperclass();\n284           }\n285       }\n298       public <T> T getBeanOfType(String name, Class<T> type) {\n299           if (name == null) {\n300               return null;\n301           }\n302           Extension ex = all.get(name);\n303           if (ex != null) {\n304               if (ex.getLoadedObject() == null) {\n305                   loadAndRegister(ex);\n306               }\n307               return type.cast(ex.getLoadedObject());\n308           }\n309           return null;\n310       }\n",
            "cost": 0.10190500000000001,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerImpl.java:275:29",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 66
        },
        {
            "blob": [
                ""
            ],
            "code": "src/cxf-harnesses/cxf-harness-three/src/main/java/com/aixcc/cxf/harnesses/three/CXFThree.java:\n26       public void filter(ContainerRequestContext context, Message m) {\n27           doFilter(context, m);\n28       }\n33       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n34           String whole = new String(input);\n35           String[] parts = whole.split(\"\\0\");\n36   \n37           if (parts.length != 3) {\n38               return;\n39           }\n40   \n41           WadlGenerator2 w = new WadlGenerator2();\n42           w.setStylesheetReference(\"reference\");\n43   \n44           Message mockM = Mockito.mock(Message.class);\n45           doReturn(parts[0]).when(mockM).get(Message.HTTP_REQUEST_METHOD);\n46           //when(mockM.get(Message.HTTP_REQUEST_METHOD)).thenReturn(parts[0]);\n47   \n48           Exchange mockE = Mockito.mock(Exchange.class);\n49           //when(mockE.getBus()).thenReturn(null);\n50           doReturn(null).when(mockE).getBus();\n51           //when(mockM.getExchange()).thenReturn(mockE);\n52           doReturn(mockE).when(mockM).getExchange();\n53   \n54   \n55           MultivaluedMap<String, String> mockMvm = Mockito.mock(MultivaluedMap.class);\n56           //when(mockMvm.containsKey(\"_wadl\")).thenReturn(\"0\".equals(parts[1]));\n57           doReturn(\"0\".equals(parts[1])).when(mockMvm).containsKey(\"_wadl\");\n58   \n59           UriInfo mockU = Mockito.mock(UriInfo.class);\n60           //when(mockU.getQueryParameters()).thenReturn(mockMvm);\n61           doReturn(mockMvm).when(mockU).getQueryParameters();\n62           //when(mockU.getPath(false)).thenReturn(parts[2]);\n63           doReturn(parts[2]).when(mockU).getPath(false);\n64   \n65           ContainerRequestContext mockC = Mockito.mock(ContainerRequestContext.class);\n66           //when(mockC.getUriInfo()).thenReturn(mockU);\n67           doReturn(mockU).when(mockC).getUriInfo();\n68   \n69           doAnswer(invocation -> {\n70   \n71               ResponseImpl r = (ResponseImpl) invocation.getArgument(0);\n72               if (r == null) {\n73                   return null;\n74               }\n75               Object e = r.getEntity();\n76               if (e == null) {\n77                   return null;\n78               }\n79               if (\"java.io.BufferedInputStream\".equals(e.getClass().getName())) {\n80                   BufferedInputStream bis = (BufferedInputStream) r.getEntity();\n81                   byte[] b = new byte[bis.available()];\n82                   bis.read(b);\n83                   System.out.println(\"Contents: \" + new String(b));\n84               } else {\n85                   FilterInputStream fis = (FilterInputStream) r.getEntity();\n86                   System.out.println(\"FIS available \" + fis.available());\n87                   byte[] b = new byte[fis.available()];\n88                   fis.read(b);\n89                   System.out.println(\"Contents: \" + new String(b));\n90               }\n91               return null;\n92   \n93           }).when(mockC).abortWith(ArgumentMatchers.any(Response.class));\n94   \n95           w.filter(mockC, mockM);\n96       }\n\nsrc/cxf/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/model/wadl/WadlGenerator.java:\n 233       protected void doFilter(ContainerRequestContext context, Message m) {\n 234           if (!\"GET\".equals(m.get(Message.HTTP_REQUEST_METHOD))) {\n 235               return;\n 236           }\n 237   \n 238           UriInfo ui = context.getUriInfo();\n 239           if (!ui.getQueryParameters().containsKey(WADL_QUERY)) {\n 240               if (stylesheetReference != null || !docLocationMap.isEmpty()) {\n 241                   String path = ui.getPath(false);\n 242                   if (path.startsWith(\"/\") && !path.isEmpty()) {\n 243                       path = path.substring(1);\n 244                   }\n 245                   if (stylesheetReference != null && path.endsWith(\".xsl\")\n 246                       || docLocationMap.containsKey(path)) {\n 247                       context.abortWith(getExistingResource(m, ui, path));\n 248                   }\n 249               }\n 250               return;\n 251           }\n 252   \n 253           if (ignoreRequests) {\n 254               context.abortWith(Response.status(404).build());\n 255               return;\n 256           }\n 257   \n 258           if (allowList != null && !allowList.isEmpty()) {\n 259               ServletRequest servletRequest = (ServletRequest)m.getContextualProperty(\n 260                   \"HTTP.REQUEST\");\n 261               final String remoteAddress;\n 262               if (servletRequest != null) {\n 263                   remoteAddress = servletRequest.getRemoteAddr();\n 264               } else {\n 265                   remoteAddress = \"\";\n 266               }\n 267               boolean foundMatch = false;\n 268               for (String addr : allowList) {\n 269                   if (addr.equals(remoteAddress)) {\n 270                       foundMatch = true;\n 271                       break;\n 272                   }\n 273               }\n 274               if (!foundMatch) {\n 275                   context.abortWith(Response.status(404).build());\n 276                   return;\n 277               }\n 278           }\n 279   \n 280           HttpHeaders headers = new HttpHeadersImpl(m);\n 281           List<MediaType> accepts = headers.getAcceptableMediaTypes();\n 282           MediaType type = accepts.contains(WADL_TYPE) ? WADL_TYPE : accepts\n 283               .contains(MediaType.APPLICATION_JSON_TYPE) ? MediaType.APPLICATION_JSON_TYPE\n 284                   : defaultWadlResponseMediaType;\n 285   \n 286           Response response = getExistingWadl(m, ui, type);\n 287           if (response != null) {\n 288               context.abortWith(response);\n 289               return;\n 290           }\n 291   \n 292           boolean isJson = isJson(type);\n 293   \n 294           StringBuilder sbMain = generateWADL(getBaseURI(m, ui), getResourcesList(m, ui), isJson, m, ui);\n 295   \n 296           m.getExchange().put(JAXRSUtils.IGNORE_MESSAGE_WRITERS, !isJson && ignoreMessageWriters);\n 297           Response r = Response.ok().type(type).entity(createResponseEntity(m, ui, sbMain.toString(), isJson)).build();\n 298           context.abortWith(r);\n 299       }\n 311       public StringBuilder generateWADL(String baseURI,\n 312                                          List<ClassResourceInfo> cris,\n 313                                          boolean isJson,\n 314                                          Message m,\n 315                                          UriInfo ui) {\n 316           StringBuilder sbMain = new StringBuilder(64);\n 317           if (!isJson && stylesheetReference != null && !applyStylesheetLocally) {\n 318               sbMain.append(\"<?xml-stylesheet \").append(getStylesheetInstructionData(baseURI)).append(\"?>\");\n 319           }\n 320           sbMain.append(\"<application\");\n 321           if (!isJson) {\n 322               sbMain.append(\" xmlns=\\\"\").append(getNamespace()).append(\"\\\" xmlns:xs=\\\"\")\n 323                   .append(Constants.URI_2001_SCHEMA_XSD).append('\"');\n 324           }\n 325           StringBuilder sbGrammars = new StringBuilder(32);\n 326           sbGrammars.append(\"<grammars>\");\n 327   \n 328           StringBuilder sbResources = new StringBuilder(64);\n 329           sbResources.append(\"<resources base=\\\"\").append(baseURI).append(\"\\\">\");\n 330   \n 331   \n 332           MessageBodyWriter<?> jaxbWriter = (m != null && useJaxbContextForQnames)\n 333               ? ServerProviderFactory.getInstance(m).getDefaultJaxbWriter() : null;\n 334           ResourceTypes resourceTypes = ResourceUtils.getAllRequestResponseTypes(cris,\n 335                                                                                  useJaxbContextForQnames,\n 336                                                                                  jaxbWriter);\n 337           checkXmlSeeAlso(resourceTypes);\n 338           Set<Class<?>> allTypes = resourceTypes.getAllTypes().keySet();\n 339   \n 340   \n 341           JAXBContext jaxbContext = null;\n 342           if (useJaxbContextForQnames && !allTypes.isEmpty()) {\n 343               jaxbContext = org.apache.cxf.jaxrs.utils.JAXBUtils\n 344                       .createJaxbContext(new HashSet<>(allTypes), null, jaxbContextProperties);\n 345               if (jaxbContext == null) {\n 346                   LOG.warning(\"JAXB Context is null: possibly due to one of input classes being not accepted\");\n 347               }\n 348           }\n 349   \n 350           SchemaWriter schemaWriter = createSchemaWriter(resourceTypes, jaxbContext, ui);\n 351           ElementQNameResolver qnameResolver = schemaWriter == null\n 352               ? null : createElementQNameResolver(jaxbContext);\n 353   \n 354           Map<Class<?>, QName> clsMap = new IdentityHashMap<>();\n 355           Set<ClassResourceInfo> visitedResources = new LinkedHashSet<>();\n 356           for (ClassResourceInfo cri : cris) {\n 357               startResourceTag(sbResources, cri, cri.getURITemplate().getValue());\n 358   \n 359               Annotation description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Description.class);\n 360               if (description == null) {\n 361                   description = AnnotationUtils.getClassAnnotation(cri.getServiceClass(), Descriptions.class);\n 362               }\n 363               if (description != null) {\n 364                   handleDocs(new Annotation[] {description}, sbResources, DocTarget.RESOURCE, true, isJson);\n 365               } else {\n 366                   handleClassJavaDocs(cri, sbResources);\n 367               }\n 368               handleResource(sbResources, allTypes, qnameResolver, clsMap, cri, visitedResources, isJson);\n 369               sbResources.append(\"</resource>\");\n 370           }\n 371           sbResources.append(\"</resources>\");\n 372   \n 373           handleGrammars(sbMain, sbGrammars, schemaWriter, clsMap);\n 374   \n 375           sbGrammars.append(\"</grammars>\");\n 376           sbMain.append('>');\n 377           handleApplicationDocs(sbMain);\n 378           sbMain.append(sbGrammars.toString());\n 379           sbMain.append(sbResources.toString());\n 380           sbMain.append(\"</application>\");\n 381           return sbMain;\n 382       }\n1805       protected boolean handleDocs(Annotation[] anns,\n1806                                 StringBuilder sb,\n1807                                 String category,\n1808                                 boolean allowDefault,\n1809                                 boolean isJson) {\n1810           boolean found = false;\n1811           for (Annotation a : anns) {\n1812               if (a.annotationType() == Descriptions.class) {\n1813                   Descriptions ds = (Descriptions)a;\n1814                   return handleDocs(ds.value(), sb, category, allowDefault, isJson);\n1815               }\n1816               if (a.annotationType() == Description.class) {\n1817                   Description d = (Description)a;\n1818                   if (d.target().length() == 0 && !allowDefault || d.target().length() > 0\n1819                       && !d.target().equals(category)) {\n1820                       continue;\n1821                   }\n1822   \n1823                   sb.append(\"<doc\");\n1824                   if (!isJson && d.lang().length() > 0) {\n1825                       sb.append(\" xml:lang=\\\"\").append(d.lang()).append('\"');\n1826                   }\n1827                   if (d.title().length() > 0) {\n1828                       sb.append(\" title=\\\"\").append(xmlEncodeIfNeeded(d.title())).append('\"');\n1829                   }\n1830                   sb.append('>');\n1831                   if (d.value().length() > 0) {\n1832                       sb.append(xmlEncodeIfNeeded(d.value()));\n1833                   } else if (d.docuri().length() > 0) {\n1834                       InputStream is;\n1835                       if (d.docuri().startsWith(CLASSPATH_PREFIX)) {\n1836                           String path = d.docuri().substring(CLASSPATH_PREFIX.length());\n1837                           is = ResourceUtils.getClasspathResourceStream(path, SchemaHandler.class,\n1838                               bus == null ? BusFactory.getDefaultBus() : bus);\n1839                           if (is != null) {\n1840                               try {\n1841                                   sb.append(IOUtils.toString(is));\n1842                               } catch (IOException ex) {\n1843                                   // ignore\n1844                               }\n1845                           }\n1846                       }\n1847                   }\n1848                   sb.append(\"</doc>\");\n1849                   found = true;\n1850               }\n1851           }\n1852           return found;\n1853       }\n\nsrc/cxf/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java:\n 605       public static InputStream getClasspathResourceStream(String path, Class<?> callingClass, Bus bus) {\n 606           InputStream is = ClassLoaderUtils.getResourceAsStream(path, callingClass);\n 607           return is == null ? getResource(path, InputStream.class, bus) : is;\n 608       }\n 615       public static <T> T getResource(String path, Class<T> resourceClass, Bus bus) {\n 616           if (bus != null) {\n 617               ResourceManager rm = bus.getExtension(ResourceManager.class);\n 618               if (rm != null) {\n 619                   return rm.resolveResource(path, resourceClass);\n 620               }\n 621           }\n 622           return null;\n 623       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerBus.java:\n169       public final <T> T getExtension(Class<T> extensionType) {\n170           Object obj = extensions.get(extensionType);\n171           if (obj == null) {\n172               if (missingExtensions.contains(extensionType)) {\n173                   //already know we cannot find it\n174                   return null;\n175               }\n176               ConfiguredBeanLocator loc = (ConfiguredBeanLocator)extensions.get(ConfiguredBeanLocator.class);\n177               if (loc == null) {\n178                   loc = createConfiguredBeanLocator();\n179               }\n180               if (loc != null) {\n181                   obj = loc.getBeanOfType(extensionType.getName(), extensionType);\n182                   if (obj != null) {\n183                       extensions.put(extensionType, obj);\n184                   } else {\n185                       //force loading\n186                       Collection<?> objs = loc.getBeansOfType(extensionType);\n187                       if (objs != null && !objs.isEmpty()) {\n188                           extensions.put(extensionType, objs.iterator().next());\n189                       }\n190                       obj = extensions.get(extensionType);\n191                   }\n192               }\n193           }\n194           if (null != obj) {\n195               return extensionType.cast(obj);\n196           }\n197           //record that it couldn't be found to avoid expensive searches again in the future\n198           missingExtensions.add(extensionType);\n199           return null;\n200       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/extension/ExtensionManagerImpl.java:\n186       final void loadAndRegister(Extension e) {\n187           Class<?> cls;\n188           if (null != e.getInterfaceName() && !\"\".equals(e.getInterfaceName())) {\n189               cls = e.loadInterface(loader);\n190           }  else {\n191               cls = e.getClassObject(loader);\n192           }\n193           if (null != activated && null != cls && null != activated.get(cls)) {\n194               return;\n195           }\n196   \n197           synchronized (e) {\n198               Object obj = e.load(loader, bus);\n199               if (obj == null) {\n200                   return;\n201               }\n202   \n203               if (null != activated) {\n204                   Configurer configurer = (Configurer)(activated.get(Configurer.class));\n205                   if (null != configurer) {\n206                       configurer.configureBean(obj);\n207                   }\n208               }\n209   \n210               // let the object know for which namespaces it has been activated\n211               ResourceResolver namespacesResolver = null;\n212               if (null != e.getNamespaces()) {\n213                   namespacesResolver = new SinglePropertyResolver(ACTIVATION_NAMESPACES_PROPERTY_NAME,\n214                                                                   e.getNamespaces());\n215                   resourceManager.addResourceResolver(namespacesResolver);\n216               }\n217   \n218               // Since we need to support spring2.5 by removing @Resource(\"activationNamespaces\")\n219               // Now we call the setActivationNamespaces method directly here\n220               if (e.getNamespaces() != null && !e.getNamespaces().isEmpty()) {\n221                   invokeSetterActivationNSMethod(obj, e.getNamespaces());\n222               }\n223   \n224               ResourceInjector injector = new ResourceInjector(resourceManager);\n225   \n226               try {\n227                   injector.inject(obj);\n228                   injector.construct(obj);\n229               } finally {\n230                   if (null != namespacesResolver) {\n231                       resourceManager.removeResourceResolver(namespacesResolver);\n232                   }\n233               }\n234   \n235               if (null != activated) {\n236                   if (cls == null) {\n237                       cls = obj.getClass();\n238                   }\n239                   activated.put(cls, obj);\n240               }\n241           }\n242       }\n298       public <T> T getBeanOfType(String name, Class<T> type) {\n299           if (name == null) {\n300               return null;\n301           }\n302           Extension ex = all.get(name);\n303           if (ex != null) {\n304               if (ex.getLoadedObject() == null) {\n305                   loadAndRegister(ex);\n306               }\n307               return type.cast(ex.getLoadedObject());\n308           }\n309           return null;\n310       }\n\nsrc/cxf/core/src/main/java/org/apache/cxf/bus/blueprint/ConfigurerImpl.java:\n 97       public void configureBean(Object beanInstance) {\n 98           configureBean(null, beanInstance, true);\n 99       }\n104       public synchronized void configureBean(String bn, Object beanInstance, boolean checkWildcards) {\n105           if (null == bn) {\n106               bn = getBeanName(beanInstance);\n107           }\n108   \n109           if (null == bn) {\n110               return;\n111           }\n112           if (checkWildcards) {\n113               configureWithWildCard(bn, beanInstance);\n114           }\n115   \n116           if (container instanceof ExtendedBlueprintContainer) {\n117               try {\n118                   final ComponentMetadata cm = container.getComponentMetadata(bn);\n119                   if (cm instanceof BeanMetadata) {\n120                       ((ExtendedBlueprintContainer)container).injectBeanInstance((BeanMetadata)cm, beanInstance);\n121                   }\n122               } catch (NoSuchComponentException nsce) {\n123               }\n124           }\n125       }\n149       protected String getBeanName(Object beanInstance) {\n150           if (beanInstance instanceof Configurable) {\n151               return ((Configurable)beanInstance).getBeanName();\n152           }\n153           String beanName = null;\n154           Method m = null;\n155           try {\n156               m = beanInstance.getClass().getDeclaredMethod(\"getBeanName\", (Class[])null);\n157           } catch (NoSuchMethodException ex) {\n158               try {\n159                   m = beanInstance.getClass().getMethod(\"getBeanName\", (Class[])null);\n160               } catch (NoSuchMethodException e) {\n161                   //ignore\n162               }\n163           }\n164           if (m != null) {\n165               try {\n166                   beanName = (String)(m.invoke(beanInstance));\n167               } catch (Exception ex) {\n168                   LogUtils.log(LOG, Level.WARNING, \"ERROR_DETERMINING_BEAN_NAME_EXC\", ex);\n169               }\n170           }\n171   \n172           if (null == beanName) {\n173               LogUtils.log(LOG, Level.FINE, \"COULD_NOT_DETERMINE_BEAN_NAME_MSG\",\n174                            beanInstance.getClass().getName());\n175           }\n176   \n177           return beanName;\n178       }\n",
            "cost": 0.10799,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/cxf/core/src/main/java/org/apache/cxf/bus/blueprint/ConfigurerImpl.java:166:37",
            "status": "corpus",
            "valid_path": "NO",
            "id": 67
        }
    ],
    "result": [
        {
            "harness_id": "id_3",
            "blob": [
                "",
                "R0VUADAAIiJqYXoiKyJ6ZXIiIg==",
                "R0VUADAAL2V4cGxvaXR7Lip9L2luamVjdA==",
                "R0VUADAAL3BhdGgvdG8vcmVzb3VyY2UueHNs",
                "R0VUADAAL3BhdGgvdG8vdnVsbmVyYWJsZS9lbmRwb2ludC9qYXp6ZXI=",
                "R0VUADAAamF6IisiemVy",
                "R0VUADAAamF6K3plcg==",
                "R0VUADAAamF6emVy",
                "R0VUADAAamF6emVyLnhzbA==",
                "R0VUADAAamF6emVyX2hvbmV5cG90LnhzbA==",
                "R0VUADEAIiJqYXoiKyJ6ZXIiIg==",
                "R0VUADEALi4vLi4vLi4vLi4vamF6emVyLXRyYXZlcnNhbA=="
            ]
        }
    ]
}