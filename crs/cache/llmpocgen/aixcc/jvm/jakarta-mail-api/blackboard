{
    "sinks": {
        "Server Side Request Forgery (SSRF)": [
            {
                "path": "src/jakarta-mail-api/core/src/main/java/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 366,
                "column": 32
            },
            {
                "path": "src/jakarta-mail-api/core/src/main/java/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 366,
                "column": 67
            },
            {
                "path": "src/jakarta-mail-api/core/src/main/java/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 368,
                "column": 32
            },
            {
                "path": "src/jakarta-mail-api/core/src/main/java/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 889,
                "column": 28
            },
            {
                "path": "src/jakarta-mail-api/core/src/main/java/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 889,
                "column": 73
            },
            {
                "path": "src/jakarta-mail-api/core/src/main/java/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 891,
                "column": 28
            },
            {
                "path": "src/jakarta-mail-api/core/src/main/java/org/eclipse/angus/mail/util/WriteTimeoutSocket.java",
                "line": 84,
                "column": 24
            },
            {
                "path": "src/jakarta-mail-api/core/src/main/java/org/eclipse/angus/mail/util/WriteTimeoutSocket.java",
                "line": 92,
                "column": 24
            },
            {
                "path": "src/jakarta-mail-api/core/src/main/java/org/eclipse/angus/mail/util/WriteTimeoutSocket.java",
                "line": 98,
                "column": 24
            },
            {
                "path": "src/jakarta-mail-api/core/src/main/java/org/eclipse/angus/mail/util/WriteTimeoutSocket.java",
                "line": 106,
                "column": 24
            },
            {
                "path": "src/jakarta-mail-api/core/src/main/java/org/eclipse/angus/mail/util/WriteTimeoutSocket.java",
                "line": 113,
                "column": 24
            },
            {
                "path": "src/jakarta-mail-api/core/src/main/java/org/eclipse/angus/mail/util/WriteTimeoutSocket.java",
                "line": 113,
                "column": 32
            },
            {
                "path": "src/jakarta-mail-api/core/src/main/java/org/eclipse/angus/mail/util/WriteTimeoutSocket.java",
                "line": 118,
                "column": 24
            },
            {
                "path": "src/jakarta-mail-api/core/src/main/java/org/eclipse/angus/mail/util/WriteTimeoutSocket.java",
                "line": 118,
                "column": 32
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 366,
                "column": 32
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 366,
                "column": 67
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 368,
                "column": 32
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 889,
                "column": 28
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 889,
                "column": 73
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 891,
                "column": 28
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/WriteTimeoutSocket.java",
                "line": 84,
                "column": 24
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/WriteTimeoutSocket.java",
                "line": 92,
                "column": 24
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/WriteTimeoutSocket.java",
                "line": 98,
                "column": 24
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/WriteTimeoutSocket.java",
                "line": 106,
                "column": 24
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/WriteTimeoutSocket.java",
                "line": 113,
                "column": 24
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/WriteTimeoutSocket.java",
                "line": 113,
                "column": 32
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/WriteTimeoutSocket.java",
                "line": 118,
                "column": 24
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/WriteTimeoutSocket.java",
                "line": 118,
                "column": 32
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 366,
                "column": 32
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 366,
                "column": 67
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 368,
                "column": 32
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 889,
                "column": 28
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 889,
                "column": 73
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 891,
                "column": 28
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/WriteTimeoutSocket.java",
                "line": 84,
                "column": 24
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/WriteTimeoutSocket.java",
                "line": 92,
                "column": 24
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/WriteTimeoutSocket.java",
                "line": 98,
                "column": 24
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/WriteTimeoutSocket.java",
                "line": 106,
                "column": 24
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/WriteTimeoutSocket.java",
                "line": 113,
                "column": 24
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/WriteTimeoutSocket.java",
                "line": 113,
                "column": 32
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/WriteTimeoutSocket.java",
                "line": 118,
                "column": 24
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/WriteTimeoutSocket.java",
                "line": 118,
                "column": 32
            },
            {
                "path": "src/jakarta-mail-api/core/src/main/java/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 333,
                "column": 25
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 333,
                "column": 25
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 333,
                "column": 25
            }
        ],
        "Remote Code Execution": [
            {
                "path": "src/jakarta-mail-api/mailhandler/src/main/java/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 840,
                "column": 34
            },
            {
                "path": "src/jakarta-mail-api/providers/mbox/src/main/java/org/eclipse/angus/mail/mbox/MboxStore.java",
                "line": 55,
                "column": 42
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 842,
                "column": 34
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 832,
                "column": 47
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 820,
                "column": 39
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/Session.java",
                "line": 835,
                "column": 46
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 820,
                "column": 39
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 840,
                "column": 34
            },
            {
                "path": "src/jakarta-mail-api/core/src/main/java/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 821,
                "column": 47
            },
            {
                "path": "src/jakarta-mail-api/mailhandler/src/main/java/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 842,
                "column": 34
            },
            {
                "path": "src/jakarta-mail-api/mailhandler/src/main/java/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 820,
                "column": 39
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/util/FactoryFinder.java",
                "line": 97,
                "column": 35
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 842,
                "column": 34
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 832,
                "column": 47
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 843,
                "column": 47
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 840,
                "column": 34
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 821,
                "column": 47
            },
            {
                "path": "src/jakarta-mail-api/core/src/main/java/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 832,
                "column": 47
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 843,
                "column": 47
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 821,
                "column": 47
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/Session.java",
                "line": 848,
                "column": 46
            },
            {
                "path": "src/jakarta-mail-api/core/src/main/java/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 843,
                "column": 47
            }
        ],
        "Remote JNDI Lookup": [
            {
                "path": "src/jakarta-mail-api/demos/webapp/src/main/java/demo/MailUserBean.java",
                "line": 150,
                "column": 47
            },
            {
                "path": "src/jakarta-mail-api/demos/webapp/src/main/java/demo/MailUserBean.java",
                "line": 151,
                "column": 44
            }
        ],
        "load arbitrary library": [
            {
                "path": "src/jakarta-mail-api/core/src/main/java/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 431,
                "column": 45
            },
            {
                "path": "src/jakarta-mail-api/core/src/main/java/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 436,
                "column": 41
            },
            {
                "path": "src/jakarta-mail-api/core/src/main/java/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 821,
                "column": 47
            },
            {
                "path": "src/jakarta-mail-api/core/src/main/java/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 832,
                "column": 47
            },
            {
                "path": "src/jakarta-mail-api/core/src/main/java/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 843,
                "column": 47
            },
            {
                "path": "src/jakarta-mail-api/core/src/main/java/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 857,
                "column": 39
            },
            {
                "path": "src/jakarta-mail-api/core/src/main/java/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 1169,
                "column": 46
            },
            {
                "path": "src/jakarta-mail-api/demos/logging/src/main/java/example/app/FileErrorManager.java",
                "line": 286,
                "column": 31
            },
            {
                "path": "src/jakarta-mail-api/mailhandler/src/main/java/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 820,
                "column": 39
            },
            {
                "path": "src/jakarta-mail-api/mailhandler/src/main/java/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 840,
                "column": 34
            },
            {
                "path": "src/jakarta-mail-api/mailhandler/src/main/java/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 842,
                "column": 34
            },
            {
                "path": "src/jakarta-mail-api/mailhandler/src/main/java/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 910,
                "column": 40
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/imap/IMAPStore.java",
                "line": 618,
                "column": 49
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/imap/IMAPStore.java",
                "line": 623,
                "column": 49
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/imap/protocol/IMAPProtocol.java",
                "line": 994,
                "column": 25
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/pop3/POP3Store.java",
                "line": 134,
                "column": 50
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/pop3/POP3Store.java",
                "line": 139,
                "column": 50
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/smtp/SMTPTransport.java",
                "line": 1153,
                "column": 25
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 431,
                "column": 45
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 436,
                "column": 41
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 821,
                "column": 47
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 832,
                "column": 47
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 843,
                "column": 47
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 857,
                "column": 39
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 1169,
                "column": 46
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 820,
                "column": 39
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 840,
                "column": 34
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 842,
                "column": 34
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 910,
                "column": 40
            },
            {
                "path": "src/jakarta-mail-api/providers/imap/src/main/java/org/eclipse/angus/mail/imap/IMAPStore.java",
                "line": 618,
                "column": 49
            },
            {
                "path": "src/jakarta-mail-api/providers/imap/src/main/java/org/eclipse/angus/mail/imap/IMAPStore.java",
                "line": 623,
                "column": 49
            },
            {
                "path": "src/jakarta-mail-api/providers/imap/src/main/java/org/eclipse/angus/mail/imap/protocol/IMAPProtocol.java",
                "line": 994,
                "column": 25
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/Session.java",
                "line": 835,
                "column": 46
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/Session.java",
                "line": 848,
                "column": 46
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/Session.java",
                "line": 1434,
                "column": 50
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/Session.java",
                "line": 1451,
                "column": 55
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/internet/MimeUtil.java",
                "line": 42,
                "column": 52
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/internet/MimeUtil.java",
                "line": 47,
                "column": 48
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/util/FactoryFinder.java",
                "line": 97,
                "column": 35
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/util/FactoryFinder.java",
                "line": 122,
                "column": 50
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/util/FactoryFinder.java",
                "line": 139,
                "column": 55
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/imap/IMAPStore.java",
                "line": 618,
                "column": 49
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/imap/IMAPStore.java",
                "line": 623,
                "column": 49
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/imap/protocol/IMAPProtocol.java",
                "line": 994,
                "column": 25
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/pop3/POP3Store.java",
                "line": 134,
                "column": 50
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/pop3/POP3Store.java",
                "line": 139,
                "column": 50
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/smtp/SMTPTransport.java",
                "line": 1153,
                "column": 25
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 431,
                "column": 45
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 436,
                "column": 41
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 821,
                "column": 47
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 832,
                "column": 47
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 843,
                "column": 47
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 857,
                "column": 39
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 1169,
                "column": 46
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 820,
                "column": 39
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 840,
                "column": 34
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 842,
                "column": 34
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 910,
                "column": 40
            },
            {
                "path": "src/jakarta-mail-api/providers/mbox/src/main/java/org/eclipse/angus/mail/mbox/MboxStore.java",
                "line": 55,
                "column": 42
            },
            {
                "path": "src/jakarta-mail-api/providers/pop3/src/main/java/org/eclipse/angus/mail/pop3/POP3Store.java",
                "line": 134,
                "column": 50
            },
            {
                "path": "src/jakarta-mail-api/providers/pop3/src/main/java/org/eclipse/angus/mail/pop3/POP3Store.java",
                "line": 139,
                "column": 50
            },
            {
                "path": "src/jakarta-mail-api/providers/smtp/src/main/java/org/eclipse/angus/mail/smtp/SMTPTransport.java",
                "line": 1153,
                "column": 25
            },
            {
                "path": "src/jakarta-mail-api/providers/mbox/src/main/java/org/eclipse/angus/mail/mbox/UNIXFile.java",
                "line": 50,
                "column": 36
            },
            {
                "path": "src/jakarta-mail-api/providers/mbox/src/main/java/org/eclipse/angus/mail/mbox/UNIXFile.java",
                "line": 66,
                "column": 41
            },
            {
                "path": "src/jakarta-mail-api/providers/mbox/src/main/java/org/eclipse/angus/mail/mbox/UNIXFile.java",
                "line": 72,
                "column": 45
            }
        ],
        "Regular Expression Injection": [
            {
                "path": "src/jakarta-mail-api/core/src/main/java/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 389,
                "column": 59
            },
            {
                "path": "src/jakarta-mail-api/core/src/main/java/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 547,
                "column": 63
            },
            {
                "path": "src/jakarta-mail-api/core/src/main/java/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 1065,
                "column": 41
            },
            {
                "path": "src/jakarta-mail-api/mailhandler/src/main/java/org/eclipse/angus/mail/util/logging/CompactFormatter.java",
                "line": 553,
                "column": 41
            },
            {
                "path": "src/jakarta-mail-api/mailhandler/src/main/java/org/eclipse/angus/mail/util/logging/DurationFilter.java",
                "line": 448,
                "column": 40
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 389,
                "column": 59
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 547,
                "column": 63
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 1065,
                "column": 41
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/CompactFormatter.java",
                "line": 553,
                "column": 41
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/DurationFilter.java",
                "line": 448,
                "column": 40
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/internet/NewsAddress.java",
                "line": 71,
                "column": 47
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 389,
                "column": 59
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 547,
                "column": 63
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 1065,
                "column": 41
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/CompactFormatter.java",
                "line": 553,
                "column": 41
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/DurationFilter.java",
                "line": 448,
                "column": 40
            },
            {
                "path": "src/jakarta-mail-api/www/InstallCert.java",
                "line": 26,
                "column": 40
            }
        ],
        "Script Engine Injection": [
            {
                "path": "src/jakarta-mail-api/core/src/main/java/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 441,
                "column": 17
            },
            {
                "path": "src/jakarta-mail-api/core/src/main/java/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 441,
                "column": 38
            },
            {
                "path": "src/jakarta-mail-api/core/src/main/java/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 1175,
                "column": 42
            },
            {
                "path": "src/jakarta-mail-api/core/src/main/java/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 1176,
                "column": 33
            },
            {
                "path": "src/jakarta-mail-api/core/src/main/java/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 1183,
                "column": 21
            },
            {
                "path": "src/jakarta-mail-api/core/src/main/java/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 1183,
                "column": 34
            },
            {
                "path": "src/jakarta-mail-api/core/src/main/java/org/eclipse/angus/mail/util/WriteTimeoutSocket.java",
                "line": 361,
                "column": 45
            },
            {
                "path": "src/jakarta-mail-api/core/src/main/java/org/eclipse/angus/mail/util/WriteTimeoutSocket.java",
                "line": 361,
                "column": 54
            },
            {
                "path": "src/jakarta-mail-api/mailhandler/src/main/java/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 253,
                "column": 25
            },
            {
                "path": "src/jakarta-mail-api/mailhandler/src/main/java/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 253,
                "column": 74
            },
            {
                "path": "src/jakarta-mail-api/mailhandler/src/main/java/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 323,
                "column": 40
            },
            {
                "path": "src/jakarta-mail-api/mailhandler/src/main/java/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 323,
                "column": 49
            },
            {
                "path": "src/jakarta-mail-api/mailhandler/src/main/java/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 324,
                "column": 25
            },
            {
                "path": "src/jakarta-mail-api/mailhandler/src/main/java/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 324,
                "column": 47
            },
            {
                "path": "src/jakarta-mail-api/mailhandler/src/main/java/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 325,
                "column": 25
            },
            {
                "path": "src/jakarta-mail-api/mailhandler/src/main/java/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 325,
                "column": 50
            },
            {
                "path": "src/jakarta-mail-api/mailhandler/src/main/java/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 357,
                "column": 31
            },
            {
                "path": "src/jakarta-mail-api/mailhandler/src/main/java/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 357,
                "column": 40
            },
            {
                "path": "src/jakarta-mail-api/mailhandler/src/main/java/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 396,
                "column": 33
            },
            {
                "path": "src/jakarta-mail-api/mailhandler/src/main/java/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 396,
                "column": 42
            },
            {
                "path": "src/jakarta-mail-api/mailhandler/src/main/java/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 440,
                "column": 27
            },
            {
                "path": "src/jakarta-mail-api/mailhandler/src/main/java/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 440,
                "column": 43
            },
            {
                "path": "src/jakarta-mail-api/mailhandler/src/main/java/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 440,
                "column": 56
            },
            {
                "path": "src/jakarta-mail-api/mailhandler/src/main/java/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 578,
                "column": 47
            },
            {
                "path": "src/jakarta-mail-api/mailhandler/src/main/java/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 578,
                "column": 56
            },
            {
                "path": "src/jakarta-mail-api/mailhandler/src/main/java/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 705,
                "column": 13
            },
            {
                "path": "src/jakarta-mail-api/mailhandler/src/main/java/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 705,
                "column": 66
            },
            {
                "path": "src/jakarta-mail-api/mailhandler/src/main/java/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 911,
                "column": 24
            },
            {
                "path": "src/jakarta-mail-api/mailhandler/src/main/java/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 912,
                "column": 29
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 441,
                "column": 17
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 441,
                "column": 38
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 1175,
                "column": 42
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 1176,
                "column": 33
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 1183,
                "column": 21
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 1183,
                "column": 34
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/WriteTimeoutSocket.java",
                "line": 361,
                "column": 45
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/WriteTimeoutSocket.java",
                "line": 361,
                "column": 54
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 253,
                "column": 25
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 253,
                "column": 74
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 323,
                "column": 40
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 323,
                "column": 49
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 324,
                "column": 25
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 324,
                "column": 47
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 325,
                "column": 25
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 325,
                "column": 50
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 357,
                "column": 31
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 357,
                "column": 40
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 396,
                "column": 33
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 396,
                "column": 42
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 440,
                "column": 27
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 440,
                "column": 43
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 440,
                "column": 56
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 578,
                "column": 47
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 578,
                "column": 56
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 705,
                "column": 13
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 705,
                "column": 66
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 911,
                "column": 24
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 912,
                "column": 29
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/Session.java",
                "line": 1454,
                "column": 53
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/Session.java",
                "line": 1454,
                "column": 62
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/internet/MimeUtil.java",
                "line": 73,
                "column": 33
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/internet/MimeUtil.java",
                "line": 73,
                "column": 57
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/util/FactoryFinder.java",
                "line": 142,
                "column": 55
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/util/FactoryFinder.java",
                "line": 142,
                "column": 64
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 441,
                "column": 17
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 441,
                "column": 38
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 1175,
                "column": 42
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 1176,
                "column": 33
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 1183,
                "column": 21
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/SocketFetcher.java",
                "line": 1183,
                "column": 34
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/WriteTimeoutSocket.java",
                "line": 361,
                "column": 45
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/WriteTimeoutSocket.java",
                "line": 361,
                "column": 54
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 253,
                "column": 25
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 253,
                "column": 74
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 323,
                "column": 40
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 323,
                "column": 49
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 324,
                "column": 25
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 324,
                "column": 47
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 325,
                "column": 25
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 325,
                "column": 50
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 357,
                "column": 31
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 357,
                "column": 40
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 396,
                "column": 33
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 396,
                "column": 42
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 440,
                "column": 27
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 440,
                "column": 43
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 440,
                "column": 56
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 578,
                "column": 47
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 578,
                "column": 56
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 705,
                "column": 13
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 705,
                "column": 66
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 911,
                "column": 24
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 912,
                "column": 29
            }
        ],
        "File read/write hook path": [
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/internet/MimeBodyPart.java",
                "line": 951,
                "column": 38
            },
            {
                "path": "src/jakarta-mail-api/demos/client/src/main/java/example/client/SimpleClient.java",
                "line": 80,
                "column": 41
            },
            {
                "path": "src/jakarta-mail-api/demos/demo/src/main/java/example/app/internal/fpopulate.java",
                "line": 188,
                "column": 55
            },
            {
                "path": "src/jakarta-mail-api/demos/demo/src/main/java/example/app/msgshow.java",
                "line": 124,
                "column": 73
            },
            {
                "path": "src/jakarta-mail-api/demos/logging/src/main/java/example/app/FileErrorManager.java",
                "line": 199,
                "column": 44
            },
            {
                "path": "src/jakarta-mail-api/mailhandler/src/main/java/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 199,
                "column": 59
            },
            {
                "path": "src/jakarta-mail-api/providers/angus-mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 199,
                "column": 59
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/Session.java",
                "line": 1184,
                "column": 64
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/org/eclipse/angus/mail/util/logging/LogManagerProperties.java",
                "line": 199,
                "column": 59
            },
            {
                "path": "src/jakarta-mail-api/providers/mbox/src/main/java/org/eclipse/angus/mail/mbox/MboxFolder.java",
                "line": 264,
                "column": 43
            },
            {
                "path": "src/jakarta-mail-api/providers/mbox/src/main/java/org/eclipse/angus/mail/mbox/MboxFolder.java",
                "line": 271,
                "column": 47
            },
            {
                "path": "src/jakarta-mail-api/providers/mbox/src/main/java/org/eclipse/angus/mail/mbox/MboxFolder.java",
                "line": 512,
                "column": 63
            },
            {
                "path": "src/jakarta-mail-api/providers/mbox/src/main/java/org/eclipse/angus/mail/mbox/MboxFolder.java",
                "line": 578,
                "column": 46
            },
            {
                "path": "src/jakarta-mail-api/providers/mbox/src/main/java/org/eclipse/angus/mail/mbox/MboxFolder.java",
                "line": 748,
                "column": 42
            },
            {
                "path": "src/jakarta-mail-api/www/InstallCert.java",
                "line": 49,
                "column": 46
            },
            {
                "path": "src/jakarta-mail-api/www/InstallCert.java",
                "line": 117,
                "column": 49
            },
            {
                "path": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/internet/MimeBodyPart.java",
                "line": 951,
                "column": 20
            }
        ]
    },
    "tasks": [
        {
            "blob": [
                ""
            ],
            "code": "src/mail-api-harnesses/mail-api-harness-one/src/main/java/com/aixcc/mailapi/harnesses/one/MailApiHarnessOne.java:\n17       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n18           try {\n19               ByteArrayInputStream bs = new ByteArrayInputStream(input);\n20       \n21               MimeMessage mimeMessage = new MimeMessage(null, bs);\n22       \n23               // Re-serialize the message, changing the subject.\n24               mimeMessage = new MimeMessage(mimeMessage);\n25               mimeMessage.setSubject(\"FWD: \" + mimeMessage.getSubject());\n26               mimeMessage.setContent(mimeMessage.getDataHandler().getDataSource(), mimeMessage.getContentType());\n27               mimeMessage.saveChanges();\n28       \n29               ByteArrayOutputStream bos = new ByteArrayOutputStream();\n30               mimeMessage.writeTo(bos);\n31       \n32               String serialized = new String(bos.toByteArray(), \"UTF-8\");\n33           } catch (Exception e) {\n34               // Ignore exceptions.\n35           }\n36       }\n\nsrc/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/internet/MimeMessage.java:\n1884       @Override\n1885       public void writeTo(OutputStream os)\n1886               throws IOException, MessagingException {\n1887           writeTo(os, null);\n1888       }\n1907       public void writeTo(OutputStream os, String[] ignoreList)\n1908               throws IOException, MessagingException {\n1909           if (!saved)\n1910               saveChanges();\n1911   \n1912           if (modified) {\n1913               MimeBodyPart.writeTo(this, os, ignoreList);\n1914               return;\n1915           }\n1916   \n1917           // Else, the content is untouched, so we can just output it\n1918           // First, write out the header\n1919           Enumeration<String> hdrLines = getNonMatchingHeaderLines(ignoreList);\n1920           LineOutputStream los = provider().outputLineStream(os, allowutf8);\n1921           while (hdrLines.hasMoreElements())\n1922               los.writeln(hdrLines.nextElement());\n1923   \n1924           // The CRLF separator between header and content\n1925           los.writeln();\n1926   \n1927           // Finally, the content.\n1928           if (content == null) {\n1929               // call getContentStream to give subclass a chance to\n1930               // provide the data on demand\n1931               InputStream is = null;\n1932               byte[] buf = new byte[8192];\n1933               try {\n1934                   is = getContentStream();\n1935                   // now copy the data to the output stream\n1936                   int len;\n1937                   while ((len = is.read(buf)) > 0)\n1938                       os.write(buf, 0, len);\n1939               } finally {\n1940                   if (is != null)\n1941                       is.close();\n1942                   buf = null;\n1943               }\n1944           } else {\n1945               os.write(content);\n1946           }\n1947           os.flush();\n1948       }\n\nsrc/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/internet/MimeBodyPart.java:\n1634       static void writeTo(MimePart part, OutputStream os, String[] ignoreList)\n1635               throws IOException, MessagingException {\n1636   \n1637           // see if we already have a LOS\n1638           LineOutputStream los = null;\n1639           if (os instanceof LineOutputStream) {\n1640               los = (LineOutputStream) os;\n1641           } else {\n1642               Map<String, Object> params = new HashMap<>();\n1643               params.put(\"allowutf8\", allowutf8);\n1644               los = StreamProvider.provider().outputLineStream(os, allowutf8);\n1645           }\n1646   \n1647           // First, write out the header\n1648           Enumeration<String> hdrLines\n1649                   = part.getNonMatchingHeaderLines(ignoreList);\n1650           while (hdrLines.hasMoreElements())\n1651               los.writeln(hdrLines.nextElement());\n1652   \n1653           // The CRLF separator between header and content\n1654           los.writeln();\n1655   \n1656           // Finally, the content. Encode if required.\n1657           // XXX: May need to account for ESMTP ?\n1658           InputStream is = null;\n1659           byte[] buf = null;\n1660           try {\n1661               /*\n1662                * If the data for this part comes from a stream,\n1663                * and is already encoded,\n1664                * just copy it to the output stream without decoding\n1665                * and reencoding it.\n1666                */\n1667               DataHandler dh = part.getDataHandler();\n1668               if (dh instanceof MimePartDataHandler) {\n1669                   MimePartDataHandler mpdh = (MimePartDataHandler) dh;\n1670                   MimePart mpart = mpdh.getPart();\n1671                   if (mpart.getEncoding() != null)\n1672                       is = mpdh.getContentStream();\n1673               }\n1674               if (is != null) {\n1675                   // now copy the data to the output stream\n1676                   buf = new byte[8192];\n1677                   int len;\n1678                   while ((len = is.read(buf)) > 0)\n1679                       os.write(buf, 0, len);\n1680               } else {\n1681                   os = MimeUtility.encode(os,\n1682                           restrictEncoding(part, part.getEncoding()));\n1683                   part.getDataHandler().writeTo(os);\n1684               }\n1685           } finally {\n1686               if (is != null)\n1687                   is.close();\n1688               buf = null;\n1689           }\n1690           os.flush(); // Needed to complete encoding\n1691       }\n\nsrc/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/util/StreamProvider.java:\n191       static StreamProvider provider() {\n192           if (System.getSecurityManager() != null) {\n193               return AccessController.doPrivileged(new PrivilegedAction<StreamProvider>() {\n194                   public StreamProvider run() {\n195                       return FactoryFinder.find(StreamProvider.class);\n196                   }\n197               });\n198           } else {\n199               return FactoryFinder.find(StreamProvider.class);\n200           }\n201       }\n\nsrc/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/util/FactoryFinder.java:\n 36       static <T> T find(Class<T> factoryClass) throws RuntimeException {\n 37           T result;\n 38           ClassLoader loader = Thread.currentThread().getContextClassLoader();\n 39           if (loader != null) {\n 40               result = find(factoryClass, loader);\n 41               if (result != null) {\n 42                   return result;\n 43               }\n 44           }\n 45   \n 46           //JakartaMail API ClassLoader / caller classloader\n 47           loader = factoryClass.getClassLoader();\n 48           if (loader != null) {\n 49               result = find(factoryClass, loader);\n 50               if (result != null) {\n 51                   return result;\n 52               }\n 53           }\n 54   \n 55           //Fallback to system class loader\n 56           result = find(factoryClass, ClassLoader.getSystemClassLoader());\n 57           if (result != null) {\n 58               return result;\n 59           }\n 60   \n 61           throw new IllegalStateException(\"No provider of \" + factoryClass.getName() + \" was found\");\n 62       }\n 64       private static <T> T find(Class<T> factoryClass, ClassLoader loader) throws RuntimeException {\n 65           // Use the system property first\n 66           String className = fromSystemProperty(factoryClass.getName());\n 67           if (className != null) {\n 68               T result = newInstance(className, factoryClass, loader);\n 69               if (result != null) {\n 70                   return result;\n 71               }\n 72           }\n 73   \n 74           // standard services: java.util.ServiceLoader\n 75           T factory = factoryFromServiceLoader(factoryClass, loader);\n 76           if (factory != null) {\n 77               return factory;\n 78           }\n 79   \n 80           // handling Glassfish/OSGi (platform specific default)\n 81   \n 82           T result = lookupUsingHk2ServiceLoader(factoryClass, loader);\n 83           if (result != null) {\n 84               return result;\n 85           }\n 86   \n 87           return null;\n 88       }\n 90       private static <T> T newInstance(String className, Class<T> factoryClass, ClassLoader classLoader) throws RuntimeException {\n 91           checkPackageAccess(className);\n 92           try {\n 93               Class<?> clazz;\n 94               if (classLoader == null) { //Match behavior of ServiceLoader\n 95                   classLoader = ClassLoader.getSystemClassLoader();\n 96               }\n 97               clazz = Class.forName(className, false, classLoader);\n 98               return clazz.asSubclass(factoryClass).getConstructor().newInstance();\n 99           } catch (ClassCastException wrongLoader) {\n100               return null;\n101           } catch (ReflectiveOperationException e) {\n102               throw new IllegalArgumentException(\"Cannot instance \" + className, e);\n103           }\n104       }\n",
            "cost": 0.065465,
            "harness_id": "MailApiHarnessOne",
            "sanitizer": "Remote Code Execution",
            "sink": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/util/FactoryFinder.java:97:35",
            "status": "corpus",
            "valid_path": "NO",
            "id": 1
        },
        {
            "blob": [
                ""
            ],
            "code": "src/mail-api-harnesses/mail-api-harness-one/src/main/java/com/aixcc/mailapi/harnesses/one/MailApiHarnessOne.java:\n17       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n18           try {\n19               ByteArrayInputStream bs = new ByteArrayInputStream(input);\n20       \n21               MimeMessage mimeMessage = new MimeMessage(null, bs);\n22       \n23               // Re-serialize the message, changing the subject.\n24               mimeMessage = new MimeMessage(mimeMessage);\n25               mimeMessage.setSubject(\"FWD: \" + mimeMessage.getSubject());\n26               mimeMessage.setContent(mimeMessage.getDataHandler().getDataSource(), mimeMessage.getContentType());\n27               mimeMessage.saveChanges();\n28       \n29               ByteArrayOutputStream bos = new ByteArrayOutputStream();\n30               mimeMessage.writeTo(bos);\n31       \n32               String serialized = new String(bos.toByteArray(), \"UTF-8\");\n33           } catch (Exception e) {\n34               // Ignore exceptions.\n35           }\n36       }\n\nsrc/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/internet/MimeMessage.java:\n 233       public MimeMessage(MimeMessage source) throws MessagingException {\n 234           super(source.session);\n 235           flags = source.getFlags();\n 236           if (flags == null)    // make sure flags is always set\n 237               flags = new Flags();\n 238           ByteArrayOutputStream bos;\n 239           int size = source.getSize();\n 240           if (size > 0)\n 241               bos = new ByteArrayOutputStream(size);\n 242           else\n 243               bos = new ByteArrayOutputStream();\n 244           try {\n 245               strict = source.strict;\n 246               source.writeTo(bos);\n 247               bos.close();\n 248               try (InputStream bis = provider().inputSharedByteArray(bos.toByteArray())) {\n 249                   parse(bis);\n 250               }\n 251               saved = true;\n 252           } catch (IOException ex) {\n 253               // should never happen, but just in case...\n 254               throw new MessagingException(\"IOException while copying message\",\n 255                       ex);\n 256           }\n 257       }\n2326       private StreamProvider provider() throws MessagingException {\n2327           try {\n2328               try {\n2329                   final Session s = this.session;\n2330                   if (s != null) {\n2331                       return s.getStreamProvider();\n2332                   } else {\n2333                       return Session.getDefaultInstance(System.getProperties(),\n2334                           null).getStreamProvider();\n2335                   }\n2336               } catch (ServiceConfigurationError sce) {\n2337                   throw new IllegalStateException(sce);\n2338               }\n2339           } catch (RuntimeException re) {\n2340               throw new MessagingException(\"Unable to get \"\n2341                       + StreamProvider.class.getName(), re);\n2342           }\n2343       }\n\nsrc/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/Session.java:\n 254       private Session(Properties props, Authenticator authenticator) {\n 255           this.props = props;\n 256           this.authenticator = authenticator;\n 257           this.streamProvider = StreamProvider.provider();\n 258   \n 259           if (Boolean.parseBoolean(props.getProperty(\"mail.debug\")))\n 260               debug = true;\n 261   \n 262           initLogger();\n 263           logger.log(Level.CONFIG, \"Jakarta Mail version {0}\", Version.version);\n 264   \n 265           // get the Class associated with the Authenticator\n 266           Class<?> cl;\n 267           if (authenticator != null) {\n 268               cl = authenticator.getClass();\n 269           } else {\n 270               // Use implementation class, because that class loader has access to jakarta.mail module and implementation resources\n 271               cl = streamProvider.getClass();\n 272           }\n 273           // load the resources\n 274           loadProviders(cl);\n 275           loadAddressMap(cl);\n 276           q = new EventQueue((Executor) props.get(\"mail.event.executor\"));\n 277       }\n 378       public static synchronized Session getDefaultInstance(Properties props, Authenticator authenticator) {\n 379           if (defaultSession == null) {\n 380               SecurityManager security = System.getSecurityManager();\n 381               if (security != null)\n 382                   security.checkSetFactory();\n 383               defaultSession = new Session(props, authenticator);\n 384           } else {\n 385               // have to check whether caller is allowed to see default session\n 386               if (defaultSession.authenticator == authenticator)\n 387                   ;    // either same object or both null, either way OK\n 388               else if (defaultSession.authenticator != null &&\n 389                       authenticator != null &&\n 390                       defaultSession.authenticator.getClass().getClassLoader() ==\n 391                               authenticator.getClass().getClassLoader())\n 392                   ;    // both objects came from the same class loader, OK\n 393               else\n 394                   // anything else is not allowed\n 395                   throw new SecurityException(\"Access to default session denied\");\n 396           }\n 397   \n 398           return defaultSession;\n 399       }\n 961       private void loadProviders(Class<?> cl) {\n 962           StreamLoader loader = new StreamLoader() {\n 963               @Override\n 964               public void load(InputStream is) throws IOException {\n 965                   loadProvidersFromStream(is);\n 966               }\n 967           };\n 968   \n 969           // load system-wide javamail.providers from the\n 970           // <java.home>/{conf,lib} directory\n 971           try {\n 972               if (confDir != null)\n 973                   loadFile(confDir + \"javamail.providers\", loader);\n 974           } catch (SecurityException ex) {\n 975           }\n 976   \n 977           //Fetch classloader of given class, falling back to others if needed.\n 978           ClassLoader gcl;\n 979           ClassLoader[] loaders = getClassLoaders(cl, Thread.class, System.class);\n 980           if (loaders.length != 0) {\n 981               gcl = loaders[0];\n 982           } else {\n 983               gcl = getContextClassLoader(); //Fail safe\n 984           }\n 985   \n 986           // next, add all the non-default services\n 987           ServiceLoader<Provider> sl = ServiceLoader.load(Provider.class, gcl);\n 988           for (Provider p : sl) {\n 989               if (!containsDefaultProvider(p))\n 990                   addProvider(p);\n 991           }\n 992   \n 993           // + handle Glassfish/OSGi (platform specific default)\n 994           Iterator<Provider> iter = lookupUsingHk2ServiceLoader(Provider.class, gcl);\n 995           while (iter.hasNext()) {\n 996               Provider p = iter.next();\n 997               if (!containsDefaultProvider(p))\n 998                   addProvider(p);\n 999           }\n1000   \n1001           // load the META-INF/javamail.providers file supplied by an application\n1002           loadAllResources(\"META-INF/javamail.providers\", cl, loader);\n1003   \n1004           // load default META-INF/javamail.default.providers from mail.jar file\n1005           loadResource(\"/META-INF/javamail.default.providers\", cl, loader, false);\n1006   \n1007           // finally, add all the default services\n1008           sl = ServiceLoader.load(Provider.class, gcl);\n1009           for (Provider p : sl) {\n1010               if (containsDefaultProvider(p))\n1011                   addProvider(p);\n1012           }\n1013   \n1014           // + handle Glassfish/OSGi (platform specific default)\n1015           iter = lookupUsingHk2ServiceLoader(Provider.class, gcl);\n1016           while (iter.hasNext()) {\n1017               Provider p = iter.next();\n1018               if (containsDefaultProvider(p)) {\n1019                   addProvider(p);\n1020               }\n1021           }\n1022   \n1023           /*\n1024            * If we haven't loaded any providers, fake it.\n1025            */\n1026           if (providers.isEmpty()) {\n1027               logger.config(\"failed to load any providers, using defaults\");\n1028               // failed to load any providers, initialize with our defaults\n1029               addProvider(new Provider(Provider.Type.STORE,\n1030                       \"imap\", \"org.eclipse.angus.mail.imap.IMAPStore\",\n1031                       \"Oracle\", Version.version));\n1032               addProvider(new Provider(Provider.Type.STORE,\n1033                       \"imaps\", \"org.eclipse.angus.mail.imap.IMAPSSLStore\",\n1034                       \"Oracle\", Version.version));\n1035               addProvider(new Provider(Provider.Type.STORE,\n1036                       \"pop3\", \"org.eclipse.angus.mail.pop3.POP3Store\",\n1037                       \"Oracle\", Version.version));\n1038               addProvider(new Provider(Provider.Type.STORE,\n1039                       \"pop3s\", \"org.eclipse.angus.mail.pop3.POP3SSLStore\",\n1040                       \"Oracle\", Version.version));\n1041               addProvider(new Provider(Provider.Type.TRANSPORT,\n1042                       \"smtp\", \"org.eclipse.angus.mail.smtp.SMTPTransport\",\n1043                       \"Oracle\", Version.version));\n1044               addProvider(new Provider(Provider.Type.TRANSPORT,\n1045                       \"smtps\", \"org.eclipse.angus.mail.smtp.SMTPSSLTransport\",\n1046                       \"Oracle\", Version.version));\n1047           }\n1048   \n1049           if (logger.isLoggable(Level.CONFIG)) {\n1050               // dump the output of the tables for debugging\n1051               logger.config(\"Tables of loaded providers\");\n1052               logger.config(\"Providers Listed By Class Name: \" +\n1053                       providersByClassName);\n1054               logger.config(\"Providers Listed By Protocol: \" +\n1055                       providersByProtocol);\n1056           }\n1057       }\n1426       private static Class<?>[] getHk2ServiceLoaderTargets(Class<?> factoryClass) {\n1427           ClassLoader[] loaders = getClassLoaders(Thread.class, factoryClass, System.class);\n1428   \n1429           Class<?>[] classes = new Class<?>[loaders.length];\n1430           int w = 0;\n1431           for (ClassLoader loader : loaders) {\n1432               if (loader != null) {\n1433                   try {\n1434                       classes[w++] = Class.forName(\"org.glassfish.hk2.osgiresourcelocator.ServiceLoader\", false, loader);\n1435                   } catch (Exception | LinkageError ignored) {\n1436                   }  //GlassFish class loaders can throw undocumented exceptions\n1437               }\n1438           }\n1439   \n1440           if (classes.length != w) {\n1441              classes = Arrays.copyOf(classes, w);\n1442           }\n1443           return classes;\n1444       }\n1446       @SuppressWarnings({\"unchecked\"})\n1447       private <T> Iterator<T> lookupUsingHk2ServiceLoader(Class<T> factoryId, ClassLoader loader) {\n1448           for (Class<?> target : getHk2ServiceLoaderTargets(factoryId)) {\n1449               try {\n1450                   // Use reflection to avoid having any dependency on HK2 ServiceLoader class\n1451                   Class<?> serviceClass = Class.forName(factoryId.getName(), false, loader);\n1452                   Class<?>[] args = new Class<?>[]{serviceClass};\n1453                   Method m = target.getMethod(\"lookupProviderInstances\", Class.class);\n1454                   Iterable<T> result = ((Iterable<T>) m.invoke(null, (Object[]) args));\n1455                   if (result != null) {\n1456                       return result.iterator();\n1457                   }\n1458               } catch (Exception ignored) {\n1459                   // log and continue\n1460               }\n1461           }\n1462           return Collections.emptyIterator();\n1463       }\n",
            "cost": 0.08049,
            "harness_id": "MailApiHarnessOne",
            "sanitizer": "load arbitrary library",
            "sink": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/Session.java:1434:50",
            "status": "corpus",
            "valid_path": "NO",
            "id": 2
        },
        {
            "blob": [
                ""
            ],
            "code": "src/mail-api-harnesses/mail-api-harness-one/src/main/java/com/aixcc/mailapi/harnesses/one/MailApiHarnessOne.java:\n17       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n18           try {\n19               ByteArrayInputStream bs = new ByteArrayInputStream(input);\n20       \n21               MimeMessage mimeMessage = new MimeMessage(null, bs);\n22       \n23               // Re-serialize the message, changing the subject.\n24               mimeMessage = new MimeMessage(mimeMessage);\n25               mimeMessage.setSubject(\"FWD: \" + mimeMessage.getSubject());\n26               mimeMessage.setContent(mimeMessage.getDataHandler().getDataSource(), mimeMessage.getContentType());\n27               mimeMessage.saveChanges();\n28       \n29               ByteArrayOutputStream bos = new ByteArrayOutputStream();\n30               mimeMessage.writeTo(bos);\n31       \n32               String serialized = new String(bos.toByteArray(), \"UTF-8\");\n33           } catch (Exception e) {\n34               // Ignore exceptions.\n35           }\n36       }\n\nsrc/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/internet/MimeMessage.java:\n1884       @Override\n1885       public void writeTo(OutputStream os)\n1886               throws IOException, MessagingException {\n1887           writeTo(os, null);\n1888       }\n1907       public void writeTo(OutputStream os, String[] ignoreList)\n1908               throws IOException, MessagingException {\n1909           if (!saved)\n1910               saveChanges();\n1911   \n1912           if (modified) {\n1913               MimeBodyPart.writeTo(this, os, ignoreList);\n1914               return;\n1915           }\n1916   \n1917           // Else, the content is untouched, so we can just output it\n1918           // First, write out the header\n1919           Enumeration<String> hdrLines = getNonMatchingHeaderLines(ignoreList);\n1920           LineOutputStream los = provider().outputLineStream(os, allowutf8);\n1921           while (hdrLines.hasMoreElements())\n1922               los.writeln(hdrLines.nextElement());\n1923   \n1924           // The CRLF separator between header and content\n1925           los.writeln();\n1926   \n1927           // Finally, the content.\n1928           if (content == null) {\n1929               // call getContentStream to give subclass a chance to\n1930               // provide the data on demand\n1931               InputStream is = null;\n1932               byte[] buf = new byte[8192];\n1933               try {\n1934                   is = getContentStream();\n1935                   // now copy the data to the output stream\n1936                   int len;\n1937                   while ((len = is.read(buf)) > 0)\n1938                       os.write(buf, 0, len);\n1939               } finally {\n1940                   if (is != null)\n1941                       is.close();\n1942                   buf = null;\n1943               }\n1944           } else {\n1945               os.write(content);\n1946           }\n1947           os.flush();\n1948       }\n\nsrc/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/internet/MimeBodyPart.java:\n1634       static void writeTo(MimePart part, OutputStream os, String[] ignoreList)\n1635               throws IOException, MessagingException {\n1636   \n1637           // see if we already have a LOS\n1638           LineOutputStream los = null;\n1639           if (os instanceof LineOutputStream) {\n1640               los = (LineOutputStream) os;\n1641           } else {\n1642               Map<String, Object> params = new HashMap<>();\n1643               params.put(\"allowutf8\", allowutf8);\n1644               los = StreamProvider.provider().outputLineStream(os, allowutf8);\n1645           }\n1646   \n1647           // First, write out the header\n1648           Enumeration<String> hdrLines\n1649                   = part.getNonMatchingHeaderLines(ignoreList);\n1650           while (hdrLines.hasMoreElements())\n1651               los.writeln(hdrLines.nextElement());\n1652   \n1653           // The CRLF separator between header and content\n1654           los.writeln();\n1655   \n1656           // Finally, the content. Encode if required.\n1657           // XXX: May need to account for ESMTP ?\n1658           InputStream is = null;\n1659           byte[] buf = null;\n1660           try {\n1661               /*\n1662                * If the data for this part comes from a stream,\n1663                * and is already encoded,\n1664                * just copy it to the output stream without decoding\n1665                * and reencoding it.\n1666                */\n1667               DataHandler dh = part.getDataHandler();\n1668               if (dh instanceof MimePartDataHandler) {\n1669                   MimePartDataHandler mpdh = (MimePartDataHandler) dh;\n1670                   MimePart mpart = mpdh.getPart();\n1671                   if (mpart.getEncoding() != null)\n1672                       is = mpdh.getContentStream();\n1673               }\n1674               if (is != null) {\n1675                   // now copy the data to the output stream\n1676                   buf = new byte[8192];\n1677                   int len;\n1678                   while ((len = is.read(buf)) > 0)\n1679                       os.write(buf, 0, len);\n1680               } else {\n1681                   os = MimeUtility.encode(os,\n1682                           restrictEncoding(part, part.getEncoding()));\n1683                   part.getDataHandler().writeTo(os);\n1684               }\n1685           } finally {\n1686               if (is != null)\n1687                   is.close();\n1688               buf = null;\n1689           }\n1690           os.flush(); // Needed to complete encoding\n1691       }\n\nsrc/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/util/StreamProvider.java:\n191       static StreamProvider provider() {\n192           if (System.getSecurityManager() != null) {\n193               return AccessController.doPrivileged(new PrivilegedAction<StreamProvider>() {\n194                   public StreamProvider run() {\n195                       return FactoryFinder.find(StreamProvider.class);\n196                   }\n197               });\n198           } else {\n199               return FactoryFinder.find(StreamProvider.class);\n200           }\n201       }\n\nsrc/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/util/FactoryFinder.java:\n 36       static <T> T find(Class<T> factoryClass) throws RuntimeException {\n 37           T result;\n 38           ClassLoader loader = Thread.currentThread().getContextClassLoader();\n 39           if (loader != null) {\n 40               result = find(factoryClass, loader);\n 41               if (result != null) {\n 42                   return result;\n 43               }\n 44           }\n 45   \n 46           //JakartaMail API ClassLoader / caller classloader\n 47           loader = factoryClass.getClassLoader();\n 48           if (loader != null) {\n 49               result = find(factoryClass, loader);\n 50               if (result != null) {\n 51                   return result;\n 52               }\n 53           }\n 54   \n 55           //Fallback to system class loader\n 56           result = find(factoryClass, ClassLoader.getSystemClassLoader());\n 57           if (result != null) {\n 58               return result;\n 59           }\n 60   \n 61           throw new IllegalStateException(\"No provider of \" + factoryClass.getName() + \" was found\");\n 62       }\n 64       private static <T> T find(Class<T> factoryClass, ClassLoader loader) throws RuntimeException {\n 65           // Use the system property first\n 66           String className = fromSystemProperty(factoryClass.getName());\n 67           if (className != null) {\n 68               T result = newInstance(className, factoryClass, loader);\n 69               if (result != null) {\n 70                   return result;\n 71               }\n 72           }\n 73   \n 74           // standard services: java.util.ServiceLoader\n 75           T factory = factoryFromServiceLoader(factoryClass, loader);\n 76           if (factory != null) {\n 77               return factory;\n 78           }\n 79   \n 80           // handling Glassfish/OSGi (platform specific default)\n 81   \n 82           T result = lookupUsingHk2ServiceLoader(factoryClass, loader);\n 83           if (result != null) {\n 84               return result;\n 85           }\n 86   \n 87           return null;\n 88       }\n134       @SuppressWarnings({\"unchecked\"})\n135       private static <T> T lookupUsingHk2ServiceLoader(Class<T> factoryClass, ClassLoader loader) {\n136           for (Class<?> target : getHk2ServiceLoaderTargets(factoryClass)) {\n137               try {\n138                   // Use reflection to avoid having any dependency on HK2 ServiceLoader class\n139                   Class<?> serviceClass = Class.forName(factoryClass.getName(), false, loader);\n140                   Class<?>[] args = new Class<?>[]{serviceClass};\n141                   Method m = target.getMethod(\"lookupProviderInstances\", Class.class);\n142                   Iterable<?> iterable = ((Iterable<?>) m.invoke(null, (Object[]) args));\n143                   if (iterable != null) {\n144                       Iterator<?> iter = iterable.iterator();\n145                       if (iter.hasNext()) {\n146                           return factoryClass.cast(iter.next()); //Verify classloader.\n147                       }\n148                   }\n149               } catch (Exception ignored) {\n150                   // log and continue\n151               }\n152           }\n153           return null;\n154       }\n",
            "cost": 0.06346500000000001,
            "harness_id": "MailApiHarnessOne",
            "sanitizer": "load arbitrary library",
            "sink": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/util/FactoryFinder.java:139:55",
            "status": "corpus",
            "valid_path": "NO",
            "id": 3
        },
        {
            "blob": [
                ""
            ],
            "code": "src/mail-api-harnesses/mail-api-harness-one/src/main/java/com/aixcc/mailapi/harnesses/one/MailApiHarnessOne.java:\n17       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n18           try {\n19               ByteArrayInputStream bs = new ByteArrayInputStream(input);\n20       \n21               MimeMessage mimeMessage = new MimeMessage(null, bs);\n22       \n23               // Re-serialize the message, changing the subject.\n24               mimeMessage = new MimeMessage(mimeMessage);\n25               mimeMessage.setSubject(\"FWD: \" + mimeMessage.getSubject());\n26               mimeMessage.setContent(mimeMessage.getDataHandler().getDataSource(), mimeMessage.getContentType());\n27               mimeMessage.saveChanges();\n28       \n29               ByteArrayOutputStream bos = new ByteArrayOutputStream();\n30               mimeMessage.writeTo(bos);\n31       \n32               String serialized = new String(bos.toByteArray(), \"UTF-8\");\n33           } catch (Exception e) {\n34               // Ignore exceptions.\n35           }\n36       }\n\nsrc/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/internet/MimeMessage.java:\n 233       public MimeMessage(MimeMessage source) throws MessagingException {\n 234           super(source.session);\n 235           flags = source.getFlags();\n 236           if (flags == null)    // make sure flags is always set\n 237               flags = new Flags();\n 238           ByteArrayOutputStream bos;\n 239           int size = source.getSize();\n 240           if (size > 0)\n 241               bos = new ByteArrayOutputStream(size);\n 242           else\n 243               bos = new ByteArrayOutputStream();\n 244           try {\n 245               strict = source.strict;\n 246               source.writeTo(bos);\n 247               bos.close();\n 248               try (InputStream bis = provider().inputSharedByteArray(bos.toByteArray())) {\n 249                   parse(bis);\n 250               }\n 251               saved = true;\n 252           } catch (IOException ex) {\n 253               // should never happen, but just in case...\n 254               throw new MessagingException(\"IOException while copying message\",\n 255                       ex);\n 256           }\n 257       }\n2326       private StreamProvider provider() throws MessagingException {\n2327           try {\n2328               try {\n2329                   final Session s = this.session;\n2330                   if (s != null) {\n2331                       return s.getStreamProvider();\n2332                   } else {\n2333                       return Session.getDefaultInstance(System.getProperties(),\n2334                           null).getStreamProvider();\n2335                   }\n2336               } catch (ServiceConfigurationError sce) {\n2337                   throw new IllegalStateException(sce);\n2338               }\n2339           } catch (RuntimeException re) {\n2340               throw new MessagingException(\"Unable to get \"\n2341                       + StreamProvider.class.getName(), re);\n2342           }\n2343       }\n\nsrc/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/Session.java:\n 254       private Session(Properties props, Authenticator authenticator) {\n 255           this.props = props;\n 256           this.authenticator = authenticator;\n 257           this.streamProvider = StreamProvider.provider();\n 258   \n 259           if (Boolean.parseBoolean(props.getProperty(\"mail.debug\")))\n 260               debug = true;\n 261   \n 262           initLogger();\n 263           logger.log(Level.CONFIG, \"Jakarta Mail version {0}\", Version.version);\n 264   \n 265           // get the Class associated with the Authenticator\n 266           Class<?> cl;\n 267           if (authenticator != null) {\n 268               cl = authenticator.getClass();\n 269           } else {\n 270               // Use implementation class, because that class loader has access to jakarta.mail module and implementation resources\n 271               cl = streamProvider.getClass();\n 272           }\n 273           // load the resources\n 274           loadProviders(cl);\n 275           loadAddressMap(cl);\n 276           q = new EventQueue((Executor) props.get(\"mail.event.executor\"));\n 277       }\n 378       public static synchronized Session getDefaultInstance(Properties props, Authenticator authenticator) {\n 379           if (defaultSession == null) {\n 380               SecurityManager security = System.getSecurityManager();\n 381               if (security != null)\n 382                   security.checkSetFactory();\n 383               defaultSession = new Session(props, authenticator);\n 384           } else {\n 385               // have to check whether caller is allowed to see default session\n 386               if (defaultSession.authenticator == authenticator)\n 387                   ;    // either same object or both null, either way OK\n 388               else if (defaultSession.authenticator != null &&\n 389                       authenticator != null &&\n 390                       defaultSession.authenticator.getClass().getClassLoader() ==\n 391                               authenticator.getClass().getClassLoader())\n 392                   ;    // both objects came from the same class loader, OK\n 393               else\n 394                   // anything else is not allowed\n 395                   throw new SecurityException(\"Access to default session denied\");\n 396           }\n 397   \n 398           return defaultSession;\n 399       }\n 961       private void loadProviders(Class<?> cl) {\n 962           StreamLoader loader = new StreamLoader() {\n 963               @Override\n 964               public void load(InputStream is) throws IOException {\n 965                   loadProvidersFromStream(is);\n 966               }\n 967           };\n 968   \n 969           // load system-wide javamail.providers from the\n 970           // <java.home>/{conf,lib} directory\n 971           try {\n 972               if (confDir != null)\n 973                   loadFile(confDir + \"javamail.providers\", loader);\n 974           } catch (SecurityException ex) {\n 975           }\n 976   \n 977           //Fetch classloader of given class, falling back to others if needed.\n 978           ClassLoader gcl;\n 979           ClassLoader[] loaders = getClassLoaders(cl, Thread.class, System.class);\n 980           if (loaders.length != 0) {\n 981               gcl = loaders[0];\n 982           } else {\n 983               gcl = getContextClassLoader(); //Fail safe\n 984           }\n 985   \n 986           // next, add all the non-default services\n 987           ServiceLoader<Provider> sl = ServiceLoader.load(Provider.class, gcl);\n 988           for (Provider p : sl) {\n 989               if (!containsDefaultProvider(p))\n 990                   addProvider(p);\n 991           }\n 992   \n 993           // + handle Glassfish/OSGi (platform specific default)\n 994           Iterator<Provider> iter = lookupUsingHk2ServiceLoader(Provider.class, gcl);\n 995           while (iter.hasNext()) {\n 996               Provider p = iter.next();\n 997               if (!containsDefaultProvider(p))\n 998                   addProvider(p);\n 999           }\n1000   \n1001           // load the META-INF/javamail.providers file supplied by an application\n1002           loadAllResources(\"META-INF/javamail.providers\", cl, loader);\n1003   \n1004           // load default META-INF/javamail.default.providers from mail.jar file\n1005           loadResource(\"/META-INF/javamail.default.providers\", cl, loader, false);\n1006   \n1007           // finally, add all the default services\n1008           sl = ServiceLoader.load(Provider.class, gcl);\n1009           for (Provider p : sl) {\n1010               if (containsDefaultProvider(p))\n1011                   addProvider(p);\n1012           }\n1013   \n1014           // + handle Glassfish/OSGi (platform specific default)\n1015           iter = lookupUsingHk2ServiceLoader(Provider.class, gcl);\n1016           while (iter.hasNext()) {\n1017               Provider p = iter.next();\n1018               if (containsDefaultProvider(p)) {\n1019                   addProvider(p);\n1020               }\n1021           }\n1022   \n1023           /*\n1024            * If we haven't loaded any providers, fake it.\n1025            */\n1026           if (providers.isEmpty()) {\n1027               logger.config(\"failed to load any providers, using defaults\");\n1028               // failed to load any providers, initialize with our defaults\n1029               addProvider(new Provider(Provider.Type.STORE,\n1030                       \"imap\", \"org.eclipse.angus.mail.imap.IMAPStore\",\n1031                       \"Oracle\", Version.version));\n1032               addProvider(new Provider(Provider.Type.STORE,\n1033                       \"imaps\", \"org.eclipse.angus.mail.imap.IMAPSSLStore\",\n1034                       \"Oracle\", Version.version));\n1035               addProvider(new Provider(Provider.Type.STORE,\n1036                       \"pop3\", \"org.eclipse.angus.mail.pop3.POP3Store\",\n1037                       \"Oracle\", Version.version));\n1038               addProvider(new Provider(Provider.Type.STORE,\n1039                       \"pop3s\", \"org.eclipse.angus.mail.pop3.POP3SSLStore\",\n1040                       \"Oracle\", Version.version));\n1041               addProvider(new Provider(Provider.Type.TRANSPORT,\n1042                       \"smtp\", \"org.eclipse.angus.mail.smtp.SMTPTransport\",\n1043                       \"Oracle\", Version.version));\n1044               addProvider(new Provider(Provider.Type.TRANSPORT,\n1045                       \"smtps\", \"org.eclipse.angus.mail.smtp.SMTPSSLTransport\",\n1046                       \"Oracle\", Version.version));\n1047           }\n1048   \n1049           if (logger.isLoggable(Level.CONFIG)) {\n1050               // dump the output of the tables for debugging\n1051               logger.config(\"Tables of loaded providers\");\n1052               logger.config(\"Providers Listed By Class Name: \" +\n1053                       providersByClassName);\n1054               logger.config(\"Providers Listed By Protocol: \" +\n1055                       providersByProtocol);\n1056           }\n1057       }\n1446       @SuppressWarnings({\"unchecked\"})\n1447       private <T> Iterator<T> lookupUsingHk2ServiceLoader(Class<T> factoryId, ClassLoader loader) {\n1448           for (Class<?> target : getHk2ServiceLoaderTargets(factoryId)) {\n1449               try {\n1450                   // Use reflection to avoid having any dependency on HK2 ServiceLoader class\n1451                   Class<?> serviceClass = Class.forName(factoryId.getName(), false, loader);\n1452                   Class<?>[] args = new Class<?>[]{serviceClass};\n1453                   Method m = target.getMethod(\"lookupProviderInstances\", Class.class);\n1454                   Iterable<T> result = ((Iterable<T>) m.invoke(null, (Object[]) args));\n1455                   if (result != null) {\n1456                       return result.iterator();\n1457                   }\n1458               } catch (Exception ignored) {\n1459                   // log and continue\n1460               }\n1461           }\n1462           return Collections.emptyIterator();\n1463       }\n",
            "cost": 0.07843,
            "harness_id": "MailApiHarnessOne",
            "sanitizer": "load arbitrary library",
            "sink": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/Session.java:1451:55",
            "status": "corpus",
            "valid_path": "NO",
            "id": 4
        },
        {
            "blob": [
                ""
            ],
            "code": "src/mail-api-harnesses/mail-api-harness-one/src/main/java/com/aixcc/mailapi/harnesses/one/MailApiHarnessOne.java:\n17       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n18           try {\n19               ByteArrayInputStream bs = new ByteArrayInputStream(input);\n20       \n21               MimeMessage mimeMessage = new MimeMessage(null, bs);\n22       \n23               // Re-serialize the message, changing the subject.\n24               mimeMessage = new MimeMessage(mimeMessage);\n25               mimeMessage.setSubject(\"FWD: \" + mimeMessage.getSubject());\n26               mimeMessage.setContent(mimeMessage.getDataHandler().getDataSource(), mimeMessage.getContentType());\n27               mimeMessage.saveChanges();\n28       \n29               ByteArrayOutputStream bos = new ByteArrayOutputStream();\n30               mimeMessage.writeTo(bos);\n31       \n32               String serialized = new String(bos.toByteArray(), \"UTF-8\");\n33           } catch (Exception e) {\n34               // Ignore exceptions.\n35           }\n36       }\n\nsrc/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/internet/MimeMessage.java:\n1884       @Override\n1885       public void writeTo(OutputStream os)\n1886               throws IOException, MessagingException {\n1887           writeTo(os, null);\n1888       }\n1907       public void writeTo(OutputStream os, String[] ignoreList)\n1908               throws IOException, MessagingException {\n1909           if (!saved)\n1910               saveChanges();\n1911   \n1912           if (modified) {\n1913               MimeBodyPart.writeTo(this, os, ignoreList);\n1914               return;\n1915           }\n1916   \n1917           // Else, the content is untouched, so we can just output it\n1918           // First, write out the header\n1919           Enumeration<String> hdrLines = getNonMatchingHeaderLines(ignoreList);\n1920           LineOutputStream los = provider().outputLineStream(os, allowutf8);\n1921           while (hdrLines.hasMoreElements())\n1922               los.writeln(hdrLines.nextElement());\n1923   \n1924           // The CRLF separator between header and content\n1925           los.writeln();\n1926   \n1927           // Finally, the content.\n1928           if (content == null) {\n1929               // call getContentStream to give subclass a chance to\n1930               // provide the data on demand\n1931               InputStream is = null;\n1932               byte[] buf = new byte[8192];\n1933               try {\n1934                   is = getContentStream();\n1935                   // now copy the data to the output stream\n1936                   int len;\n1937                   while ((len = is.read(buf)) > 0)\n1938                       os.write(buf, 0, len);\n1939               } finally {\n1940                   if (is != null)\n1941                       is.close();\n1942                   buf = null;\n1943               }\n1944           } else {\n1945               os.write(content);\n1946           }\n1947           os.flush();\n1948       }\n\nsrc/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/internet/MimeBodyPart.java:\n1634       static void writeTo(MimePart part, OutputStream os, String[] ignoreList)\n1635               throws IOException, MessagingException {\n1636   \n1637           // see if we already have a LOS\n1638           LineOutputStream los = null;\n1639           if (os instanceof LineOutputStream) {\n1640               los = (LineOutputStream) os;\n1641           } else {\n1642               Map<String, Object> params = new HashMap<>();\n1643               params.put(\"allowutf8\", allowutf8);\n1644               los = StreamProvider.provider().outputLineStream(os, allowutf8);\n1645           }\n1646   \n1647           // First, write out the header\n1648           Enumeration<String> hdrLines\n1649                   = part.getNonMatchingHeaderLines(ignoreList);\n1650           while (hdrLines.hasMoreElements())\n1651               los.writeln(hdrLines.nextElement());\n1652   \n1653           // The CRLF separator between header and content\n1654           los.writeln();\n1655   \n1656           // Finally, the content. Encode if required.\n1657           // XXX: May need to account for ESMTP ?\n1658           InputStream is = null;\n1659           byte[] buf = null;\n1660           try {\n1661               /*\n1662                * If the data for this part comes from a stream,\n1663                * and is already encoded,\n1664                * just copy it to the output stream without decoding\n1665                * and reencoding it.\n1666                */\n1667               DataHandler dh = part.getDataHandler();\n1668               if (dh instanceof MimePartDataHandler) {\n1669                   MimePartDataHandler mpdh = (MimePartDataHandler) dh;\n1670                   MimePart mpart = mpdh.getPart();\n1671                   if (mpart.getEncoding() != null)\n1672                       is = mpdh.getContentStream();\n1673               }\n1674               if (is != null) {\n1675                   // now copy the data to the output stream\n1676                   buf = new byte[8192];\n1677                   int len;\n1678                   while ((len = is.read(buf)) > 0)\n1679                       os.write(buf, 0, len);\n1680               } else {\n1681                   os = MimeUtility.encode(os,\n1682                           restrictEncoding(part, part.getEncoding()));\n1683                   part.getDataHandler().writeTo(os);\n1684               }\n1685           } finally {\n1686               if (is != null)\n1687                   is.close();\n1688               buf = null;\n1689           }\n1690           os.flush(); // Needed to complete encoding\n1691       }\n\nsrc/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/util/StreamProvider.java:\n191       static StreamProvider provider() {\n192           if (System.getSecurityManager() != null) {\n193               return AccessController.doPrivileged(new PrivilegedAction<StreamProvider>() {\n194                   public StreamProvider run() {\n195                       return FactoryFinder.find(StreamProvider.class);\n196                   }\n197               });\n198           } else {\n199               return FactoryFinder.find(StreamProvider.class);\n200           }\n201       }\n\nsrc/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/util/FactoryFinder.java:\n 36       static <T> T find(Class<T> factoryClass) throws RuntimeException {\n 37           T result;\n 38           ClassLoader loader = Thread.currentThread().getContextClassLoader();\n 39           if (loader != null) {\n 40               result = find(factoryClass, loader);\n 41               if (result != null) {\n 42                   return result;\n 43               }\n 44           }\n 45   \n 46           //JakartaMail API ClassLoader / caller classloader\n 47           loader = factoryClass.getClassLoader();\n 48           if (loader != null) {\n 49               result = find(factoryClass, loader);\n 50               if (result != null) {\n 51                   return result;\n 52               }\n 53           }\n 54   \n 55           //Fallback to system class loader\n 56           result = find(factoryClass, ClassLoader.getSystemClassLoader());\n 57           if (result != null) {\n 58               return result;\n 59           }\n 60   \n 61           throw new IllegalStateException(\"No provider of \" + factoryClass.getName() + \" was found\");\n 62       }\n 64       private static <T> T find(Class<T> factoryClass, ClassLoader loader) throws RuntimeException {\n 65           // Use the system property first\n 66           String className = fromSystemProperty(factoryClass.getName());\n 67           if (className != null) {\n 68               T result = newInstance(className, factoryClass, loader);\n 69               if (result != null) {\n 70                   return result;\n 71               }\n 72           }\n 73   \n 74           // standard services: java.util.ServiceLoader\n 75           T factory = factoryFromServiceLoader(factoryClass, loader);\n 76           if (factory != null) {\n 77               return factory;\n 78           }\n 79   \n 80           // handling Glassfish/OSGi (platform specific default)\n 81   \n 82           T result = lookupUsingHk2ServiceLoader(factoryClass, loader);\n 83           if (result != null) {\n 84               return result;\n 85           }\n 86   \n 87           return null;\n 88       }\n 90       private static <T> T newInstance(String className, Class<T> factoryClass, ClassLoader classLoader) throws RuntimeException {\n 91           checkPackageAccess(className);\n 92           try {\n 93               Class<?> clazz;\n 94               if (classLoader == null) { //Match behavior of ServiceLoader\n 95                   classLoader = ClassLoader.getSystemClassLoader();\n 96               }\n 97               clazz = Class.forName(className, false, classLoader);\n 98               return clazz.asSubclass(factoryClass).getConstructor().newInstance();\n 99           } catch (ClassCastException wrongLoader) {\n100               return null;\n101           } catch (ReflectiveOperationException e) {\n102               throw new IllegalArgumentException(\"Cannot instance \" + className, e);\n103           }\n104       }\n",
            "cost": 0.065465,
            "harness_id": "MailApiHarnessOne",
            "sanitizer": "load arbitrary library",
            "sink": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/util/FactoryFinder.java:97:35",
            "status": "corpus",
            "valid_path": "NO",
            "id": 5
        },
        {
            "blob": [
                ""
            ],
            "code": "src/mail-api-harnesses/mail-api-harness-one/src/main/java/com/aixcc/mailapi/harnesses/one/MailApiHarnessOne.java:\n17       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n18           try {\n19               ByteArrayInputStream bs = new ByteArrayInputStream(input);\n20       \n21               MimeMessage mimeMessage = new MimeMessage(null, bs);\n22       \n23               // Re-serialize the message, changing the subject.\n24               mimeMessage = new MimeMessage(mimeMessage);\n25               mimeMessage.setSubject(\"FWD: \" + mimeMessage.getSubject());\n26               mimeMessage.setContent(mimeMessage.getDataHandler().getDataSource(), mimeMessage.getContentType());\n27               mimeMessage.saveChanges();\n28       \n29               ByteArrayOutputStream bos = new ByteArrayOutputStream();\n30               mimeMessage.writeTo(bos);\n31       \n32               String serialized = new String(bos.toByteArray(), \"UTF-8\");\n33           } catch (Exception e) {\n34               // Ignore exceptions.\n35           }\n36       }\n\nsrc/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/internet/MimeMessage.java:\n1884       @Override\n1885       public void writeTo(OutputStream os)\n1886               throws IOException, MessagingException {\n1887           writeTo(os, null);\n1888       }\n1907       public void writeTo(OutputStream os, String[] ignoreList)\n1908               throws IOException, MessagingException {\n1909           if (!saved)\n1910               saveChanges();\n1911   \n1912           if (modified) {\n1913               MimeBodyPart.writeTo(this, os, ignoreList);\n1914               return;\n1915           }\n1916   \n1917           // Else, the content is untouched, so we can just output it\n1918           // First, write out the header\n1919           Enumeration<String> hdrLines = getNonMatchingHeaderLines(ignoreList);\n1920           LineOutputStream los = provider().outputLineStream(os, allowutf8);\n1921           while (hdrLines.hasMoreElements())\n1922               los.writeln(hdrLines.nextElement());\n1923   \n1924           // The CRLF separator between header and content\n1925           los.writeln();\n1926   \n1927           // Finally, the content.\n1928           if (content == null) {\n1929               // call getContentStream to give subclass a chance to\n1930               // provide the data on demand\n1931               InputStream is = null;\n1932               byte[] buf = new byte[8192];\n1933               try {\n1934                   is = getContentStream();\n1935                   // now copy the data to the output stream\n1936                   int len;\n1937                   while ((len = is.read(buf)) > 0)\n1938                       os.write(buf, 0, len);\n1939               } finally {\n1940                   if (is != null)\n1941                       is.close();\n1942                   buf = null;\n1943               }\n1944           } else {\n1945               os.write(content);\n1946           }\n1947           os.flush();\n1948       }\n\nsrc/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/internet/MimeBodyPart.java:\n1634       static void writeTo(MimePart part, OutputStream os, String[] ignoreList)\n1635               throws IOException, MessagingException {\n1636   \n1637           // see if we already have a LOS\n1638           LineOutputStream los = null;\n1639           if (os instanceof LineOutputStream) {\n1640               los = (LineOutputStream) os;\n1641           } else {\n1642               Map<String, Object> params = new HashMap<>();\n1643               params.put(\"allowutf8\", allowutf8);\n1644               los = StreamProvider.provider().outputLineStream(os, allowutf8);\n1645           }\n1646   \n1647           // First, write out the header\n1648           Enumeration<String> hdrLines\n1649                   = part.getNonMatchingHeaderLines(ignoreList);\n1650           while (hdrLines.hasMoreElements())\n1651               los.writeln(hdrLines.nextElement());\n1652   \n1653           // The CRLF separator between header and content\n1654           los.writeln();\n1655   \n1656           // Finally, the content. Encode if required.\n1657           // XXX: May need to account for ESMTP ?\n1658           InputStream is = null;\n1659           byte[] buf = null;\n1660           try {\n1661               /*\n1662                * If the data for this part comes from a stream,\n1663                * and is already encoded,\n1664                * just copy it to the output stream without decoding\n1665                * and reencoding it.\n1666                */\n1667               DataHandler dh = part.getDataHandler();\n1668               if (dh instanceof MimePartDataHandler) {\n1669                   MimePartDataHandler mpdh = (MimePartDataHandler) dh;\n1670                   MimePart mpart = mpdh.getPart();\n1671                   if (mpart.getEncoding() != null)\n1672                       is = mpdh.getContentStream();\n1673               }\n1674               if (is != null) {\n1675                   // now copy the data to the output stream\n1676                   buf = new byte[8192];\n1677                   int len;\n1678                   while ((len = is.read(buf)) > 0)\n1679                       os.write(buf, 0, len);\n1680               } else {\n1681                   os = MimeUtility.encode(os,\n1682                           restrictEncoding(part, part.getEncoding()));\n1683                   part.getDataHandler().writeTo(os);\n1684               }\n1685           } finally {\n1686               if (is != null)\n1687                   is.close();\n1688               buf = null;\n1689           }\n1690           os.flush(); // Needed to complete encoding\n1691       }\n\nsrc/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/util/StreamProvider.java:\n191       static StreamProvider provider() {\n192           if (System.getSecurityManager() != null) {\n193               return AccessController.doPrivileged(new PrivilegedAction<StreamProvider>() {\n194                   public StreamProvider run() {\n195                       return FactoryFinder.find(StreamProvider.class);\n196                   }\n197               });\n198           } else {\n199               return FactoryFinder.find(StreamProvider.class);\n200           }\n201       }\n\nsrc/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/util/FactoryFinder.java:\n 36       static <T> T find(Class<T> factoryClass) throws RuntimeException {\n 37           T result;\n 38           ClassLoader loader = Thread.currentThread().getContextClassLoader();\n 39           if (loader != null) {\n 40               result = find(factoryClass, loader);\n 41               if (result != null) {\n 42                   return result;\n 43               }\n 44           }\n 45   \n 46           //JakartaMail API ClassLoader / caller classloader\n 47           loader = factoryClass.getClassLoader();\n 48           if (loader != null) {\n 49               result = find(factoryClass, loader);\n 50               if (result != null) {\n 51                   return result;\n 52               }\n 53           }\n 54   \n 55           //Fallback to system class loader\n 56           result = find(factoryClass, ClassLoader.getSystemClassLoader());\n 57           if (result != null) {\n 58               return result;\n 59           }\n 60   \n 61           throw new IllegalStateException(\"No provider of \" + factoryClass.getName() + \" was found\");\n 62       }\n 64       private static <T> T find(Class<T> factoryClass, ClassLoader loader) throws RuntimeException {\n 65           // Use the system property first\n 66           String className = fromSystemProperty(factoryClass.getName());\n 67           if (className != null) {\n 68               T result = newInstance(className, factoryClass, loader);\n 69               if (result != null) {\n 70                   return result;\n 71               }\n 72           }\n 73   \n 74           // standard services: java.util.ServiceLoader\n 75           T factory = factoryFromServiceLoader(factoryClass, loader);\n 76           if (factory != null) {\n 77               return factory;\n 78           }\n 79   \n 80           // handling Glassfish/OSGi (platform specific default)\n 81   \n 82           T result = lookupUsingHk2ServiceLoader(factoryClass, loader);\n 83           if (result != null) {\n 84               return result;\n 85           }\n 86   \n 87           return null;\n 88       }\n111       private static Class<?>[] getHk2ServiceLoaderTargets(Class<?> factoryClass) {\n112           ClassLoader[] loaders = new ClassLoader[]{\n113                   Thread.currentThread().getContextClassLoader(), \n114                       factoryClass.getClassLoader(), \n115                       ClassLoader.getSystemClassLoader()};\n116           \n117           Class<?>[] classes = new Class<?>[loaders.length];\n118           int w = 0;\n119           for (ClassLoader loader : loaders) {\n120               if (loader != null) {\n121                   try {\n122                       classes[w++] = Class.forName(\"org.glassfish.hk2.osgiresourcelocator.ServiceLoader\", false, loader);\n123                   } catch (Exception | LinkageError ignored) {  \n124                   } //GlassFish class loaders can throw undocumented exceptions\n125               }\n126           }\n127           \n128           if (classes.length != w) {\n129              classes = Arrays.copyOf(classes, w);\n130           }\n131           return classes;\n132       }\n134       @SuppressWarnings({\"unchecked\"})\n135       private static <T> T lookupUsingHk2ServiceLoader(Class<T> factoryClass, ClassLoader loader) {\n136           for (Class<?> target : getHk2ServiceLoaderTargets(factoryClass)) {\n137               try {\n138                   // Use reflection to avoid having any dependency on HK2 ServiceLoader class\n139                   Class<?> serviceClass = Class.forName(factoryClass.getName(), false, loader);\n140                   Class<?>[] args = new Class<?>[]{serviceClass};\n141                   Method m = target.getMethod(\"lookupProviderInstances\", Class.class);\n142                   Iterable<?> iterable = ((Iterable<?>) m.invoke(null, (Object[]) args));\n143                   if (iterable != null) {\n144                       Iterator<?> iter = iterable.iterator();\n145                       if (iter.hasNext()) {\n146                           return factoryClass.cast(iter.next()); //Verify classloader.\n147                       }\n148                   }\n149               } catch (Exception ignored) {\n150                   // log and continue\n151               }\n152           }\n153           return null;\n154       }\n",
            "cost": 0.0658,
            "harness_id": "MailApiHarnessOne",
            "sanitizer": "load arbitrary library",
            "sink": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/util/FactoryFinder.java:122:50",
            "status": "corpus",
            "valid_path": "NO",
            "id": 6
        },
        {
            "blob": [
                ""
            ],
            "code": "src/mail-api-harnesses/mail-api-harness-one/src/main/java/com/aixcc/mailapi/harnesses/one/MailApiHarnessOne.java:\n17       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n18           try {\n19               ByteArrayInputStream bs = new ByteArrayInputStream(input);\n20       \n21               MimeMessage mimeMessage = new MimeMessage(null, bs);\n22       \n23               // Re-serialize the message, changing the subject.\n24               mimeMessage = new MimeMessage(mimeMessage);\n25               mimeMessage.setSubject(\"FWD: \" + mimeMessage.getSubject());\n26               mimeMessage.setContent(mimeMessage.getDataHandler().getDataSource(), mimeMessage.getContentType());\n27               mimeMessage.saveChanges();\n28       \n29               ByteArrayOutputStream bos = new ByteArrayOutputStream();\n30               mimeMessage.writeTo(bos);\n31       \n32               String serialized = new String(bos.toByteArray(), \"UTF-8\");\n33           } catch (Exception e) {\n34               // Ignore exceptions.\n35           }\n36       }\n\nsrc/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/internet/MimeMessage.java:\n 233       public MimeMessage(MimeMessage source) throws MessagingException {\n 234           super(source.session);\n 235           flags = source.getFlags();\n 236           if (flags == null)    // make sure flags is always set\n 237               flags = new Flags();\n 238           ByteArrayOutputStream bos;\n 239           int size = source.getSize();\n 240           if (size > 0)\n 241               bos = new ByteArrayOutputStream(size);\n 242           else\n 243               bos = new ByteArrayOutputStream();\n 244           try {\n 245               strict = source.strict;\n 246               source.writeTo(bos);\n 247               bos.close();\n 248               try (InputStream bis = provider().inputSharedByteArray(bos.toByteArray())) {\n 249                   parse(bis);\n 250               }\n 251               saved = true;\n 252           } catch (IOException ex) {\n 253               // should never happen, but just in case...\n 254               throw new MessagingException(\"IOException while copying message\",\n 255                       ex);\n 256           }\n 257       }\n2326       private StreamProvider provider() throws MessagingException {\n2327           try {\n2328               try {\n2329                   final Session s = this.session;\n2330                   if (s != null) {\n2331                       return s.getStreamProvider();\n2332                   } else {\n2333                       return Session.getDefaultInstance(System.getProperties(),\n2334                           null).getStreamProvider();\n2335                   }\n2336               } catch (ServiceConfigurationError sce) {\n2337                   throw new IllegalStateException(sce);\n2338               }\n2339           } catch (RuntimeException re) {\n2340               throw new MessagingException(\"Unable to get \"\n2341                       + StreamProvider.class.getName(), re);\n2342           }\n2343       }\n\nsrc/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/Session.java:\n 254       private Session(Properties props, Authenticator authenticator) {\n 255           this.props = props;\n 256           this.authenticator = authenticator;\n 257           this.streamProvider = StreamProvider.provider();\n 258   \n 259           if (Boolean.parseBoolean(props.getProperty(\"mail.debug\")))\n 260               debug = true;\n 261   \n 262           initLogger();\n 263           logger.log(Level.CONFIG, \"Jakarta Mail version {0}\", Version.version);\n 264   \n 265           // get the Class associated with the Authenticator\n 266           Class<?> cl;\n 267           if (authenticator != null) {\n 268               cl = authenticator.getClass();\n 269           } else {\n 270               // Use implementation class, because that class loader has access to jakarta.mail module and implementation resources\n 271               cl = streamProvider.getClass();\n 272           }\n 273           // load the resources\n 274           loadProviders(cl);\n 275           loadAddressMap(cl);\n 276           q = new EventQueue((Executor) props.get(\"mail.event.executor\"));\n 277       }\n 378       public static synchronized Session getDefaultInstance(Properties props, Authenticator authenticator) {\n 379           if (defaultSession == null) {\n 380               SecurityManager security = System.getSecurityManager();\n 381               if (security != null)\n 382                   security.checkSetFactory();\n 383               defaultSession = new Session(props, authenticator);\n 384           } else {\n 385               // have to check whether caller is allowed to see default session\n 386               if (defaultSession.authenticator == authenticator)\n 387                   ;    // either same object or both null, either way OK\n 388               else if (defaultSession.authenticator != null &&\n 389                       authenticator != null &&\n 390                       defaultSession.authenticator.getClass().getClassLoader() ==\n 391                               authenticator.getClass().getClassLoader())\n 392                   ;    // both objects came from the same class loader, OK\n 393               else\n 394                   // anything else is not allowed\n 395                   throw new SecurityException(\"Access to default session denied\");\n 396           }\n 397   \n 398           return defaultSession;\n 399       }\n 961       private void loadProviders(Class<?> cl) {\n 962           StreamLoader loader = new StreamLoader() {\n 963               @Override\n 964               public void load(InputStream is) throws IOException {\n 965                   loadProvidersFromStream(is);\n 966               }\n 967           };\n 968   \n 969           // load system-wide javamail.providers from the\n 970           // <java.home>/{conf,lib} directory\n 971           try {\n 972               if (confDir != null)\n 973                   loadFile(confDir + \"javamail.providers\", loader);\n 974           } catch (SecurityException ex) {\n 975           }\n 976   \n 977           //Fetch classloader of given class, falling back to others if needed.\n 978           ClassLoader gcl;\n 979           ClassLoader[] loaders = getClassLoaders(cl, Thread.class, System.class);\n 980           if (loaders.length != 0) {\n 981               gcl = loaders[0];\n 982           } else {\n 983               gcl = getContextClassLoader(); //Fail safe\n 984           }\n 985   \n 986           // next, add all the non-default services\n 987           ServiceLoader<Provider> sl = ServiceLoader.load(Provider.class, gcl);\n 988           for (Provider p : sl) {\n 989               if (!containsDefaultProvider(p))\n 990                   addProvider(p);\n 991           }\n 992   \n 993           // + handle Glassfish/OSGi (platform specific default)\n 994           Iterator<Provider> iter = lookupUsingHk2ServiceLoader(Provider.class, gcl);\n 995           while (iter.hasNext()) {\n 996               Provider p = iter.next();\n 997               if (!containsDefaultProvider(p))\n 998                   addProvider(p);\n 999           }\n1000   \n1001           // load the META-INF/javamail.providers file supplied by an application\n1002           loadAllResources(\"META-INF/javamail.providers\", cl, loader);\n1003   \n1004           // load default META-INF/javamail.default.providers from mail.jar file\n1005           loadResource(\"/META-INF/javamail.default.providers\", cl, loader, false);\n1006   \n1007           // finally, add all the default services\n1008           sl = ServiceLoader.load(Provider.class, gcl);\n1009           for (Provider p : sl) {\n1010               if (containsDefaultProvider(p))\n1011                   addProvider(p);\n1012           }\n1013   \n1014           // + handle Glassfish/OSGi (platform specific default)\n1015           iter = lookupUsingHk2ServiceLoader(Provider.class, gcl);\n1016           while (iter.hasNext()) {\n1017               Provider p = iter.next();\n1018               if (containsDefaultProvider(p)) {\n1019                   addProvider(p);\n1020               }\n1021           }\n1022   \n1023           /*\n1024            * If we haven't loaded any providers, fake it.\n1025            */\n1026           if (providers.isEmpty()) {\n1027               logger.config(\"failed to load any providers, using defaults\");\n1028               // failed to load any providers, initialize with our defaults\n1029               addProvider(new Provider(Provider.Type.STORE,\n1030                       \"imap\", \"org.eclipse.angus.mail.imap.IMAPStore\",\n1031                       \"Oracle\", Version.version));\n1032               addProvider(new Provider(Provider.Type.STORE,\n1033                       \"imaps\", \"org.eclipse.angus.mail.imap.IMAPSSLStore\",\n1034                       \"Oracle\", Version.version));\n1035               addProvider(new Provider(Provider.Type.STORE,\n1036                       \"pop3\", \"org.eclipse.angus.mail.pop3.POP3Store\",\n1037                       \"Oracle\", Version.version));\n1038               addProvider(new Provider(Provider.Type.STORE,\n1039                       \"pop3s\", \"org.eclipse.angus.mail.pop3.POP3SSLStore\",\n1040                       \"Oracle\", Version.version));\n1041               addProvider(new Provider(Provider.Type.TRANSPORT,\n1042                       \"smtp\", \"org.eclipse.angus.mail.smtp.SMTPTransport\",\n1043                       \"Oracle\", Version.version));\n1044               addProvider(new Provider(Provider.Type.TRANSPORT,\n1045                       \"smtps\", \"org.eclipse.angus.mail.smtp.SMTPSSLTransport\",\n1046                       \"Oracle\", Version.version));\n1047           }\n1048   \n1049           if (logger.isLoggable(Level.CONFIG)) {\n1050               // dump the output of the tables for debugging\n1051               logger.config(\"Tables of loaded providers\");\n1052               logger.config(\"Providers Listed By Class Name: \" +\n1053                       providersByClassName);\n1054               logger.config(\"Providers Listed By Protocol: \" +\n1055                       providersByProtocol);\n1056           }\n1057       }\n1446       @SuppressWarnings({\"unchecked\"})\n1447       private <T> Iterator<T> lookupUsingHk2ServiceLoader(Class<T> factoryId, ClassLoader loader) {\n1448           for (Class<?> target : getHk2ServiceLoaderTargets(factoryId)) {\n1449               try {\n1450                   // Use reflection to avoid having any dependency on HK2 ServiceLoader class\n1451                   Class<?> serviceClass = Class.forName(factoryId.getName(), false, loader);\n1452                   Class<?>[] args = new Class<?>[]{serviceClass};\n1453                   Method m = target.getMethod(\"lookupProviderInstances\", Class.class);\n1454                   Iterable<T> result = ((Iterable<T>) m.invoke(null, (Object[]) args));\n1455                   if (result != null) {\n1456                       return result.iterator();\n1457                   }\n1458               } catch (Exception ignored) {\n1459                   // log and continue\n1460               }\n1461           }\n1462           return Collections.emptyIterator();\n1463       }\n",
            "cost": 0.07318,
            "harness_id": "MailApiHarnessOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/Session.java:1454:53",
            "status": "corpus",
            "valid_path": "NO",
            "id": 7
        },
        {
            "blob": [
                ""
            ],
            "code": "src/mail-api-harnesses/mail-api-harness-one/src/main/java/com/aixcc/mailapi/harnesses/one/MailApiHarnessOne.java:\n17       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n18           try {\n19               ByteArrayInputStream bs = new ByteArrayInputStream(input);\n20       \n21               MimeMessage mimeMessage = new MimeMessage(null, bs);\n22       \n23               // Re-serialize the message, changing the subject.\n24               mimeMessage = new MimeMessage(mimeMessage);\n25               mimeMessage.setSubject(\"FWD: \" + mimeMessage.getSubject());\n26               mimeMessage.setContent(mimeMessage.getDataHandler().getDataSource(), mimeMessage.getContentType());\n27               mimeMessage.saveChanges();\n28       \n29               ByteArrayOutputStream bos = new ByteArrayOutputStream();\n30               mimeMessage.writeTo(bos);\n31       \n32               String serialized = new String(bos.toByteArray(), \"UTF-8\");\n33           } catch (Exception e) {\n34               // Ignore exceptions.\n35           }\n36       }\n\nsrc/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/internet/MimeMessage.java:\n 233       public MimeMessage(MimeMessage source) throws MessagingException {\n 234           super(source.session);\n 235           flags = source.getFlags();\n 236           if (flags == null)    // make sure flags is always set\n 237               flags = new Flags();\n 238           ByteArrayOutputStream bos;\n 239           int size = source.getSize();\n 240           if (size > 0)\n 241               bos = new ByteArrayOutputStream(size);\n 242           else\n 243               bos = new ByteArrayOutputStream();\n 244           try {\n 245               strict = source.strict;\n 246               source.writeTo(bos);\n 247               bos.close();\n 248               try (InputStream bis = provider().inputSharedByteArray(bos.toByteArray())) {\n 249                   parse(bis);\n 250               }\n 251               saved = true;\n 252           } catch (IOException ex) {\n 253               // should never happen, but just in case...\n 254               throw new MessagingException(\"IOException while copying message\",\n 255                       ex);\n 256           }\n 257       }\n2326       private StreamProvider provider() throws MessagingException {\n2327           try {\n2328               try {\n2329                   final Session s = this.session;\n2330                   if (s != null) {\n2331                       return s.getStreamProvider();\n2332                   } else {\n2333                       return Session.getDefaultInstance(System.getProperties(),\n2334                           null).getStreamProvider();\n2335                   }\n2336               } catch (ServiceConfigurationError sce) {\n2337                   throw new IllegalStateException(sce);\n2338               }\n2339           } catch (RuntimeException re) {\n2340               throw new MessagingException(\"Unable to get \"\n2341                       + StreamProvider.class.getName(), re);\n2342           }\n2343       }\n\nsrc/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/Session.java:\n 254       private Session(Properties props, Authenticator authenticator) {\n 255           this.props = props;\n 256           this.authenticator = authenticator;\n 257           this.streamProvider = StreamProvider.provider();\n 258   \n 259           if (Boolean.parseBoolean(props.getProperty(\"mail.debug\")))\n 260               debug = true;\n 261   \n 262           initLogger();\n 263           logger.log(Level.CONFIG, \"Jakarta Mail version {0}\", Version.version);\n 264   \n 265           // get the Class associated with the Authenticator\n 266           Class<?> cl;\n 267           if (authenticator != null) {\n 268               cl = authenticator.getClass();\n 269           } else {\n 270               // Use implementation class, because that class loader has access to jakarta.mail module and implementation resources\n 271               cl = streamProvider.getClass();\n 272           }\n 273           // load the resources\n 274           loadProviders(cl);\n 275           loadAddressMap(cl);\n 276           q = new EventQueue((Executor) props.get(\"mail.event.executor\"));\n 277       }\n 378       public static synchronized Session getDefaultInstance(Properties props, Authenticator authenticator) {\n 379           if (defaultSession == null) {\n 380               SecurityManager security = System.getSecurityManager();\n 381               if (security != null)\n 382                   security.checkSetFactory();\n 383               defaultSession = new Session(props, authenticator);\n 384           } else {\n 385               // have to check whether caller is allowed to see default session\n 386               if (defaultSession.authenticator == authenticator)\n 387                   ;    // either same object or both null, either way OK\n 388               else if (defaultSession.authenticator != null &&\n 389                       authenticator != null &&\n 390                       defaultSession.authenticator.getClass().getClassLoader() ==\n 391                               authenticator.getClass().getClassLoader())\n 392                   ;    // both objects came from the same class loader, OK\n 393               else\n 394                   // anything else is not allowed\n 395                   throw new SecurityException(\"Access to default session denied\");\n 396           }\n 397   \n 398           return defaultSession;\n 399       }\n 961       private void loadProviders(Class<?> cl) {\n 962           StreamLoader loader = new StreamLoader() {\n 963               @Override\n 964               public void load(InputStream is) throws IOException {\n 965                   loadProvidersFromStream(is);\n 966               }\n 967           };\n 968   \n 969           // load system-wide javamail.providers from the\n 970           // <java.home>/{conf,lib} directory\n 971           try {\n 972               if (confDir != null)\n 973                   loadFile(confDir + \"javamail.providers\", loader);\n 974           } catch (SecurityException ex) {\n 975           }\n 976   \n 977           //Fetch classloader of given class, falling back to others if needed.\n 978           ClassLoader gcl;\n 979           ClassLoader[] loaders = getClassLoaders(cl, Thread.class, System.class);\n 980           if (loaders.length != 0) {\n 981               gcl = loaders[0];\n 982           } else {\n 983               gcl = getContextClassLoader(); //Fail safe\n 984           }\n 985   \n 986           // next, add all the non-default services\n 987           ServiceLoader<Provider> sl = ServiceLoader.load(Provider.class, gcl);\n 988           for (Provider p : sl) {\n 989               if (!containsDefaultProvider(p))\n 990                   addProvider(p);\n 991           }\n 992   \n 993           // + handle Glassfish/OSGi (platform specific default)\n 994           Iterator<Provider> iter = lookupUsingHk2ServiceLoader(Provider.class, gcl);\n 995           while (iter.hasNext()) {\n 996               Provider p = iter.next();\n 997               if (!containsDefaultProvider(p))\n 998                   addProvider(p);\n 999           }\n1000   \n1001           // load the META-INF/javamail.providers file supplied by an application\n1002           loadAllResources(\"META-INF/javamail.providers\", cl, loader);\n1003   \n1004           // load default META-INF/javamail.default.providers from mail.jar file\n1005           loadResource(\"/META-INF/javamail.default.providers\", cl, loader, false);\n1006   \n1007           // finally, add all the default services\n1008           sl = ServiceLoader.load(Provider.class, gcl);\n1009           for (Provider p : sl) {\n1010               if (containsDefaultProvider(p))\n1011                   addProvider(p);\n1012           }\n1013   \n1014           // + handle Glassfish/OSGi (platform specific default)\n1015           iter = lookupUsingHk2ServiceLoader(Provider.class, gcl);\n1016           while (iter.hasNext()) {\n1017               Provider p = iter.next();\n1018               if (containsDefaultProvider(p)) {\n1019                   addProvider(p);\n1020               }\n1021           }\n1022   \n1023           /*\n1024            * If we haven't loaded any providers, fake it.\n1025            */\n1026           if (providers.isEmpty()) {\n1027               logger.config(\"failed to load any providers, using defaults\");\n1028               // failed to load any providers, initialize with our defaults\n1029               addProvider(new Provider(Provider.Type.STORE,\n1030                       \"imap\", \"org.eclipse.angus.mail.imap.IMAPStore\",\n1031                       \"Oracle\", Version.version));\n1032               addProvider(new Provider(Provider.Type.STORE,\n1033                       \"imaps\", \"org.eclipse.angus.mail.imap.IMAPSSLStore\",\n1034                       \"Oracle\", Version.version));\n1035               addProvider(new Provider(Provider.Type.STORE,\n1036                       \"pop3\", \"org.eclipse.angus.mail.pop3.POP3Store\",\n1037                       \"Oracle\", Version.version));\n1038               addProvider(new Provider(Provider.Type.STORE,\n1039                       \"pop3s\", \"org.eclipse.angus.mail.pop3.POP3SSLStore\",\n1040                       \"Oracle\", Version.version));\n1041               addProvider(new Provider(Provider.Type.TRANSPORT,\n1042                       \"smtp\", \"org.eclipse.angus.mail.smtp.SMTPTransport\",\n1043                       \"Oracle\", Version.version));\n1044               addProvider(new Provider(Provider.Type.TRANSPORT,\n1045                       \"smtps\", \"org.eclipse.angus.mail.smtp.SMTPSSLTransport\",\n1046                       \"Oracle\", Version.version));\n1047           }\n1048   \n1049           if (logger.isLoggable(Level.CONFIG)) {\n1050               // dump the output of the tables for debugging\n1051               logger.config(\"Tables of loaded providers\");\n1052               logger.config(\"Providers Listed By Class Name: \" +\n1053                       providersByClassName);\n1054               logger.config(\"Providers Listed By Protocol: \" +\n1055                       providersByProtocol);\n1056           }\n1057       }\n1446       @SuppressWarnings({\"unchecked\"})\n1447       private <T> Iterator<T> lookupUsingHk2ServiceLoader(Class<T> factoryId, ClassLoader loader) {\n1448           for (Class<?> target : getHk2ServiceLoaderTargets(factoryId)) {\n1449               try {\n1450                   // Use reflection to avoid having any dependency on HK2 ServiceLoader class\n1451                   Class<?> serviceClass = Class.forName(factoryId.getName(), false, loader);\n1452                   Class<?>[] args = new Class<?>[]{serviceClass};\n1453                   Method m = target.getMethod(\"lookupProviderInstances\", Class.class);\n1454                   Iterable<T> result = ((Iterable<T>) m.invoke(null, (Object[]) args));\n1455                   if (result != null) {\n1456                       return result.iterator();\n1457                   }\n1458               } catch (Exception ignored) {\n1459                   // log and continue\n1460               }\n1461           }\n1462           return Collections.emptyIterator();\n1463       }\n",
            "cost": 0.06988,
            "harness_id": "MailApiHarnessOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/Session.java:1454:62",
            "status": "corpus",
            "valid_path": "NO",
            "id": 8
        },
        {
            "blob": [
                ""
            ],
            "code": "src/mail-api-harnesses/mail-api-harness-one/src/main/java/com/aixcc/mailapi/harnesses/one/MailApiHarnessOne.java:\n17       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n18           try {\n19               ByteArrayInputStream bs = new ByteArrayInputStream(input);\n20       \n21               MimeMessage mimeMessage = new MimeMessage(null, bs);\n22       \n23               // Re-serialize the message, changing the subject.\n24               mimeMessage = new MimeMessage(mimeMessage);\n25               mimeMessage.setSubject(\"FWD: \" + mimeMessage.getSubject());\n26               mimeMessage.setContent(mimeMessage.getDataHandler().getDataSource(), mimeMessage.getContentType());\n27               mimeMessage.saveChanges();\n28       \n29               ByteArrayOutputStream bos = new ByteArrayOutputStream();\n30               mimeMessage.writeTo(bos);\n31       \n32               String serialized = new String(bos.toByteArray(), \"UTF-8\");\n33           } catch (Exception e) {\n34               // Ignore exceptions.\n35           }\n36       }\n\nsrc/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/internet/MimeMessage.java:\n1884       @Override\n1885       public void writeTo(OutputStream os)\n1886               throws IOException, MessagingException {\n1887           writeTo(os, null);\n1888       }\n1907       public void writeTo(OutputStream os, String[] ignoreList)\n1908               throws IOException, MessagingException {\n1909           if (!saved)\n1910               saveChanges();\n1911   \n1912           if (modified) {\n1913               MimeBodyPart.writeTo(this, os, ignoreList);\n1914               return;\n1915           }\n1916   \n1917           // Else, the content is untouched, so we can just output it\n1918           // First, write out the header\n1919           Enumeration<String> hdrLines = getNonMatchingHeaderLines(ignoreList);\n1920           LineOutputStream los = provider().outputLineStream(os, allowutf8);\n1921           while (hdrLines.hasMoreElements())\n1922               los.writeln(hdrLines.nextElement());\n1923   \n1924           // The CRLF separator between header and content\n1925           los.writeln();\n1926   \n1927           // Finally, the content.\n1928           if (content == null) {\n1929               // call getContentStream to give subclass a chance to\n1930               // provide the data on demand\n1931               InputStream is = null;\n1932               byte[] buf = new byte[8192];\n1933               try {\n1934                   is = getContentStream();\n1935                   // now copy the data to the output stream\n1936                   int len;\n1937                   while ((len = is.read(buf)) > 0)\n1938                       os.write(buf, 0, len);\n1939               } finally {\n1940                   if (is != null)\n1941                       is.close();\n1942                   buf = null;\n1943               }\n1944           } else {\n1945               os.write(content);\n1946           }\n1947           os.flush();\n1948       }\n\nsrc/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/internet/MimeBodyPart.java:\n1634       static void writeTo(MimePart part, OutputStream os, String[] ignoreList)\n1635               throws IOException, MessagingException {\n1636   \n1637           // see if we already have a LOS\n1638           LineOutputStream los = null;\n1639           if (os instanceof LineOutputStream) {\n1640               los = (LineOutputStream) os;\n1641           } else {\n1642               Map<String, Object> params = new HashMap<>();\n1643               params.put(\"allowutf8\", allowutf8);\n1644               los = StreamProvider.provider().outputLineStream(os, allowutf8);\n1645           }\n1646   \n1647           // First, write out the header\n1648           Enumeration<String> hdrLines\n1649                   = part.getNonMatchingHeaderLines(ignoreList);\n1650           while (hdrLines.hasMoreElements())\n1651               los.writeln(hdrLines.nextElement());\n1652   \n1653           // The CRLF separator between header and content\n1654           los.writeln();\n1655   \n1656           // Finally, the content. Encode if required.\n1657           // XXX: May need to account for ESMTP ?\n1658           InputStream is = null;\n1659           byte[] buf = null;\n1660           try {\n1661               /*\n1662                * If the data for this part comes from a stream,\n1663                * and is already encoded,\n1664                * just copy it to the output stream without decoding\n1665                * and reencoding it.\n1666                */\n1667               DataHandler dh = part.getDataHandler();\n1668               if (dh instanceof MimePartDataHandler) {\n1669                   MimePartDataHandler mpdh = (MimePartDataHandler) dh;\n1670                   MimePart mpart = mpdh.getPart();\n1671                   if (mpart.getEncoding() != null)\n1672                       is = mpdh.getContentStream();\n1673               }\n1674               if (is != null) {\n1675                   // now copy the data to the output stream\n1676                   buf = new byte[8192];\n1677                   int len;\n1678                   while ((len = is.read(buf)) > 0)\n1679                       os.write(buf, 0, len);\n1680               } else {\n1681                   os = MimeUtility.encode(os,\n1682                           restrictEncoding(part, part.getEncoding()));\n1683                   part.getDataHandler().writeTo(os);\n1684               }\n1685           } finally {\n1686               if (is != null)\n1687                   is.close();\n1688               buf = null;\n1689           }\n1690           os.flush(); // Needed to complete encoding\n1691       }\n\nsrc/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/util/StreamProvider.java:\n191       static StreamProvider provider() {\n192           if (System.getSecurityManager() != null) {\n193               return AccessController.doPrivileged(new PrivilegedAction<StreamProvider>() {\n194                   public StreamProvider run() {\n195                       return FactoryFinder.find(StreamProvider.class);\n196                   }\n197               });\n198           } else {\n199               return FactoryFinder.find(StreamProvider.class);\n200           }\n201       }\n\nsrc/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/util/FactoryFinder.java:\n 36       static <T> T find(Class<T> factoryClass) throws RuntimeException {\n 37           T result;\n 38           ClassLoader loader = Thread.currentThread().getContextClassLoader();\n 39           if (loader != null) {\n 40               result = find(factoryClass, loader);\n 41               if (result != null) {\n 42                   return result;\n 43               }\n 44           }\n 45   \n 46           //JakartaMail API ClassLoader / caller classloader\n 47           loader = factoryClass.getClassLoader();\n 48           if (loader != null) {\n 49               result = find(factoryClass, loader);\n 50               if (result != null) {\n 51                   return result;\n 52               }\n 53           }\n 54   \n 55           //Fallback to system class loader\n 56           result = find(factoryClass, ClassLoader.getSystemClassLoader());\n 57           if (result != null) {\n 58               return result;\n 59           }\n 60   \n 61           throw new IllegalStateException(\"No provider of \" + factoryClass.getName() + \" was found\");\n 62       }\n 64       private static <T> T find(Class<T> factoryClass, ClassLoader loader) throws RuntimeException {\n 65           // Use the system property first\n 66           String className = fromSystemProperty(factoryClass.getName());\n 67           if (className != null) {\n 68               T result = newInstance(className, factoryClass, loader);\n 69               if (result != null) {\n 70                   return result;\n 71               }\n 72           }\n 73   \n 74           // standard services: java.util.ServiceLoader\n 75           T factory = factoryFromServiceLoader(factoryClass, loader);\n 76           if (factory != null) {\n 77               return factory;\n 78           }\n 79   \n 80           // handling Glassfish/OSGi (platform specific default)\n 81   \n 82           T result = lookupUsingHk2ServiceLoader(factoryClass, loader);\n 83           if (result != null) {\n 84               return result;\n 85           }\n 86   \n 87           return null;\n 88       }\n134       @SuppressWarnings({\"unchecked\"})\n135       private static <T> T lookupUsingHk2ServiceLoader(Class<T> factoryClass, ClassLoader loader) {\n136           for (Class<?> target : getHk2ServiceLoaderTargets(factoryClass)) {\n137               try {\n138                   // Use reflection to avoid having any dependency on HK2 ServiceLoader class\n139                   Class<?> serviceClass = Class.forName(factoryClass.getName(), false, loader);\n140                   Class<?>[] args = new Class<?>[]{serviceClass};\n141                   Method m = target.getMethod(\"lookupProviderInstances\", Class.class);\n142                   Iterable<?> iterable = ((Iterable<?>) m.invoke(null, (Object[]) args));\n143                   if (iterable != null) {\n144                       Iterator<?> iter = iterable.iterator();\n145                       if (iter.hasNext()) {\n146                           return factoryClass.cast(iter.next()); //Verify classloader.\n147                       }\n148                   }\n149               } catch (Exception ignored) {\n150                   // log and continue\n151               }\n152           }\n153           return null;\n154       }\n",
            "cost": 0.066665,
            "harness_id": "MailApiHarnessOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/util/FactoryFinder.java:142:55",
            "status": "corpus",
            "valid_path": "NO",
            "id": 9
        },
        {
            "blob": [
                ""
            ],
            "code": "src/mail-api-harnesses/mail-api-harness-one/src/main/java/com/aixcc/mailapi/harnesses/one/MailApiHarnessOne.java:\n17       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n18           try {\n19               ByteArrayInputStream bs = new ByteArrayInputStream(input);\n20       \n21               MimeMessage mimeMessage = new MimeMessage(null, bs);\n22       \n23               // Re-serialize the message, changing the subject.\n24               mimeMessage = new MimeMessage(mimeMessage);\n25               mimeMessage.setSubject(\"FWD: \" + mimeMessage.getSubject());\n26               mimeMessage.setContent(mimeMessage.getDataHandler().getDataSource(), mimeMessage.getContentType());\n27               mimeMessage.saveChanges();\n28       \n29               ByteArrayOutputStream bos = new ByteArrayOutputStream();\n30               mimeMessage.writeTo(bos);\n31       \n32               String serialized = new String(bos.toByteArray(), \"UTF-8\");\n33           } catch (Exception e) {\n34               // Ignore exceptions.\n35           }\n36       }\n\nsrc/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/internet/MimeMessage.java:\n1884       @Override\n1885       public void writeTo(OutputStream os)\n1886               throws IOException, MessagingException {\n1887           writeTo(os, null);\n1888       }\n1907       public void writeTo(OutputStream os, String[] ignoreList)\n1908               throws IOException, MessagingException {\n1909           if (!saved)\n1910               saveChanges();\n1911   \n1912           if (modified) {\n1913               MimeBodyPart.writeTo(this, os, ignoreList);\n1914               return;\n1915           }\n1916   \n1917           // Else, the content is untouched, so we can just output it\n1918           // First, write out the header\n1919           Enumeration<String> hdrLines = getNonMatchingHeaderLines(ignoreList);\n1920           LineOutputStream los = provider().outputLineStream(os, allowutf8);\n1921           while (hdrLines.hasMoreElements())\n1922               los.writeln(hdrLines.nextElement());\n1923   \n1924           // The CRLF separator between header and content\n1925           los.writeln();\n1926   \n1927           // Finally, the content.\n1928           if (content == null) {\n1929               // call getContentStream to give subclass a chance to\n1930               // provide the data on demand\n1931               InputStream is = null;\n1932               byte[] buf = new byte[8192];\n1933               try {\n1934                   is = getContentStream();\n1935                   // now copy the data to the output stream\n1936                   int len;\n1937                   while ((len = is.read(buf)) > 0)\n1938                       os.write(buf, 0, len);\n1939               } finally {\n1940                   if (is != null)\n1941                       is.close();\n1942                   buf = null;\n1943               }\n1944           } else {\n1945               os.write(content);\n1946           }\n1947           os.flush();\n1948       }\n\nsrc/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/internet/MimeBodyPart.java:\n1634       static void writeTo(MimePart part, OutputStream os, String[] ignoreList)\n1635               throws IOException, MessagingException {\n1636   \n1637           // see if we already have a LOS\n1638           LineOutputStream los = null;\n1639           if (os instanceof LineOutputStream) {\n1640               los = (LineOutputStream) os;\n1641           } else {\n1642               Map<String, Object> params = new HashMap<>();\n1643               params.put(\"allowutf8\", allowutf8);\n1644               los = StreamProvider.provider().outputLineStream(os, allowutf8);\n1645           }\n1646   \n1647           // First, write out the header\n1648           Enumeration<String> hdrLines\n1649                   = part.getNonMatchingHeaderLines(ignoreList);\n1650           while (hdrLines.hasMoreElements())\n1651               los.writeln(hdrLines.nextElement());\n1652   \n1653           // The CRLF separator between header and content\n1654           los.writeln();\n1655   \n1656           // Finally, the content. Encode if required.\n1657           // XXX: May need to account for ESMTP ?\n1658           InputStream is = null;\n1659           byte[] buf = null;\n1660           try {\n1661               /*\n1662                * If the data for this part comes from a stream,\n1663                * and is already encoded,\n1664                * just copy it to the output stream without decoding\n1665                * and reencoding it.\n1666                */\n1667               DataHandler dh = part.getDataHandler();\n1668               if (dh instanceof MimePartDataHandler) {\n1669                   MimePartDataHandler mpdh = (MimePartDataHandler) dh;\n1670                   MimePart mpart = mpdh.getPart();\n1671                   if (mpart.getEncoding() != null)\n1672                       is = mpdh.getContentStream();\n1673               }\n1674               if (is != null) {\n1675                   // now copy the data to the output stream\n1676                   buf = new byte[8192];\n1677                   int len;\n1678                   while ((len = is.read(buf)) > 0)\n1679                       os.write(buf, 0, len);\n1680               } else {\n1681                   os = MimeUtility.encode(os,\n1682                           restrictEncoding(part, part.getEncoding()));\n1683                   part.getDataHandler().writeTo(os);\n1684               }\n1685           } finally {\n1686               if (is != null)\n1687                   is.close();\n1688               buf = null;\n1689           }\n1690           os.flush(); // Needed to complete encoding\n1691       }\n\nsrc/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/util/StreamProvider.java:\n191       static StreamProvider provider() {\n192           if (System.getSecurityManager() != null) {\n193               return AccessController.doPrivileged(new PrivilegedAction<StreamProvider>() {\n194                   public StreamProvider run() {\n195                       return FactoryFinder.find(StreamProvider.class);\n196                   }\n197               });\n198           } else {\n199               return FactoryFinder.find(StreamProvider.class);\n200           }\n201       }\n\nsrc/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/util/FactoryFinder.java:\n 36       static <T> T find(Class<T> factoryClass) throws RuntimeException {\n 37           T result;\n 38           ClassLoader loader = Thread.currentThread().getContextClassLoader();\n 39           if (loader != null) {\n 40               result = find(factoryClass, loader);\n 41               if (result != null) {\n 42                   return result;\n 43               }\n 44           }\n 45   \n 46           //JakartaMail API ClassLoader / caller classloader\n 47           loader = factoryClass.getClassLoader();\n 48           if (loader != null) {\n 49               result = find(factoryClass, loader);\n 50               if (result != null) {\n 51                   return result;\n 52               }\n 53           }\n 54   \n 55           //Fallback to system class loader\n 56           result = find(factoryClass, ClassLoader.getSystemClassLoader());\n 57           if (result != null) {\n 58               return result;\n 59           }\n 60   \n 61           throw new IllegalStateException(\"No provider of \" + factoryClass.getName() + \" was found\");\n 62       }\n 64       private static <T> T find(Class<T> factoryClass, ClassLoader loader) throws RuntimeException {\n 65           // Use the system property first\n 66           String className = fromSystemProperty(factoryClass.getName());\n 67           if (className != null) {\n 68               T result = newInstance(className, factoryClass, loader);\n 69               if (result != null) {\n 70                   return result;\n 71               }\n 72           }\n 73   \n 74           // standard services: java.util.ServiceLoader\n 75           T factory = factoryFromServiceLoader(factoryClass, loader);\n 76           if (factory != null) {\n 77               return factory;\n 78           }\n 79   \n 80           // handling Glassfish/OSGi (platform specific default)\n 81   \n 82           T result = lookupUsingHk2ServiceLoader(factoryClass, loader);\n 83           if (result != null) {\n 84               return result;\n 85           }\n 86   \n 87           return null;\n 88       }\n134       @SuppressWarnings({\"unchecked\"})\n135       private static <T> T lookupUsingHk2ServiceLoader(Class<T> factoryClass, ClassLoader loader) {\n136           for (Class<?> target : getHk2ServiceLoaderTargets(factoryClass)) {\n137               try {\n138                   // Use reflection to avoid having any dependency on HK2 ServiceLoader class\n139                   Class<?> serviceClass = Class.forName(factoryClass.getName(), false, loader);\n140                   Class<?>[] args = new Class<?>[]{serviceClass};\n141                   Method m = target.getMethod(\"lookupProviderInstances\", Class.class);\n142                   Iterable<?> iterable = ((Iterable<?>) m.invoke(null, (Object[]) args));\n143                   if (iterable != null) {\n144                       Iterator<?> iter = iterable.iterator();\n145                       if (iter.hasNext()) {\n146                           return factoryClass.cast(iter.next()); //Verify classloader.\n147                       }\n148                   }\n149               } catch (Exception ignored) {\n150                   // log and continue\n151               }\n152           }\n153           return null;\n154       }\n",
            "cost": 0.066915,
            "harness_id": "MailApiHarnessOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/util/FactoryFinder.java:142:64",
            "status": "corpus",
            "valid_path": "NO",
            "id": 10
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "MailApiHarnessOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/internet/MimeUtil.java:73:33",
            "status": "error",
            "id": 11
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "MailApiHarnessOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/internet/MimeUtil.java:73:57",
            "status": "error",
            "id": 12
        },
        {
            "blob": [
                ""
            ],
            "code": "src/mail-api-harnesses/mail-api-harness-one/src/main/java/com/aixcc/mailapi/harnesses/one/MailApiHarnessOne.java:\n17       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n18           try {\n19               ByteArrayInputStream bs = new ByteArrayInputStream(input);\n20       \n21               MimeMessage mimeMessage = new MimeMessage(null, bs);\n22       \n23               // Re-serialize the message, changing the subject.\n24               mimeMessage = new MimeMessage(mimeMessage);\n25               mimeMessage.setSubject(\"FWD: \" + mimeMessage.getSubject());\n26               mimeMessage.setContent(mimeMessage.getDataHandler().getDataSource(), mimeMessage.getContentType());\n27               mimeMessage.saveChanges();\n28       \n29               ByteArrayOutputStream bos = new ByteArrayOutputStream();\n30               mimeMessage.writeTo(bos);\n31       \n32               String serialized = new String(bos.toByteArray(), \"UTF-8\");\n33           } catch (Exception e) {\n34               // Ignore exceptions.\n35           }\n36       }\n\nsrc/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/internet/MimeMessage.java:\n 233       public MimeMessage(MimeMessage source) throws MessagingException {\n 234           super(source.session);\n 235           flags = source.getFlags();\n 236           if (flags == null)    // make sure flags is always set\n 237               flags = new Flags();\n 238           ByteArrayOutputStream bos;\n 239           int size = source.getSize();\n 240           if (size > 0)\n 241               bos = new ByteArrayOutputStream(size);\n 242           else\n 243               bos = new ByteArrayOutputStream();\n 244           try {\n 245               strict = source.strict;\n 246               source.writeTo(bos);\n 247               bos.close();\n 248               try (InputStream bis = provider().inputSharedByteArray(bos.toByteArray())) {\n 249                   parse(bis);\n 250               }\n 251               saved = true;\n 252           } catch (IOException ex) {\n 253               // should never happen, but just in case...\n 254               throw new MessagingException(\"IOException while copying message\",\n 255                       ex);\n 256           }\n 257       }\n2326       private StreamProvider provider() throws MessagingException {\n2327           try {\n2328               try {\n2329                   final Session s = this.session;\n2330                   if (s != null) {\n2331                       return s.getStreamProvider();\n2332                   } else {\n2333                       return Session.getDefaultInstance(System.getProperties(),\n2334                           null).getStreamProvider();\n2335                   }\n2336               } catch (ServiceConfigurationError sce) {\n2337                   throw new IllegalStateException(sce);\n2338               }\n2339           } catch (RuntimeException re) {\n2340               throw new MessagingException(\"Unable to get \"\n2341                       + StreamProvider.class.getName(), re);\n2342           }\n2343       }\n\nsrc/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/Session.java:\n 254       private Session(Properties props, Authenticator authenticator) {\n 255           this.props = props;\n 256           this.authenticator = authenticator;\n 257           this.streamProvider = StreamProvider.provider();\n 258   \n 259           if (Boolean.parseBoolean(props.getProperty(\"mail.debug\")))\n 260               debug = true;\n 261   \n 262           initLogger();\n 263           logger.log(Level.CONFIG, \"Jakarta Mail version {0}\", Version.version);\n 264   \n 265           // get the Class associated with the Authenticator\n 266           Class<?> cl;\n 267           if (authenticator != null) {\n 268               cl = authenticator.getClass();\n 269           } else {\n 270               // Use implementation class, because that class loader has access to jakarta.mail module and implementation resources\n 271               cl = streamProvider.getClass();\n 272           }\n 273           // load the resources\n 274           loadProviders(cl);\n 275           loadAddressMap(cl);\n 276           q = new EventQueue((Executor) props.get(\"mail.event.executor\"));\n 277       }\n 378       public static synchronized Session getDefaultInstance(Properties props, Authenticator authenticator) {\n 379           if (defaultSession == null) {\n 380               SecurityManager security = System.getSecurityManager();\n 381               if (security != null)\n 382                   security.checkSetFactory();\n 383               defaultSession = new Session(props, authenticator);\n 384           } else {\n 385               // have to check whether caller is allowed to see default session\n 386               if (defaultSession.authenticator == authenticator)\n 387                   ;    // either same object or both null, either way OK\n 388               else if (defaultSession.authenticator != null &&\n 389                       authenticator != null &&\n 390                       defaultSession.authenticator.getClass().getClassLoader() ==\n 391                               authenticator.getClass().getClassLoader())\n 392                   ;    // both objects came from the same class loader, OK\n 393               else\n 394                   // anything else is not allowed\n 395                   throw new SecurityException(\"Access to default session denied\");\n 396           }\n 397   \n 398           return defaultSession;\n 399       }\n 961       private void loadProviders(Class<?> cl) {\n 962           StreamLoader loader = new StreamLoader() {\n 963               @Override\n 964               public void load(InputStream is) throws IOException {\n 965                   loadProvidersFromStream(is);\n 966               }\n 967           };\n 968   \n 969           // load system-wide javamail.providers from the\n 970           // <java.home>/{conf,lib} directory\n 971           try {\n 972               if (confDir != null)\n 973                   loadFile(confDir + \"javamail.providers\", loader);\n 974           } catch (SecurityException ex) {\n 975           }\n 976   \n 977           //Fetch classloader of given class, falling back to others if needed.\n 978           ClassLoader gcl;\n 979           ClassLoader[] loaders = getClassLoaders(cl, Thread.class, System.class);\n 980           if (loaders.length != 0) {\n 981               gcl = loaders[0];\n 982           } else {\n 983               gcl = getContextClassLoader(); //Fail safe\n 984           }\n 985   \n 986           // next, add all the non-default services\n 987           ServiceLoader<Provider> sl = ServiceLoader.load(Provider.class, gcl);\n 988           for (Provider p : sl) {\n 989               if (!containsDefaultProvider(p))\n 990                   addProvider(p);\n 991           }\n 992   \n 993           // + handle Glassfish/OSGi (platform specific default)\n 994           Iterator<Provider> iter = lookupUsingHk2ServiceLoader(Provider.class, gcl);\n 995           while (iter.hasNext()) {\n 996               Provider p = iter.next();\n 997               if (!containsDefaultProvider(p))\n 998                   addProvider(p);\n 999           }\n1000   \n1001           // load the META-INF/javamail.providers file supplied by an application\n1002           loadAllResources(\"META-INF/javamail.providers\", cl, loader);\n1003   \n1004           // load default META-INF/javamail.default.providers from mail.jar file\n1005           loadResource(\"/META-INF/javamail.default.providers\", cl, loader, false);\n1006   \n1007           // finally, add all the default services\n1008           sl = ServiceLoader.load(Provider.class, gcl);\n1009           for (Provider p : sl) {\n1010               if (containsDefaultProvider(p))\n1011                   addProvider(p);\n1012           }\n1013   \n1014           // + handle Glassfish/OSGi (platform specific default)\n1015           iter = lookupUsingHk2ServiceLoader(Provider.class, gcl);\n1016           while (iter.hasNext()) {\n1017               Provider p = iter.next();\n1018               if (containsDefaultProvider(p)) {\n1019                   addProvider(p);\n1020               }\n1021           }\n1022   \n1023           /*\n1024            * If we haven't loaded any providers, fake it.\n1025            */\n1026           if (providers.isEmpty()) {\n1027               logger.config(\"failed to load any providers, using defaults\");\n1028               // failed to load any providers, initialize with our defaults\n1029               addProvider(new Provider(Provider.Type.STORE,\n1030                       \"imap\", \"org.eclipse.angus.mail.imap.IMAPStore\",\n1031                       \"Oracle\", Version.version));\n1032               addProvider(new Provider(Provider.Type.STORE,\n1033                       \"imaps\", \"org.eclipse.angus.mail.imap.IMAPSSLStore\",\n1034                       \"Oracle\", Version.version));\n1035               addProvider(new Provider(Provider.Type.STORE,\n1036                       \"pop3\", \"org.eclipse.angus.mail.pop3.POP3Store\",\n1037                       \"Oracle\", Version.version));\n1038               addProvider(new Provider(Provider.Type.STORE,\n1039                       \"pop3s\", \"org.eclipse.angus.mail.pop3.POP3SSLStore\",\n1040                       \"Oracle\", Version.version));\n1041               addProvider(new Provider(Provider.Type.TRANSPORT,\n1042                       \"smtp\", \"org.eclipse.angus.mail.smtp.SMTPTransport\",\n1043                       \"Oracle\", Version.version));\n1044               addProvider(new Provider(Provider.Type.TRANSPORT,\n1045                       \"smtps\", \"org.eclipse.angus.mail.smtp.SMTPSSLTransport\",\n1046                       \"Oracle\", Version.version));\n1047           }\n1048   \n1049           if (logger.isLoggable(Level.CONFIG)) {\n1050               // dump the output of the tables for debugging\n1051               logger.config(\"Tables of loaded providers\");\n1052               logger.config(\"Providers Listed By Class Name: \" +\n1053                       providersByClassName);\n1054               logger.config(\"Providers Listed By Protocol: \" +\n1055                       providersByProtocol);\n1056           }\n1057       }\n1181       private void loadFile(String name, StreamLoader loader) {\n1182           InputStream clis = null;\n1183           try {\n1184               clis = new BufferedInputStream(new FileInputStream(name));\n1185               loader.load(clis);\n1186               logger.log(Level.CONFIG, \"successfully loaded file: {0}\", name);\n1187           } catch (FileNotFoundException fex) {\n1188               // ignore it\n1189           } catch (IOException | SecurityException e) {\n1190               if (logger.isLoggable(Level.CONFIG))\n1191                   logger.log(Level.CONFIG, \"not loading file: \" + name, e);\n1192           } finally {\n1193               try {\n1194                   if (clis != null)\n1195                       clis.close();\n1196               } catch (IOException ex) {\n1197               }    // ignore it\n1198           }\n1199       }\n",
            "cost": 0.07015500000000001,
            "harness_id": "MailApiHarnessOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/Session.java:1184:64",
            "status": "corpus",
            "valid_path": "NO",
            "id": 13
        },
        {
            "blob": [
                ""
            ],
            "code": "src/mail-api-harnesses/mail-api-harness-one/src/main/java/com/aixcc/mailapi/harnesses/one/MailApiHarnessOne.java:\n17       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n18           try {\n19               ByteArrayInputStream bs = new ByteArrayInputStream(input);\n20       \n21               MimeMessage mimeMessage = new MimeMessage(null, bs);\n22       \n23               // Re-serialize the message, changing the subject.\n24               mimeMessage = new MimeMessage(mimeMessage);\n25               mimeMessage.setSubject(\"FWD: \" + mimeMessage.getSubject());\n26               mimeMessage.setContent(mimeMessage.getDataHandler().getDataSource(), mimeMessage.getContentType());\n27               mimeMessage.saveChanges();\n28       \n29               ByteArrayOutputStream bos = new ByteArrayOutputStream();\n30               mimeMessage.writeTo(bos);\n31       \n32               String serialized = new String(bos.toByteArray(), \"UTF-8\");\n33           } catch (Exception e) {\n34               // Ignore exceptions.\n35           }\n36       }\n\nsrc/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/internet/MimeMessage.java:\n 233       public MimeMessage(MimeMessage source) throws MessagingException {\n 234           super(source.session);\n 235           flags = source.getFlags();\n 236           if (flags == null)    // make sure flags is always set\n 237               flags = new Flags();\n 238           ByteArrayOutputStream bos;\n 239           int size = source.getSize();\n 240           if (size > 0)\n 241               bos = new ByteArrayOutputStream(size);\n 242           else\n 243               bos = new ByteArrayOutputStream();\n 244           try {\n 245               strict = source.strict;\n 246               source.writeTo(bos);\n 247               bos.close();\n 248               try (InputStream bis = provider().inputSharedByteArray(bos.toByteArray())) {\n 249                   parse(bis);\n 250               }\n 251               saved = true;\n 252           } catch (IOException ex) {\n 253               // should never happen, but just in case...\n 254               throw new MessagingException(\"IOException while copying message\",\n 255                       ex);\n 256           }\n 257       }\n2326       private StreamProvider provider() throws MessagingException {\n2327           try {\n2328               try {\n2329                   final Session s = this.session;\n2330                   if (s != null) {\n2331                       return s.getStreamProvider();\n2332                   } else {\n2333                       return Session.getDefaultInstance(System.getProperties(),\n2334                           null).getStreamProvider();\n2335                   }\n2336               } catch (ServiceConfigurationError sce) {\n2337                   throw new IllegalStateException(sce);\n2338               }\n2339           } catch (RuntimeException re) {\n2340               throw new MessagingException(\"Unable to get \"\n2341                       + StreamProvider.class.getName(), re);\n2342           }\n2343       }\n\nsrc/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/Session.java:\n 254       private Session(Properties props, Authenticator authenticator) {\n 255           this.props = props;\n 256           this.authenticator = authenticator;\n 257           this.streamProvider = StreamProvider.provider();\n 258   \n 259           if (Boolean.parseBoolean(props.getProperty(\"mail.debug\")))\n 260               debug = true;\n 261   \n 262           initLogger();\n 263           logger.log(Level.CONFIG, \"Jakarta Mail version {0}\", Version.version);\n 264   \n 265           // get the Class associated with the Authenticator\n 266           Class<?> cl;\n 267           if (authenticator != null) {\n 268               cl = authenticator.getClass();\n 269           } else {\n 270               // Use implementation class, because that class loader has access to jakarta.mail module and implementation resources\n 271               cl = streamProvider.getClass();\n 272           }\n 273           // load the resources\n 274           loadProviders(cl);\n 275           loadAddressMap(cl);\n 276           q = new EventQueue((Executor) props.get(\"mail.event.executor\"));\n 277       }\n 378       public static synchronized Session getDefaultInstance(Properties props, Authenticator authenticator) {\n 379           if (defaultSession == null) {\n 380               SecurityManager security = System.getSecurityManager();\n 381               if (security != null)\n 382                   security.checkSetFactory();\n 383               defaultSession = new Session(props, authenticator);\n 384           } else {\n 385               // have to check whether caller is allowed to see default session\n 386               if (defaultSession.authenticator == authenticator)\n 387                   ;    // either same object or both null, either way OK\n 388               else if (defaultSession.authenticator != null &&\n 389                       authenticator != null &&\n 390                       defaultSession.authenticator.getClass().getClassLoader() ==\n 391                               authenticator.getClass().getClassLoader())\n 392                   ;    // both objects came from the same class loader, OK\n 393               else\n 394                   // anything else is not allowed\n 395                   throw new SecurityException(\"Access to default session denied\");\n 396           }\n 397   \n 398           return defaultSession;\n 399       }\n 961       private void loadProviders(Class<?> cl) {\n 962           StreamLoader loader = new StreamLoader() {\n 963               @Override\n 964               public void load(InputStream is) throws IOException {\n 965                   loadProvidersFromStream(is);\n 966               }\n 967           };\n 968   \n 969           // load system-wide javamail.providers from the\n 970           // <java.home>/{conf,lib} directory\n 971           try {\n 972               if (confDir != null)\n 973                   loadFile(confDir + \"javamail.providers\", loader);\n 974           } catch (SecurityException ex) {\n 975           }\n 976   \n 977           //Fetch classloader of given class, falling back to others if needed.\n 978           ClassLoader gcl;\n 979           ClassLoader[] loaders = getClassLoaders(cl, Thread.class, System.class);\n 980           if (loaders.length != 0) {\n 981               gcl = loaders[0];\n 982           } else {\n 983               gcl = getContextClassLoader(); //Fail safe\n 984           }\n 985   \n 986           // next, add all the non-default services\n 987           ServiceLoader<Provider> sl = ServiceLoader.load(Provider.class, gcl);\n 988           for (Provider p : sl) {\n 989               if (!containsDefaultProvider(p))\n 990                   addProvider(p);\n 991           }\n 992   \n 993           // + handle Glassfish/OSGi (platform specific default)\n 994           Iterator<Provider> iter = lookupUsingHk2ServiceLoader(Provider.class, gcl);\n 995           while (iter.hasNext()) {\n 996               Provider p = iter.next();\n 997               if (!containsDefaultProvider(p))\n 998                   addProvider(p);\n 999           }\n1000   \n1001           // load the META-INF/javamail.providers file supplied by an application\n1002           loadAllResources(\"META-INF/javamail.providers\", cl, loader);\n1003   \n1004           // load default META-INF/javamail.default.providers from mail.jar file\n1005           loadResource(\"/META-INF/javamail.default.providers\", cl, loader, false);\n1006   \n1007           // finally, add all the default services\n1008           sl = ServiceLoader.load(Provider.class, gcl);\n1009           for (Provider p : sl) {\n1010               if (containsDefaultProvider(p))\n1011                   addProvider(p);\n1012           }\n1013   \n1014           // + handle Glassfish/OSGi (platform specific default)\n1015           iter = lookupUsingHk2ServiceLoader(Provider.class, gcl);\n1016           while (iter.hasNext()) {\n1017               Provider p = iter.next();\n1018               if (containsDefaultProvider(p)) {\n1019                   addProvider(p);\n1020               }\n1021           }\n1022   \n1023           /*\n1024            * If we haven't loaded any providers, fake it.\n1025            */\n1026           if (providers.isEmpty()) {\n1027               logger.config(\"failed to load any providers, using defaults\");\n1028               // failed to load any providers, initialize with our defaults\n1029               addProvider(new Provider(Provider.Type.STORE,\n1030                       \"imap\", \"org.eclipse.angus.mail.imap.IMAPStore\",\n1031                       \"Oracle\", Version.version));\n1032               addProvider(new Provider(Provider.Type.STORE,\n1033                       \"imaps\", \"org.eclipse.angus.mail.imap.IMAPSSLStore\",\n1034                       \"Oracle\", Version.version));\n1035               addProvider(new Provider(Provider.Type.STORE,\n1036                       \"pop3\", \"org.eclipse.angus.mail.pop3.POP3Store\",\n1037                       \"Oracle\", Version.version));\n1038               addProvider(new Provider(Provider.Type.STORE,\n1039                       \"pop3s\", \"org.eclipse.angus.mail.pop3.POP3SSLStore\",\n1040                       \"Oracle\", Version.version));\n1041               addProvider(new Provider(Provider.Type.TRANSPORT,\n1042                       \"smtp\", \"org.eclipse.angus.mail.smtp.SMTPTransport\",\n1043                       \"Oracle\", Version.version));\n1044               addProvider(new Provider(Provider.Type.TRANSPORT,\n1045                       \"smtps\", \"org.eclipse.angus.mail.smtp.SMTPSSLTransport\",\n1046                       \"Oracle\", Version.version));\n1047           }\n1048   \n1049           if (logger.isLoggable(Level.CONFIG)) {\n1050               // dump the output of the tables for debugging\n1051               logger.config(\"Tables of loaded providers\");\n1052               logger.config(\"Providers Listed By Class Name: \" +\n1053                       providersByClassName);\n1054               logger.config(\"Providers Listed By Protocol: \" +\n1055                       providersByProtocol);\n1056           }\n1057       }\n1446       @SuppressWarnings({\"unchecked\"})\n1447       private <T> Iterator<T> lookupUsingHk2ServiceLoader(Class<T> factoryId, ClassLoader loader) {\n1448           for (Class<?> target : getHk2ServiceLoaderTargets(factoryId)) {\n1449               try {\n1450                   // Use reflection to avoid having any dependency on HK2 ServiceLoader class\n1451                   Class<?> serviceClass = Class.forName(factoryId.getName(), false, loader);\n1452                   Class<?>[] args = new Class<?>[]{serviceClass};\n1453                   Method m = target.getMethod(\"lookupProviderInstances\", Class.class);\n1454                   Iterable<T> result = ((Iterable<T>) m.invoke(null, (Object[]) args));\n1455                   if (result != null) {\n1456                       return result.iterator();\n1457                   }\n1458               } catch (Exception ignored) {\n1459                   // log and continue\n1460               }\n1461           }\n1462           return Collections.emptyIterator();\n1463       }\n",
            "cost": 0.07318,
            "harness_id": "MailApiHarnessOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/Session.java:1454:53",
            "status": "corpus",
            "valid_path": "NO",
            "id": 14
        },
        {
            "blob": [
                ""
            ],
            "code": "src/mail-api-harnesses/mail-api-harness-one/src/main/java/com/aixcc/mailapi/harnesses/one/MailApiHarnessOne.java:\n17       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n18           try {\n19               ByteArrayInputStream bs = new ByteArrayInputStream(input);\n20       \n21               MimeMessage mimeMessage = new MimeMessage(null, bs);\n22       \n23               // Re-serialize the message, changing the subject.\n24               mimeMessage = new MimeMessage(mimeMessage);\n25               mimeMessage.setSubject(\"FWD: \" + mimeMessage.getSubject());\n26               mimeMessage.setContent(mimeMessage.getDataHandler().getDataSource(), mimeMessage.getContentType());\n27               mimeMessage.saveChanges();\n28       \n29               ByteArrayOutputStream bos = new ByteArrayOutputStream();\n30               mimeMessage.writeTo(bos);\n31       \n32               String serialized = new String(bos.toByteArray(), \"UTF-8\");\n33           } catch (Exception e) {\n34               // Ignore exceptions.\n35           }\n36       }\n\nsrc/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/internet/MimeMessage.java:\n1884       @Override\n1885       public void writeTo(OutputStream os)\n1886               throws IOException, MessagingException {\n1887           writeTo(os, null);\n1888       }\n1907       public void writeTo(OutputStream os, String[] ignoreList)\n1908               throws IOException, MessagingException {\n1909           if (!saved)\n1910               saveChanges();\n1911   \n1912           if (modified) {\n1913               MimeBodyPart.writeTo(this, os, ignoreList);\n1914               return;\n1915           }\n1916   \n1917           // Else, the content is untouched, so we can just output it\n1918           // First, write out the header\n1919           Enumeration<String> hdrLines = getNonMatchingHeaderLines(ignoreList);\n1920           LineOutputStream los = provider().outputLineStream(os, allowutf8);\n1921           while (hdrLines.hasMoreElements())\n1922               los.writeln(hdrLines.nextElement());\n1923   \n1924           // The CRLF separator between header and content\n1925           los.writeln();\n1926   \n1927           // Finally, the content.\n1928           if (content == null) {\n1929               // call getContentStream to give subclass a chance to\n1930               // provide the data on demand\n1931               InputStream is = null;\n1932               byte[] buf = new byte[8192];\n1933               try {\n1934                   is = getContentStream();\n1935                   // now copy the data to the output stream\n1936                   int len;\n1937                   while ((len = is.read(buf)) > 0)\n1938                       os.write(buf, 0, len);\n1939               } finally {\n1940                   if (is != null)\n1941                       is.close();\n1942                   buf = null;\n1943               }\n1944           } else {\n1945               os.write(content);\n1946           }\n1947           os.flush();\n1948       }\n\nsrc/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/internet/MimeBodyPart.java:\n1634       static void writeTo(MimePart part, OutputStream os, String[] ignoreList)\n1635               throws IOException, MessagingException {\n1636   \n1637           // see if we already have a LOS\n1638           LineOutputStream los = null;\n1639           if (os instanceof LineOutputStream) {\n1640               los = (LineOutputStream) os;\n1641           } else {\n1642               Map<String, Object> params = new HashMap<>();\n1643               params.put(\"allowutf8\", allowutf8);\n1644               los = StreamProvider.provider().outputLineStream(os, allowutf8);\n1645           }\n1646   \n1647           // First, write out the header\n1648           Enumeration<String> hdrLines\n1649                   = part.getNonMatchingHeaderLines(ignoreList);\n1650           while (hdrLines.hasMoreElements())\n1651               los.writeln(hdrLines.nextElement());\n1652   \n1653           // The CRLF separator between header and content\n1654           los.writeln();\n1655   \n1656           // Finally, the content. Encode if required.\n1657           // XXX: May need to account for ESMTP ?\n1658           InputStream is = null;\n1659           byte[] buf = null;\n1660           try {\n1661               /*\n1662                * If the data for this part comes from a stream,\n1663                * and is already encoded,\n1664                * just copy it to the output stream without decoding\n1665                * and reencoding it.\n1666                */\n1667               DataHandler dh = part.getDataHandler();\n1668               if (dh instanceof MimePartDataHandler) {\n1669                   MimePartDataHandler mpdh = (MimePartDataHandler) dh;\n1670                   MimePart mpart = mpdh.getPart();\n1671                   if (mpart.getEncoding() != null)\n1672                       is = mpdh.getContentStream();\n1673               }\n1674               if (is != null) {\n1675                   // now copy the data to the output stream\n1676                   buf = new byte[8192];\n1677                   int len;\n1678                   while ((len = is.read(buf)) > 0)\n1679                       os.write(buf, 0, len);\n1680               } else {\n1681                   os = MimeUtility.encode(os,\n1682                           restrictEncoding(part, part.getEncoding()));\n1683                   part.getDataHandler().writeTo(os);\n1684               }\n1685           } finally {\n1686               if (is != null)\n1687                   is.close();\n1688               buf = null;\n1689           }\n1690           os.flush(); // Needed to complete encoding\n1691       }\n\nsrc/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/util/StreamProvider.java:\n191       static StreamProvider provider() {\n192           if (System.getSecurityManager() != null) {\n193               return AccessController.doPrivileged(new PrivilegedAction<StreamProvider>() {\n194                   public StreamProvider run() {\n195                       return FactoryFinder.find(StreamProvider.class);\n196                   }\n197               });\n198           } else {\n199               return FactoryFinder.find(StreamProvider.class);\n200           }\n201       }\n\nsrc/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/util/FactoryFinder.java:\n 36       static <T> T find(Class<T> factoryClass) throws RuntimeException {\n 37           T result;\n 38           ClassLoader loader = Thread.currentThread().getContextClassLoader();\n 39           if (loader != null) {\n 40               result = find(factoryClass, loader);\n 41               if (result != null) {\n 42                   return result;\n 43               }\n 44           }\n 45   \n 46           //JakartaMail API ClassLoader / caller classloader\n 47           loader = factoryClass.getClassLoader();\n 48           if (loader != null) {\n 49               result = find(factoryClass, loader);\n 50               if (result != null) {\n 51                   return result;\n 52               }\n 53           }\n 54   \n 55           //Fallback to system class loader\n 56           result = find(factoryClass, ClassLoader.getSystemClassLoader());\n 57           if (result != null) {\n 58               return result;\n 59           }\n 60   \n 61           throw new IllegalStateException(\"No provider of \" + factoryClass.getName() + \" was found\");\n 62       }\n 64       private static <T> T find(Class<T> factoryClass, ClassLoader loader) throws RuntimeException {\n 65           // Use the system property first\n 66           String className = fromSystemProperty(factoryClass.getName());\n 67           if (className != null) {\n 68               T result = newInstance(className, factoryClass, loader);\n 69               if (result != null) {\n 70                   return result;\n 71               }\n 72           }\n 73   \n 74           // standard services: java.util.ServiceLoader\n 75           T factory = factoryFromServiceLoader(factoryClass, loader);\n 76           if (factory != null) {\n 77               return factory;\n 78           }\n 79   \n 80           // handling Glassfish/OSGi (platform specific default)\n 81   \n 82           T result = lookupUsingHk2ServiceLoader(factoryClass, loader);\n 83           if (result != null) {\n 84               return result;\n 85           }\n 86   \n 87           return null;\n 88       }\n134       @SuppressWarnings({\"unchecked\"})\n135       private static <T> T lookupUsingHk2ServiceLoader(Class<T> factoryClass, ClassLoader loader) {\n136           for (Class<?> target : getHk2ServiceLoaderTargets(factoryClass)) {\n137               try {\n138                   // Use reflection to avoid having any dependency on HK2 ServiceLoader class\n139                   Class<?> serviceClass = Class.forName(factoryClass.getName(), false, loader);\n140                   Class<?>[] args = new Class<?>[]{serviceClass};\n141                   Method m = target.getMethod(\"lookupProviderInstances\", Class.class);\n142                   Iterable<?> iterable = ((Iterable<?>) m.invoke(null, (Object[]) args));\n143                   if (iterable != null) {\n144                       Iterator<?> iter = iterable.iterator();\n145                       if (iter.hasNext()) {\n146                           return factoryClass.cast(iter.next()); //Verify classloader.\n147                       }\n148                   }\n149               } catch (Exception ignored) {\n150                   // log and continue\n151               }\n152           }\n153           return null;\n154       }\n",
            "cost": 0.066665,
            "harness_id": "MailApiHarnessOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/util/FactoryFinder.java:142:55",
            "status": "corpus",
            "valid_path": "NO",
            "id": 15
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "MailApiHarnessOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/jakarta-mail-api/providers/jakarta.mail/target/generated-sources/dependencies/jakarta/mail/internet/MimeUtil.java:73:33",
            "status": "error",
            "id": 16
        }
    ],
    "result": [
        {
            "harness_id": "MailApiHarnessOne",
            "blob": [
                ""
            ]
        }
    ]
}