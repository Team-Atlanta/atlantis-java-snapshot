{
    "sinks": {
        "OS Command Injection": [
            {
                "path": "src/tika/tika-batch/src/main/java/org/apache/tika/batch/BatchProcessDriverCLI.java",
                "line": 250,
                "column": 19
            },
            {
                "path": "src/tika/tika-batch/src/main/java/org/apache/tika/batch/fs/strawman/StrawManTikaAppDriver.java",
                "line": 213,
                "column": 24
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "line": 105,
                "column": 28
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "line": 150,
                "column": 28
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/pipes/PipesClient.java",
                "line": 432,
                "column": 23
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/utils/ProcessUtils.java",
                "line": 94,
                "column": 17
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/utils/ProcessUtils.java",
                "line": 177,
                "column": 17
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java",
                "line": 445,
                "column": 23
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java",
                "line": 895,
                "column": 23
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-text-module/src/main/java/org/apache/tika/parser/strings/StringsParser.java",
                "line": 195,
                "column": 33
            },
            {
                "path": "src/tika/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/TikaServerWatchDog.java",
                "line": 420,
                "column": 31
            },
            {
                "path": "src/tika/tika-translate/src/main/java/org/apache/tika/language/translate/impl/MarianTranslator.java",
                "line": 189,
                "column": 27
            },
            {
                "path": "src/tika/tika-translate/src/main/java/org/apache/tika/language/translate/impl/MarianTranslator.java",
                "line": 249,
                "column": 35
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/pot/PooledTimeSeriesParser.java",
                "line": 170,
                "column": 42
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/ImagePreprocessor.java",
                "line": 100,
                "column": 34
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/embedder/ExternalEmbedder.java",
                "line": 131,
                "column": 53
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/embedder/ExternalEmbedder.java",
                "line": 133,
                "column": 53
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/embedder/ExternalEmbedder.java",
                "line": 402,
                "column": 49
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/embedder/ExternalEmbedder.java",
                "line": 404,
                "column": 49
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParser.java",
                "line": 161,
                "column": 49
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParser.java",
                "line": 312,
                "column": 53
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParser.java",
                "line": 314,
                "column": 53
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-extended/tika-parser-scientific-module/src/main/java/org/apache/tika/parser/gdal/GDALParser.java",
                "line": 298,
                "column": 49
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-extended/tika-parser-scientific-module/src/main/java/org/apache/tika/parser/gdal/GDALParser.java",
                "line": 300,
                "column": 49
            },
            {
                "path": "src/tika/tika-translate/src/main/java/org/apache/tika/language/translate/impl/ExternalTranslator.java",
                "line": 49,
                "column": 53
            },
            {
                "path": "src/tika/tika-translate/src/main/java/org/apache/tika/language/translate/impl/ExternalTranslator.java",
                "line": 49,
                "column": 62
            },
            {
                "path": "src/tika/tika-translate/src/main/java/org/apache/tika/language/translate/impl/ExternalTranslator.java",
                "line": 67,
                "column": 57
            },
            {
                "path": "src/tika/tika-translate/src/main/java/org/apache/tika/language/translate/impl/MosesTranslator.java",
                "line": 85,
                "column": 35
            },
            {
                "path": "src/tika/tika-translate/src/main/java/org/apache/tika/language/translate/impl/MosesTranslator.java",
                "line": 85,
                "column": 82
            }
        ],
        "Server Side Request Forgery (SSRF)": [
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/parser/NetworkParser.java",
                "line": 80,
                "column": 45
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/io/TikaInputStream.java",
                "line": 590,
                "column": 60
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/parser/NetworkParser.java",
                "line": 93,
                "column": 38
            },
            {
                "path": "src/tika/tika-translate/src/main/java/org/apache/tika/language/translate/impl/JoshuaNetworkTranslator.java",
                "line": 209,
                "column": 31
            },
            {
                "path": "src/tika/tika-example/src/main/java/org/apache/tika/example/TIAParsingExample.java",
                "line": 95,
                "column": 63
            },
            {
                "path": "src/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java",
                "line": 471,
                "column": 35
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/pipes/fetcher/url/UrlFetcher.java",
                "line": 50,
                "column": 44
            },
            {
                "path": "src/tika/tika-dotnet/src/main/java/Tika/Tika.java",
                "line": 45,
                "column": 52
            },
            {
                "path": "src/tika/tika-app/src/main/java/org/apache/tika/gui/ParsingTransferHandler.java",
                "line": 95,
                "column": 38
            },
            {
                "path": "src/tika/tika-dotnet/src/main/java/Tika/Tika.java",
                "line": 63,
                "column": 59
            },
            {
                "path": "src/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java",
                "line": 255,
                "column": 37
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/captioning/tf/TensorflowRESTCaptioner.java",
                "line": 114,
                "column": 52
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/captioning/tf/TensorflowRESTCaptioner.java",
                "line": 148,
                "column": 52
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/recognition/tf/TensorflowRESTRecogniser.java",
                "line": 115,
                "column": 52
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/recognition/tf/TensorflowRESTRecogniser.java",
                "line": 149,
                "column": 52
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/recognition/tf/TensorflowRESTVideoRecogniser.java",
                "line": 84,
                "column": 52
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/geo/topic/gazetteer/GeoGazetteerClient.java",
                "line": 75,
                "column": 52
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/geo/topic/gazetteer/GeoGazetteerClient.java",
                "line": 100,
                "column": 52
            },
            {
                "path": "src/tika/tika-pipes/tika-emitters/tika-emitter-opensearch/src/main/java/org/apache/tika/pipes/emitter/opensearch/OpenSearchClient.java",
                "line": 157,
                "column": 43
            },
            {
                "path": "src/tika/tika-pipes/tika-fetchers/tika-fetcher-http/src/main/java/org/apache/tika/pipes/fetcher/http/HttpFetcher.java",
                "line": 281,
                "column": 39
            },
            {
                "path": "src/tika/tika-pipes/tika-httpclient-commons/src/main/java/org/apache/tika/client/HttpClientUtil.java",
                "line": 39,
                "column": 48
            },
            {
                "path": "src/tika/tika-pipes/tika-httpclient-commons/src/main/java/org/apache/tika/client/HttpClientUtil.java",
                "line": 63,
                "column": 48
            },
            {
                "path": "src/tika/tika-pipes/tika-pipes-reporters/tika-pipes-reporter-opensearch/src/main/java/org/apache/tika/pipes/reporters/opensearch/OpenSearchClient.java",
                "line": 96,
                "column": 43
            },
            {
                "path": "src/tika/tika-server/tika-server-client/src/main/java/org/apache/tika/server/client/TikaPipesHttpClient.java",
                "line": 99,
                "column": 51
            },
            {
                "path": "src/tika/tika-server/tika-server-client/src/main/java/org/apache/tika/server/client/TikaPipesHttpClient.java",
                "line": 144,
                "column": 60
            }
        ],
        "Remote Code Execution": [
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/fork/ForkObjectInputStream.java",
                "line": 97,
                "column": 16
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/pipes/PipesClient.java",
                "line": 372,
                "column": 44
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/pipes/PipesServer.java",
                "line": 731,
                "column": 41
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/pipes/PipesClient.java",
                "line": 394,
                "column": 44
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/ParseContextDeserializer.java",
                "line": 59,
                "column": 93
            },
            {
                "path": "src/tika/tika-grpc/src/main/java/org/apache/tika/pipes/grpc/TikaGrpcServerImpl.java",
                "line": 284,
                "column": 70
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java",
                "line": 721,
                "column": 39
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/Param.java",
                "line": 136,
                "column": 39
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/Param.java",
                "line": 273,
                "column": 49
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java",
                "line": 199,
                "column": 41
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java",
                "line": 372,
                "column": 35
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/NamedEntityParser.java",
                "line": 92,
                "column": 54
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java",
                "line": 73,
                "column": 68
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java",
                "line": 216,
                "column": 40
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 52,
                "column": 58
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java",
                "line": 918,
                "column": 35
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/ParseContextDeserializer.java",
                "line": 58,
                "column": 45
            },
            {
                "path": "src/tika/tika-grpc/src/main/java/org/apache/tika/pipes/grpc/TikaGrpcServerImpl.java",
                "line": 289,
                "column": 69
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/fork/ParserFactoryFactory.java",
                "line": 49,
                "column": 44
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/utils/ServiceLoaderUtils.java",
                "line": 58,
                "column": 46
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java",
                "line": 765,
                "column": 39
            },
            {
                "path": "src/tika/tika-grpc/src/main/java/org/apache/tika/pipes/grpc/TikaGrpcServerImpl.java",
                "line": 267,
                "column": 76
            },
            {
                "path": "src/tika/tika-pipes/tika-fetchers/tika-fetcher-http/src/main/java/org/apache/tika/pipes/fetcher/http/HttpFetcher.java",
                "line": 207,
                "column": 56
            }
        ],
        "SQL Injection": [
            {
                "path": "src/tika/tika-eval/tika-eval-app/src/main/java/org/apache/tika/eval/app/XMLErrorLogUpdater.java",
                "line": 135,
                "column": 56
            },
            {
                "path": "src/tika/tika-eval/tika-eval-app/src/main/java/org/apache/tika/eval/app/XMLErrorLogUpdater.java",
                "line": 161,
                "column": 51
            },
            {
                "path": "src/tika/tika-eval/tika-eval-app/src/main/java/org/apache/tika/eval/app/XMLErrorLogUpdater.java",
                "line": 174,
                "column": 56
            },
            {
                "path": "src/tika/tika-eval/tika-eval-app/src/main/java/org/apache/tika/eval/app/batch/EvalConsumerBuilder.java",
                "line": 111,
                "column": 39
            },
            {
                "path": "src/tika/tika-eval/tika-eval-app/src/main/java/org/apache/tika/eval/app/db/H2Util.java",
                "line": 70,
                "column": 38
            },
            {
                "path": "src/tika/tika-eval/tika-eval-app/src/main/java/org/apache/tika/eval/app/db/H2Util.java",
                "line": 84,
                "column": 40
            },
            {
                "path": "src/tika/tika-eval/tika-eval-app/src/main/java/org/apache/tika/eval/app/db/JDBCUtil.java",
                "line": 185,
                "column": 35
            },
            {
                "path": "src/tika/tika-eval/tika-eval-app/src/main/java/org/apache/tika/eval/app/db/JDBCUtil.java",
                "line": 274,
                "column": 24
            },
            {
                "path": "src/tika/tika-eval/tika-eval-app/src/main/java/org/apache/tika/eval/app/reports/Report.java",
                "line": 93,
                "column": 45
            },
            {
                "path": "src/tika/tika-eval/tika-eval-app/src/main/java/org/apache/tika/eval/app/reports/ResultsReporter.java",
                "line": 316,
                "column": 28
            },
            {
                "path": "src/tika/tika-eval/tika-eval-app/src/main/java/org/apache/tika/eval/app/reports/ResultsReporter.java",
                "line": 330,
                "column": 28
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-extended/tika-parser-sqlite3-module/src/main/java/org/apache/tika/parser/sqlite3/SQLite3DBParser.java",
                "line": 135,
                "column": 49
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-extended/tika-parser-sqlite3-module/src/main/java/org/apache/tika/parser/sqlite3/SQLite3DBParser.java",
                "line": 166,
                "column": 53
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-jdbc-commons/src/main/java/org/apache/tika/parser/jdbc/JDBCTableReader.java",
                "line": 301,
                "column": 39
            },
            {
                "path": "src/tika/tika-pipes/tika-emitters/tika-emitter-jdbc/src/main/java/org/apache/tika/pipes/emitter/jdbc/JDBCEmitter.java",
                "line": 384,
                "column": 28
            },
            {
                "path": "src/tika/tika-pipes/tika-emitters/tika-emitter-jdbc/src/main/java/org/apache/tika/pipes/emitter/jdbc/JDBCEmitter.java",
                "line": 551,
                "column": 36
            },
            {
                "path": "src/tika/tika-pipes/tika-emitters/tika-emitter-jdbc/src/main/java/org/apache/tika/pipes/emitter/jdbc/JDBCEmitter.java",
                "line": 553,
                "column": 40
            },
            {
                "path": "src/tika/tika-pipes/tika-pipes-iterators/tika-pipes-iterator-jdbc/src/main/java/org/apache/tika/pipes/pipesiterator/jdbc/JDBCPipesIterator.java",
                "line": 157,
                "column": 49
            },
            {
                "path": "src/tika/tika-pipes/tika-pipes-reporters/tika-pipes-reporter-jdbc/src/main/java/org/apache/tika/pipes/reporters/jdbc/JDBCPipesReporter.java",
                "line": 431,
                "column": 28
            },
            {
                "path": "src/tika/tika-pipes/tika-pipes-reporters/tika-pipes-reporter-jdbc/src/main/java/org/apache/tika/pipes/reporters/jdbc/JDBCPipesReporter.java",
                "line": 434,
                "column": 28
            },
            {
                "path": "src/tika/tika-pipes/tika-pipes-reporters/tika-pipes-reporter-jdbc/src/main/java/org/apache/tika/pipes/reporters/jdbc/JDBCPipesReporter.java",
                "line": 480,
                "column": 32
            }
        ],
        "load arbitrary library": [
            {
                "path": "src/tika/tika-batch/src/main/java/org/apache/tika/util/ClassLoaderUtil.java",
                "line": 29,
                "column": 38
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java",
                "line": 199,
                "column": 41
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java",
                "line": 372,
                "column": 35
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/Param.java",
                "line": 136,
                "column": 39
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/Param.java",
                "line": 273,
                "column": 49
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java",
                "line": 216,
                "column": 40
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java",
                "line": 348,
                "column": 55
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/fork/ForkObjectInputStream.java",
                "line": 109,
                "column": 30
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/fork/ParserFactoryFactory.java",
                "line": 49,
                "column": 44
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/utils/CharsetUtils.java",
                "line": 63,
                "column": 67
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/utils/ServiceLoaderUtils.java",
                "line": 58,
                "column": 46
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java",
                "line": 721,
                "column": 39
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java",
                "line": 765,
                "column": 39
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java",
                "line": 918,
                "column": 35
            },
            {
                "path": "src/tika/tika-eval/tika-eval-app/src/main/java/org/apache/tika/eval/app/db/JDBCUtil.java",
                "line": 161,
                "column": 31
            },
            {
                "path": "src/tika/tika-grpc/src/main/java/org/apache/tika/pipes/grpc/TikaGrpcServerImpl.java",
                "line": 284,
                "column": 70
            },
            {
                "path": "src/tika/tika-grpc/src/main/java/org/apache/tika/pipes/grpc/TikaGrpcServerImpl.java",
                "line": 289,
                "column": 69
            },
            {
                "path": "src/tika/tika-grpc/src/main/java/org/apache/tika/pipes/grpc/TikaGrpcServerImpl.java",
                "line": 403,
                "column": 88
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-extended/tika-parser-sqlite3-module/src/main/java/org/apache/tika/parser/sqlite3/SQLite3DBParser.java",
                "line": 78,
                "column": 27
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/NamedEntityParser.java",
                "line": 92,
                "column": 54
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/corenlp/CoreNLPNERecogniser.java",
                "line": 95,
                "column": 54
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/corenlp/CoreNLPNERecogniser.java",
                "line": 102,
                "column": 50
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java",
                "line": 73,
                "column": 68
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java",
                "line": 113,
                "column": 56
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java",
                "line": 115,
                "column": 35
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java",
                "line": 116,
                "column": 57
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java",
                "line": 118,
                "column": 50
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-jdbc-commons/src/main/java/org/apache/tika/parser/jdbc/AbstractDBParser.java",
                "line": 158,
                "column": 27
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/onenote/fsshttpb/streamobj/DataElement.java",
                "line": 54,
                "column": 73
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/onenote/fsshttpb/streamobj/StreamObject.java",
                "line": 77,
                "column": 66
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/XWPFListManager.java",
                "line": 48,
                "column": 27
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-pkg-module/src/main/java/org/apache/tika/parser/pkg/CompressorParser.java",
                "line": 96,
                "column": 27
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-pkg-module/src/main/java/org/apache/tika/parser/pkg/CompressorParser.java",
                "line": 102,
                "column": 27
            },
            {
                "path": "src/tika/tika-pipes/tika-emitters/tika-emitter-kafka/src/main/java/org/apache/tika/pipes/emitter/kafka/KafkaEmitter.java",
                "line": 274,
                "column": 69
            },
            {
                "path": "src/tika/tika-pipes/tika-pipes-iterators/tika-pipes-iterator-kafka/src/main/java/org/apache/tika/pipes/pipesiterator/kafka/KafkaPipesIterator.java",
                "line": 135,
                "column": 69
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/ParseContextDeserializer.java",
                "line": 58,
                "column": 45
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/ParseContextDeserializer.java",
                "line": 59,
                "column": 93
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/ParseContextSerializer.java",
                "line": 37,
                "column": 45
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 52,
                "column": 58
            }
        ],
        "Regular Expression Injection": [
            {
                "path": "src/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java",
                "line": 1132,
                "column": 36
            },
            {
                "path": "src/tika/tika-batch/src/main/java/org/apache/tika/batch/fs/builders/FSCrawlerBuilder.java",
                "line": 136,
                "column": 102
            },
            {
                "path": "src/tika/tika-batch/src/main/java/org/apache/tika/batch/fs/builders/FSCrawlerBuilder.java",
                "line": 137,
                "column": 102
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfigSerializer.java",
                "line": 343,
                "column": 49
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfigSerializer.java",
                "line": 344,
                "column": 49
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfigSerializer.java",
                "line": 544,
                "column": 37
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/detect/MagicDetector.java",
                "line": 382,
                "column": 45
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/detect/NNExampleModelDetector.java",
                "line": 115,
                "column": 36
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/detect/NNExampleModelDetector.java",
                "line": 140,
                "column": 36
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/language/detect/LanguageResult.java",
                "line": 85,
                "column": 50
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/language/detect/LanguageResult.java",
                "line": 86,
                "column": 55
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/metadata/filter/CaptureGroupMetadataFilter.java",
                "line": 105,
                "column": 37
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/mime/Patterns.java",
                "line": 162,
                "column": 30
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/parser/RegexCaptureParser.java",
                "line": 122,
                "column": 47
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/parser/RegexCaptureParser.java",
                "line": 131,
                "column": 47
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParser.java",
                "line": 291,
                "column": 36
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParsersConfigReader.java",
                "line": 160,
                "column": 55
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParsersConfigReader.java",
                "line": 197,
                "column": 49
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/sax/CleanPhoneText.java",
                "line": 159,
                "column": 37
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/sax/CleanPhoneText.java",
                "line": 186,
                "column": 40
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/sax/CleanPhoneText.java",
                "line": 190,
                "column": 32
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/sax/LinkBuilder.java",
                "line": 71,
                "column": 40
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/sax/RecursiveParserWrapperHandler.java",
                "line": 158,
                "column": 41
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/sax/StandardsText.java",
                "line": 115,
                "column": 43
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/sax/StandardsText.java",
                "line": 141,
                "column": 43
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/sax/StandardsText.java",
                "line": 153,
                "column": 41
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/sax/StandardsText.java",
                "line": 159,
                "column": 41
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/sax/StandardsText.java",
                "line": 179,
                "column": 68
            },
            {
                "path": "src/tika/tika-eval/tika-eval-app/src/main/java/org/apache/tika/eval/app/AbstractProfiler.java",
                "line": 170,
                "column": 32
            },
            {
                "path": "src/tika/tika-eval/tika-eval-app/src/main/java/org/apache/tika/eval/app/AbstractProfiler.java",
                "line": 230,
                "column": 41
            },
            {
                "path": "src/tika/tika-eval/tika-eval-app/src/main/java/org/apache/tika/eval/app/db/JDBCUtil.java",
                "line": 63,
                "column": 42
            },
            {
                "path": "src/tika/tika-eval/tika-eval-app/src/main/java/org/apache/tika/eval/app/db/JDBCUtil.java",
                "line": 109,
                "column": 46
            },
            {
                "path": "src/tika/tika-eval/tika-eval-app/src/main/java/org/apache/tika/eval/app/db/JDBCUtil.java",
                "line": 114,
                "column": 46
            },
            {
                "path": "src/tika/tika-eval/tika-eval-app/src/main/java/org/apache/tika/eval/app/io/ExtractReader.java",
                "line": 83,
                "column": 26
            },
            {
                "path": "src/tika/tika-eval/tika-eval-app/src/main/java/org/apache/tika/eval/app/tools/LeipzigHelper.java",
                "line": 33,
                "column": 26
            },
            {
                "path": "src/tika/tika-eval/tika-eval-app/src/main/java/org/apache/tika/eval/app/tools/LeipzigHelper.java",
                "line": 36,
                "column": 26
            },
            {
                "path": "src/tika/tika-eval/tika-eval-app/src/main/java/org/apache/tika/eval/app/tools/LeipzigSampler.java",
                "line": 73,
                "column": 26
            },
            {
                "path": "src/tika/tika-eval/tika-eval-app/src/main/java/org/apache/tika/eval/app/tools/TopCommonTokenCounter.java",
                "line": 149,
                "column": 29
            },
            {
                "path": "src/tika/tika-eval/tika-eval-core/src/main/java/org/apache/tika/eval/core/tokens/AnalyzerDeserializer.java",
                "line": 108,
                "column": 42
            },
            {
                "path": "src/tika/tika-eval/tika-eval-core/src/main/java/org/apache/tika/eval/core/tokens/AnalyzerDeserializer.java",
                "line": 140,
                "column": 50
            },
            {
                "path": "src/tika/tika-eval/tika-eval-core/src/main/java/org/apache/tika/eval/core/tokens/AnalyzerDeserializer.java",
                "line": 176,
                "column": 46
            },
            {
                "path": "src/tika/tika-eval/tika-eval-core/src/main/java/org/apache/tika/eval/core/tokens/CommonTokenCountManager.java",
                "line": 52,
                "column": 53
            },
            {
                "path": "src/tika/tika-eval/tika-eval-core/src/main/java/org/apache/tika/eval/core/tokens/CommonTokenCountManager.java",
                "line": 170,
                "column": 48
            },
            {
                "path": "src/tika/tika-eval/tika-eval-core/src/main/java/org/apache/tika/eval/core/util/EvalExceptionUtils.java",
                "line": 41,
                "column": 37
            },
            {
                "path": "src/tika/tika-example/src/main/java/org/apache/tika/example/DirListParser.java",
                "line": 93,
                "column": 44
            },
            {
                "path": "src/tika/tika-example/src/main/java/org/apache/tika/example/ExtractEmbeddedFiles.java",
                "line": 87,
                "column": 40
            },
            {
                "path": "src/tika/tika-langdetect/tika-langdetect-test-commons/src/main/java/org/apache/tika/langdetect/LanguageDetectorTest.java",
                "line": 44,
                "column": 46
            },
            {
                "path": "src/tika/tika-langdetect/tika-langdetect-tika/src/main/java/org/apache/tika/langdetect/tika/LanguageIdentifier.java",
                "line": 162,
                "column": 69
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-extended/tika-parser-scientific-module/src/main/java/org/apache/tika/parser/envi/EnviHeaderParser.java",
                "line": 113,
                "column": 44
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-extended/tika-parser-scientific-module/src/main/java/org/apache/tika/parser/envi/EnviHeaderParser.java",
                "line": 150,
                "column": 59
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-extended/tika-parser-scientific-module/src/main/java/org/apache/tika/parser/gdal/GDALParser.java",
                "line": 222,
                "column": 38
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-extended/tika-parser-scientific-module/src/main/java/org/apache/tika/parser/gdal/GDALParser.java",
                "line": 226,
                "column": 38
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-extended/tika-parser-scientific-module/src/main/java/org/apache/tika/parser/gdal/GDALParser.java",
                "line": 231,
                "column": 17
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-extended/tika-parser-scientific-module/src/main/java/org/apache/tika/parser/gdal/GDALParser.java",
                "line": 248,
                "column": 52
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-extended/tika-parser-scientific-module/src/main/java/org/apache/tika/parser/isatab/ISArchiveParser.java",
                "line": 89,
                "column": 88
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-dl/src/main/java/org/apache/tika/dl/imagerec/DL4JInceptionV3Net.java",
                "line": 166,
                "column": 52
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/pot/PooledTimeSeriesParser.java",
                "line": 201,
                "column": 46
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/pot/PooledTimeSeriesParser.java",
                "line": 216,
                "column": 45
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/recognition/tf/TensorflowImageRecParser.java",
                "line": 146,
                "column": 42
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ctakes/CTAKESConfig.java",
                "line": 110,
                "column": 80
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ctakes/CTAKESConfig.java",
                "line": 112,
                "column": 90
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/geo/topic/NameEntityExtractor.java",
                "line": 57,
                "column": 61
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/geo/topic/NameEntityExtractor.java",
                "line": 71,
                "column": 40
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/NamedEntityParser.java",
                "line": 85,
                "column": 54
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/corenlp/CoreNLPNERecogniser.java",
                "line": 167,
                "column": 47
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/opennlp/OpenNLPNameFinder.java",
                "line": 80,
                "column": 63
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/opennlp/OpenNLPNameFinder.java",
                "line": 80,
                "column": 39
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/regex/RegexNERecogniser.java",
                "line": 89,
                "column": 52
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-audiovideo-module/src/main/java/org/apache/tika/parser/mp4/MP4Parser.java",
                "line": 223,
                "column": 49
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-cad-module/src/main/java/org/apache/tika/parser/dwg/DWGReadFormatRemover.java",
                "line": 47,
                "column": 37
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-cad-module/src/main/java/org/apache/tika/parser/dwg/DWGReadFormatRemover.java",
                "line": 57,
                "column": 29
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-cad-module/src/main/java/org/apache/tika/parser/dwg/DWGReadFormatRemover.java",
                "line": 68,
                "column": 29
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-cad-module/src/main/java/org/apache/tika/parser/dwg/DWGReadFormatRemover.java",
                "line": 79,
                "column": 29
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-cad-module/src/main/java/org/apache/tika/parser/dwg/DWGReadFormatRemover.java",
                "line": 90,
                "column": 29
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-cad-module/src/main/java/org/apache/tika/parser/dwg/DWGReadFormatRemover.java",
                "line": 100,
                "column": 46
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-cad-module/src/main/java/org/apache/tika/parser/dwg/DWGReadFormatRemover.java",
                "line": 102,
                "column": 46
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-cad-module/src/main/java/org/apache/tika/parser/dwg/DWGReadParser.java",
                "line": 146,
                "column": 57
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-cad-module/src/main/java/org/apache/tika/parser/dwg/DWGReadParser.java",
                "line": 145,
                "column": 57
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-cad-module/src/main/java/org/apache/tika/parser/dwg/DWGReadParser.java",
                "line": 143,
                "column": 58
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-code-module/src/main/java/org/apache/tika/parser/mat/MatParser.java",
                "line": 83,
                "column": 48
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-digest-commons/src/main/java/org/apache/tika/parser/digestutils/BouncyCastleDigester.java",
                "line": 51,
                "column": 46
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-digest-commons/src/main/java/org/apache/tika/parser/digestutils/BouncyCastleDigester.java",
                "line": 55,
                "column": 43
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-digest-commons/src/main/java/org/apache/tika/parser/digestutils/CommonsDigester.java",
                "line": 92,
                "column": 42
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-digest-commons/src/main/java/org/apache/tika/parser/digestutils/CommonsDigester.java",
                "line": 127,
                "column": 46
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-digest-commons/src/main/java/org/apache/tika/parser/digestutils/CommonsDigester.java",
                "line": 131,
                "column": 43
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-font-module/src/main/java/org/apache/tika/parser/font/AdobeFontMetricParser.java",
                "line": 135,
                "column": 31
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/DataURISchemeUtil.java",
                "line": 58,
                "column": 67
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/HtmlEncodingDetector.java",
                "line": 123,
                "column": 49
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-image-module/src/main/java/org/apache/tika/parser/image/ImageMetadataExtractor.java",
                "line": 329,
                "column": 65
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-image-module/src/main/java/org/apache/tika/parser/image/ImageMetadataExtractor.java",
                "line": 616,
                "column": 45
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-mail-commons/src/main/java/org/apache/tika/parser/mailcommons/MailDateParser.java",
                "line": 562,
                "column": 32
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-mail-commons/src/main/java/org/apache/tika/parser/mailcommons/MailDateParser.java",
                "line": 595,
                "column": 32
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-mail-commons/src/main/java/org/apache/tika/parser/mailcommons/MailDateParser.java",
                "line": 597,
                "column": 32
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-mail-commons/src/main/java/org/apache/tika/parser/mailcommons/MailUtil.java",
                "line": 82,
                "column": 26
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-mail-module/src/main/java/org/apache/tika/parser/mail/MailContentHandler.java",
                "line": 409,
                "column": 43
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/AbstractListManager.java",
                "line": 43,
                "column": 54
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/HSLFExtractor.java",
                "line": 78,
                "column": 38
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/HSLFExtractor.java",
                "line": 468,
                "column": 59
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/OutlookExtractor.java",
                "line": 579,
                "column": 45
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/SummaryExtractor.java",
                "line": 75,
                "column": 39
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/WordExtractor.java",
                "line": 305,
                "column": 29
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/WordExtractor.java",
                "line": 422,
                "column": 32
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/onenote/GUID.java",
                "line": 48,
                "column": 49
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/onenote/GUID.java",
                "line": 48,
                "column": 29
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/onenote/GUID.java",
                "line": 47,
                "column": 82
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/onenote/OneNoteLegacyDumpStrings.java",
                "line": 159,
                "column": 34
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/xwpf/ml2006/RelationshipsManager.java",
                "line": 55,
                "column": 32
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ooxml/xwpf/ml2006/RelationshipsManager.java",
                "line": 56,
                "column": 32
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/xml/WordMLParser.java",
                "line": 205,
                "column": 58
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-news-module/src/main/java/org/apache/tika/parser/feed/FeedParser.java",
                "line": 71,
                "column": 38
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-news-module/src/main/java/org/apache/tika/parser/iptc/IptcAnpaParser.java",
                "line": 860,
                "column": 34
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-news-module/src/main/java/org/apache/tika/parser/iptc/IptcAnpaParser.java",
                "line": 861,
                "column": 34
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-news-module/src/main/java/org/apache/tika/parser/iptc/IptcAnpaParser.java",
                "line": 862,
                "column": 34
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-news-module/src/main/java/org/apache/tika/parser/iptc/IptcAnpaParser.java",
                "line": 863,
                "column": 34
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-news-module/src/main/java/org/apache/tika/parser/iptc/IptcAnpaParser.java",
                "line": 864,
                "column": 34
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-news-module/src/main/java/org/apache/tika/parser/iptc/IptcAnpaParser.java",
                "line": 865,
                "column": 34
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRConfig.java",
                "line": 114,
                "column": 40
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRConfig.java",
                "line": 116,
                "column": 30
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRConfig.java",
                "line": 121,
                "column": 47
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRConfig.java",
                "line": 125,
                "column": 21
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRConfig.java",
                "line": 176,
                "column": 34
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRConfig.java",
                "line": 393,
                "column": 33
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java",
                "line": 363,
                "column": 43
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java",
                "line": 696,
                "column": 44
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java",
                "line": 937,
                "column": 56
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-pdf-module/src/main/java/org/apache/tika/parser/pdf/PDFParserConfig.java",
                "line": 547,
                "column": 43
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-pdf-module/src/main/java/org/apache/tika/renderer/pdf/mutool/MuPDFRenderer.java",
                "line": 108,
                "column": 37
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-zip-commons/src/main/java/org/apache/tika/detect/zip/IPADetector.java",
                "line": 43,
                "column": 33
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-zip-commons/src/main/java/org/apache/tika/detect/zip/IPADetector.java",
                "line": 44,
                "column": 33
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-zip-commons/src/main/java/org/apache/tika/detect/zip/IPADetector.java",
                "line": 45,
                "column": 33
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-zip-commons/src/main/java/org/apache/tika/detect/zip/IPADetector.java",
                "line": 46,
                "column": 33
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-zip-commons/src/main/java/org/apache/tika/detect/zip/IPADetector.java",
                "line": 47,
                "column": 33
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-zip-commons/src/main/java/org/apache/tika/detect/zip/IPADetector.java",
                "line": 48,
                "column": 33
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-zip-commons/src/main/java/org/apache/tika/detect/zip/ZipContainerDetectorBase.java",
                "line": 35,
                "column": 33
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-zip-commons/src/main/java/org/apache/tika/detect/zip/ZipContainerDetectorBase.java",
                "line": 36,
                "column": 33
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-zip-commons/src/main/java/org/apache/tika/detect/zip/ZipContainerDetectorBase.java",
                "line": 37,
                "column": 33
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-zip-commons/src/main/java/org/apache/tika/detect/zip/ZipContainerDetectorBase.java",
                "line": 38,
                "column": 33
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-zip-commons/src/main/java/org/apache/tika/detect/zip/ZipContainerDetectorBase.java",
                "line": 39,
                "column": 33
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-zip-commons/src/main/java/org/apache/tika/detect/zip/ZipContainerDetectorBase.java",
                "line": 40,
                "column": 33
            },
            {
                "path": "src/tika/tika-pipes/tika-emitters/tika-emitter-jdbc/src/main/java/org/apache/tika/pipes/emitter/jdbc/JDBCEmitter.java",
                "line": 631,
                "column": 30
            },
            {
                "path": "src/tika/tika-pipes/tika-fetchers/tika-fetcher-http/src/main/java/org/apache/tika/pipes/fetcher/http/HttpFetcher.java",
                "line": 195,
                "column": 31
            },
            {
                "path": "src/tika/tika-pipes/tika-fetchers/tika-fetcher-http/src/main/java/org/apache/tika/pipes/fetcher/http/HttpFetcher.java",
                "line": 539,
                "column": 48
            },
            {
                "path": "src/tika/tika-pipes/tika-fetchers/tika-fetcher-http/src/main/java/org/apache/tika/pipes/fetcher/http/HttpFetcher.java",
                "line": 541,
                "column": 46
            },
            {
                "path": "src/tika/tika-pipes/tika-fetchers/tika-fetcher-microsoft-graph/src/main/java/org/apache/tika/pipes/fetchers/microsoftgraph/MicrosoftGraphFetcher.java",
                "line": 69,
                "column": 58
            },
            {
                "path": "src/tika/tika-pipes/tika-fetchers/tika-fetcher-microsoft-graph/src/main/java/org/apache/tika/pipes/fetchers/microsoftgraph/MicrosoftGraphFetcher.java",
                "line": 118,
                "column": 57
            },
            {
                "path": "src/tika/tika-pipes/tika-fetchers/tika-fetcher-s3/src/main/java/org/apache/tika/pipes/fetcher/s3/S3Fetcher.java",
                "line": 265,
                "column": 58
            },
            {
                "path": "src/tika/tika-pipes/tika-pipes-iterators/tika-pipes-iterator-s3/src/main/java/org/apache/tika/pipes/pipesiterator/s3/S3PipesIterator.java",
                "line": 124,
                "column": 48
            },
            {
                "path": "src/tika/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/TikaServerConfig.java",
                "line": 636,
                "column": 26
            },
            {
                "path": "src/tika/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/TikaServerConfig.java",
                "line": 638,
                "column": 52
            },
            {
                "path": "src/tika/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/resource/TikaWelcome.java",
                "line": 153,
                "column": 37
            },
            {
                "path": "src/tika/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/resource/UnpackerResource.java",
                "line": 245,
                "column": 36
            },
            {
                "path": "src/tika/tika-translate/src/main/java/org/apache/tika/language/translate/impl/RTGTranslator.java",
                "line": 123,
                "column": 54
            },
            {
                "path": "src/tika/tika-xmp/src/main/java/org/apache/tika/xmp/XMPMetadata.java",
                "line": 631,
                "column": 39
            },
            {
                "path": "src/tika/tika-xmp/src/main/java/org/apache/tika/xmp/convert/GenericConverter.java",
                "line": 55,
                "column": 43
            }
        ],
        "Script Engine Injection": [
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java",
                "line": 264,
                "column": 25
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java",
                "line": 264,
                "column": 61
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java",
                "line": 386,
                "column": 13
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java",
                "line": 386,
                "column": 22
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java",
                "line": 410,
                "column": 13
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java",
                "line": 410,
                "column": 22
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java",
                "line": 458,
                "column": 13
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java",
                "line": 458,
                "column": 22
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java",
                "line": 487,
                "column": 17
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java",
                "line": 487,
                "column": 53
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java",
                "line": 489,
                "column": 17
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java",
                "line": 489,
                "column": 53
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java",
                "line": 491,
                "column": 17
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java",
                "line": 491,
                "column": 53
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java",
                "line": 493,
                "column": 17
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java",
                "line": 493,
                "column": 53
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java",
                "line": 495,
                "column": 17
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java",
                "line": 495,
                "column": 53
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java",
                "line": 497,
                "column": 17
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java",
                "line": 497,
                "column": 53
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/Param.java",
                "line": 218,
                "column": 29
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/Param.java",
                "line": 218,
                "column": 43
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/ParamField.java",
                "line": 107,
                "column": 13
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/ParamField.java",
                "line": 107,
                "column": 27
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfigSerializer.java",
                "line": 440,
                "column": 20
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfigSerializer.java",
                "line": 440,
                "column": 41
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfigSerializer.java",
                "line": 491,
                "column": 25
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfigSerializer.java",
                "line": 491,
                "column": 51
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/fork/ForkServer.java",
                "line": 244,
                "column": 17
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/fork/ForkServer.java",
                "line": 244,
                "column": 31
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/utils/CharsetUtils.java",
                "line": 107,
                "column": 53
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/utils/CharsetUtils.java",
                "line": 107,
                "column": 75
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/utils/CharsetUtils.java",
                "line": 185,
                "column": 40
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/utils/CharsetUtils.java",
                "line": 185,
                "column": 61
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java",
                "line": 724,
                "column": 17
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java",
                "line": 724,
                "column": 33
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java",
                "line": 767,
                "column": 17
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java",
                "line": 767,
                "column": 33
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java",
                "line": 920,
                "column": 13
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java",
                "line": 920,
                "column": 29
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/corenlp/CoreNLPNERecogniser.java",
                "line": 98,
                "column": 34
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/corenlp/CoreNLPNERecogniser.java",
                "line": 98,
                "column": 52
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/corenlp/CoreNLPNERecogniser.java",
                "line": 156,
                "column": 29
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/corenlp/CoreNLPNERecogniser.java",
                "line": 156,
                "column": 51
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java",
                "line": 119,
                "column": 41
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java",
                "line": 120,
                "column": 29
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java",
                "line": 121,
                "column": 32
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java",
                "line": 121,
                "column": 75
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java",
                "line": 124,
                "column": 37
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java",
                "line": 125,
                "column": 33
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java",
                "line": 129,
                "column": 34
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java",
                "line": 129,
                "column": 50
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java",
                "line": 132,
                "column": 27
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java",
                "line": 132,
                "column": 70
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java",
                "line": 134,
                "column": 37
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java",
                "line": 135,
                "column": 33
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java",
                "line": 140,
                "column": 31
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java",
                "line": 140,
                "column": 54
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java",
                "line": 141,
                "column": 27
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java",
                "line": 141,
                "column": 77
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java",
                "line": 143,
                "column": 39
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java",
                "line": 144,
                "column": 33
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java",
                "line": 145,
                "column": 43
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java",
                "line": 146,
                "column": 33
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java",
                "line": 154,
                "column": 39
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java",
                "line": 155,
                "column": 33
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java",
                "line": 156,
                "column": 37
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java",
                "line": 157,
                "column": 33
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-pdf-module/src/main/java/org/apache/tika/parser/pdf/AbstractPDF2XHTML.java",
                "line": 230,
                "column": 46
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-pdf-module/src/main/java/org/apache/tika/parser/pdf/AbstractPDF2XHTML.java",
                "line": 230,
                "column": 66
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 140,
                "column": 13
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 140,
                "column": 27
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 156,
                "column": 13
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 156,
                "column": 27
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 203,
                "column": 21
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 203,
                "column": 30
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 226,
                "column": 17
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 226,
                "column": 26
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 239,
                "column": 17
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 239,
                "column": 26
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 253,
                "column": 21
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 253,
                "column": 30
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 270,
                "column": 17
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 270,
                "column": 26
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 300,
                "column": 17
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 300,
                "column": 36
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 308,
                "column": 17
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 308,
                "column": 34
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 316,
                "column": 17
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 316,
                "column": 36
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 324,
                "column": 17
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 324,
                "column": 35
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 332,
                "column": 17
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 332,
                "column": 37
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 339,
                "column": 17
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 339,
                "column": 35
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 341,
                "column": 17
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 341,
                "column": 35
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 354,
                "column": 17
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 354,
                "column": 26
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 357,
                "column": 17
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 357,
                "column": 26
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 360,
                "column": 17
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 360,
                "column": 26
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 363,
                "column": 17
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 363,
                "column": 26
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 366,
                "column": 17
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 366,
                "column": 26
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 374,
                "column": 17
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 374,
                "column": 26
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 377,
                "column": 17
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 377,
                "column": 26
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 390,
                "column": 21
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 390,
                "column": 30
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 395,
                "column": 17
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 395,
                "column": 26
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 402,
                "column": 21
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 402,
                "column": 30
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 411,
                "column": 17
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonDeserializer.java",
                "line": 411,
                "column": 26
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonSerializer.java",
                "line": 123,
                "column": 40
            },
            {
                "path": "src/tika/tika-serialization/src/main/java/org/apache/tika/serialization/TikaJsonSerializer.java",
                "line": 125,
                "column": 37
            },
            {
                "path": "src/tika/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/resource/TikaResource.java",
                "line": 240,
                "column": 21
            },
            {
                "path": "src/tika/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/resource/TikaResource.java",
                "line": 240,
                "column": 30
            },
            {
                "path": "src/tika/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/resource/TikaResource.java",
                "line": 242,
                "column": 21
            },
            {
                "path": "src/tika/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/resource/TikaResource.java",
                "line": 242,
                "column": 30
            },
            {
                "path": "src/tika/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/resource/TikaResource.java",
                "line": 244,
                "column": 21
            },
            {
                "path": "src/tika/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/resource/TikaResource.java",
                "line": 244,
                "column": 30
            },
            {
                "path": "src/tika/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/resource/TikaResource.java",
                "line": 246,
                "column": 21
            },
            {
                "path": "src/tika/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/resource/TikaResource.java",
                "line": 246,
                "column": 30
            },
            {
                "path": "src/tika/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/resource/TikaResource.java",
                "line": 248,
                "column": 21
            },
            {
                "path": "src/tika/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/resource/TikaResource.java",
                "line": 248,
                "column": 30
            },
            {
                "path": "src/tika/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/resource/TikaResource.java",
                "line": 250,
                "column": 21
            },
            {
                "path": "src/tika/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/resource/TikaResource.java",
                "line": 250,
                "column": 30
            }
        ],
        "File read/write hook path": [
            {
                "path": "src/tika/tika-batch/src/main/java/org/apache/tika/batch/fs/FSListCrawler.java",
                "line": 54,
                "column": 42
            },
            {
                "path": "src/tika/tika-batch/src/main/java/org/apache/tika/batch/fs/FSOutputStreamFactory.java",
                "line": 79,
                "column": 49
            },
            {
                "path": "src/tika/tika-batch/src/main/java/org/apache/tika/batch/fs/builders/BasicTikaFSConsumersBuilder.java",
                "line": 115,
                "column": 56
            },
            {
                "path": "src/tika/tika-batch/src/main/java/org/apache/tika/batch/fs/strawman/StrawManTikaAppDriver.java",
                "line": 130,
                "column": 66
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java",
                "line": 357,
                "column": 47
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/detect/TrainedModelDetector.java",
                "line": 144,
                "column": 54
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/detect/TrainedModelDetector.java",
                "line": 154,
                "column": 52
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/extractor/RUnpackExtractor.java",
                "line": 151,
                "column": 52
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/io/TikaInputStream.java",
                "line": 134,
                "column": 60
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/io/TikaInputStream.java",
                "line": 142,
                "column": 60
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/io/TikaInputStream.java",
                "line": 720,
                "column": 62
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/io/TikaInputStream.java",
                "line": 752,
                "column": 48
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/parser/ParsingReader.java",
                "line": 119,
                "column": 35
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/parser/external2/ExternalParser.java",
                "line": 169,
                "column": 70
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/pipes/PipesConfig.java",
                "line": 38,
                "column": 52
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/pipes/PipesServer.java",
                "line": 696,
                "column": 56
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/pipes/async/AsyncConfig.java",
                "line": 42,
                "column": 52
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/pipes/emitter/EmitterManager.java",
                "line": 42,
                "column": 52
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/pipes/fetcher/FetcherManager.java",
                "line": 41,
                "column": 43
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/pipes/pipesiterator/PipesIterator.java",
                "line": 85,
                "column": 52
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/pipes/pipesiterator/filelist/FileListPipesIterator.java",
                "line": 63,
                "column": 62
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java",
                "line": 455,
                "column": 52
            },
            {
                "path": "src/tika/tika-eval/tika-eval-app/src/main/java/org/apache/tika/eval/app/XMLErrorLogUpdater.java",
                "line": 71,
                "column": 52
            },
            {
                "path": "src/tika/tika-eval/tika-eval-app/src/main/java/org/apache/tika/eval/app/io/ExtractReader.java",
                "line": 135,
                "column": 39
            },
            {
                "path": "src/tika/tika-eval/tika-eval-app/src/main/java/org/apache/tika/eval/app/reports/Report.java",
                "line": 82,
                "column": 62
            },
            {
                "path": "src/tika/tika-eval/tika-eval-app/src/main/java/org/apache/tika/eval/app/reports/ResultsReporter.java",
                "line": 92,
                "column": 52
            },
            {
                "path": "src/tika/tika-eval/tika-eval-app/src/main/java/org/apache/tika/eval/app/tools/LeipzigSampler.java",
                "line": 38,
                "column": 62
            },
            {
                "path": "src/tika/tika-eval/tika-eval-app/src/main/java/org/apache/tika/eval/app/tools/LeipzigSampler.java",
                "line": 59,
                "column": 62
            },
            {
                "path": "src/tika/tika-eval/tika-eval-app/src/main/java/org/apache/tika/eval/app/tools/TopCommonTokenCounter.java",
                "line": 111,
                "column": 62
            },
            {
                "path": "src/tika/tika-eval/tika-eval-app/src/main/java/org/apache/tika/eval/app/tools/TopCommonTokenCounter.java",
                "line": 248,
                "column": 47
            },
            {
                "path": "src/tika/tika-eval/tika-eval-app/src/main/java/org/apache/tika/eval/app/tools/TrainTestSplit.java",
                "line": 80,
                "column": 62
            },
            {
                "path": "src/tika/tika-eval/tika-eval-app/src/main/java/org/apache/tika/eval/app/tools/TrainTestSplit.java",
                "line": 117,
                "column": 105
            },
            {
                "path": "src/tika/tika-eval/tika-eval-core/src/main/java/org/apache/tika/eval/core/tokens/CommonTokenCountManager.java",
                "line": 139,
                "column": 43
            },
            {
                "path": "src/tika/tika-example/src/main/java/org/apache/tika/example/GrabPhoneNumbersExample.java",
                "line": 97,
                "column": 80
            },
            {
                "path": "src/tika/tika-example/src/main/java/org/apache/tika/example/InterruptableParsingExample.java",
                "line": 55,
                "column": 76
            },
            {
                "path": "src/tika/tika-example/src/main/java/org/apache/tika/example/StandardsExtractionExample.java",
                "line": 104,
                "column": 80
            },
            {
                "path": "src/tika/tika-example/src/main/java/org/apache/tika/example/TIAParsingExample.java",
                "line": 158,
                "column": 54
            },
            {
                "path": "src/tika/tika-fuzzing/src/main/java/org/apache/tika/fuzzing/cli/FuzzOne.java",
                "line": 150,
                "column": 25
            },
            {
                "path": "src/tika/tika-fuzzing/src/main/java/org/apache/tika/fuzzing/cli/FuzzOne.java",
                "line": 161,
                "column": 25
            },
            {
                "path": "src/tika/tika-fuzzing/src/main/java/org/apache/tika/fuzzing/cli/FuzzOne.java",
                "line": 170,
                "column": 52
            },
            {
                "path": "src/tika/tika-fuzzing/src/main/java/org/apache/tika/fuzzing/cli/FuzzOne.java",
                "line": 171,
                "column": 57
            },
            {
                "path": "src/tika/tika-fuzzing/src/main/java/org/apache/tika/fuzzing/cli/FuzzOne.java",
                "line": 215,
                "column": 56
            },
            {
                "path": "src/tika/tika-fuzzing/src/main/java/org/apache/tika/fuzzing/cli/FuzzingCLI.java",
                "line": 217,
                "column": 62
            },
            {
                "path": "src/tika/tika-fuzzing/src/main/java/org/apache/tika/fuzzing/pdf/EvilCOSWriter.java",
                "line": 694,
                "column": 87
            },
            {
                "path": "src/tika/tika-fuzzing/src/main/java/org/apache/tika/fuzzing/pdf/EvilCOSWriter.java",
                "line": 723,
                "column": 83
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-audiovideo-module/src/main/java/org/apache/tika/parser/mp4/MP4Parser.java",
                "line": 101,
                "column": 52
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-cad-module/src/main/java/org/apache/tika/parser/dwg/DWGReadParser.java",
                "line": 130,
                "column": 60
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-image-module/src/main/java/org/apache/tika/parser/image/AbstractImageParser.java",
                "line": 92,
                "column": 64
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-image-module/src/main/java/org/apache/tika/parser/image/AbstractImageParser.java",
                "line": 100,
                "column": 64
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-pdf-module/src/main/java/org/apache/tika/parser/pdf/AbstractPDF2XHTML.java",
                "line": 679,
                "column": 58
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-pdf-module/src/main/java/org/apache/tika/parser/pdf/AbstractPDF2XHTML.java",
                "line": 1099,
                "column": 59
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-pdf-module/src/main/java/org/apache/tika/parser/pdf/AbstractPDF2XHTML.java",
                "line": 1100,
                "column": 71
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-pdf-module/src/main/java/org/apache/tika/renderer/pdf/pdfbox/PDFBoxRenderer.java",
                "line": 173,
                "column": 58
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-pkg-module/src/main/java/org/apache/tika/parser/pkg/UnrarParser.java",
                "line": 80,
                "column": 58
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-zip-commons/src/main/java/org/apache/tika/detect/zip/DefaultZipContainerDetector.java",
                "line": 246,
                "column": 80
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-zip-commons/src/main/java/org/apache/tika/zip/utils/ZipSalvager.java",
                "line": 128,
                "column": 52
            },
            {
                "path": "src/tika/tika-pipes/tika-emitters/tika-emitter-fs/src/main/java/org/apache/tika/pipes/emitter/fs/FileSystemEmitter.java",
                "line": 95,
                "column": 54
            },
            {
                "path": "src/tika/tika-pipes/tika-emitters/tika-emitter-gcs/src/main/java/org/apache/tika/pipes/emitter/gcs/GCSEmitter.java",
                "line": 101,
                "column": 58
            },
            {
                "path": "src/tika/tika-pipes/tika-emitters/tika-emitter-s3/src/main/java/org/apache/tika/pipes/emitter/s3/S3Emitter.java",
                "line": 145,
                "column": 62
            },
            {
                "path": "src/tika/tika-pipes/tika-fetchers/tika-fetcher-http/src/main/java/org/apache/tika/pipes/fetcher/http/HttpFetcher.java",
                "line": 339,
                "column": 58
            },
            {
                "path": "src/tika/tika-pipes/tika-pipes-iterators/tika-pipes-iterator-csv/src/main/java/org/apache/tika/pipes/pipesiterator/csv/CSVPipesIterator.java",
                "line": 118,
                "column": 54
            },
            {
                "path": "src/tika/tika-pipes/tika-pipes-iterators/tika-pipes-iterator-json/src/main/java/org/apache/tika/pipes/pipesiterator/json/JsonPipesIterator.java",
                "line": 49,
                "column": 62
            },
            {
                "path": "src/tika/tika-pipes/tika-pipes-reporters/tika-pipes-reporter-fs-status/src/main/java/org/apache/tika/pipes/reporters/fs/FileSystemStatusReporter.java",
                "line": 117,
                "column": 54
            },
            {
                "path": "src/tika/tika-pipes/tika-pipes-reporters/tika-pipes-reporter-fs-status/src/main/java/org/apache/tika/pipes/reporters/fs/FileSystemStatusReporter.java",
                "line": 126,
                "column": 54
            },
            {
                "path": "src/tika/tika-server/tika-server-client/src/main/java/org/apache/tika/server/client/TikaServerClientConfig.java",
                "line": 44,
                "column": 52
            },
            {
                "path": "src/tika/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/ServerStatusWatcher.java",
                "line": 92,
                "column": 53
            },
            {
                "path": "src/tika/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/TikaServerConfig.java",
                "line": 188,
                "column": 52
            },
            {
                "path": "src/tika/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/TikaServerConfig.java",
                "line": 213,
                "column": 52
            },
            {
                "path": "src/tika/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/TikaServerWatchDog.java",
                "line": 331,
                "column": 52
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/detect/FileCommandDetector.java",
                "line": 112,
                "column": 65
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/io/TikaInputStream.java",
                "line": 704,
                "column": 56
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/io/TikaInputStream.java",
                "line": 714,
                "column": 38
            },
            {
                "path": "src/tika/tika-detectors/tika-detector-siegfried/src/main/java/org/apache/tika/detect/siegfried/SiegfriedDetector.java",
                "line": 132,
                "column": 65
            },
            {
                "path": "src/tika/tika-eval/tika-eval-app/src/main/java/org/apache/tika/eval/app/TikaEvalCLI.java",
                "line": 106,
                "column": 36
            },
            {
                "path": "src/tika/tika-eval/tika-eval-app/src/main/java/org/apache/tika/eval/app/TikaEvalCLI.java",
                "line": 225,
                "column": 36
            },
            {
                "path": "src/tika/tika-eval/tika-eval-app/src/main/java/org/apache/tika/eval/app/TikaEvalCLI.java",
                "line": 327,
                "column": 36
            },
            {
                "path": "src/tika/tika-eval/tika-eval-app/src/main/java/org/apache/tika/eval/app/reports/ResultsReporter.java",
                "line": 295,
                "column": 77
            },
            {
                "path": "src/tika/tika-example/src/main/java/org/apache/tika/example/ExtractEmbeddedFiles.java",
                "line": 116,
                "column": 32
            },
            {
                "path": "src/tika/tika-fuzzing/src/main/java/org/apache/tika/fuzzing/cli/FuzzingCLI.java",
                "line": 239,
                "column": 44
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-extended/tika-parser-scientific-module/src/main/java/org/apache/tika/parser/grib/GribParser.java",
                "line": 70,
                "column": 32
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-extended/tika-parser-sqlite3-module/src/main/java/org/apache/tika/parser/sqlite3/SQLite3DBParser.java",
                "line": 107,
                "column": 28
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java",
                "line": 328,
                "column": 47
            },
            {
                "path": "src/tika/tika-pipes/tika-emitters/tika-emitter-fs/src/main/java/org/apache/tika/pipes/emitter/fs/FileSystemEmitter.java",
                "line": 153,
                "column": 37
            },
            {
                "path": "src/tika/tika-pipes/tika-emitters/tika-emitter-fs/src/main/java/org/apache/tika/pipes/emitter/fs/FileSystemEmitter.java",
                "line": 155,
                "column": 37
            },
            {
                "path": "src/tika/tika-pipes/tika-emitters/tika-emitter-fs/src/main/java/org/apache/tika/pipes/emitter/fs/FileSystemEmitter.java",
                "line": 159,
                "column": 45
            },
            {
                "path": "src/tika/tika-pipes/tika-fetchers/tika-fetcher-http/src/main/java/org/apache/tika/pipes/fetcher/http/HttpFetcher.java",
                "line": 337,
                "column": 33
            },
            {
                "path": "src/tika/tika-pipes/tika-fetchers/tika-fetcher-s3/src/main/java/org/apache/tika/pipes/fetcher/s3/S3Fetcher.java",
                "line": 223,
                "column": 57
            },
            {
                "path": "src/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java",
                "line": 865,
                "column": 97
            },
            {
                "path": "src/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java",
                "line": 1103,
                "column": 61
            },
            {
                "path": "src/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java",
                "line": 636,
                "column": 66
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java",
                "line": 200,
                "column": 77
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/io/TikaInputStream.java",
                "line": 159,
                "column": 59
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/parser/ParsingReader.java",
                "line": 131,
                "column": 34
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/parser/digest/InputStreamDigester.java",
                "line": 189,
                "column": 51
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParser.java",
                "line": 356,
                "column": 72
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/utils/RereadableInputStream.java",
                "line": 195,
                "column": 83
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/utils/RereadableInputStream.java",
                "line": 218,
                "column": 83
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/utils/RereadableInputStream.java",
                "line": 263,
                "column": 75
            },
            {
                "path": "src/tika/tika-example/src/main/java/org/apache/tika/example/DumpTikaConfigExample.java",
                "line": 79,
                "column": 66
            },
            {
                "path": "src/tika/tika-example/src/main/java/org/apache/tika/example/ImportContextImpl.java",
                "line": 126,
                "column": 42
            },
            {
                "path": "src/tika/tika-example/src/main/java/org/apache/tika/example/MetadataAwareLuceneIndexer.java",
                "line": 52,
                "column": 51
            },
            {
                "path": "src/tika/tika-example/src/main/java/org/apache/tika/example/MetadataAwareLuceneIndexer.java",
                "line": 79,
                "column": 51
            },
            {
                "path": "src/tika/tika-example/src/main/java/org/apache/tika/example/TIAParsingExample.java",
                "line": 85,
                "column": 55
            },
            {
                "path": "src/tika/tika-example/src/main/java/org/apache/tika/example/TrecDocumentGenerator.java",
                "line": 41,
                "column": 66
            },
            {
                "path": "src/tika/tika-grpc/src/main/java/org/apache/tika/pipes/grpc/TikaGrpcServer.java",
                "line": 94,
                "column": 49
            },
            {
                "path": "src/tika/tika-grpc/src/main/java/org/apache/tika/pipes/grpc/TikaGrpcServerImpl.java",
                "line": 149,
                "column": 44
            },
            {
                "path": "src/tika/tika-langdetect/tika-langdetect-tika/src/main/java/org/apache/tika/langdetect/tika/LanguageProfilerBuilder.java",
                "line": 247,
                "column": 63
            },
            {
                "path": "src/tika/tika-langdetect/tika-langdetect-tika/src/main/java/org/apache/tika/langdetect/tika/LanguageProfilerBuilder.java",
                "line": 252,
                "column": 65
            },
            {
                "path": "src/tika/tika-langdetect/tika-langdetect-tika/src/main/java/org/apache/tika/langdetect/tika/LanguageProfilerBuilder.java",
                "line": 261,
                "column": 47
            },
            {
                "path": "src/tika/tika-langdetect/tika-langdetect-tika/src/main/java/org/apache/tika/langdetect/tika/LanguageProfilerBuilder.java",
                "line": 266,
                "column": 47
            },
            {
                "path": "src/tika/tika-langdetect/tika-langdetect-tika/src/main/java/org/apache/tika/langdetect/tika/LanguageProfilerBuilder.java",
                "line": 275,
                "column": 47
            },
            {
                "path": "src/tika/tika-langdetect/tika-langdetect-tika/src/main/java/org/apache/tika/langdetect/tika/LanguageProfilerBuilder.java",
                "line": 279,
                "column": 47
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-dl/src/main/java/org/apache/tika/dl/imagerec/DL4JInceptionV3Net.java",
                "line": 219,
                "column": 40
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/pot/PooledTimeSeriesParser.java",
                "line": 132,
                "column": 21
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/pot/PooledTimeSeriesParser.java",
                "line": 134,
                "column": 25
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/recognition/tf/TensorflowImageRecParser.java",
                "line": 125,
                "column": 73
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/journal/GrobidRESTParser.java",
                "line": 93,
                "column": 70
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/journal/JournalParser.java",
                "line": 63,
                "column": 42
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/corenlp/CoreNLPNERecogniser.java",
                "line": 121,
                "column": 59
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-cad-module/src/main/java/org/apache/tika/parser/dwg/DWGReadParser.java",
                "line": 135,
                "column": 66
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/chm/ChmCommons.java",
                "line": 183,
                "column": 61
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java",
                "line": 233,
                "column": 58
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java",
                "line": 344,
                "column": 63
            },
            {
                "path": "src/tika/tika-translate/src/main/java/org/apache/tika/language/translate/impl/MarianTranslator.java",
                "line": 135,
                "column": 83
            },
            {
                "path": "src/tika/tika-translate/src/main/java/org/apache/tika/language/translate/impl/MarianTranslator.java",
                "line": 156,
                "column": 63
            },
            {
                "path": "src/tika/tika-translate/src/main/java/org/apache/tika/language/translate/impl/MosesTranslator.java",
                "line": 80,
                "column": 83
            },
            {
                "path": "src/tika/tika-translate/src/main/java/org/apache/tika/language/translate/impl/MosesTranslator.java",
                "line": 92,
                "column": 59
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-extended/tika-parser-scientific-module/src/main/java/org/apache/tika/parser/gdal/GDALParser.java",
                "line": 235,
                "column": 44
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-extended/tika-parser-scientific-module/src/main/java/org/apache/tika/parser/gdal/GDALParser.java",
                "line": 276,
                "column": 44
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/detect/FileCommandDetector.java",
                "line": 112,
                "column": 24
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/io/TikaInputStream.java",
                "line": 704,
                "column": 36
            },
            {
                "path": "src/tika/tika-core/src/main/java/org/apache/tika/io/TikaInputStream.java",
                "line": 714,
                "column": 32
            },
            {
                "path": "src/tika/tika-detectors/tika-detector-siegfried/src/main/java/org/apache/tika/detect/siegfried/SiegfriedDetector.java",
                "line": 132,
                "column": 24
            },
            {
                "path": "src/tika/tika-eval/tika-eval-app/src/main/java/org/apache/tika/eval/app/TikaEvalCLI.java",
                "line": 106,
                "column": 32
            },
            {
                "path": "src/tika/tika-eval/tika-eval-app/src/main/java/org/apache/tika/eval/app/TikaEvalCLI.java",
                "line": 225,
                "column": 32
            },
            {
                "path": "src/tika/tika-eval/tika-eval-app/src/main/java/org/apache/tika/eval/app/TikaEvalCLI.java",
                "line": 327,
                "column": 32
            },
            {
                "path": "src/tika/tika-eval/tika-eval-app/src/main/java/org/apache/tika/eval/app/reports/ResultsReporter.java",
                "line": 295,
                "column": 20
            },
            {
                "path": "src/tika/tika-example/src/main/java/org/apache/tika/example/ExtractEmbeddedFiles.java",
                "line": 116,
                "column": 24
            },
            {
                "path": "src/tika/tika-fuzzing/src/main/java/org/apache/tika/fuzzing/cli/FuzzingCLI.java",
                "line": 239,
                "column": 32
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-extended/tika-parser-scientific-module/src/main/java/org/apache/tika/parser/grib/GribParser.java",
                "line": 70,
                "column": 24
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-extended/tika-parser-sqlite3-module/src/main/java/org/apache/tika/parser/sqlite3/SQLite3DBParser.java",
                "line": 107,
                "column": 24
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-cad-module/src/main/java/org/apache/tika/parser/dwg/DWGReadParser.java",
                "line": 113,
                "column": 45
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-cad-module/src/main/java/org/apache/tika/parser/dwg/DWGReadParser.java",
                "line": 113,
                "column": 53
            },
            {
                "path": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java",
                "line": 328,
                "column": 40
            },
            {
                "path": "src/tika/tika-pipes/tika-emitters/tika-emitter-fs/src/main/java/org/apache/tika/pipes/emitter/fs/FileSystemEmitter.java",
                "line": 153,
                "column": 24
            },
            {
                "path": "src/tika/tika-pipes/tika-emitters/tika-emitter-fs/src/main/java/org/apache/tika/pipes/emitter/fs/FileSystemEmitter.java",
                "line": 155,
                "column": 24
            },
            {
                "path": "src/tika/tika-pipes/tika-emitters/tika-emitter-fs/src/main/java/org/apache/tika/pipes/emitter/fs/FileSystemEmitter.java",
                "line": 159,
                "column": 32
            },
            {
                "path": "src/tika/tika-pipes/tika-fetchers/tika-fetcher-http/src/main/java/org/apache/tika/pipes/fetcher/http/HttpFetcher.java",
                "line": 337,
                "column": 24
            },
            {
                "path": "src/tika/tika-pipes/tika-fetchers/tika-fetcher-s3/src/main/java/org/apache/tika/pipes/fetcher/s3/S3Fetcher.java",
                "line": 223,
                "column": 28
            },
            {
                "path": "src/tika/tika-example/src/main/java/org/apache/tika/example/MyFirstTika.java",
                "line": 99,
                "column": 78
            },
            {
                "path": "src/tika/tika-grpc/src/main/java/org/apache/tika/pipes/grpc/TikaGrpcServerImpl.java",
                "line": 107,
                "column": 72
            },
            {
                "path": "src/tika/tika-translate/src/main/java/org/apache/tika/language/translate/impl/MarianTranslator.java",
                "line": 214,
                "column": 48
            }
        ]
    },
    "tasks": [
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "OS Command Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParser.java:312:53",
            "status": "error",
            "id": 1
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "OS Command Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParser.java:314:53",
            "status": "error",
            "id": 2
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n1040           public void process(InputStream input, OutputStream output, Metadata metadata) throws Exception {\n1041               Parser p = parser;\n1042               if (fork) {\n1043                   p = new ForkParser(TikaCLI.class.getClassLoader(), p);\n1044               }\n1045               ContentHandler handler = getContentHandler(output, metadata);\n1046               try {\n1047                   p.parse(input, handler, metadata, context);\n1048                   // fix for TIKA-596: if a parser doesn't generate\n1049                   // XHTML output, the lack of an output document prevents\n1050                   // metadata from being output: this fixes that\n1051                   if (handler instanceof NoDocumentMetHandler) {\n1052                       NoDocumentMetHandler metHandler = (NoDocumentMetHandler) handler;\n1053                       if (!metHandler.metOutput()) {\n1054                           metHandler.endDocument();\n1055                       }\n1056                   }\n1057               } finally {\n1058                   if (fork) {\n1059                       ((ForkParser) p).close();\n1060                   }\n1061               }\n1062           }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/fork/ForkParser.java:\n236       public void parse(InputStream stream, ContentHandler handler, Metadata metadata,\n237                         ParseContext context) throws IOException, SAXException, TikaException {\n238           if (stream == null) {\n239               throw new NullPointerException(\"null stream\");\n240           }\n241   \n242           Throwable t;\n243   \n244           boolean alive = false;\n245           ForkClient client = acquireClient();\n246           try {\n247               ContentHandler tee =\n248                       (handler instanceof AbstractRecursiveParserWrapperHandler) ? handler :\n249                               new TeeContentHandler(handler, new MetadataContentHandler(metadata));\n250   \n251               t = client.call(\"parse\", stream, tee, metadata, context);\n252               alive = true;\n253           } catch (TikaException te) {\n254               // Problem occurred on our side\n255               alive = true;\n256               throw te;\n257           } catch (IOException e) {\n258               // Problem occurred on the other side\n259               throw new TikaException(\"Failed to communicate with a forked parser process.\" +\n260                       \" The process has most likely crashed due to some error\" +\n261                       \" like running out of memory. A new process will be\" +\n262                       \" started for the next parsing request.\", e);\n263           } finally {\n264               releaseClient(client, alive);\n265           }\n266   \n267           if (t instanceof IOException) {\n268               throw (IOException) t;\n269           } else if (t instanceof SAXException) {\n270               throw (SAXException) t;\n271           } else if (t instanceof TikaException) {\n272               throw (TikaException) t;\n273           } else if (t != null) {\n274               throw new TikaException(\"Unexpected error in forked server process\", t);\n275           }\n276       }\n286       private synchronized ForkClient acquireClient() throws IOException, TikaException {\n287           while (true) {\n288               ForkClient client = pool.poll();\n289   \n290               // Create a new process if there's room in the pool\n291               if (client == null && currentlyInUse < poolSize) {\n292                   client = newClient();\n293               }\n294   \n295               // Ping the process, and get rid of it if it's inactive\n296               if (client != null && !client.ping()) {\n297                   client.close();\n298                   client = null;\n299               }\n300   \n301               if (client != null) {\n302                   currentlyInUse++;\n303                   return client;\n304               } else if (currentlyInUse >= poolSize) {\n305                   try {\n306                       wait();\n307                   } catch (InterruptedException e) {\n308                       throw new TikaException(\"Interrupted while waiting for a fork parser\", e);\n309                   }\n310               }\n311           }\n312       }\n314       private ForkClient newClient() throws IOException, TikaException {\n315           TimeoutLimits timeoutLimits = new TimeoutLimits(serverPulseMillis, serverParseTimeoutMillis,\n316                   serverWaitTimeoutMillis);\n317           if (loader == null && parser == null && tikaBin != null && parserFactoryFactory != null) {\n318               return new ForkClient(tikaBin, parserFactoryFactory, java, timeoutLimits);\n319           } else if (loader != null && parser != null && tikaBin == null &&\n320                   parserFactoryFactory == null) {\n321               return new ForkClient(loader, parser, java, timeoutLimits);\n322           } else if (loader != null && parser == null && tikaBin != null &&\n323                   parserFactoryFactory != null) {\n324               return new ForkClient(tikaBin, parserFactoryFactory, loader, java, timeoutLimits);\n325           } else {\n326               //TODO: make this more useful\n327               throw new IllegalStateException(\"Unexpected combination of state items\");\n328           }\n329       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java:\n 81       public ForkClient(Path tikaDir, ParserFactoryFactory parserFactoryFactory,\n 82                         ClassLoader classLoader, List<String> java, TimeoutLimits timeoutLimits)\n 83               throws IOException, TikaException {\n 84           jar = null;\n 85           loader = null;\n 86           boolean ok = false;\n 87           ProcessBuilder builder = new ProcessBuilder();\n 88           List<String> command = new ArrayList<>(java);\n 89           command.add(\"-cp\");\n 90           String dirString = tikaDir.toAbsolutePath().toString();\n 91           if (!dirString.endsWith(\"/\")) {\n 92               dirString += \"/*\";\n 93           } else {\n 94               dirString += \"/\";\n 95           }\n 96           dirString = ProcessUtils.escapeCommandLine(dirString);\n 97           command.add(dirString);\n 98           command.add(\"org.apache.tika.fork.ForkServer\");\n 99           command.add(Long.toString(timeoutLimits.getPulseMS()));\n100           command.add(Long.toString(timeoutLimits.getParseTimeoutMS()));\n101           command.add(Long.toString(timeoutLimits.getWaitTimeoutMS()));\n102           builder.command(command);\n103           builder.redirectError(ProcessBuilder.Redirect.INHERIT);\n104           try {\n105               this.process = builder.start();\n106   \n107               this.output = new DataOutputStream(process.getOutputStream());\n108               this.input = new DataInputStream(process.getInputStream());\n109   \n110               waitForStartBeacon();\n111               if (classLoader != null) {\n112                   output.writeByte(ForkServer.INIT_PARSER_FACTORY_FACTORY_LOADER);\n113               } else {\n114                   output.writeByte(ForkServer.INIT_PARSER_FACTORY_FACTORY);\n115               }\n116               output.flush();\n117               sendObject(parserFactoryFactory, resources);\n118               if (classLoader != null) {\n119                   sendObject(classLoader, resources);\n120               }\n121               waitForStartBeacon();\n122               ok = true;\n123           } catch (Throwable t) {\n124               t.printStackTrace();\n125               throw t;\n126           } finally {\n127               if (!ok) {\n128                   close();\n129               }\n130           }\n131       }\n",
            "cost": 0.10230500000000001,
            "harness_id": "TikaOne",
            "sanitizer": "OS Command Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java:105:28",
            "status": "corpus",
            "valid_path": "NO",
            "id": 3
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "OS Command Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/utils/ProcessUtils.java:177:17",
            "status": "error",
            "id": 4
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "OS Command Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-text-module/src/main/java/org/apache/tika/parser/strings/StringsParser.java:195:33",
            "status": "error",
            "id": 5
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "OS Command Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-extended/tika-parser-scientific-module/src/main/java/org/apache/tika/parser/gdal/GDALParser.java:298:49",
            "status": "error",
            "id": 6
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "OS Command Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-extended/tika-parser-scientific-module/src/main/java/org/apache/tika/parser/gdal/GDALParser.java:300:49",
            "status": "error",
            "id": 7
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n1040           public void process(InputStream input, OutputStream output, Metadata metadata) throws Exception {\n1041               Parser p = parser;\n1042               if (fork) {\n1043                   p = new ForkParser(TikaCLI.class.getClassLoader(), p);\n1044               }\n1045               ContentHandler handler = getContentHandler(output, metadata);\n1046               try {\n1047                   p.parse(input, handler, metadata, context);\n1048                   // fix for TIKA-596: if a parser doesn't generate\n1049                   // XHTML output, the lack of an output document prevents\n1050                   // metadata from being output: this fixes that\n1051                   if (handler instanceof NoDocumentMetHandler) {\n1052                       NoDocumentMetHandler metHandler = (NoDocumentMetHandler) handler;\n1053                       if (!metHandler.metOutput()) {\n1054                           metHandler.endDocument();\n1055                       }\n1056                   }\n1057               } finally {\n1058                   if (fork) {\n1059                       ((ForkParser) p).close();\n1060                   }\n1061               }\n1062           }\n\nsrc/tika/tika-parsers/tika-parsers-extended/tika-parser-scientific-module/src/main/java/org/apache/tika/parser/gdal/GDALParser.java:\n174       @Override\n175       public void parse(InputStream stream, ContentHandler handler, Metadata metadata,\n176                         ParseContext context) throws IOException, SAXException, TikaException {\n177   \n178           if (!ExternalParser.check(\"gdalinfo\")) {\n179               return;\n180           }\n181   \n182           // first set up and run GDAL\n183           // process the command\n184           TemporaryResources tmp = new TemporaryResources();\n185           TikaInputStream tis = TikaInputStream.get(stream, tmp, metadata);\n186   \n187           String runCommand = processCommand(tis);\n188           String output = execCommand(new String[]{runCommand});\n189   \n190           // now extract the actual metadata params\n191           // from the GDAL output in the content stream\n192           // to do this, we need to literally process the output\n193           // from the invoked command b/c we can't read metadata and\n194           // output text from the handler in ExternalParser\n195           // at the same time, so for now, we can't use the\n196           // ExternalParser to do this and I've had to bring some of\n197           // that functionality directly into this class\n198           // TODO: investigate a way to do both using ExternalParser\n199   \n200           extractMetFromOutput(output, metadata);\n201           applyPatternsToOutput(output, metadata, getPatterns());\n202   \n203           // make the content handler and provide output there\n204           // now that we have metadata\n205           processOutput(handler, metadata, output);\n206       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParser.java:\n150       public static boolean check(String checkCmd, int... errorValue) {\n151           return check(new String[]{checkCmd}, errorValue);\n152       }\n154       public static boolean check(String[] checkCmd, int... errorValue) {\n155           if (errorValue.length == 0) {\n156               errorValue = new int[]{127};\n157           }\n158   \n159           Process process = null;\n160           try {\n161               process = Runtime.getRuntime().exec(checkCmd);\n162               Thread stdErrSuckerThread = ignoreStream(process.getErrorStream(), false);\n163               Thread stdOutSuckerThread = ignoreStream(process.getInputStream(), false);\n164               stdErrSuckerThread.join();\n165               stdOutSuckerThread.join();\n166               //make the timeout parameterizable\n167               boolean finished = process.waitFor(60000, TimeUnit.MILLISECONDS);\n168               if (!finished) {\n169                   throw new TimeoutException();\n170               }\n171               int result = process.exitValue();\n172               LOG.debug(\"exit value for {}: {}\", checkCmd[0], result);\n173               for (int err : errorValue) {\n174                   if (result == err) {\n175                       return false;\n176                   }\n177               }\n178               return true;\n179           } catch (IOException | InterruptedException | TimeoutException e) {\n180               LOG.debug(\"exception trying to run  \" + checkCmd[0], e);\n181               // Some problem, command is there or is broken\n182               return false;\n183           } catch (SecurityException se) {\n184               // External process execution is banned by the security manager\n185               throw se;\n186           } catch (Error err) {\n187               if (err.getMessage() != null && (err.getMessage().contains(\"posix_spawn\") ||\n188                       err.getMessage().contains(\"UNIXProcess\"))) {\n189                   LOG.debug(\"(TIKA-1526): exception trying to run: \" + checkCmd[0], err);\n190                   //\"Error forking command due to JVM locale bug\n191                   //(see TIKA-1526 and SOLR-6387)\"\n192                   return false;\n193               }\n194               //throw if a different kind of error\n195               throw err;\n196           } finally {\n197               if (process != null) {\n198                   process.destroyForcibly();\n199               }\n200           }\n201       }\n",
            "cost": 0.090925,
            "harness_id": "TikaOne",
            "sanitizer": "OS Command Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParser.java:161:49",
            "status": "corpus",
            "valid_path": "NO",
            "id": 8
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n1040           public void process(InputStream input, OutputStream output, Metadata metadata) throws Exception {\n1041               Parser p = parser;\n1042               if (fork) {\n1043                   p = new ForkParser(TikaCLI.class.getClassLoader(), p);\n1044               }\n1045               ContentHandler handler = getContentHandler(output, metadata);\n1046               try {\n1047                   p.parse(input, handler, metadata, context);\n1048                   // fix for TIKA-596: if a parser doesn't generate\n1049                   // XHTML output, the lack of an output document prevents\n1050                   // metadata from being output: this fixes that\n1051                   if (handler instanceof NoDocumentMetHandler) {\n1052                       NoDocumentMetHandler metHandler = (NoDocumentMetHandler) handler;\n1053                       if (!metHandler.metOutput()) {\n1054                           metHandler.endDocument();\n1055                       }\n1056                   }\n1057               } finally {\n1058                   if (fork) {\n1059                       ((ForkParser) p).close();\n1060                   }\n1061               }\n1062           }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/fork/ForkParser.java:\n236       public void parse(InputStream stream, ContentHandler handler, Metadata metadata,\n237                         ParseContext context) throws IOException, SAXException, TikaException {\n238           if (stream == null) {\n239               throw new NullPointerException(\"null stream\");\n240           }\n241   \n242           Throwable t;\n243   \n244           boolean alive = false;\n245           ForkClient client = acquireClient();\n246           try {\n247               ContentHandler tee =\n248                       (handler instanceof AbstractRecursiveParserWrapperHandler) ? handler :\n249                               new TeeContentHandler(handler, new MetadataContentHandler(metadata));\n250   \n251               t = client.call(\"parse\", stream, tee, metadata, context);\n252               alive = true;\n253           } catch (TikaException te) {\n254               // Problem occurred on our side\n255               alive = true;\n256               throw te;\n257           } catch (IOException e) {\n258               // Problem occurred on the other side\n259               throw new TikaException(\"Failed to communicate with a forked parser process.\" +\n260                       \" The process has most likely crashed due to some error\" +\n261                       \" like running out of memory. A new process will be\" +\n262                       \" started for the next parsing request.\", e);\n263           } finally {\n264               releaseClient(client, alive);\n265           }\n266   \n267           if (t instanceof IOException) {\n268               throw (IOException) t;\n269           } else if (t instanceof SAXException) {\n270               throw (SAXException) t;\n271           } else if (t instanceof TikaException) {\n272               throw (TikaException) t;\n273           } else if (t != null) {\n274               throw new TikaException(\"Unexpected error in forked server process\", t);\n275           }\n276       }\n286       private synchronized ForkClient acquireClient() throws IOException, TikaException {\n287           while (true) {\n288               ForkClient client = pool.poll();\n289   \n290               // Create a new process if there's room in the pool\n291               if (client == null && currentlyInUse < poolSize) {\n292                   client = newClient();\n293               }\n294   \n295               // Ping the process, and get rid of it if it's inactive\n296               if (client != null && !client.ping()) {\n297                   client.close();\n298                   client = null;\n299               }\n300   \n301               if (client != null) {\n302                   currentlyInUse++;\n303                   return client;\n304               } else if (currentlyInUse >= poolSize) {\n305                   try {\n306                       wait();\n307                   } catch (InterruptedException e) {\n308                       throw new TikaException(\"Interrupted while waiting for a fork parser\", e);\n309                   }\n310               }\n311           }\n312       }\n314       private ForkClient newClient() throws IOException, TikaException {\n315           TimeoutLimits timeoutLimits = new TimeoutLimits(serverPulseMillis, serverParseTimeoutMillis,\n316                   serverWaitTimeoutMillis);\n317           if (loader == null && parser == null && tikaBin != null && parserFactoryFactory != null) {\n318               return new ForkClient(tikaBin, parserFactoryFactory, java, timeoutLimits);\n319           } else if (loader != null && parser != null && tikaBin == null &&\n320                   parserFactoryFactory == null) {\n321               return new ForkClient(loader, parser, java, timeoutLimits);\n322           } else if (loader != null && parser == null && tikaBin != null &&\n323                   parserFactoryFactory != null) {\n324               return new ForkClient(tikaBin, parserFactoryFactory, loader, java, timeoutLimits);\n325           } else {\n326               //TODO: make this more useful\n327               throw new IllegalStateException(\"Unexpected combination of state items\");\n328           }\n329       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java:\n134       public ForkClient(ClassLoader loader, Object object, List<String> java,\n135                         TimeoutLimits timeoutLimits) throws IOException, TikaException {\n136           boolean ok = false;\n137           try {\n138               this.loader = loader;\n139               this.jar = createBootstrapJar();\n140   \n141               ProcessBuilder builder = new ProcessBuilder();\n142               List<String> command = new ArrayList<>(java);\n143               command.add(\"-jar\");\n144               command.add(jar.getPath());\n145               command.add(Long.toString(timeoutLimits.getPulseMS()));\n146               command.add(Long.toString(timeoutLimits.getParseTimeoutMS()));\n147               command.add(Long.toString(timeoutLimits.getWaitTimeoutMS()));\n148               builder.command(command);\n149               builder.redirectError(ProcessBuilder.Redirect.INHERIT);\n150               this.process = builder.start();\n151   \n152               this.output = new DataOutputStream(process.getOutputStream());\n153               this.input = new DataInputStream(process.getInputStream());\n154   \n155               waitForStartBeacon();\n156               output.writeByte(ForkServer.INIT_LOADER_PARSER);\n157               output.flush();\n158               sendObject(loader, resources);\n159               sendObject(object, resources);\n160               waitForStartBeacon();\n161   \n162               ok = true;\n163           } finally {\n164               if (!ok) {\n165                   close();\n166               }\n167           }\n168       }\n",
            "cost": 0.096205,
            "harness_id": "TikaOne",
            "sanitizer": "OS Command Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java:150:28",
            "status": "corpus",
            "valid_path": "NO",
            "id": 9
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "OS Command Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/utils/ProcessUtils.java:94:17",
            "status": "error",
            "id": 10
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "OS Command Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java:445:23",
            "status": "error",
            "id": 11
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "OS Command Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/ImagePreprocessor.java:100:34",
            "status": "error",
            "id": 12
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n 667           @SuppressWarnings(\"unchecked\")\n 668           CT loadOverall(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 669                   throws TikaException, IOException {\n 670               List<T> loaded = new ArrayList<>();\n 671   \n 672               // Find the children of the parent tag, if any\n 673               for (Element le : getTopLevelElementChildren(element, getParentTagName(),\n 674                       getLoaderTagName())) {\n 675                   T loadedChild = loadOne(le, mimeTypes, loader);\n 676                   if (loadedChild != null) {\n 677                       loaded.add(loadedChild);\n 678                   }\n 679               }\n 680   \n 681               // Build the classes, and wrap as needed\n 682               if (loaded.isEmpty()) {\n 683                   // Nothing defined, create a Default\n 684                   return createDefault(mimeTypes, loader);\n 685               } else if (loaded.size() == 1) {\n 686                   T single = loaded.get(0);\n 687                   if (isComposite(single)) {\n 688                       // Single Composite defined, use that\n 689                       return (CT) single;\n 690                   }\n 691               } else if (!supportsComposite()) {\n 692                   // No composite support, just return the first one\n 693                   if (loaded.size() == 1) {\n 694                       return (CT) loaded.get(0);\n 695                   } else if (loaded.size() > 1) {\n 696                       throw new TikaConfigException(\n 697                               \"Composite not supported for \" + getParentTagName() +\n 698                                       \". Must specify only one child!\");\n 699                   } else {\n 700                       //throw exception if empty?\n 701                   }\n 702               }\n 703               // Wrap the defined parsers/detectors up in a Composite\n 704               return createComposite(loaded, mimeTypes, loader);\n 705           }\n 707           T loadOne(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 708                   throws TikaException, IOException {\n 709               String name = element.getAttribute(\"class\");\n 710               if (name == null) {\n 711                   throw new TikaConfigException(\"class attribute must not be null: \" + element);\n 712               }\n 713               String initProbHandler = element.getAttribute(\"initializableProblemHandler\");\n 714               InitializableProblemHandler initializableProblemHandler;\n 715               if (initProbHandler == null || initProbHandler.length() == 0) {\n 716                   initializableProblemHandler = loader.getInitializableProblemHandler();\n 717               } else {\n 718                   initializableProblemHandler = getInitializableProblemHandler(initProbHandler);\n 719               }\n 720   \n 721               T loaded = null;\n 722   \n 723               try {\n 724                   Class<? extends T> loadedClass = loader.getServiceClass(getLoaderClass(), name);\n 725   \n 726                   // Do pre-load checks and short-circuits\n 727                   //TODO : allow duplicate instances with different configurations\n 728                   loaded = preLoadOne(loadedClass, name, mimeTypes);\n 729                   if (loaded != null) {\n 730                       return loaded;\n 731                   }\n 732   \n 733                   // Get any parameters / settings for the parser\n 734                   Map<String, Param> params = null;\n 735                   try {\n 736                       params = getParams(element);\n 737                   } catch (Exception e) {\n 738                       throw new TikaConfigException(e.getMessage(), e);\n 739                   }\n 740   \n 741                   // Is this a composite or decorated class? If so, support recursion\n 742                   if (isComposite(loadedClass)) {\n 743                       // Get the child objects for it\n 744                       List<T> children = new ArrayList<>();\n 745                       NodeList childNodes = element.getElementsByTagName(getLoaderTagName());\n 746                       if (childNodes.getLength() > 0) {\n 747                           for (int i = 0; i < childNodes.getLength(); i++) {\n 748                               T loadedChild =\n 749                                       loadOne((Element) childNodes.item(i), mimeTypes, loader);\n 750                               if (loadedChild != null) {\n 751                                   children.add(loadedChild);\n 752                               }\n 753                           }\n 754                       }\n 755   \n 756                       // Get the list of children to exclude\n 757                       Set<Class<? extends T>> excludeChildren = new HashSet<>();\n 758                       NodeList excludeChildNodes =\n 759                               element.getElementsByTagName(getLoaderTagName() + \"-exclude\");\n 760                       if (excludeChildNodes.getLength() > 0) {\n 761                           for (int i = 0; i < excludeChildNodes.getLength(); i++) {\n 762                               Element excl = (Element) excludeChildNodes.item(i);\n 763                               String exclName = excl.getAttribute(\"class\");\n 764                               try {\n 765                                   excludeChildren\n 766                                           .add(loader.getServiceClass(getLoaderClass(), exclName));\n 767                               } catch (ClassNotFoundException e) {\n 768                                   //TIKA-3268 -- This should stop the world.\n 769                                   throw new TikaConfigException(\n 770                                           \"Class not found in -exclude list: \" + exclName);\n 771                               }\n 772                           }\n 773                       }\n 774   \n 775                       // Create the Composite\n 776                       loaded = createComposite(loadedClass, children, excludeChildren, params,\n 777                               mimeTypes, loader);\n 778   \n 779                       // Default constructor fallback\n 780                       if (loaded == null) {\n 781                           loaded = newInstance(loadedClass);\n 782                       }\n 783                   } else {\n 784                       // Regular class, create as-is\n 785                       loaded = newInstance(loadedClass);\n 786                       // TODO Support arguments, needed for Translators etc\n 787                       // See the thread \"Configuring parsers and translators\" for details\n 788                   }\n 789   \n 790                   //Assigning the params to bean fields/setters\n 791                   AnnotationUtils.assignFieldParams(loaded, params);\n 792                   if (loaded instanceof Initializable) {\n 793                       ((Initializable) loaded).initialize(params);\n 794                       ((Initializable) loaded).checkInitialization(initializableProblemHandler);\n 795                   }\n 796                   // Have any decoration performed, eg explicit mimetypes\n 797                   loaded = decorate(loaded, element);\n 798                   // All done with setup\n 799                   return loaded;\n 800               } catch (ClassNotFoundException e) {\n 801                   if (loader.getLoadErrorHandler() == LoadErrorHandler.THROW) {\n 802                       // Use a different exception signature here\n 803                       throw new TikaConfigException(\n 804                               \"Unable to find a \" + getLoaderTagName() + \" class: \" + name, e);\n 805                   }\n 806                   // Report the problem\n 807                   loader.getLoadErrorHandler().handleLoadError(name, e);\n 808                   return null;\n 809               } catch (IllegalAccessException e) {\n 810                   throw new TikaException(\n 811                           \"Unable to access a \" + getLoaderTagName() + \" class: \" + name, e);\n 812               } catch (InvocationTargetException e) {\n 813                   throw new TikaException(\n 814                           \"Unable to create a \" + getLoaderTagName() + \" class: \" + name, e);\n 815               } catch (InstantiationException e) {\n 816                   throw new TikaException(\n 817                           \"Unable to instantiate a \" + getLoaderTagName() + \" class: \" + name, e);\n 818               } catch (NoSuchMethodException e) {\n 819                   throw new TikaException(\n 820                           \"Unable to find the right constructor for \" + getLoaderTagName() +\n 821                                   \" class: \" + name, e);\n 822               }\n 823           }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java:\n563       @Override\n564       public void initialize(Map<String, Param> params) throws TikaConfigException {\n565           hasTesseract = hasTesseract();\n566           if (isEnableImagePreprocessing()) {\n567               hasImageMagick = hasImageMagick();\n568           } else {\n569               hasImageMagick = false;\n570           }\n571           if (preloadLangs) {\n572               preloadLangs();\n573               if (!StringUtils.isBlank(defaultConfig.getLanguage())) {\n574                   validateLangString(defaultConfig.getLanguage());\n575               }\n576           }\n577           imagePreprocessor = new ImagePreprocessor(getImageMagickPath() + getImageMagickProg());\n578       }\n886       private void preloadLangs() {\n887           String[] args = new String[]{getTesseractPath() + getTesseractProg(), \"--list-langs\"};\n888   \n889           ProcessBuilder pb = new ProcessBuilder(args);\n890   \n891           setEnv(pb);\n892   \n893           Process process = null;\n894           try {\n895               process = pb.start();\n896               getLangs(process, defaultConfig.getTimeoutSeconds());\n897           } catch (TikaException | IOException e) {\n898               LOG.warn(\"Problem preloading langs\", e);\n899           } finally {\n900               if (process != null) {\n901                   process.destroyForcibly();\n902               }\n903           }\n904       }\n",
            "cost": 0.12106,
            "harness_id": "TikaOne",
            "sanitizer": "OS Command Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java:895:23",
            "status": "corpus",
            "valid_path": "NO",
            "id": 13
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "OS Command Injection",
            "sink": "src/tika/tika-batch/src/main/java/org/apache/tika/batch/BatchProcessDriverCLI.java:250:19",
            "status": "error",
            "id": 14
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "OS Command Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/pot/PooledTimeSeriesParser.java:170:42",
            "status": "error",
            "id": 15
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n1040           public void process(InputStream input, OutputStream output, Metadata metadata) throws Exception {\n1041               Parser p = parser;\n1042               if (fork) {\n1043                   p = new ForkParser(TikaCLI.class.getClassLoader(), p);\n1044               }\n1045               ContentHandler handler = getContentHandler(output, metadata);\n1046               try {\n1047                   p.parse(input, handler, metadata, context);\n1048                   // fix for TIKA-596: if a parser doesn't generate\n1049                   // XHTML output, the lack of an output document prevents\n1050                   // metadata from being output: this fixes that\n1051                   if (handler instanceof NoDocumentMetHandler) {\n1052                       NoDocumentMetHandler metHandler = (NoDocumentMetHandler) handler;\n1053                       if (!metHandler.metOutput()) {\n1054                           metHandler.endDocument();\n1055                       }\n1056                   }\n1057               } finally {\n1058                   if (fork) {\n1059                       ((ForkParser) p).close();\n1060                   }\n1061               }\n1062           }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/NetworkParser.java:\n 66       public void parse(InputStream stream, ContentHandler handler, Metadata metadata,\n 67                         ParseContext context) throws IOException, SAXException, TikaException {\n 68           TemporaryResources tmp = new TemporaryResources();\n 69           try {\n 70               TikaInputStream tis = TikaInputStream.get(stream, tmp, metadata);\n 71               parse(tis, handler, metadata, context);\n 72           } finally {\n 73               tmp.dispose();\n 74           }\n 75       }\n 77       private void parse(TikaInputStream stream, ContentHandler handler, Metadata metadata,\n 78                          ParseContext context) throws IOException, SAXException, TikaException {\n 79           if (\"telnet\".equals(uri.getScheme())) {\n 80               try (Socket socket = new Socket(uri.getHost(), uri.getPort())) {\n 81                   new ParsingTask(stream, new FilterOutputStream(socket.getOutputStream()) {\n 82                       @Override\n 83                       public void close() throws IOException {\n 84                           socket.shutdownOutput();\n 85                       }\n 86                   }).parse(socket.getInputStream(), handler, metadata, context);\n 87               }\n 88           } else {\n 89               URL url = uri.toURL();\n 90               URLConnection connection = url.openConnection();\n 91               connection.setDoOutput(true);\n 92               connection.connect();\n 93               try (InputStream input = connection.getInputStream()) {\n 94                   new ParsingTask(stream, connection.getOutputStream())\n 95                           .parse(CloseShieldInputStream.wrap(input), handler, metadata, context);\n 96               }\n 97           }\n 98   \n 99       }\n",
            "cost": 0.083865,
            "harness_id": "TikaOne",
            "sanitizer": "Server Side Request Forgery (SSRF)",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/parser/NetworkParser.java:80:45",
            "status": "corpus",
            "valid_path": "NO",
            "id": 16
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n1040           public void process(InputStream input, OutputStream output, Metadata metadata) throws Exception {\n1041               Parser p = parser;\n1042               if (fork) {\n1043                   p = new ForkParser(TikaCLI.class.getClassLoader(), p);\n1044               }\n1045               ContentHandler handler = getContentHandler(output, metadata);\n1046               try {\n1047                   p.parse(input, handler, metadata, context);\n1048                   // fix for TIKA-596: if a parser doesn't generate\n1049                   // XHTML output, the lack of an output document prevents\n1050                   // metadata from being output: this fixes that\n1051                   if (handler instanceof NoDocumentMetHandler) {\n1052                       NoDocumentMetHandler metHandler = (NoDocumentMetHandler) handler;\n1053                       if (!metHandler.metOutput()) {\n1054                           metHandler.endDocument();\n1055                       }\n1056                   }\n1057               } finally {\n1058                   if (fork) {\n1059                       ((ForkParser) p).close();\n1060                   }\n1061               }\n1062           }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/NetworkParser.java:\n 66       public void parse(InputStream stream, ContentHandler handler, Metadata metadata,\n 67                         ParseContext context) throws IOException, SAXException, TikaException {\n 68           TemporaryResources tmp = new TemporaryResources();\n 69           try {\n 70               TikaInputStream tis = TikaInputStream.get(stream, tmp, metadata);\n 71               parse(tis, handler, metadata, context);\n 72           } finally {\n 73               tmp.dispose();\n 74           }\n 75       }\n 77       private void parse(TikaInputStream stream, ContentHandler handler, Metadata metadata,\n 78                          ParseContext context) throws IOException, SAXException, TikaException {\n 79           if (\"telnet\".equals(uri.getScheme())) {\n 80               try (Socket socket = new Socket(uri.getHost(), uri.getPort())) {\n 81                   new ParsingTask(stream, new FilterOutputStream(socket.getOutputStream()) {\n 82                       @Override\n 83                       public void close() throws IOException {\n 84                           socket.shutdownOutput();\n 85                       }\n 86                   }).parse(socket.getInputStream(), handler, metadata, context);\n 87               }\n 88           } else {\n 89               URL url = uri.toURL();\n 90               URLConnection connection = url.openConnection();\n 91               connection.setDoOutput(true);\n 92               connection.connect();\n 93               try (InputStream input = connection.getInputStream()) {\n 94                   new ParsingTask(stream, connection.getOutputStream())\n 95                           .parse(CloseShieldInputStream.wrap(input), handler, metadata, context);\n 96               }\n 97           }\n 98   \n 99       }\n",
            "cost": 0.077265,
            "harness_id": "TikaOne",
            "sanitizer": "Server Side Request Forgery (SSRF)",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/parser/NetworkParser.java:93:38",
            "status": "corpus",
            "valid_path": "NO",
            "id": 17
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Server Side Request Forgery (SSRF)",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/recognition/tf/TensorflowRESTRecogniser.java:149:52",
            "status": "error",
            "id": 18
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n 667           @SuppressWarnings(\"unchecked\")\n 668           CT loadOverall(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 669                   throws TikaException, IOException {\n 670               List<T> loaded = new ArrayList<>();\n 671   \n 672               // Find the children of the parent tag, if any\n 673               for (Element le : getTopLevelElementChildren(element, getParentTagName(),\n 674                       getLoaderTagName())) {\n 675                   T loadedChild = loadOne(le, mimeTypes, loader);\n 676                   if (loadedChild != null) {\n 677                       loaded.add(loadedChild);\n 678                   }\n 679               }\n 680   \n 681               // Build the classes, and wrap as needed\n 682               if (loaded.isEmpty()) {\n 683                   // Nothing defined, create a Default\n 684                   return createDefault(mimeTypes, loader);\n 685               } else if (loaded.size() == 1) {\n 686                   T single = loaded.get(0);\n 687                   if (isComposite(single)) {\n 688                       // Single Composite defined, use that\n 689                       return (CT) single;\n 690                   }\n 691               } else if (!supportsComposite()) {\n 692                   // No composite support, just return the first one\n 693                   if (loaded.size() == 1) {\n 694                       return (CT) loaded.get(0);\n 695                   } else if (loaded.size() > 1) {\n 696                       throw new TikaConfigException(\n 697                               \"Composite not supported for \" + getParentTagName() +\n 698                                       \". Must specify only one child!\");\n 699                   } else {\n 700                       //throw exception if empty?\n 701                   }\n 702               }\n 703               // Wrap the defined parsers/detectors up in a Composite\n 704               return createComposite(loaded, mimeTypes, loader);\n 705           }\n 707           T loadOne(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 708                   throws TikaException, IOException {\n 709               String name = element.getAttribute(\"class\");\n 710               if (name == null) {\n 711                   throw new TikaConfigException(\"class attribute must not be null: \" + element);\n 712               }\n 713               String initProbHandler = element.getAttribute(\"initializableProblemHandler\");\n 714               InitializableProblemHandler initializableProblemHandler;\n 715               if (initProbHandler == null || initProbHandler.length() == 0) {\n 716                   initializableProblemHandler = loader.getInitializableProblemHandler();\n 717               } else {\n 718                   initializableProblemHandler = getInitializableProblemHandler(initProbHandler);\n 719               }\n 720   \n 721               T loaded = null;\n 722   \n 723               try {\n 724                   Class<? extends T> loadedClass = loader.getServiceClass(getLoaderClass(), name);\n 725   \n 726                   // Do pre-load checks and short-circuits\n 727                   //TODO : allow duplicate instances with different configurations\n 728                   loaded = preLoadOne(loadedClass, name, mimeTypes);\n 729                   if (loaded != null) {\n 730                       return loaded;\n 731                   }\n 732   \n 733                   // Get any parameters / settings for the parser\n 734                   Map<String, Param> params = null;\n 735                   try {\n 736                       params = getParams(element);\n 737                   } catch (Exception e) {\n 738                       throw new TikaConfigException(e.getMessage(), e);\n 739                   }\n 740   \n 741                   // Is this a composite or decorated class? If so, support recursion\n 742                   if (isComposite(loadedClass)) {\n 743                       // Get the child objects for it\n 744                       List<T> children = new ArrayList<>();\n 745                       NodeList childNodes = element.getElementsByTagName(getLoaderTagName());\n 746                       if (childNodes.getLength() > 0) {\n 747                           for (int i = 0; i < childNodes.getLength(); i++) {\n 748                               T loadedChild =\n 749                                       loadOne((Element) childNodes.item(i), mimeTypes, loader);\n 750                               if (loadedChild != null) {\n 751                                   children.add(loadedChild);\n 752                               }\n 753                           }\n 754                       }\n 755   \n 756                       // Get the list of children to exclude\n 757                       Set<Class<? extends T>> excludeChildren = new HashSet<>();\n 758                       NodeList excludeChildNodes =\n 759                               element.getElementsByTagName(getLoaderTagName() + \"-exclude\");\n 760                       if (excludeChildNodes.getLength() > 0) {\n 761                           for (int i = 0; i < excludeChildNodes.getLength(); i++) {\n 762                               Element excl = (Element) excludeChildNodes.item(i);\n 763                               String exclName = excl.getAttribute(\"class\");\n 764                               try {\n 765                                   excludeChildren\n 766                                           .add(loader.getServiceClass(getLoaderClass(), exclName));\n 767                               } catch (ClassNotFoundException e) {\n 768                                   //TIKA-3268 -- This should stop the world.\n 769                                   throw new TikaConfigException(\n 770                                           \"Class not found in -exclude list: \" + exclName);\n 771                               }\n 772                           }\n 773                       }\n 774   \n 775                       // Create the Composite\n 776                       loaded = createComposite(loadedClass, children, excludeChildren, params,\n 777                               mimeTypes, loader);\n 778   \n 779                       // Default constructor fallback\n 780                       if (loaded == null) {\n 781                           loaded = newInstance(loadedClass);\n 782                       }\n 783                   } else {\n 784                       // Regular class, create as-is\n 785                       loaded = newInstance(loadedClass);\n 786                       // TODO Support arguments, needed for Translators etc\n 787                       // See the thread \"Configuring parsers and translators\" for details\n 788                   }\n 789   \n 790                   //Assigning the params to bean fields/setters\n 791                   AnnotationUtils.assignFieldParams(loaded, params);\n 792                   if (loaded instanceof Initializable) {\n 793                       ((Initializable) loaded).initialize(params);\n 794                       ((Initializable) loaded).checkInitialization(initializableProblemHandler);\n 795                   }\n 796                   // Have any decoration performed, eg explicit mimetypes\n 797                   loaded = decorate(loaded, element);\n 798                   // All done with setup\n 799                   return loaded;\n 800               } catch (ClassNotFoundException e) {\n 801                   if (loader.getLoadErrorHandler() == LoadErrorHandler.THROW) {\n 802                       // Use a different exception signature here\n 803                       throw new TikaConfigException(\n 804                               \"Unable to find a \" + getLoaderTagName() + \" class: \" + name, e);\n 805                   }\n 806                   // Report the problem\n 807                   loader.getLoadErrorHandler().handleLoadError(name, e);\n 808                   return null;\n 809               } catch (IllegalAccessException e) {\n 810                   throw new TikaException(\n 811                           \"Unable to access a \" + getLoaderTagName() + \" class: \" + name, e);\n 812               } catch (InvocationTargetException e) {\n 813                   throw new TikaException(\n 814                           \"Unable to create a \" + getLoaderTagName() + \" class: \" + name, e);\n 815               } catch (InstantiationException e) {\n 816                   throw new TikaException(\n 817                           \"Unable to instantiate a \" + getLoaderTagName() + \" class: \" + name, e);\n 818               } catch (NoSuchMethodException e) {\n 819                   throw new TikaException(\n 820                           \"Unable to find the right constructor for \" + getLoaderTagName() +\n 821                                   \" class: \" + name, e);\n 822               }\n 823           }\n\nsrc/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/recognition/tf/TensorflowRESTRecogniser.java:\n108       @Override\n109       public void initialize(Map<String, Param> params) throws TikaConfigException {\n110           healthUri = URI.create(apiBaseUri + \"/ping\");\n111           apiUri = URI.create(apiBaseUri + String.format(Locale.getDefault(),\n112                   \"/classify/image?topn=%1$d&min_confidence=%2$f\", topN, minConfidence));\n113   \n114           try (CloseableHttpClient client = HttpClientBuilder.create().build()) {\n115               HttpResponse response = client.execute(new HttpGet(healthUri));\n116               available = response.getStatusLine().getStatusCode() == 200;\n117   \n118               LOG.info(\"Available = {}, API Status = {}\", available, response.getStatusLine());\n119               LOG.info(\"topN = {}, minConfidence = {}\", topN, minConfidence);\n120           } catch (Exception e) {\n121               available = false;\n122               throw new TikaConfigException(e.getMessage(), e);\n123           }\n124       }\n",
            "cost": 0.11464,
            "harness_id": "TikaOne",
            "sanitizer": "Server Side Request Forgery (SSRF)",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/recognition/tf/TensorflowRESTRecogniser.java:115:52",
            "status": "corpus",
            "valid_path": "NO",
            "id": 19
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Server Side Request Forgery (SSRF)",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/captioning/tf/TensorflowRESTCaptioner.java:148:52",
            "status": "error",
            "id": 20
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n 487       private void dumpConfig(TikaConfigSerializer.Mode mode) throws Exception {\n 488           configure();\n 489           TikaConfig localConfig = (config == null) ? TikaConfig.getDefaultConfig() : config;\n 490   \n 491           TikaConfigSerializer.serialize(localConfig, mode, new OutputStreamWriter(System.out, UTF_8), UTF_8);\n 492       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfigSerializer.java:\n 95       public static void serialize(TikaConfig config, Mode mode, Writer writer, Charset charset)\n 96               throws Exception {\n 97           DocumentBuilder docBuilder = XMLReaderUtils.getDocumentBuilder();\n 98   \n 99           // root elements\n100           Document doc = docBuilder.newDocument();\n101           Element rootElement = doc.createElement(\"properties\");\n102   \n103           doc.appendChild(rootElement);\n104           addMimeComment(mode, rootElement, doc);\n105           addServiceLoader(mode, rootElement, doc, config);\n106           addExecutorService(mode, rootElement, doc, config);\n107           addEncodingDetectors(mode, rootElement, doc, config);\n108           addTranslator(mode, rootElement, doc, config);\n109           addDetectors(mode, rootElement, doc, config);\n110           addParsers(mode, rootElement, doc, config);\n111           // TODO Service Loader section\n112   \n113           // now write\n114           Transformer transformer = XMLReaderUtils.getTransformer();\n115           transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n116           transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"2\");\n117           transformer.setOutputProperty(OutputKeys.ENCODING, charset.name());\n118           DOMSource source = new DOMSource(doc);\n119           StreamResult result = new StreamResult(writer);\n120   \n121           transformer.transform(source, result);\n122       }\n151       private static void addTranslator(Mode mode, Element rootElement, Document doc,\n152                                         TikaConfig config) {\n153           // Unlike the other entries, TikaConfig only wants one of\n154           //  these, and no outer <translators> list\n155           Translator translator = config.getTranslator();\n156           if (mode == Mode.MINIMAL && translator instanceof DefaultTranslator) {\n157               Node mimeComment = doc.createComment(\"for example: <translator \" +\n158                       \"class=\\\"org.apache.tika.language.translate.GoogleTranslator\\\"/>\");\n159               rootElement.appendChild(mimeComment);\n160           } else {\n161               if (translator instanceof DefaultTranslator &&\n162                       (mode == Mode.STATIC || mode == Mode.STATIC_FULL)) {\n163                   translator = ((DefaultTranslator) translator).getTranslator();\n164               }\n165               if (translator != null) {\n166                   Element translatorElement = doc.createElement(\"translator\");\n167                   translatorElement.setAttribute(\"class\", translator.getClass().getCanonicalName());\n168                   rootElement.appendChild(translatorElement);\n169               } else {\n170                   rootElement.appendChild(doc.createComment(\"No translators available\"));\n171               }\n172           }\n173       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/language/translate/DefaultTranslator.java:\n 61       private static Translator getFirstAvailable(ServiceLoader loader) {\n 62           for (Translator t : getDefaultTranslators(loader)) {\n 63               if (t.isAvailable()) {\n 64                   return t;\n 65               }\n 66           }\n 67           return null;\n 68       }\n103       public Translator getTranslator() {\n104           return getFirstAvailable(loader);\n105       }\n\nsrc/tika/tika-translate/src/main/java/org/apache/tika/language/translate/impl/JoshuaNetworkTranslator.java:\n204       @Override\n205       public boolean isAvailable() {\n206           if (this.networkServer != null) {\n207               URL url = null;\n208               try {\n209                   url = new URL(networkURI);\n210               } catch (MalformedURLException mue) {\n211                   LOG.error(\"Error reading {} property from {}. {}\", JOSHUA_SERVER, PROPERTIES_FILE,\n212                           mue);\n213               }\n214               HttpURLConnection connection = null;\n215               try {\n216                   if (url != null) {\n217                       connection = (HttpURLConnection) url.openConnection();\n218                       connection.setRequestProperty(\"Connection\", \"close\");\n219                       connection.setConnectTimeout(2000); // Timeout 2 seconds\n220                       connection.connect();\n221                       return tryResponseCode(connection);\n222                   }\n223               } catch (IOException ioe) {\n224                   LOG.error(\"Error whilst checking availability of {}. {}\", JOSHUA_SERVER, ioe);\n225               }\n226           }\n227           return false;\n228       }\n",
            "cost": 0.08895,
            "harness_id": "TikaOne",
            "sanitizer": "Server Side Request Forgery (SSRF)",
            "sink": "src/tika/tika-translate/src/main/java/org/apache/tika/language/translate/impl/JoshuaNetworkTranslator.java:209:31",
            "status": "corpus",
            "valid_path": "NO",
            "id": 21
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Server Side Request Forgery (SSRF)",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/geo/topic/gazetteer/GeoGazetteerClient.java:75:52",
            "status": "error",
            "id": 22
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n 667           @SuppressWarnings(\"unchecked\")\n 668           CT loadOverall(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 669                   throws TikaException, IOException {\n 670               List<T> loaded = new ArrayList<>();\n 671   \n 672               // Find the children of the parent tag, if any\n 673               for (Element le : getTopLevelElementChildren(element, getParentTagName(),\n 674                       getLoaderTagName())) {\n 675                   T loadedChild = loadOne(le, mimeTypes, loader);\n 676                   if (loadedChild != null) {\n 677                       loaded.add(loadedChild);\n 678                   }\n 679               }\n 680   \n 681               // Build the classes, and wrap as needed\n 682               if (loaded.isEmpty()) {\n 683                   // Nothing defined, create a Default\n 684                   return createDefault(mimeTypes, loader);\n 685               } else if (loaded.size() == 1) {\n 686                   T single = loaded.get(0);\n 687                   if (isComposite(single)) {\n 688                       // Single Composite defined, use that\n 689                       return (CT) single;\n 690                   }\n 691               } else if (!supportsComposite()) {\n 692                   // No composite support, just return the first one\n 693                   if (loaded.size() == 1) {\n 694                       return (CT) loaded.get(0);\n 695                   } else if (loaded.size() > 1) {\n 696                       throw new TikaConfigException(\n 697                               \"Composite not supported for \" + getParentTagName() +\n 698                                       \". Must specify only one child!\");\n 699                   } else {\n 700                       //throw exception if empty?\n 701                   }\n 702               }\n 703               // Wrap the defined parsers/detectors up in a Composite\n 704               return createComposite(loaded, mimeTypes, loader);\n 705           }\n 707           T loadOne(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 708                   throws TikaException, IOException {\n 709               String name = element.getAttribute(\"class\");\n 710               if (name == null) {\n 711                   throw new TikaConfigException(\"class attribute must not be null: \" + element);\n 712               }\n 713               String initProbHandler = element.getAttribute(\"initializableProblemHandler\");\n 714               InitializableProblemHandler initializableProblemHandler;\n 715               if (initProbHandler == null || initProbHandler.length() == 0) {\n 716                   initializableProblemHandler = loader.getInitializableProblemHandler();\n 717               } else {\n 718                   initializableProblemHandler = getInitializableProblemHandler(initProbHandler);\n 719               }\n 720   \n 721               T loaded = null;\n 722   \n 723               try {\n 724                   Class<? extends T> loadedClass = loader.getServiceClass(getLoaderClass(), name);\n 725   \n 726                   // Do pre-load checks and short-circuits\n 727                   //TODO : allow duplicate instances with different configurations\n 728                   loaded = preLoadOne(loadedClass, name, mimeTypes);\n 729                   if (loaded != null) {\n 730                       return loaded;\n 731                   }\n 732   \n 733                   // Get any parameters / settings for the parser\n 734                   Map<String, Param> params = null;\n 735                   try {\n 736                       params = getParams(element);\n 737                   } catch (Exception e) {\n 738                       throw new TikaConfigException(e.getMessage(), e);\n 739                   }\n 740   \n 741                   // Is this a composite or decorated class? If so, support recursion\n 742                   if (isComposite(loadedClass)) {\n 743                       // Get the child objects for it\n 744                       List<T> children = new ArrayList<>();\n 745                       NodeList childNodes = element.getElementsByTagName(getLoaderTagName());\n 746                       if (childNodes.getLength() > 0) {\n 747                           for (int i = 0; i < childNodes.getLength(); i++) {\n 748                               T loadedChild =\n 749                                       loadOne((Element) childNodes.item(i), mimeTypes, loader);\n 750                               if (loadedChild != null) {\n 751                                   children.add(loadedChild);\n 752                               }\n 753                           }\n 754                       }\n 755   \n 756                       // Get the list of children to exclude\n 757                       Set<Class<? extends T>> excludeChildren = new HashSet<>();\n 758                       NodeList excludeChildNodes =\n 759                               element.getElementsByTagName(getLoaderTagName() + \"-exclude\");\n 760                       if (excludeChildNodes.getLength() > 0) {\n 761                           for (int i = 0; i < excludeChildNodes.getLength(); i++) {\n 762                               Element excl = (Element) excludeChildNodes.item(i);\n 763                               String exclName = excl.getAttribute(\"class\");\n 764                               try {\n 765                                   excludeChildren\n 766                                           .add(loader.getServiceClass(getLoaderClass(), exclName));\n 767                               } catch (ClassNotFoundException e) {\n 768                                   //TIKA-3268 -- This should stop the world.\n 769                                   throw new TikaConfigException(\n 770                                           \"Class not found in -exclude list: \" + exclName);\n 771                               }\n 772                           }\n 773                       }\n 774   \n 775                       // Create the Composite\n 776                       loaded = createComposite(loadedClass, children, excludeChildren, params,\n 777                               mimeTypes, loader);\n 778   \n 779                       // Default constructor fallback\n 780                       if (loaded == null) {\n 781                           loaded = newInstance(loadedClass);\n 782                       }\n 783                   } else {\n 784                       // Regular class, create as-is\n 785                       loaded = newInstance(loadedClass);\n 786                       // TODO Support arguments, needed for Translators etc\n 787                       // See the thread \"Configuring parsers and translators\" for details\n 788                   }\n 789   \n 790                   //Assigning the params to bean fields/setters\n 791                   AnnotationUtils.assignFieldParams(loaded, params);\n 792                   if (loaded instanceof Initializable) {\n 793                       ((Initializable) loaded).initialize(params);\n 794                       ((Initializable) loaded).checkInitialization(initializableProblemHandler);\n 795                   }\n 796                   // Have any decoration performed, eg explicit mimetypes\n 797                   loaded = decorate(loaded, element);\n 798                   // All done with setup\n 799                   return loaded;\n 800               } catch (ClassNotFoundException e) {\n 801                   if (loader.getLoadErrorHandler() == LoadErrorHandler.THROW) {\n 802                       // Use a different exception signature here\n 803                       throw new TikaConfigException(\n 804                               \"Unable to find a \" + getLoaderTagName() + \" class: \" + name, e);\n 805                   }\n 806                   // Report the problem\n 807                   loader.getLoadErrorHandler().handleLoadError(name, e);\n 808                   return null;\n 809               } catch (IllegalAccessException e) {\n 810                   throw new TikaException(\n 811                           \"Unable to access a \" + getLoaderTagName() + \" class: \" + name, e);\n 812               } catch (InvocationTargetException e) {\n 813                   throw new TikaException(\n 814                           \"Unable to create a \" + getLoaderTagName() + \" class: \" + name, e);\n 815               } catch (InstantiationException e) {\n 816                   throw new TikaException(\n 817                           \"Unable to instantiate a \" + getLoaderTagName() + \" class: \" + name, e);\n 818               } catch (NoSuchMethodException e) {\n 819                   throw new TikaException(\n 820                           \"Unable to find the right constructor for \" + getLoaderTagName() +\n 821                                   \" class: \" + name, e);\n 822               }\n 823           }\n\nsrc/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/captioning/tf/TensorflowRESTCaptioner.java:\n106       @Override\n107       public void initialize(Map<String, Param> params) throws TikaConfigException {\n108           healthUri = URI.create(apiBaseUri + \"/ping\");\n109           apiUri = URI.create(apiBaseUri + String.format(Locale.getDefault(),\n110                   \"/caption/image?beam_size=%1$d&max_caption_length=%2$d\", captions,\n111                   maxCaptionLength));\n112   \n113           try (CloseableHttpClient client = HttpClientBuilder.create().build()) {\n114               HttpResponse response = client.execute(new HttpGet(healthUri));\n115               available = response.getStatusLine().getStatusCode() == 200;\n116   \n117               LOG.info(\"Available = {}, API Status = {}\", available, response.getStatusLine());\n118               LOG.info(\"Captions = {}, MaxCaptionLength = {}\", captions, maxCaptionLength);\n119           } catch (Exception e) {\n120               available = false;\n121               throw new TikaConfigException(e.getMessage(), e);\n122           }\n123       }\n",
            "cost": 0.11752,
            "harness_id": "TikaOne",
            "sanitizer": "Server Side Request Forgery (SSRF)",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/captioning/tf/TensorflowRESTCaptioner.java:114:52",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 23
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n1040           public void process(InputStream input, OutputStream output, Metadata metadata) throws Exception {\n1041               Parser p = parser;\n1042               if (fork) {\n1043                   p = new ForkParser(TikaCLI.class.getClassLoader(), p);\n1044               }\n1045               ContentHandler handler = getContentHandler(output, metadata);\n1046               try {\n1047                   p.parse(input, handler, metadata, context);\n1048                   // fix for TIKA-596: if a parser doesn't generate\n1049                   // XHTML output, the lack of an output document prevents\n1050                   // metadata from being output: this fixes that\n1051                   if (handler instanceof NoDocumentMetHandler) {\n1052                       NoDocumentMetHandler metHandler = (NoDocumentMetHandler) handler;\n1053                       if (!metHandler.metOutput()) {\n1054                           metHandler.endDocument();\n1055                       }\n1056                   }\n1057               } finally {\n1058                   if (fork) {\n1059                       ((ForkParser) p).close();\n1060                   }\n1061               }\n1062           }\n\nsrc/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/geo/topic/GeoParser.java:\n 71       public void initialize(GeoParserConfig geoParserConfig) {\n 72           try {\n 73               if (this.modelUrl != null && this.modelUrl.toURI().equals(modelUrl.toURI())) {\n 74                   return;\n 75               }\n 76           } catch (URISyntaxException e1) {\n 77               throw new RuntimeException(e1.getMessage());\n 78           }\n 79   \n 80           this.modelUrl = geoParserConfig.getNerModelUrl();\n 81           gazetteerClient = new GeoGazetteerClient(geoParserConfig);\n 82   \n 83           // Check if the NER model is available, and if the\n 84           //  lucene-geo-gazetteer is available\n 85           this.available = modelUrl != null && gazetteerClient.checkAvail();\n 86   \n 87           if (this.available) {\n 88               try {\n 89                   TokenNameFinderModel model = new TokenNameFinderModel(modelUrl);\n 90                   this.nameFinder = new NameFinderME(model);\n 91               } catch (Exception e) {\n 92                   LOG.warn(\"Named Entity Extractor setup failed: {}\", e.getMessage(), e);\n 93                   this.available = false;\n 94               }\n 95           }\n 96           initialized = true;\n 97       }\n 99       @Override\n100       public void parse(InputStream stream, ContentHandler handler, Metadata metadata,\n101                         ParseContext context) throws IOException, SAXException, TikaException {\n102   \n103           /*----------------configure this parser by ParseContext Object---------------------*/\n104   \n105           GeoParserConfig geoParserConfig = context.get(GeoParserConfig.class, defaultConfig);\n106           initialize(geoParserConfig);\n107           if (!isAvailable(geoParserConfig)) {\n108               return;\n109           }\n110           NameEntityExtractor extractor = null;\n111   \n112           try {\n113               extractor = new NameEntityExtractor(nameFinder);\n114           } catch (Exception e) {\n115               LOG.warn(\"Named Entity Extractor setup failed: {}\", e.getMessage(), e);\n116               return;\n117           }\n118   \n119           /*----------------get locationNameEntities and best nameEntity for the\n120           input stream---------------------*/\n121           extractor.getAllNameEntitiesfromInput(stream);\n122           extractor.getBestNameEntity();\n123           ArrayList<String> locationNameEntities = extractor.locationNameEntities;\n124           String bestner = extractor.bestNameEntity;\n125   \n126           /*------------------------resolve geonames for each ner,\n127           store results in a hashmap---------------------*/\n128           Map<String, List<Location>> resolvedGeonames = searchGeoNames(locationNameEntities);\n129   \n130           /*----------------store locationNameEntities and their geonames in a\n131           geotag, each input has one geotag---------------------*/\n132           GeoTag geotag = new GeoTag();\n133           geotag.toGeoTag(resolvedGeonames, bestner);\n134   \n135           /* add resolved entities in metadata */\n136   \n137           metadata.add(\"Geographic_NAME\", geotag.location.getName());\n138           metadata.add(\"Geographic_LONGITUDE\", geotag.location.getLongitude());\n139           metadata.add(\"Geographic_LATITUDE\", geotag.location.getLatitude());\n140           for (int i = 0; i < geotag.alternatives.size(); ++i) {\n141               GeoTag alter = (GeoTag) geotag.alternatives.get(i);\n142               metadata.add(\"Optional_NAME\" + (i + 1), alter.location.getName());\n143               metadata.add(\"Optional_LONGITUDE\" + (i + 1), alter.location.getLongitude());\n144               metadata.add(\"Optional_LATITUDE\" + (i + 1), alter.location.getLatitude());\n145           }\n146       }\n\nsrc/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/geo/topic/gazetteer/GeoGazetteerClient.java:\n 96       public boolean checkAvail() {\n 97           try (CloseableHttpClient httpClient = HttpClientBuilder.create().build()) {\n 98               HttpGet httpGet = new HttpGet(url + PING);\n 99   \n100               HttpResponse resp = httpClient.execute(httpGet);\n101               if (resp.getStatusLine().getStatusCode() == 200) {\n102                   return true;\n103               }\n104   \n105           } catch (Exception e) {\n106               LOG.error(e.getMessage(), e);\n107           }\n108   \n109           return false;\n110       }\n",
            "cost": 0.088925,
            "harness_id": "TikaOne",
            "sanitizer": "Server Side Request Forgery (SSRF)",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/geo/topic/gazetteer/GeoGazetteerClient.java:100:52",
            "status": "corpus",
            "valid_path": "NO",
            "id": 24
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Server Side Request Forgery (SSRF)",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/io/TikaInputStream.java:590:60",
            "status": "error",
            "id": 25
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n 667           @SuppressWarnings(\"unchecked\")\n 668           CT loadOverall(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 669                   throws TikaException, IOException {\n 670               List<T> loaded = new ArrayList<>();\n 671   \n 672               // Find the children of the parent tag, if any\n 673               for (Element le : getTopLevelElementChildren(element, getParentTagName(),\n 674                       getLoaderTagName())) {\n 675                   T loadedChild = loadOne(le, mimeTypes, loader);\n 676                   if (loadedChild != null) {\n 677                       loaded.add(loadedChild);\n 678                   }\n 679               }\n 680   \n 681               // Build the classes, and wrap as needed\n 682               if (loaded.isEmpty()) {\n 683                   // Nothing defined, create a Default\n 684                   return createDefault(mimeTypes, loader);\n 685               } else if (loaded.size() == 1) {\n 686                   T single = loaded.get(0);\n 687                   if (isComposite(single)) {\n 688                       // Single Composite defined, use that\n 689                       return (CT) single;\n 690                   }\n 691               } else if (!supportsComposite()) {\n 692                   // No composite support, just return the first one\n 693                   if (loaded.size() == 1) {\n 694                       return (CT) loaded.get(0);\n 695                   } else if (loaded.size() > 1) {\n 696                       throw new TikaConfigException(\n 697                               \"Composite not supported for \" + getParentTagName() +\n 698                                       \". Must specify only one child!\");\n 699                   } else {\n 700                       //throw exception if empty?\n 701                   }\n 702               }\n 703               // Wrap the defined parsers/detectors up in a Composite\n 704               return createComposite(loaded, mimeTypes, loader);\n 705           }\n 707           T loadOne(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 708                   throws TikaException, IOException {\n 709               String name = element.getAttribute(\"class\");\n 710               if (name == null) {\n 711                   throw new TikaConfigException(\"class attribute must not be null: \" + element);\n 712               }\n 713               String initProbHandler = element.getAttribute(\"initializableProblemHandler\");\n 714               InitializableProblemHandler initializableProblemHandler;\n 715               if (initProbHandler == null || initProbHandler.length() == 0) {\n 716                   initializableProblemHandler = loader.getInitializableProblemHandler();\n 717               } else {\n 718                   initializableProblemHandler = getInitializableProblemHandler(initProbHandler);\n 719               }\n 720   \n 721               T loaded = null;\n 722   \n 723               try {\n 724                   Class<? extends T> loadedClass = loader.getServiceClass(getLoaderClass(), name);\n 725   \n 726                   // Do pre-load checks and short-circuits\n 727                   //TODO : allow duplicate instances with different configurations\n 728                   loaded = preLoadOne(loadedClass, name, mimeTypes);\n 729                   if (loaded != null) {\n 730                       return loaded;\n 731                   }\n 732   \n 733                   // Get any parameters / settings for the parser\n 734                   Map<String, Param> params = null;\n 735                   try {\n 736                       params = getParams(element);\n 737                   } catch (Exception e) {\n 738                       throw new TikaConfigException(e.getMessage(), e);\n 739                   }\n 740   \n 741                   // Is this a composite or decorated class? If so, support recursion\n 742                   if (isComposite(loadedClass)) {\n 743                       // Get the child objects for it\n 744                       List<T> children = new ArrayList<>();\n 745                       NodeList childNodes = element.getElementsByTagName(getLoaderTagName());\n 746                       if (childNodes.getLength() > 0) {\n 747                           for (int i = 0; i < childNodes.getLength(); i++) {\n 748                               T loadedChild =\n 749                                       loadOne((Element) childNodes.item(i), mimeTypes, loader);\n 750                               if (loadedChild != null) {\n 751                                   children.add(loadedChild);\n 752                               }\n 753                           }\n 754                       }\n 755   \n 756                       // Get the list of children to exclude\n 757                       Set<Class<? extends T>> excludeChildren = new HashSet<>();\n 758                       NodeList excludeChildNodes =\n 759                               element.getElementsByTagName(getLoaderTagName() + \"-exclude\");\n 760                       if (excludeChildNodes.getLength() > 0) {\n 761                           for (int i = 0; i < excludeChildNodes.getLength(); i++) {\n 762                               Element excl = (Element) excludeChildNodes.item(i);\n 763                               String exclName = excl.getAttribute(\"class\");\n 764                               try {\n 765                                   excludeChildren\n 766                                           .add(loader.getServiceClass(getLoaderClass(), exclName));\n 767                               } catch (ClassNotFoundException e) {\n 768                                   //TIKA-3268 -- This should stop the world.\n 769                                   throw new TikaConfigException(\n 770                                           \"Class not found in -exclude list: \" + exclName);\n 771                               }\n 772                           }\n 773                       }\n 774   \n 775                       // Create the Composite\n 776                       loaded = createComposite(loadedClass, children, excludeChildren, params,\n 777                               mimeTypes, loader);\n 778   \n 779                       // Default constructor fallback\n 780                       if (loaded == null) {\n 781                           loaded = newInstance(loadedClass);\n 782                       }\n 783                   } else {\n 784                       // Regular class, create as-is\n 785                       loaded = newInstance(loadedClass);\n 786                       // TODO Support arguments, needed for Translators etc\n 787                       // See the thread \"Configuring parsers and translators\" for details\n 788                   }\n 789   \n 790                   //Assigning the params to bean fields/setters\n 791                   AnnotationUtils.assignFieldParams(loaded, params);\n 792                   if (loaded instanceof Initializable) {\n 793                       ((Initializable) loaded).initialize(params);\n 794                       ((Initializable) loaded).checkInitialization(initializableProblemHandler);\n 795                   }\n 796                   // Have any decoration performed, eg explicit mimetypes\n 797                   loaded = decorate(loaded, element);\n 798                   // All done with setup\n 799                   return loaded;\n 800               } catch (ClassNotFoundException e) {\n 801                   if (loader.getLoadErrorHandler() == LoadErrorHandler.THROW) {\n 802                       // Use a different exception signature here\n 803                       throw new TikaConfigException(\n 804                               \"Unable to find a \" + getLoaderTagName() + \" class: \" + name, e);\n 805                   }\n 806                   // Report the problem\n 807                   loader.getLoadErrorHandler().handleLoadError(name, e);\n 808                   return null;\n 809               } catch (IllegalAccessException e) {\n 810                   throw new TikaException(\n 811                           \"Unable to access a \" + getLoaderTagName() + \" class: \" + name, e);\n 812               } catch (InvocationTargetException e) {\n 813                   throw new TikaException(\n 814                           \"Unable to create a \" + getLoaderTagName() + \" class: \" + name, e);\n 815               } catch (InstantiationException e) {\n 816                   throw new TikaException(\n 817                           \"Unable to instantiate a \" + getLoaderTagName() + \" class: \" + name, e);\n 818               } catch (NoSuchMethodException e) {\n 819                   throw new TikaException(\n 820                           \"Unable to find the right constructor for \" + getLoaderTagName() +\n 821                                   \" class: \" + name, e);\n 822               }\n 823           }\n\nsrc/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/recognition/tf/TensorflowRESTVideoRecogniser.java:\n76       @Override\n77       public void initialize(Map<String, Param> params) throws TikaConfigException {\n78           healthUri = URI.create(apiBaseUri + \"/ping\");\n79           apiUri = URI.create(apiBaseUri + String.format(Locale.getDefault(),\n80                   \"/classify/video?topn=%1$d&min_confidence=%2$f&mode=%3$s\", topN, minConfidence,\n81                   mode));\n82   \n83           try (CloseableHttpClient client = HttpClientBuilder.create().build()) {\n84               HttpResponse response = client.execute(new HttpGet(healthUri));\n85               available = response.getStatusLine().getStatusCode() == 200;\n86   \n87               LOG.info(\"Available = {}, API Status = {}\", available, response.getStatusLine());\n88               LOG.info(\"topN = {}, minConfidence = {}\", topN, minConfidence);\n89           } catch (Exception e) {\n90               available = false;\n91               throw new TikaConfigException(e.getMessage(), e);\n92           }\n93       }\n",
            "cost": 0.120415,
            "harness_id": "TikaOne",
            "sanitizer": "Server Side Request Forgery (SSRF)",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/recognition/tf/TensorflowRESTVideoRecogniser.java:84:52",
            "status": "corpus",
            "valid_path": "NO",
            "id": 26
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Server Side Request Forgery (SSRF)",
            "sink": "src/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:471:35",
            "status": "error",
            "id": 27
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n 667           @SuppressWarnings(\"unchecked\")\n 668           CT loadOverall(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 669                   throws TikaException, IOException {\n 670               List<T> loaded = new ArrayList<>();\n 671   \n 672               // Find the children of the parent tag, if any\n 673               for (Element le : getTopLevelElementChildren(element, getParentTagName(),\n 674                       getLoaderTagName())) {\n 675                   T loadedChild = loadOne(le, mimeTypes, loader);\n 676                   if (loadedChild != null) {\n 677                       loaded.add(loadedChild);\n 678                   }\n 679               }\n 680   \n 681               // Build the classes, and wrap as needed\n 682               if (loaded.isEmpty()) {\n 683                   // Nothing defined, create a Default\n 684                   return createDefault(mimeTypes, loader);\n 685               } else if (loaded.size() == 1) {\n 686                   T single = loaded.get(0);\n 687                   if (isComposite(single)) {\n 688                       // Single Composite defined, use that\n 689                       return (CT) single;\n 690                   }\n 691               } else if (!supportsComposite()) {\n 692                   // No composite support, just return the first one\n 693                   if (loaded.size() == 1) {\n 694                       return (CT) loaded.get(0);\n 695                   } else if (loaded.size() > 1) {\n 696                       throw new TikaConfigException(\n 697                               \"Composite not supported for \" + getParentTagName() +\n 698                                       \". Must specify only one child!\");\n 699                   } else {\n 700                       //throw exception if empty?\n 701                   }\n 702               }\n 703               // Wrap the defined parsers/detectors up in a Composite\n 704               return createComposite(loaded, mimeTypes, loader);\n 705           }\n 707           T loadOne(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 708                   throws TikaException, IOException {\n 709               String name = element.getAttribute(\"class\");\n 710               if (name == null) {\n 711                   throw new TikaConfigException(\"class attribute must not be null: \" + element);\n 712               }\n 713               String initProbHandler = element.getAttribute(\"initializableProblemHandler\");\n 714               InitializableProblemHandler initializableProblemHandler;\n 715               if (initProbHandler == null || initProbHandler.length() == 0) {\n 716                   initializableProblemHandler = loader.getInitializableProblemHandler();\n 717               } else {\n 718                   initializableProblemHandler = getInitializableProblemHandler(initProbHandler);\n 719               }\n 720   \n 721               T loaded = null;\n 722   \n 723               try {\n 724                   Class<? extends T> loadedClass = loader.getServiceClass(getLoaderClass(), name);\n 725   \n 726                   // Do pre-load checks and short-circuits\n 727                   //TODO : allow duplicate instances with different configurations\n 728                   loaded = preLoadOne(loadedClass, name, mimeTypes);\n 729                   if (loaded != null) {\n 730                       return loaded;\n 731                   }\n 732   \n 733                   // Get any parameters / settings for the parser\n 734                   Map<String, Param> params = null;\n 735                   try {\n 736                       params = getParams(element);\n 737                   } catch (Exception e) {\n 738                       throw new TikaConfigException(e.getMessage(), e);\n 739                   }\n 740   \n 741                   // Is this a composite or decorated class? If so, support recursion\n 742                   if (isComposite(loadedClass)) {\n 743                       // Get the child objects for it\n 744                       List<T> children = new ArrayList<>();\n 745                       NodeList childNodes = element.getElementsByTagName(getLoaderTagName());\n 746                       if (childNodes.getLength() > 0) {\n 747                           for (int i = 0; i < childNodes.getLength(); i++) {\n 748                               T loadedChild =\n 749                                       loadOne((Element) childNodes.item(i), mimeTypes, loader);\n 750                               if (loadedChild != null) {\n 751                                   children.add(loadedChild);\n 752                               }\n 753                           }\n 754                       }\n 755   \n 756                       // Get the list of children to exclude\n 757                       Set<Class<? extends T>> excludeChildren = new HashSet<>();\n 758                       NodeList excludeChildNodes =\n 759                               element.getElementsByTagName(getLoaderTagName() + \"-exclude\");\n 760                       if (excludeChildNodes.getLength() > 0) {\n 761                           for (int i = 0; i < excludeChildNodes.getLength(); i++) {\n 762                               Element excl = (Element) excludeChildNodes.item(i);\n 763                               String exclName = excl.getAttribute(\"class\");\n 764                               try {\n 765                                   excludeChildren\n 766                                           .add(loader.getServiceClass(getLoaderClass(), exclName));\n 767                               } catch (ClassNotFoundException e) {\n 768                                   //TIKA-3268 -- This should stop the world.\n 769                                   throw new TikaConfigException(\n 770                                           \"Class not found in -exclude list: \" + exclName);\n 771                               }\n 772                           }\n 773                       }\n 774   \n 775                       // Create the Composite\n 776                       loaded = createComposite(loadedClass, children, excludeChildren, params,\n 777                               mimeTypes, loader);\n 778   \n 779                       // Default constructor fallback\n 780                       if (loaded == null) {\n 781                           loaded = newInstance(loadedClass);\n 782                       }\n 783                   } else {\n 784                       // Regular class, create as-is\n 785                       loaded = newInstance(loadedClass);\n 786                       // TODO Support arguments, needed for Translators etc\n 787                       // See the thread \"Configuring parsers and translators\" for details\n 788                   }\n 789   \n 790                   //Assigning the params to bean fields/setters\n 791                   AnnotationUtils.assignFieldParams(loaded, params);\n 792                   if (loaded instanceof Initializable) {\n 793                       ((Initializable) loaded).initialize(params);\n 794                       ((Initializable) loaded).checkInitialization(initializableProblemHandler);\n 795                   }\n 796                   // Have any decoration performed, eg explicit mimetypes\n 797                   loaded = decorate(loaded, element);\n 798                   // All done with setup\n 799                   return loaded;\n 800               } catch (ClassNotFoundException e) {\n 801                   if (loader.getLoadErrorHandler() == LoadErrorHandler.THROW) {\n 802                       // Use a different exception signature here\n 803                       throw new TikaConfigException(\n 804                               \"Unable to find a \" + getLoaderTagName() + \" class: \" + name, e);\n 805                   }\n 806                   // Report the problem\n 807                   loader.getLoadErrorHandler().handleLoadError(name, e);\n 808                   return null;\n 809               } catch (IllegalAccessException e) {\n 810                   throw new TikaException(\n 811                           \"Unable to access a \" + getLoaderTagName() + \" class: \" + name, e);\n 812               } catch (InvocationTargetException e) {\n 813                   throw new TikaException(\n 814                           \"Unable to create a \" + getLoaderTagName() + \" class: \" + name, e);\n 815               } catch (InstantiationException e) {\n 816                   throw new TikaException(\n 817                           \"Unable to instantiate a \" + getLoaderTagName() + \" class: \" + name, e);\n 818               } catch (NoSuchMethodException e) {\n 819                   throw new TikaException(\n 820                           \"Unable to find the right constructor for \" + getLoaderTagName() +\n 821                                   \" class: \" + name, e);\n 822               }\n 823           }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java:\n210       @SuppressWarnings(\"unchecked\")\n211       public <T> Class<? extends T> getServiceClass(Class<T> iface, String name)\n212               throws ClassNotFoundException {\n213           if (loader == null) {\n214               throw new ClassNotFoundException(\"Service class \" + name + \" is not available\");\n215           }\n216           Class<?> klass = Class.forName(name, true, loader);\n217           if (klass.isInterface()) {\n218               throw new ClassNotFoundException(\"Service class \" + name + \" is an interface\");\n219           } else if (!iface.isAssignableFrom(klass)) {\n220               throw new ClassNotFoundException(\n221                       \"Service class \" + name + \" does not implement \" + iface.getName());\n222           } else {\n223               return (Class<? extends T>) klass;\n224           }\n225       }\n",
            "cost": 0.11722500000000001,
            "harness_id": "TikaOne",
            "sanitizer": "Remote Code Execution",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java:216:40",
            "status": "corpus",
            "valid_path": "NO",
            "id": 28
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n 487       private void dumpConfig(TikaConfigSerializer.Mode mode) throws Exception {\n 488           configure();\n 489           TikaConfig localConfig = (config == null) ? TikaConfig.getDefaultConfig() : config;\n 490   \n 491           TikaConfigSerializer.serialize(localConfig, mode, new OutputStreamWriter(System.out, UTF_8), UTF_8);\n 492       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfigSerializer.java:\n 95       public static void serialize(TikaConfig config, Mode mode, Writer writer, Charset charset)\n 96               throws Exception {\n 97           DocumentBuilder docBuilder = XMLReaderUtils.getDocumentBuilder();\n 98   \n 99           // root elements\n100           Document doc = docBuilder.newDocument();\n101           Element rootElement = doc.createElement(\"properties\");\n102   \n103           doc.appendChild(rootElement);\n104           addMimeComment(mode, rootElement, doc);\n105           addServiceLoader(mode, rootElement, doc, config);\n106           addExecutorService(mode, rootElement, doc, config);\n107           addEncodingDetectors(mode, rootElement, doc, config);\n108           addTranslator(mode, rootElement, doc, config);\n109           addDetectors(mode, rootElement, doc, config);\n110           addParsers(mode, rootElement, doc, config);\n111           // TODO Service Loader section\n112   \n113           // now write\n114           Transformer transformer = XMLReaderUtils.getTransformer();\n115           transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n116           transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"2\");\n117           transformer.setOutputProperty(OutputKeys.ENCODING, charset.name());\n118           DOMSource source = new DOMSource(doc);\n119           StreamResult result = new StreamResult(writer);\n120   \n121           transformer.transform(source, result);\n122       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java:\n 244       public static DocumentBuilderFactory getDocumentBuilderFactory() {\n 245           //borrowed from Apache POI\n 246           DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n 247           if (LOG.isDebugEnabled()) {\n 248               LOG.debug(\"DocumentBuilderFactory class {}\", factory.getClass());\n 249           }\n 250   \n 251           factory.setExpandEntityReferences(false);\n 252           factory.setNamespaceAware(true);\n 253           factory.setValidating(false);\n 254   \n 255           trySetSAXFeature(factory, XMLConstants.FEATURE_SECURE_PROCESSING, true);\n 256           trySetSAXFeature(factory, \"http://xml.org/sax/features/external-general-entities\", false);\n 257           trySetSAXFeature(factory, \"http://xml.org/sax/features/external-parameter-entities\", false);\n 258           trySetSAXFeature(factory, \"http://apache.org/xml/features/nonvalidating/load-external-dtd\",\n 259                   false);\n 260           trySetSAXFeature(factory, \"http://apache.org/xml/features/nonvalidating/load-dtd-grammar\",\n 261                   false);\n 262           trySetXercesSecurityManager(factory);\n 263           return factory;\n 264       }\n 276       public static DocumentBuilder getDocumentBuilder() throws TikaException {\n 277           try {\n 278               DocumentBuilderFactory documentBuilderFactory = getDocumentBuilderFactory();\n 279               DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n 280               documentBuilder.setEntityResolver(IGNORING_SAX_ENTITY_RESOLVER);\n 281               documentBuilder.setErrorHandler(null);\n 282               return documentBuilder;\n 283           } catch (ParserConfigurationException e) {\n 284               throw new TikaException(\"XML parser not available\", e);\n 285           }\n 286       }\n 713       private static void trySetXercesSecurityManager(DocumentBuilderFactory factory) {\n 714           //from POI\n 715           // Try built-in JVM one first, standalone if not\n 716           for (String securityManagerClassName : new String[]{\n 717                   //\"com.sun.org.apache.xerces.internal.util.SecurityManager\",\n 718                   XERCES_SECURITY_MANAGER}) {\n 719               try {\n 720                   Object mgr =\n 721                           Class.forName(securityManagerClassName).getDeclaredConstructor().newInstance();\n 722                   Method setLimit = mgr.getClass().getMethod(\"setEntityExpansionLimit\",\n 723                           Integer.TYPE);\n 724                   setLimit.invoke(mgr, MAX_ENTITY_EXPANSIONS);\n 725                   factory.setAttribute(XERCES_SECURITY_MANAGER_PROPERTY, mgr);\n 726                   // Stop once one can be setup without error\n 727                   return;\n 728               } catch (ClassNotFoundException e) {\n 729                   // continue without log, this is expected in some setups\n 730               } catch (Throwable e) {     // NOSONAR - also catch things like NoClassDefError here\n 731                   // throttle the log somewhat as it can spam the log otherwise\n 732                   if (System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {\n 733                       LOG.warn(\n 734                               \"SAX Security Manager could not be setup [log suppressed for 5 \" +\n 735                                       \"minutes]\",\n 736                               e);\n 737                       LAST_LOG = System.currentTimeMillis();\n 738                   }\n 739               }\n 740           }\n 741   \n 742           // separate old version of Xerces not found => use the builtin way of setting the property\n 743           try {\n 744               factory.setAttribute(\"http://www.oracle.com/xml/jaxp/properties/entityExpansionLimit\",\n 745                       MAX_ENTITY_EXPANSIONS);\n 746           } catch (IllegalArgumentException e) {\n 747               // NOSONAR - also catch things like NoClassDefError here\n 748               // throttle the log somewhat as it can spam the log otherwise\n 749               if (System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {\n 750                   LOG.warn(\"SAX Security Manager could not be setup [log suppressed for 5 minutes]\",\n 751                           e);\n 752                   LAST_LOG = System.currentTimeMillis();\n 753               }\n 754           }\n 755       }\n",
            "cost": 0.09286,
            "harness_id": "TikaOne",
            "sanitizer": "Remote Code Execution",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java:721:39",
            "status": "corpus",
            "valid_path": "NO",
            "id": 29
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n 557       private void updateXMLReaderUtils(Element element) throws TikaException {\n 558   \n 559           Element child = getChild(element, \"xml-reader-utils\");\n 560           if (child == null) {\n 561               return;\n 562           }\n 563   \n 564           if (child.hasAttribute(\"maxEntityExpansions\")) {\n 565               XMLReaderUtils.setMaxEntityExpansions(Integer.parseInt(child.getAttribute(\"maxEntityExpansions\")));\n 566           }\n 567   \n 568           // make sure to call this after set entity expansions\n 569           if (child.hasAttribute(\"poolSize\")) {\n 570               XMLReaderUtils.setPoolSize(Integer.parseInt(child.getAttribute(\"poolSize\")));\n 571           }\n 572   \n 573       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java:\n 830       public static void setPoolSize(int poolSize) throws TikaException {\n 831           //stop the world with a write lock.\n 832           //parsers that are currently in use will be offered later (once the lock is released),\n 833           //but not accepted and will be gc'd.  We have to do this locking and\n 834           //the read locking in case one thread resizes the pool when the\n 835           //parsers have already started.  We could have an NPE on SAX_PARSERS\n 836           //if we didn't lock.\n 837           SAX_READ_WRITE_LOCK.writeLock().lock();\n 838           try {\n 839               //free up any resources before emptying SAX_PARSERS\n 840               for (PoolSAXParser parser : SAX_PARSERS) {\n 841                   parser.reset();\n 842               }\n 843               SAX_PARSERS.clear();\n 844               SAX_PARSERS = new ArrayBlockingQueue<>(poolSize);\n 845               int generation = POOL_GENERATION.incrementAndGet();\n 846               for (int i = 0; i < poolSize; i++) {\n 847                   try {\n 848                       SAX_PARSERS.offer(buildPoolParser(generation,\n 849                               getSAXParserFactory().newSAXParser()));\n 850                   } catch (SAXException | ParserConfigurationException e) {\n 851                       throw new TikaException(\"problem creating sax parser\", e);\n 852                   }\n 853               }\n 854           } finally {\n 855               SAX_READ_WRITE_LOCK.writeLock().unlock();\n 856           }\n 857   \n 858           DOM_READ_WRITE_LOCK.writeLock().lock();\n 859           try {\n 860               DOM_BUILDERS.clear();\n 861               DOM_BUILDERS = new ArrayBlockingQueue<>(poolSize);\n 862               for (int i = 0; i < poolSize; i++) {\n 863                   DOM_BUILDERS.offer(new PoolDOMBuilder(POOL_GENERATION.get(), getDocumentBuilder()));\n 864               }\n 865           } finally {\n 866               DOM_READ_WRITE_LOCK.writeLock().unlock();\n 867           }\n 868           POOL_SIZE = poolSize;\n 869       }\n 907       private static PoolSAXParser buildPoolParser(int generation, SAXParser parser) {\n 908           boolean canReset = false;\n 909           try {\n 910               parser.reset();\n 911               canReset = true;\n 912           } catch (UnsupportedOperationException e) {\n 913               canReset = false;\n 914           }\n 915           boolean hasSecurityManager = false;\n 916           try {\n 917               Object mgr =\n 918                       Class.forName(XERCES_SECURITY_MANAGER).getDeclaredConstructor().newInstance();\n 919               Method setLimit = mgr.getClass().getMethod(\"setEntityExpansionLimit\", Integer.TYPE);\n 920               setLimit.invoke(mgr, MAX_ENTITY_EXPANSIONS);\n 921   \n 922               parser.setProperty(XERCES_SECURITY_MANAGER_PROPERTY, mgr);\n 923               hasSecurityManager = true;\n 924           } catch (SecurityException e) {\n 925               //don't swallow security exceptions\n 926               throw e;\n 927           } catch (ClassNotFoundException e) {\n 928               // continue without log, this is expected in some setups\n 929           } catch (Throwable e) {\n 930               // NOSONAR - also catch things like NoClassDefError here\n 931               // throttle the log somewhat as it can spam the log otherwise\n 932               if (System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {\n 933                   LOG.warn(\"SAX Security Manager could not be setup [log suppressed for 5 minutes]\",\n 934                           e);\n 935                   LAST_LOG = System.currentTimeMillis();\n 936               }\n 937           }\n 938   \n 939           boolean canSetJaxPEntity = false;\n 940           if (!hasSecurityManager) {\n 941               // use the builtin way of setting the property\n 942               try {\n 943                   parser.setProperty(\"http://www.oracle.com/xml/jaxp/properties/entityExpansionLimit\",\n 944                           MAX_ENTITY_EXPANSIONS);\n 945                   canSetJaxPEntity = true;\n 946               } catch (SAXException e) {     // NOSONAR - also catch things like NoClassDefError here\n 947                   // throttle the log somewhat as it can spam the log otherwise\n 948                   if (System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {\n 949                       LOG.warn(\n 950                               \"SAX Security Manager could not be setup [log suppressed for 5 \" +\n 951                                       \"minutes]\",\n 952                               e);\n 953                       LAST_LOG = System.currentTimeMillis();\n 954                   }\n 955               }\n 956           }\n 957   \n 958           if (!canReset && hasSecurityManager) {\n 959               return new XercesPoolSAXParser(generation, parser);\n 960           } else if (canReset && hasSecurityManager) {\n 961               return new Xerces2PoolSAXParser(generation, parser);\n 962           } else if (canReset && !hasSecurityManager && canSetJaxPEntity) {\n 963               return new BuiltInPoolSAXParser(generation, parser);\n 964           } else {\n 965               return new UnrecognizedPoolSAXParser(generation, parser);\n 966           }\n 967   \n 968       }\n",
            "cost": 0.10688,
            "harness_id": "TikaOne",
            "sanitizer": "Remote Code Execution",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java:918:35",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 30
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Remote Code Execution",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java:765:39",
            "status": "error",
            "id": 31
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n 667           @SuppressWarnings(\"unchecked\")\n 668           CT loadOverall(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 669                   throws TikaException, IOException {\n 670               List<T> loaded = new ArrayList<>();\n 671   \n 672               // Find the children of the parent tag, if any\n 673               for (Element le : getTopLevelElementChildren(element, getParentTagName(),\n 674                       getLoaderTagName())) {\n 675                   T loadedChild = loadOne(le, mimeTypes, loader);\n 676                   if (loadedChild != null) {\n 677                       loaded.add(loadedChild);\n 678                   }\n 679               }\n 680   \n 681               // Build the classes, and wrap as needed\n 682               if (loaded.isEmpty()) {\n 683                   // Nothing defined, create a Default\n 684                   return createDefault(mimeTypes, loader);\n 685               } else if (loaded.size() == 1) {\n 686                   T single = loaded.get(0);\n 687                   if (isComposite(single)) {\n 688                       // Single Composite defined, use that\n 689                       return (CT) single;\n 690                   }\n 691               } else if (!supportsComposite()) {\n 692                   // No composite support, just return the first one\n 693                   if (loaded.size() == 1) {\n 694                       return (CT) loaded.get(0);\n 695                   } else if (loaded.size() > 1) {\n 696                       throw new TikaConfigException(\n 697                               \"Composite not supported for \" + getParentTagName() +\n 698                                       \". Must specify only one child!\");\n 699                   } else {\n 700                       //throw exception if empty?\n 701                   }\n 702               }\n 703               // Wrap the defined parsers/detectors up in a Composite\n 704               return createComposite(loaded, mimeTypes, loader);\n 705           }\n 707           T loadOne(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 708                   throws TikaException, IOException {\n 709               String name = element.getAttribute(\"class\");\n 710               if (name == null) {\n 711                   throw new TikaConfigException(\"class attribute must not be null: \" + element);\n 712               }\n 713               String initProbHandler = element.getAttribute(\"initializableProblemHandler\");\n 714               InitializableProblemHandler initializableProblemHandler;\n 715               if (initProbHandler == null || initProbHandler.length() == 0) {\n 716                   initializableProblemHandler = loader.getInitializableProblemHandler();\n 717               } else {\n 718                   initializableProblemHandler = getInitializableProblemHandler(initProbHandler);\n 719               }\n 720   \n 721               T loaded = null;\n 722   \n 723               try {\n 724                   Class<? extends T> loadedClass = loader.getServiceClass(getLoaderClass(), name);\n 725   \n 726                   // Do pre-load checks and short-circuits\n 727                   //TODO : allow duplicate instances with different configurations\n 728                   loaded = preLoadOne(loadedClass, name, mimeTypes);\n 729                   if (loaded != null) {\n 730                       return loaded;\n 731                   }\n 732   \n 733                   // Get any parameters / settings for the parser\n 734                   Map<String, Param> params = null;\n 735                   try {\n 736                       params = getParams(element);\n 737                   } catch (Exception e) {\n 738                       throw new TikaConfigException(e.getMessage(), e);\n 739                   }\n 740   \n 741                   // Is this a composite or decorated class? If so, support recursion\n 742                   if (isComposite(loadedClass)) {\n 743                       // Get the child objects for it\n 744                       List<T> children = new ArrayList<>();\n 745                       NodeList childNodes = element.getElementsByTagName(getLoaderTagName());\n 746                       if (childNodes.getLength() > 0) {\n 747                           for (int i = 0; i < childNodes.getLength(); i++) {\n 748                               T loadedChild =\n 749                                       loadOne((Element) childNodes.item(i), mimeTypes, loader);\n 750                               if (loadedChild != null) {\n 751                                   children.add(loadedChild);\n 752                               }\n 753                           }\n 754                       }\n 755   \n 756                       // Get the list of children to exclude\n 757                       Set<Class<? extends T>> excludeChildren = new HashSet<>();\n 758                       NodeList excludeChildNodes =\n 759                               element.getElementsByTagName(getLoaderTagName() + \"-exclude\");\n 760                       if (excludeChildNodes.getLength() > 0) {\n 761                           for (int i = 0; i < excludeChildNodes.getLength(); i++) {\n 762                               Element excl = (Element) excludeChildNodes.item(i);\n 763                               String exclName = excl.getAttribute(\"class\");\n 764                               try {\n 765                                   excludeChildren\n 766                                           .add(loader.getServiceClass(getLoaderClass(), exclName));\n 767                               } catch (ClassNotFoundException e) {\n 768                                   //TIKA-3268 -- This should stop the world.\n 769                                   throw new TikaConfigException(\n 770                                           \"Class not found in -exclude list: \" + exclName);\n 771                               }\n 772                           }\n 773                       }\n 774   \n 775                       // Create the Composite\n 776                       loaded = createComposite(loadedClass, children, excludeChildren, params,\n 777                               mimeTypes, loader);\n 778   \n 779                       // Default constructor fallback\n 780                       if (loaded == null) {\n 781                           loaded = newInstance(loadedClass);\n 782                       }\n 783                   } else {\n 784                       // Regular class, create as-is\n 785                       loaded = newInstance(loadedClass);\n 786                       // TODO Support arguments, needed for Translators etc\n 787                       // See the thread \"Configuring parsers and translators\" for details\n 788                   }\n 789   \n 790                   //Assigning the params to bean fields/setters\n 791                   AnnotationUtils.assignFieldParams(loaded, params);\n 792                   if (loaded instanceof Initializable) {\n 793                       ((Initializable) loaded).initialize(params);\n 794                       ((Initializable) loaded).checkInitialization(initializableProblemHandler);\n 795                   }\n 796                   // Have any decoration performed, eg explicit mimetypes\n 797                   loaded = decorate(loaded, element);\n 798                   // All done with setup\n 799                   return loaded;\n 800               } catch (ClassNotFoundException e) {\n 801                   if (loader.getLoadErrorHandler() == LoadErrorHandler.THROW) {\n 802                       // Use a different exception signature here\n 803                       throw new TikaConfigException(\n 804                               \"Unable to find a \" + getLoaderTagName() + \" class: \" + name, e);\n 805                   }\n 806                   // Report the problem\n 807                   loader.getLoadErrorHandler().handleLoadError(name, e);\n 808                   return null;\n 809               } catch (IllegalAccessException e) {\n 810                   throw new TikaException(\n 811                           \"Unable to access a \" + getLoaderTagName() + \" class: \" + name, e);\n 812               } catch (InvocationTargetException e) {\n 813                   throw new TikaException(\n 814                           \"Unable to create a \" + getLoaderTagName() + \" class: \" + name, e);\n 815               } catch (InstantiationException e) {\n 816                   throw new TikaException(\n 817                           \"Unable to instantiate a \" + getLoaderTagName() + \" class: \" + name, e);\n 818               } catch (NoSuchMethodException e) {\n 819                   throw new TikaException(\n 820                           \"Unable to find the right constructor for \" + getLoaderTagName() +\n 821                                   \" class: \" + name, e);\n 822               }\n 823           }\n 838           Map<String, Param> getParams(Element el) throws TikaException {\n 839               Map<String, Param> params = new HashMap<>();\n 840               for (Node child = el.getFirstChild(); child != null; child = child.getNextSibling()) {\n 841                   if (PARAMS_TAG_NAME.equals(child.getNodeName())) { //found the node\n 842                       if (child.hasChildNodes()) { //it has children\n 843                           NodeList childNodes = child.getChildNodes();\n 844                           for (int i = 0; i < childNodes.getLength(); i++) {\n 845                               Node item = childNodes.item(i);\n 846                               if (item.getNodeType() == Node.ELEMENT_NODE) {\n 847                                   Param<?> param = Param.load(item);\n 848                                   params.put(param.getName(), param);\n 849                               }\n 850                           }\n 851                       }\n 852                       break; //only the first one is used\n 853                   }\n 854               }\n 855               return params;\n 856           }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/Param.java:\n127       public static <T> Param<T> load(Node node) throws TikaConfigException {\n128   \n129           Node nameAttr = node.getAttributes().getNamedItem(\"name\");\n130           Node typeAttr = node.getAttributes().getNamedItem(\"type\");\n131           Node valueAttr = node.getAttributes().getNamedItem(\"value\");\n132           Node classAttr = node.getAttributes().getNamedItem(\"class\");\n133           Class clazz = null;\n134           if (classAttr != null) {\n135               try {\n136                   clazz = Class.forName(classAttr.getTextContent());\n137               } catch (ClassNotFoundException e) {\n138                   throw new TikaConfigException(\"can't find class: \" + classAttr.getTextContent(), e);\n139               }\n140           }\n141           Node value = node.getFirstChild();\n142           if (value instanceof NodeList && valueAttr != null) {\n143               throw new TikaConfigException(\"can't specify a value attr _and_ a node list\");\n144           }\n145           if (valueAttr != null && (value == null || value.getTextContent() == null)) {\n146               value = valueAttr;\n147           }\n148   \n149           Param<T> ret = new Param<>();\n150           ret.name = nameAttr.getTextContent();\n151           if (typeAttr != null) {\n152               String type = typeAttr.getTextContent();\n153               if (\"class\".equals(type)) {\n154                   if (classAttr == null) {\n155                       throw new TikaConfigException(\"must specify a class attribute if \" +\n156                               \"type=\\\"class\\\"\");\n157                   }\n158                   ret.setType(clazz);\n159               } else {\n160                   ret.setTypeString(typeAttr.getTextContent());\n161               }\n162           } else {\n163               ret.type = (Class<T>) wellKnownMap.get(ret.name);\n164               if (ret.type == null) {\n165                   ret.type = clazz;\n166               }\n167               if (ret.type == null) {\n168                   throw new TikaConfigException(\"Must specify a \\\"type\\\" in: \" + node.getLocalName());\n169               }\n170           }\n171   \n172           if (clazz != null) {\n173               loadObject(ret, node, clazz);\n174           } else if (List.class.isAssignableFrom(ret.type)) {\n175               loadList(ret, node);\n176           } else if (Map.class.isAssignableFrom(ret.type)) {\n177               loadMap(ret, node);\n178           } else {\n179               //allow the empty string\n180               String textContent = \"\";\n181               if (value != null) {\n182                   textContent = value.getTextContent();\n183               }\n184               ret.actualValue = getTypedValue(ret.type, textContent);\n185               ret.valueStrings.add(textContent);\n186           }\n187           return ret;\n188       }\n",
            "cost": 0.12776500000000002,
            "harness_id": "TikaOne",
            "sanitizer": "Remote Code Execution",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/Param.java:136:39",
            "status": "corpus",
            "valid_path": "NO",
            "id": 32
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n1040           public void process(InputStream input, OutputStream output, Metadata metadata) throws Exception {\n1041               Parser p = parser;\n1042               if (fork) {\n1043                   p = new ForkParser(TikaCLI.class.getClassLoader(), p);\n1044               }\n1045               ContentHandler handler = getContentHandler(output, metadata);\n1046               try {\n1047                   p.parse(input, handler, metadata, context);\n1048                   // fix for TIKA-596: if a parser doesn't generate\n1049                   // XHTML output, the lack of an output document prevents\n1050                   // metadata from being output: this fixes that\n1051                   if (handler instanceof NoDocumentMetHandler) {\n1052                       NoDocumentMetHandler metHandler = (NoDocumentMetHandler) handler;\n1053                       if (!metHandler.metOutput()) {\n1054                           metHandler.endDocument();\n1055                       }\n1056                   }\n1057               } finally {\n1058                   if (fork) {\n1059                       ((ForkParser) p).close();\n1060                   }\n1061               }\n1062           }\n\nsrc/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/NamedEntityParser.java:\n 76       private synchronized void initialize(ParseContext context) {\n 77           if (initialized) {\n 78               return;\n 79           }\n 80           initialized = true;\n 81   \n 82           //TODO: read class name from context or config\n 83           //There can be multiple classes in the form of comma separated class names;\n 84           String classNamesString = System.getProperty(SYS_PROP_NER_IMPL, DEFAULT_NER_IMPL);\n 85           String[] classNames = classNamesString.split(\",\");\n 86           this.nerChain = new ArrayList<>(classNames.length);\n 87           for (String className : classNames) {\n 88               className = className.trim();\n 89               LOG.info(\"going to load, instantiate and bind the instance of {}\", className);\n 90               try {\n 91                   NERecogniser recogniser =\n 92                           (NERecogniser) Class.forName(className).getDeclaredConstructor().newInstance();\n 93                   LOG.info(\"{} is available ? {}\", className, recogniser.isAvailable());\n 94                   if (recogniser.isAvailable()) {\n 95                       nerChain.add(recogniser);\n 96                   }\n 97               } catch (Exception e) {\n 98                   LOG.error(e.getMessage(), e);\n 99               }\n100           }\n101           try {\n102               TikaConfig config = new TikaConfig();\n103               this.secondaryParser = new Tika(config);\n104               this.available = !nerChain.isEmpty();\n105               LOG.info(\"Number of NERecognisers in chain {}\", nerChain.size());\n106           } catch (Exception e) {\n107               LOG.error(e.getMessage(), e);\n108               this.available = false;\n109           }\n110       }\n116       public void parse(InputStream inputStream, ContentHandler contentHandler, Metadata metadata,\n117                         ParseContext parseContext) throws IOException, SAXException, TikaException {\n118   \n119           if (!initialized) {\n120               initialize(parseContext);\n121           }\n122           if (!available) {\n123               return;\n124           }\n125   \n126           Reader reader =\n127                   MediaType.TEXT_PLAIN.toString().equals(metadata.get(Metadata.CONTENT_TYPE)) ?\n128                           new InputStreamReader(inputStream, StandardCharsets.UTF_8) :\n129                           secondaryParser.parse(inputStream);\n130   \n131           String text = IOUtils.toString(reader);\n132           IOUtils.closeQuietly(reader);\n133   \n134           for (NERecogniser ner : nerChain) {\n135               Map<String, Set<String>> names = ner.recognise(text);\n136               if (names != null) {\n137                   for (Map.Entry<String, Set<String>> entry : names.entrySet()) {\n138                       if (entry.getValue() != null) {\n139                           String mdKey = MD_KEY_PREFIX + entry.getKey();\n140                           for (String name : entry.getValue()) {\n141                               metadata.add(mdKey, name);\n142                           }\n143                       }\n144                   }\n145               }\n146           }\n147           XHTMLContentHandler xhtml = new XHTMLContentHandler(contentHandler, metadata);\n148           extractOutput(text.trim(), xhtml);\n149       }\n",
            "cost": 0.088515,
            "harness_id": "TikaOne",
            "sanitizer": "Remote Code Execution",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/NamedEntityParser.java:92:54",
            "status": "corpus",
            "valid_path": "NO",
            "id": 33
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Remote Code Execution",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/fork/ForkObjectInputStream.java:97:16",
            "status": "error",
            "id": 34
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/metadata/filter/MetadataFilter.java:\n44       public static MetadataFilter load(Element root, boolean allowMissing) throws TikaConfigException,\n45               IOException {\n46           try {\n47               return buildComposite(\"metadataFilters\", CompositeMetadataFilter.class,\n48                       \"metadataFilter\", MetadataFilter.class, root);\n49           } catch (TikaConfigException e) {\n50               if (allowMissing && e.getMessage().contains(\"could not find metadataFilters\")) {\n51                   return new NoOpFilter();\n52               }\n53               throw e;\n54           }\n55       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:\n139       protected static <P, T> P buildComposite(String compositeElementName, Class<P> compositeClass,\n140                                                String itemName, Class<T> itemClass,\n141                                                Element properties)\n142               throws TikaConfigException, IOException {\n143   \n144           if (!properties.getLocalName().equals(\"properties\")) {\n145               throw new TikaConfigException(\"expect properties as root node\");\n146           }\n147           NodeList children = properties.getChildNodes();\n148   \n149           for (int i = 0; i < children.getLength(); i++) {\n150               Node child = children.item(i);\n151               if (child.getNodeType() != 1) {\n152                   continue;\n153               }\n154               if (compositeElementName.equals(child.getLocalName())) {\n155                   List<T> components = loadComposite(child, itemName, itemClass);\n156                   Constructor constructor = null;\n157                   try {\n158                       constructor = compositeClass.getConstructor(List.class);\n159                       P composite = (P) constructor.newInstance(components);\n160                       setParams(composite, child, new HashSet<>(), itemName);\n161                       return composite;\n162                   } catch (NoSuchMethodException | InvocationTargetException |\n163                            InstantiationException | IllegalAccessException e) {\n164                       throw new TikaConfigException(\"can't build composite class\", e);\n165                   }\n166               }\n167           }\n168           throw new TikaConfigException(\"could not find \" + compositeElementName);\n169       }\n218       private static void setParams(Object object, Node targetNode, Set<String> settings,\n219                                     String exceptNodeName) throws TikaConfigException {\n220           NodeList children = targetNode.getChildNodes();\n221           List<Node> params = new ArrayList<>();\n222           for (int i = 0; i < children.getLength(); i++) {\n223               Node child = children.item(i);\n224   \n225               if (\"params\".equals(child.getLocalName())) {\n226                   NodeList paramsList = child.getChildNodes();\n227                   for (int j = 0; j < paramsList.getLength(); j++) {\n228                       params.add(paramsList.item(j));\n229                   }\n230               } else {\n231                   params.add(child);\n232               }\n233           }\n234           for (int i = 0; i < params.size(); i++) {\n235               Node param = params.get(i);\n236               if (param.getNodeType() != 1) {\n237                   continue;\n238               }\n239               String localName = param.getLocalName();\n240               if (localName == null || localName.equals(exceptNodeName)) {\n241                   continue;\n242               }\n243               String txt = param.getTextContent();\n244               String itemName = param.getLocalName();\n245               SetterClassPair setterClassPair = findSetterClassPair(object, itemName);\n246               boolean processed = false;\n247               if (!hasClass(param)) {\n248                   if (setterClassPair.itemClass.isAssignableFrom(Map.class) && isMap(param)) {\n249                       tryToSetMap(object, param);\n250                       processed = true;\n251                   } else if (setterClassPair.itemClass.isAssignableFrom(List.class)) {\n252                       tryToSetList(object, param);\n253                       processed = true;\n254                   }\n255               }\n256               if (!processed) {\n257                   if (isPrimitive(setterClassPair.itemClass)) {\n258                       tryToSetPrimitive(object, setterClassPair, param.getTextContent());\n259                   } else {\n260                       //tryToSetPrimitive(object, localName, txt);\n261                       Object item = buildClass(param, itemName, setterClassPair.itemClass);\n262                       setParams(setterClassPair.itemClass.cast(item), param, new HashSet<>());\n263                       try {\n264                           setterClassPair.setterMethod.invoke(object, item);\n265                       } catch (IllegalAccessException | InvocationTargetException e) {\n266                           throw new TikaConfigException(\"problem creating \" + itemName, e);\n267                       }\n268                   }\n269               }\n270   \n271               if (txt != null) {\n272                   settings.add(localName);\n273               }\n274           }\n275   \n276           if (object instanceof Initializable) {\n277               ((Initializable) object).initialize(Collections.EMPTY_MAP);\n278               ((Initializable) object).checkInitialization(InitializableProblemHandler.THROW);\n279           }\n280       }\n360       private static void tryToSetList(Object object, Node param) throws TikaConfigException {\n361           if (hasClass(param)) {\n362               tryToSetClassList(object, param);\n363           } else {\n364               tryToSetStringList(object, param);\n365           }\n366       }\n368       private static void tryToSetClassList(Object object, Node node) throws TikaConfigException {\n369           String name = node.getLocalName();\n370           try {\n371               Class interfaze =\n372                       Class.forName(node.getAttributes().getNamedItem(\"class\").getTextContent());\n373               List items = new ArrayList<Object>();\n374               NodeList nodeList = node.getChildNodes();\n375               for (int i = 0; i < nodeList.getLength(); i++) {\n376                   Node child = nodeList.item(i);\n377                   if (child.getNodeType() == 1) {\n378                       Object item = buildClass(child, child.getLocalName(), interfaze);\n379                       setParams(item, child, new HashSet<>());\n380                       items.add(item);\n381                   }\n382               }\n383   \n384               String setter = \"set\" + name.substring(0, 1).toUpperCase(Locale.US) + name.substring(1);\n385               Method m = object.getClass().getMethod(setter, List.class);\n386               m.invoke(object, items);\n387   \n388           } catch (ClassNotFoundException | InvocationTargetException | NoSuchMethodException |\n389                    IllegalAccessException e) {\n390               throw new TikaConfigException(\"couldn't build class for \" + name, e);\n391           }\n392       }\n",
            "cost": 0.11488000000000001,
            "harness_id": "TikaOne",
            "sanitizer": "Remote Code Execution",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:372:35",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 35
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 265       private static void async(String[] args) throws Exception {\n 266           String tikaConfigPath = \"\";\n 267           String config = \"--config=\";\n 268           for (String arg : args) {\n 269               if (arg.startsWith(config)) {\n 270                   tikaConfigPath = arg.substring(config.length());\n 271               }\n 272           }\n 273           TikaAsyncCLI.main(new String[]{tikaConfigPath});\n 274       }\n\nsrc/tika/tika-pipes/tika-async-cli/src/main/java/org/apache/tika/async/cli/TikaAsyncCLI.java:\n35       public static void main(String[] args) throws Exception {\n36           Path tikaConfigPath = Paths.get(args[0]);\n37           PipesIterator pipesIterator = PipesIterator.build(tikaConfigPath);\n38           long start = System.currentTimeMillis();\n39           try (AsyncProcessor processor = new AsyncProcessor(tikaConfigPath, pipesIterator)) {\n40   \n41               for (FetchEmitTuple t : pipesIterator) {\n42                   boolean offered = processor.offer(t, TIMEOUT_MS);\n43                   if (!offered) {\n44                       throw new TimeoutException(\"timed out waiting to add a fetch emit tuple\");\n45                   }\n46               }\n47               processor.finished();\n48               while (true) {\n49                   if (processor.checkActive()) {\n50                       Thread.sleep(500);\n51                   } else {\n52                       break;\n53                   }\n54               }\n55               long elapsed = System.currentTimeMillis() - start;\n56               LOG.info(\"Successfully finished processing {} files in {} ms\", processor.getTotalProcessed(), elapsed);\n57           }\n58       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/pipes/pipesiterator/PipesIterator.java:\n 83       public static PipesIterator build(Path tikaConfigFile) throws IOException,\n 84               TikaConfigException {\n 85           try (InputStream is = Files.newInputStream(tikaConfigFile)) {\n 86               return buildSingle(\n 87                       \"pipesIterator\",\n 88                       PipesIterator.class, is);\n 89           }\n 90       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:\n 59       protected static <T> T buildSingle(String itemName, Class<T> itemClass, InputStream is)\n 60               throws TikaConfigException, IOException {\n 61           Element properties = null;\n 62           try {\n 63               properties = XMLReaderUtils.buildDOM(is).getDocumentElement();\n 64           } catch (SAXException e) {\n 65               throw new IOException(e);\n 66           } catch (TikaException e) {\n 67               throw new TikaConfigException(\"problem loading xml to dom\", e);\n 68           }\n 69           if (!properties.getLocalName().equals(\"properties\")) {\n 70               throw new TikaConfigException(\"expect properties as root node\");\n 71           }\n 72           return buildSingle(itemName, itemClass, properties, null);\n 73       }\n 84       protected static <T> T buildSingle(String itemName, Class<T> itemClass, Element properties,\n 85                                          T defaultValue) throws TikaConfigException, IOException {\n 86   \n 87           NodeList children = properties.getChildNodes();\n 88           T toConfigure = null;\n 89           for (int i = 0; i < children.getLength(); i++) {\n 90               Node child = children.item(i);\n 91               if (child.getNodeType() != 1) {\n 92                   continue;\n 93               }\n 94               if (itemName.equals(child.getLocalName())) {\n 95                   if (toConfigure != null) {\n 96                       throw new TikaConfigException(\n 97                               \"There can only be one \" + itemName + \" in a config\");\n 98                   }\n 99                   T item = buildClass(child, itemName, itemClass);\n100                   setParams(item, child, new HashSet<>());\n101                   toConfigure = (T) item;\n102               }\n103           }\n104           if (toConfigure == null) {\n105               if (defaultValue == null) {\n106                   throw new TikaConfigException(\"could not find \" + itemName);\n107               }\n108               return defaultValue;\n109           }\n110           return toConfigure;\n111       }\n190       private static <T> T buildClass(Node node, String elementName, Class itemClass)\n191               throws TikaConfigException {\n192           String className = itemClass.getName();\n193           Node classNameNode = node.getAttributes().getNamedItem(\"class\");\n194   \n195           if (classNameNode != null) {\n196               className = classNameNode.getTextContent();\n197           }\n198           try {\n199               Class clazz = Class.forName(className);\n200               if (!itemClass.isAssignableFrom(clazz)) {\n201                   throw new TikaConfigException(\n202                           elementName + \" with class name \" + className + \" must be of type '\" +\n203                                   itemClass.getName() + \"'\");\n204               }\n205               return (T) clazz.getDeclaredConstructor().newInstance();\n206           } catch (InstantiationException | IllegalAccessException | ClassNotFoundException |\n207                    NoSuchMethodException | InvocationTargetException e) {\n208               throw new TikaConfigException(\"problem loading \" + elementName +\n209                       \" with class \" + itemClass.getName(), e);\n210           }\n211       }\n",
            "cost": 0.067705,
            "harness_id": "TikaOne",
            "sanitizer": "Remote Code Execution",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:199:41",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 36
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n 667           @SuppressWarnings(\"unchecked\")\n 668           CT loadOverall(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 669                   throws TikaException, IOException {\n 670               List<T> loaded = new ArrayList<>();\n 671   \n 672               // Find the children of the parent tag, if any\n 673               for (Element le : getTopLevelElementChildren(element, getParentTagName(),\n 674                       getLoaderTagName())) {\n 675                   T loadedChild = loadOne(le, mimeTypes, loader);\n 676                   if (loadedChild != null) {\n 677                       loaded.add(loadedChild);\n 678                   }\n 679               }\n 680   \n 681               // Build the classes, and wrap as needed\n 682               if (loaded.isEmpty()) {\n 683                   // Nothing defined, create a Default\n 684                   return createDefault(mimeTypes, loader);\n 685               } else if (loaded.size() == 1) {\n 686                   T single = loaded.get(0);\n 687                   if (isComposite(single)) {\n 688                       // Single Composite defined, use that\n 689                       return (CT) single;\n 690                   }\n 691               } else if (!supportsComposite()) {\n 692                   // No composite support, just return the first one\n 693                   if (loaded.size() == 1) {\n 694                       return (CT) loaded.get(0);\n 695                   } else if (loaded.size() > 1) {\n 696                       throw new TikaConfigException(\n 697                               \"Composite not supported for \" + getParentTagName() +\n 698                                       \". Must specify only one child!\");\n 699                   } else {\n 700                       //throw exception if empty?\n 701                   }\n 702               }\n 703               // Wrap the defined parsers/detectors up in a Composite\n 704               return createComposite(loaded, mimeTypes, loader);\n 705           }\n 707           T loadOne(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 708                   throws TikaException, IOException {\n 709               String name = element.getAttribute(\"class\");\n 710               if (name == null) {\n 711                   throw new TikaConfigException(\"class attribute must not be null: \" + element);\n 712               }\n 713               String initProbHandler = element.getAttribute(\"initializableProblemHandler\");\n 714               InitializableProblemHandler initializableProblemHandler;\n 715               if (initProbHandler == null || initProbHandler.length() == 0) {\n 716                   initializableProblemHandler = loader.getInitializableProblemHandler();\n 717               } else {\n 718                   initializableProblemHandler = getInitializableProblemHandler(initProbHandler);\n 719               }\n 720   \n 721               T loaded = null;\n 722   \n 723               try {\n 724                   Class<? extends T> loadedClass = loader.getServiceClass(getLoaderClass(), name);\n 725   \n 726                   // Do pre-load checks and short-circuits\n 727                   //TODO : allow duplicate instances with different configurations\n 728                   loaded = preLoadOne(loadedClass, name, mimeTypes);\n 729                   if (loaded != null) {\n 730                       return loaded;\n 731                   }\n 732   \n 733                   // Get any parameters / settings for the parser\n 734                   Map<String, Param> params = null;\n 735                   try {\n 736                       params = getParams(element);\n 737                   } catch (Exception e) {\n 738                       throw new TikaConfigException(e.getMessage(), e);\n 739                   }\n 740   \n 741                   // Is this a composite or decorated class? If so, support recursion\n 742                   if (isComposite(loadedClass)) {\n 743                       // Get the child objects for it\n 744                       List<T> children = new ArrayList<>();\n 745                       NodeList childNodes = element.getElementsByTagName(getLoaderTagName());\n 746                       if (childNodes.getLength() > 0) {\n 747                           for (int i = 0; i < childNodes.getLength(); i++) {\n 748                               T loadedChild =\n 749                                       loadOne((Element) childNodes.item(i), mimeTypes, loader);\n 750                               if (loadedChild != null) {\n 751                                   children.add(loadedChild);\n 752                               }\n 753                           }\n 754                       }\n 755   \n 756                       // Get the list of children to exclude\n 757                       Set<Class<? extends T>> excludeChildren = new HashSet<>();\n 758                       NodeList excludeChildNodes =\n 759                               element.getElementsByTagName(getLoaderTagName() + \"-exclude\");\n 760                       if (excludeChildNodes.getLength() > 0) {\n 761                           for (int i = 0; i < excludeChildNodes.getLength(); i++) {\n 762                               Element excl = (Element) excludeChildNodes.item(i);\n 763                               String exclName = excl.getAttribute(\"class\");\n 764                               try {\n 765                                   excludeChildren\n 766                                           .add(loader.getServiceClass(getLoaderClass(), exclName));\n 767                               } catch (ClassNotFoundException e) {\n 768                                   //TIKA-3268 -- This should stop the world.\n 769                                   throw new TikaConfigException(\n 770                                           \"Class not found in -exclude list: \" + exclName);\n 771                               }\n 772                           }\n 773                       }\n 774   \n 775                       // Create the Composite\n 776                       loaded = createComposite(loadedClass, children, excludeChildren, params,\n 777                               mimeTypes, loader);\n 778   \n 779                       // Default constructor fallback\n 780                       if (loaded == null) {\n 781                           loaded = newInstance(loadedClass);\n 782                       }\n 783                   } else {\n 784                       // Regular class, create as-is\n 785                       loaded = newInstance(loadedClass);\n 786                       // TODO Support arguments, needed for Translators etc\n 787                       // See the thread \"Configuring parsers and translators\" for details\n 788                   }\n 789   \n 790                   //Assigning the params to bean fields/setters\n 791                   AnnotationUtils.assignFieldParams(loaded, params);\n 792                   if (loaded instanceof Initializable) {\n 793                       ((Initializable) loaded).initialize(params);\n 794                       ((Initializable) loaded).checkInitialization(initializableProblemHandler);\n 795                   }\n 796                   // Have any decoration performed, eg explicit mimetypes\n 797                   loaded = decorate(loaded, element);\n 798                   // All done with setup\n 799                   return loaded;\n 800               } catch (ClassNotFoundException e) {\n 801                   if (loader.getLoadErrorHandler() == LoadErrorHandler.THROW) {\n 802                       // Use a different exception signature here\n 803                       throw new TikaConfigException(\n 804                               \"Unable to find a \" + getLoaderTagName() + \" class: \" + name, e);\n 805                   }\n 806                   // Report the problem\n 807                   loader.getLoadErrorHandler().handleLoadError(name, e);\n 808                   return null;\n 809               } catch (IllegalAccessException e) {\n 810                   throw new TikaException(\n 811                           \"Unable to access a \" + getLoaderTagName() + \" class: \" + name, e);\n 812               } catch (InvocationTargetException e) {\n 813                   throw new TikaException(\n 814                           \"Unable to create a \" + getLoaderTagName() + \" class: \" + name, e);\n 815               } catch (InstantiationException e) {\n 816                   throw new TikaException(\n 817                           \"Unable to instantiate a \" + getLoaderTagName() + \" class: \" + name, e);\n 818               } catch (NoSuchMethodException e) {\n 819                   throw new TikaException(\n 820                           \"Unable to find the right constructor for \" + getLoaderTagName() +\n 821                                   \" class: \" + name, e);\n 822               }\n 823           }\n 838           Map<String, Param> getParams(Element el) throws TikaException {\n 839               Map<String, Param> params = new HashMap<>();\n 840               for (Node child = el.getFirstChild(); child != null; child = child.getNextSibling()) {\n 841                   if (PARAMS_TAG_NAME.equals(child.getNodeName())) { //found the node\n 842                       if (child.hasChildNodes()) { //it has children\n 843                           NodeList childNodes = child.getChildNodes();\n 844                           for (int i = 0; i < childNodes.getLength(); i++) {\n 845                               Node item = childNodes.item(i);\n 846                               if (item.getNodeType() == Node.ELEMENT_NODE) {\n 847                                   Param<?> param = Param.load(item);\n 848                                   params.put(param.getName(), param);\n 849                               }\n 850                           }\n 851                       }\n 852                       break; //only the first one is used\n 853                   }\n 854               }\n 855               return params;\n 856           }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/Param.java:\n127       public static <T> Param<T> load(Node node) throws TikaConfigException {\n128   \n129           Node nameAttr = node.getAttributes().getNamedItem(\"name\");\n130           Node typeAttr = node.getAttributes().getNamedItem(\"type\");\n131           Node valueAttr = node.getAttributes().getNamedItem(\"value\");\n132           Node classAttr = node.getAttributes().getNamedItem(\"class\");\n133           Class clazz = null;\n134           if (classAttr != null) {\n135               try {\n136                   clazz = Class.forName(classAttr.getTextContent());\n137               } catch (ClassNotFoundException e) {\n138                   throw new TikaConfigException(\"can't find class: \" + classAttr.getTextContent(), e);\n139               }\n140           }\n141           Node value = node.getFirstChild();\n142           if (value instanceof NodeList && valueAttr != null) {\n143               throw new TikaConfigException(\"can't specify a value attr _and_ a node list\");\n144           }\n145           if (valueAttr != null && (value == null || value.getTextContent() == null)) {\n146               value = valueAttr;\n147           }\n148   \n149           Param<T> ret = new Param<>();\n150           ret.name = nameAttr.getTextContent();\n151           if (typeAttr != null) {\n152               String type = typeAttr.getTextContent();\n153               if (\"class\".equals(type)) {\n154                   if (classAttr == null) {\n155                       throw new TikaConfigException(\"must specify a class attribute if \" +\n156                               \"type=\\\"class\\\"\");\n157                   }\n158                   ret.setType(clazz);\n159               } else {\n160                   ret.setTypeString(typeAttr.getTextContent());\n161               }\n162           } else {\n163               ret.type = (Class<T>) wellKnownMap.get(ret.name);\n164               if (ret.type == null) {\n165                   ret.type = clazz;\n166               }\n167               if (ret.type == null) {\n168                   throw new TikaConfigException(\"Must specify a \\\"type\\\" in: \" + node.getLocalName());\n169               }\n170           }\n171   \n172           if (clazz != null) {\n173               loadObject(ret, node, clazz);\n174           } else if (List.class.isAssignableFrom(ret.type)) {\n175               loadList(ret, node);\n176           } else if (Map.class.isAssignableFrom(ret.type)) {\n177               loadMap(ret, node);\n178           } else {\n179               //allow the empty string\n180               String textContent = \"\";\n181               if (value != null) {\n182                   textContent = value.getTextContent();\n183               }\n184               ret.actualValue = getTypedValue(ret.type, textContent);\n185               ret.valueStrings.add(textContent);\n186           }\n187           return ret;\n188       }\n255       private static <T> void loadList(Param<T> ret, Node root) {\n256           Node child = root.getFirstChild();\n257           ret.actualValue = (T) new ArrayList<>();\n258           while (child != null) {\n259               if (child.getNodeType() == Node.ELEMENT_NODE) {\n260                   Class type = classFromType(child.getLocalName());\n261                   ((List) ret.actualValue).add(getTypedValue(type, child.getTextContent()));\n262                   ret.valueStrings.add(child.getTextContent());\n263               }\n264               child = child.getNextSibling();\n265           }\n266       }\n268       private static <T> Class<T> classFromType(String type) {\n269           if (reverseMap.containsKey(type)) {\n270               return (Class<T>) reverseMap.get(type);\n271           } else {\n272               try {\n273                   return (Class<T>) Class.forName(type);\n274               } catch (ClassNotFoundException e) {\n275                   throw new RuntimeException(e);\n276               }\n277           }\n278       }\n",
            "cost": 0.130045,
            "harness_id": "TikaOne",
            "sanitizer": "Remote Code Execution",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/Param.java:273:49",
            "status": "corpus",
            "valid_path": "NO",
            "id": 37
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n 667           @SuppressWarnings(\"unchecked\")\n 668           CT loadOverall(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 669                   throws TikaException, IOException {\n 670               List<T> loaded = new ArrayList<>();\n 671   \n 672               // Find the children of the parent tag, if any\n 673               for (Element le : getTopLevelElementChildren(element, getParentTagName(),\n 674                       getLoaderTagName())) {\n 675                   T loadedChild = loadOne(le, mimeTypes, loader);\n 676                   if (loadedChild != null) {\n 677                       loaded.add(loadedChild);\n 678                   }\n 679               }\n 680   \n 681               // Build the classes, and wrap as needed\n 682               if (loaded.isEmpty()) {\n 683                   // Nothing defined, create a Default\n 684                   return createDefault(mimeTypes, loader);\n 685               } else if (loaded.size() == 1) {\n 686                   T single = loaded.get(0);\n 687                   if (isComposite(single)) {\n 688                       // Single Composite defined, use that\n 689                       return (CT) single;\n 690                   }\n 691               } else if (!supportsComposite()) {\n 692                   // No composite support, just return the first one\n 693                   if (loaded.size() == 1) {\n 694                       return (CT) loaded.get(0);\n 695                   } else if (loaded.size() > 1) {\n 696                       throw new TikaConfigException(\n 697                               \"Composite not supported for \" + getParentTagName() +\n 698                                       \". Must specify only one child!\");\n 699                   } else {\n 700                       //throw exception if empty?\n 701                   }\n 702               }\n 703               // Wrap the defined parsers/detectors up in a Composite\n 704               return createComposite(loaded, mimeTypes, loader);\n 705           }\n 707           T loadOne(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 708                   throws TikaException, IOException {\n 709               String name = element.getAttribute(\"class\");\n 710               if (name == null) {\n 711                   throw new TikaConfigException(\"class attribute must not be null: \" + element);\n 712               }\n 713               String initProbHandler = element.getAttribute(\"initializableProblemHandler\");\n 714               InitializableProblemHandler initializableProblemHandler;\n 715               if (initProbHandler == null || initProbHandler.length() == 0) {\n 716                   initializableProblemHandler = loader.getInitializableProblemHandler();\n 717               } else {\n 718                   initializableProblemHandler = getInitializableProblemHandler(initProbHandler);\n 719               }\n 720   \n 721               T loaded = null;\n 722   \n 723               try {\n 724                   Class<? extends T> loadedClass = loader.getServiceClass(getLoaderClass(), name);\n 725   \n 726                   // Do pre-load checks and short-circuits\n 727                   //TODO : allow duplicate instances with different configurations\n 728                   loaded = preLoadOne(loadedClass, name, mimeTypes);\n 729                   if (loaded != null) {\n 730                       return loaded;\n 731                   }\n 732   \n 733                   // Get any parameters / settings for the parser\n 734                   Map<String, Param> params = null;\n 735                   try {\n 736                       params = getParams(element);\n 737                   } catch (Exception e) {\n 738                       throw new TikaConfigException(e.getMessage(), e);\n 739                   }\n 740   \n 741                   // Is this a composite or decorated class? If so, support recursion\n 742                   if (isComposite(loadedClass)) {\n 743                       // Get the child objects for it\n 744                       List<T> children = new ArrayList<>();\n 745                       NodeList childNodes = element.getElementsByTagName(getLoaderTagName());\n 746                       if (childNodes.getLength() > 0) {\n 747                           for (int i = 0; i < childNodes.getLength(); i++) {\n 748                               T loadedChild =\n 749                                       loadOne((Element) childNodes.item(i), mimeTypes, loader);\n 750                               if (loadedChild != null) {\n 751                                   children.add(loadedChild);\n 752                               }\n 753                           }\n 754                       }\n 755   \n 756                       // Get the list of children to exclude\n 757                       Set<Class<? extends T>> excludeChildren = new HashSet<>();\n 758                       NodeList excludeChildNodes =\n 759                               element.getElementsByTagName(getLoaderTagName() + \"-exclude\");\n 760                       if (excludeChildNodes.getLength() > 0) {\n 761                           for (int i = 0; i < excludeChildNodes.getLength(); i++) {\n 762                               Element excl = (Element) excludeChildNodes.item(i);\n 763                               String exclName = excl.getAttribute(\"class\");\n 764                               try {\n 765                                   excludeChildren\n 766                                           .add(loader.getServiceClass(getLoaderClass(), exclName));\n 767                               } catch (ClassNotFoundException e) {\n 768                                   //TIKA-3268 -- This should stop the world.\n 769                                   throw new TikaConfigException(\n 770                                           \"Class not found in -exclude list: \" + exclName);\n 771                               }\n 772                           }\n 773                       }\n 774   \n 775                       // Create the Composite\n 776                       loaded = createComposite(loadedClass, children, excludeChildren, params,\n 777                               mimeTypes, loader);\n 778   \n 779                       // Default constructor fallback\n 780                       if (loaded == null) {\n 781                           loaded = newInstance(loadedClass);\n 782                       }\n 783                   } else {\n 784                       // Regular class, create as-is\n 785                       loaded = newInstance(loadedClass);\n 786                       // TODO Support arguments, needed for Translators etc\n 787                       // See the thread \"Configuring parsers and translators\" for details\n 788                   }\n 789   \n 790                   //Assigning the params to bean fields/setters\n 791                   AnnotationUtils.assignFieldParams(loaded, params);\n 792                   if (loaded instanceof Initializable) {\n 793                       ((Initializable) loaded).initialize(params);\n 794                       ((Initializable) loaded).checkInitialization(initializableProblemHandler);\n 795                   }\n 796                   // Have any decoration performed, eg explicit mimetypes\n 797                   loaded = decorate(loaded, element);\n 798                   // All done with setup\n 799                   return loaded;\n 800               } catch (ClassNotFoundException e) {\n 801                   if (loader.getLoadErrorHandler() == LoadErrorHandler.THROW) {\n 802                       // Use a different exception signature here\n 803                       throw new TikaConfigException(\n 804                               \"Unable to find a \" + getLoaderTagName() + \" class: \" + name, e);\n 805                   }\n 806                   // Report the problem\n 807                   loader.getLoadErrorHandler().handleLoadError(name, e);\n 808                   return null;\n 809               } catch (IllegalAccessException e) {\n 810                   throw new TikaException(\n 811                           \"Unable to access a \" + getLoaderTagName() + \" class: \" + name, e);\n 812               } catch (InvocationTargetException e) {\n 813                   throw new TikaException(\n 814                           \"Unable to create a \" + getLoaderTagName() + \" class: \" + name, e);\n 815               } catch (InstantiationException e) {\n 816                   throw new TikaException(\n 817                           \"Unable to instantiate a \" + getLoaderTagName() + \" class: \" + name, e);\n 818               } catch (NoSuchMethodException e) {\n 819                   throw new TikaException(\n 820                           \"Unable to find the right constructor for \" + getLoaderTagName() +\n 821                                   \" class: \" + name, e);\n 822               }\n 823           }\n\nsrc/tika/tika-pipes/tika-pipes-reporters/tika-pipes-reporter-jdbc/src/main/java/org/apache/tika/pipes/reporters/jdbc/JDBCPipesReporter.java:\n 85       @Override\n 86       public void initialize(Map<String, Param> params) throws TikaConfigException {\n 87           super.initialize(params);\n 88           if (StringUtils.isBlank(connectionString)) {\n 89               throw new TikaConfigException(\"Must specify a connectionString\");\n 90           }\n 91           if (reportVariables == null) {\n 92               reportVariables = new ArrayList<>();\n 93               reportVariables.add(\"id\");\n 94               reportVariables.add(\"status\");\n 95               reportVariables.add(\"timestamp\");\n 96           }\n 97           if (reportSql == null) {\n 98               reportSql = \"insert into \" + getTableName() + \" (id, status, timestamp) values (?,?,?)\";\n 99           }\n100           ReportWorker reportWorker = new ReportWorker(connectionString, postConnectionString,\n101                   queue, cacheSize, reportWithinMs);\n102           reportWorker.init();\n103           reportWorkerFuture = CompletableFuture.runAsync(reportWorker);\n104       }\n320           public void init() throws TikaConfigException {\n321               try {\n322                   createConnection();\n323                   if (isCreateTable()) {\n324                       createTable();\n325                   }\n326                   //table must exist for this to work\n327                   createPreparedStatement();\n328               } catch (SQLException e) {\n329                   throw new TikaConfigException(\"Problem creating connection, etc\", e);\n330               }\n331           }\n476           private void createConnection() throws SQLException {\n477               connection = DriverManager.getConnection(connectionString);\n478               if (postConnectionString.isPresent()) {\n479                   try (Statement st = connection.createStatement()) {\n480                       st.execute(postConnectionString.get());\n481                   }\n482               }\n483           }\n",
            "cost": 0.123425,
            "harness_id": "TikaOne",
            "sanitizer": "SQL Injection",
            "sink": "src/tika/tika-pipes/tika-pipes-reporters/tika-pipes-reporter-jdbc/src/main/java/org/apache/tika/pipes/reporters/jdbc/JDBCPipesReporter.java:480:32",
            "status": "corpus",
            "valid_path": "NO",
            "id": 38
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n 667           @SuppressWarnings(\"unchecked\")\n 668           CT loadOverall(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 669                   throws TikaException, IOException {\n 670               List<T> loaded = new ArrayList<>();\n 671   \n 672               // Find the children of the parent tag, if any\n 673               for (Element le : getTopLevelElementChildren(element, getParentTagName(),\n 674                       getLoaderTagName())) {\n 675                   T loadedChild = loadOne(le, mimeTypes, loader);\n 676                   if (loadedChild != null) {\n 677                       loaded.add(loadedChild);\n 678                   }\n 679               }\n 680   \n 681               // Build the classes, and wrap as needed\n 682               if (loaded.isEmpty()) {\n 683                   // Nothing defined, create a Default\n 684                   return createDefault(mimeTypes, loader);\n 685               } else if (loaded.size() == 1) {\n 686                   T single = loaded.get(0);\n 687                   if (isComposite(single)) {\n 688                       // Single Composite defined, use that\n 689                       return (CT) single;\n 690                   }\n 691               } else if (!supportsComposite()) {\n 692                   // No composite support, just return the first one\n 693                   if (loaded.size() == 1) {\n 694                       return (CT) loaded.get(0);\n 695                   } else if (loaded.size() > 1) {\n 696                       throw new TikaConfigException(\n 697                               \"Composite not supported for \" + getParentTagName() +\n 698                                       \". Must specify only one child!\");\n 699                   } else {\n 700                       //throw exception if empty?\n 701                   }\n 702               }\n 703               // Wrap the defined parsers/detectors up in a Composite\n 704               return createComposite(loaded, mimeTypes, loader);\n 705           }\n 707           T loadOne(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 708                   throws TikaException, IOException {\n 709               String name = element.getAttribute(\"class\");\n 710               if (name == null) {\n 711                   throw new TikaConfigException(\"class attribute must not be null: \" + element);\n 712               }\n 713               String initProbHandler = element.getAttribute(\"initializableProblemHandler\");\n 714               InitializableProblemHandler initializableProblemHandler;\n 715               if (initProbHandler == null || initProbHandler.length() == 0) {\n 716                   initializableProblemHandler = loader.getInitializableProblemHandler();\n 717               } else {\n 718                   initializableProblemHandler = getInitializableProblemHandler(initProbHandler);\n 719               }\n 720   \n 721               T loaded = null;\n 722   \n 723               try {\n 724                   Class<? extends T> loadedClass = loader.getServiceClass(getLoaderClass(), name);\n 725   \n 726                   // Do pre-load checks and short-circuits\n 727                   //TODO : allow duplicate instances with different configurations\n 728                   loaded = preLoadOne(loadedClass, name, mimeTypes);\n 729                   if (loaded != null) {\n 730                       return loaded;\n 731                   }\n 732   \n 733                   // Get any parameters / settings for the parser\n 734                   Map<String, Param> params = null;\n 735                   try {\n 736                       params = getParams(element);\n 737                   } catch (Exception e) {\n 738                       throw new TikaConfigException(e.getMessage(), e);\n 739                   }\n 740   \n 741                   // Is this a composite or decorated class? If so, support recursion\n 742                   if (isComposite(loadedClass)) {\n 743                       // Get the child objects for it\n 744                       List<T> children = new ArrayList<>();\n 745                       NodeList childNodes = element.getElementsByTagName(getLoaderTagName());\n 746                       if (childNodes.getLength() > 0) {\n 747                           for (int i = 0; i < childNodes.getLength(); i++) {\n 748                               T loadedChild =\n 749                                       loadOne((Element) childNodes.item(i), mimeTypes, loader);\n 750                               if (loadedChild != null) {\n 751                                   children.add(loadedChild);\n 752                               }\n 753                           }\n 754                       }\n 755   \n 756                       // Get the list of children to exclude\n 757                       Set<Class<? extends T>> excludeChildren = new HashSet<>();\n 758                       NodeList excludeChildNodes =\n 759                               element.getElementsByTagName(getLoaderTagName() + \"-exclude\");\n 760                       if (excludeChildNodes.getLength() > 0) {\n 761                           for (int i = 0; i < excludeChildNodes.getLength(); i++) {\n 762                               Element excl = (Element) excludeChildNodes.item(i);\n 763                               String exclName = excl.getAttribute(\"class\");\n 764                               try {\n 765                                   excludeChildren\n 766                                           .add(loader.getServiceClass(getLoaderClass(), exclName));\n 767                               } catch (ClassNotFoundException e) {\n 768                                   //TIKA-3268 -- This should stop the world.\n 769                                   throw new TikaConfigException(\n 770                                           \"Class not found in -exclude list: \" + exclName);\n 771                               }\n 772                           }\n 773                       }\n 774   \n 775                       // Create the Composite\n 776                       loaded = createComposite(loadedClass, children, excludeChildren, params,\n 777                               mimeTypes, loader);\n 778   \n 779                       // Default constructor fallback\n 780                       if (loaded == null) {\n 781                           loaded = newInstance(loadedClass);\n 782                       }\n 783                   } else {\n 784                       // Regular class, create as-is\n 785                       loaded = newInstance(loadedClass);\n 786                       // TODO Support arguments, needed for Translators etc\n 787                       // See the thread \"Configuring parsers and translators\" for details\n 788                   }\n 789   \n 790                   //Assigning the params to bean fields/setters\n 791                   AnnotationUtils.assignFieldParams(loaded, params);\n 792                   if (loaded instanceof Initializable) {\n 793                       ((Initializable) loaded).initialize(params);\n 794                       ((Initializable) loaded).checkInitialization(initializableProblemHandler);\n 795                   }\n 796                   // Have any decoration performed, eg explicit mimetypes\n 797                   loaded = decorate(loaded, element);\n 798                   // All done with setup\n 799                   return loaded;\n 800               } catch (ClassNotFoundException e) {\n 801                   if (loader.getLoadErrorHandler() == LoadErrorHandler.THROW) {\n 802                       // Use a different exception signature here\n 803                       throw new TikaConfigException(\n 804                               \"Unable to find a \" + getLoaderTagName() + \" class: \" + name, e);\n 805                   }\n 806                   // Report the problem\n 807                   loader.getLoadErrorHandler().handleLoadError(name, e);\n 808                   return null;\n 809               } catch (IllegalAccessException e) {\n 810                   throw new TikaException(\n 811                           \"Unable to access a \" + getLoaderTagName() + \" class: \" + name, e);\n 812               } catch (InvocationTargetException e) {\n 813                   throw new TikaException(\n 814                           \"Unable to create a \" + getLoaderTagName() + \" class: \" + name, e);\n 815               } catch (InstantiationException e) {\n 816                   throw new TikaException(\n 817                           \"Unable to instantiate a \" + getLoaderTagName() + \" class: \" + name, e);\n 818               } catch (NoSuchMethodException e) {\n 819                   throw new TikaException(\n 820                           \"Unable to find the right constructor for \" + getLoaderTagName() +\n 821                                   \" class: \" + name, e);\n 822               }\n 823           }\n\nsrc/tika/tika-pipes/tika-pipes-reporters/tika-pipes-reporter-jdbc/src/main/java/org/apache/tika/pipes/reporters/jdbc/JDBCPipesReporter.java:\n 85       @Override\n 86       public void initialize(Map<String, Param> params) throws TikaConfigException {\n 87           super.initialize(params);\n 88           if (StringUtils.isBlank(connectionString)) {\n 89               throw new TikaConfigException(\"Must specify a connectionString\");\n 90           }\n 91           if (reportVariables == null) {\n 92               reportVariables = new ArrayList<>();\n 93               reportVariables.add(\"id\");\n 94               reportVariables.add(\"status\");\n 95               reportVariables.add(\"timestamp\");\n 96           }\n 97           if (reportSql == null) {\n 98               reportSql = \"insert into \" + getTableName() + \" (id, status, timestamp) values (?,?,?)\";\n 99           }\n100           ReportWorker reportWorker = new ReportWorker(connectionString, postConnectionString,\n101                   queue, cacheSize, reportWithinMs);\n102           reportWorker.init();\n103           reportWorkerFuture = CompletableFuture.runAsync(reportWorker);\n104       }\n320           public void init() throws TikaConfigException {\n321               try {\n322                   createConnection();\n323                   if (isCreateTable()) {\n324                       createTable();\n325                   }\n326                   //table must exist for this to work\n327                   createPreparedStatement();\n328               } catch (SQLException e) {\n329                   throw new TikaConfigException(\"Problem creating connection, etc\", e);\n330               }\n331           }\n428           private void createTable() throws SQLException {\n429               try (Statement st = connection.createStatement()) {\n430                   String sql = \"drop table if exists \" + getTableName();\n431                   st.execute(sql);\n432                   sql = \"create table \" + getTableName() + \" (id varchar(1024), status varchar(32), \" +\n433                           \"timestamp timestamp with time zone)\";\n434                   st.execute(sql);\n435               }\n436           }\n",
            "cost": 0.121355,
            "harness_id": "TikaOne",
            "sanitizer": "SQL Injection",
            "sink": "src/tika/tika-pipes/tika-pipes-reporters/tika-pipes-reporter-jdbc/src/main/java/org/apache/tika/pipes/reporters/jdbc/JDBCPipesReporter.java:431:28",
            "status": "corpus",
            "valid_path": "NO",
            "id": 39
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n 667           @SuppressWarnings(\"unchecked\")\n 668           CT loadOverall(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 669                   throws TikaException, IOException {\n 670               List<T> loaded = new ArrayList<>();\n 671   \n 672               // Find the children of the parent tag, if any\n 673               for (Element le : getTopLevelElementChildren(element, getParentTagName(),\n 674                       getLoaderTagName())) {\n 675                   T loadedChild = loadOne(le, mimeTypes, loader);\n 676                   if (loadedChild != null) {\n 677                       loaded.add(loadedChild);\n 678                   }\n 679               }\n 680   \n 681               // Build the classes, and wrap as needed\n 682               if (loaded.isEmpty()) {\n 683                   // Nothing defined, create a Default\n 684                   return createDefault(mimeTypes, loader);\n 685               } else if (loaded.size() == 1) {\n 686                   T single = loaded.get(0);\n 687                   if (isComposite(single)) {\n 688                       // Single Composite defined, use that\n 689                       return (CT) single;\n 690                   }\n 691               } else if (!supportsComposite()) {\n 692                   // No composite support, just return the first one\n 693                   if (loaded.size() == 1) {\n 694                       return (CT) loaded.get(0);\n 695                   } else if (loaded.size() > 1) {\n 696                       throw new TikaConfigException(\n 697                               \"Composite not supported for \" + getParentTagName() +\n 698                                       \". Must specify only one child!\");\n 699                   } else {\n 700                       //throw exception if empty?\n 701                   }\n 702               }\n 703               // Wrap the defined parsers/detectors up in a Composite\n 704               return createComposite(loaded, mimeTypes, loader);\n 705           }\n 707           T loadOne(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 708                   throws TikaException, IOException {\n 709               String name = element.getAttribute(\"class\");\n 710               if (name == null) {\n 711                   throw new TikaConfigException(\"class attribute must not be null: \" + element);\n 712               }\n 713               String initProbHandler = element.getAttribute(\"initializableProblemHandler\");\n 714               InitializableProblemHandler initializableProblemHandler;\n 715               if (initProbHandler == null || initProbHandler.length() == 0) {\n 716                   initializableProblemHandler = loader.getInitializableProblemHandler();\n 717               } else {\n 718                   initializableProblemHandler = getInitializableProblemHandler(initProbHandler);\n 719               }\n 720   \n 721               T loaded = null;\n 722   \n 723               try {\n 724                   Class<? extends T> loadedClass = loader.getServiceClass(getLoaderClass(), name);\n 725   \n 726                   // Do pre-load checks and short-circuits\n 727                   //TODO : allow duplicate instances with different configurations\n 728                   loaded = preLoadOne(loadedClass, name, mimeTypes);\n 729                   if (loaded != null) {\n 730                       return loaded;\n 731                   }\n 732   \n 733                   // Get any parameters / settings for the parser\n 734                   Map<String, Param> params = null;\n 735                   try {\n 736                       params = getParams(element);\n 737                   } catch (Exception e) {\n 738                       throw new TikaConfigException(e.getMessage(), e);\n 739                   }\n 740   \n 741                   // Is this a composite or decorated class? If so, support recursion\n 742                   if (isComposite(loadedClass)) {\n 743                       // Get the child objects for it\n 744                       List<T> children = new ArrayList<>();\n 745                       NodeList childNodes = element.getElementsByTagName(getLoaderTagName());\n 746                       if (childNodes.getLength() > 0) {\n 747                           for (int i = 0; i < childNodes.getLength(); i++) {\n 748                               T loadedChild =\n 749                                       loadOne((Element) childNodes.item(i), mimeTypes, loader);\n 750                               if (loadedChild != null) {\n 751                                   children.add(loadedChild);\n 752                               }\n 753                           }\n 754                       }\n 755   \n 756                       // Get the list of children to exclude\n 757                       Set<Class<? extends T>> excludeChildren = new HashSet<>();\n 758                       NodeList excludeChildNodes =\n 759                               element.getElementsByTagName(getLoaderTagName() + \"-exclude\");\n 760                       if (excludeChildNodes.getLength() > 0) {\n 761                           for (int i = 0; i < excludeChildNodes.getLength(); i++) {\n 762                               Element excl = (Element) excludeChildNodes.item(i);\n 763                               String exclName = excl.getAttribute(\"class\");\n 764                               try {\n 765                                   excludeChildren\n 766                                           .add(loader.getServiceClass(getLoaderClass(), exclName));\n 767                               } catch (ClassNotFoundException e) {\n 768                                   //TIKA-3268 -- This should stop the world.\n 769                                   throw new TikaConfigException(\n 770                                           \"Class not found in -exclude list: \" + exclName);\n 771                               }\n 772                           }\n 773                       }\n 774   \n 775                       // Create the Composite\n 776                       loaded = createComposite(loadedClass, children, excludeChildren, params,\n 777                               mimeTypes, loader);\n 778   \n 779                       // Default constructor fallback\n 780                       if (loaded == null) {\n 781                           loaded = newInstance(loadedClass);\n 782                       }\n 783                   } else {\n 784                       // Regular class, create as-is\n 785                       loaded = newInstance(loadedClass);\n 786                       // TODO Support arguments, needed for Translators etc\n 787                       // See the thread \"Configuring parsers and translators\" for details\n 788                   }\n 789   \n 790                   //Assigning the params to bean fields/setters\n 791                   AnnotationUtils.assignFieldParams(loaded, params);\n 792                   if (loaded instanceof Initializable) {\n 793                       ((Initializable) loaded).initialize(params);\n 794                       ((Initializable) loaded).checkInitialization(initializableProblemHandler);\n 795                   }\n 796                   // Have any decoration performed, eg explicit mimetypes\n 797                   loaded = decorate(loaded, element);\n 798                   // All done with setup\n 799                   return loaded;\n 800               } catch (ClassNotFoundException e) {\n 801                   if (loader.getLoadErrorHandler() == LoadErrorHandler.THROW) {\n 802                       // Use a different exception signature here\n 803                       throw new TikaConfigException(\n 804                               \"Unable to find a \" + getLoaderTagName() + \" class: \" + name, e);\n 805                   }\n 806                   // Report the problem\n 807                   loader.getLoadErrorHandler().handleLoadError(name, e);\n 808                   return null;\n 809               } catch (IllegalAccessException e) {\n 810                   throw new TikaException(\n 811                           \"Unable to access a \" + getLoaderTagName() + \" class: \" + name, e);\n 812               } catch (InvocationTargetException e) {\n 813                   throw new TikaException(\n 814                           \"Unable to create a \" + getLoaderTagName() + \" class: \" + name, e);\n 815               } catch (InstantiationException e) {\n 816                   throw new TikaException(\n 817                           \"Unable to instantiate a \" + getLoaderTagName() + \" class: \" + name, e);\n 818               } catch (NoSuchMethodException e) {\n 819                   throw new TikaException(\n 820                           \"Unable to find the right constructor for \" + getLoaderTagName() +\n 821                                   \" class: \" + name, e);\n 822               }\n 823           }\n\nsrc/tika/tika-pipes/tika-pipes-reporters/tika-pipes-reporter-jdbc/src/main/java/org/apache/tika/pipes/reporters/jdbc/JDBCPipesReporter.java:\n 85       @Override\n 86       public void initialize(Map<String, Param> params) throws TikaConfigException {\n 87           super.initialize(params);\n 88           if (StringUtils.isBlank(connectionString)) {\n 89               throw new TikaConfigException(\"Must specify a connectionString\");\n 90           }\n 91           if (reportVariables == null) {\n 92               reportVariables = new ArrayList<>();\n 93               reportVariables.add(\"id\");\n 94               reportVariables.add(\"status\");\n 95               reportVariables.add(\"timestamp\");\n 96           }\n 97           if (reportSql == null) {\n 98               reportSql = \"insert into \" + getTableName() + \" (id, status, timestamp) values (?,?,?)\";\n 99           }\n100           ReportWorker reportWorker = new ReportWorker(connectionString, postConnectionString,\n101                   queue, cacheSize, reportWithinMs);\n102           reportWorker.init();\n103           reportWorkerFuture = CompletableFuture.runAsync(reportWorker);\n104       }\n320           public void init() throws TikaConfigException {\n321               try {\n322                   createConnection();\n323                   if (isCreateTable()) {\n324                       createTable();\n325                   }\n326                   //table must exist for this to work\n327                   createPreparedStatement();\n328               } catch (SQLException e) {\n329                   throw new TikaConfigException(\"Problem creating connection, etc\", e);\n330               }\n331           }\n428           private void createTable() throws SQLException {\n429               try (Statement st = connection.createStatement()) {\n430                   String sql = \"drop table if exists \" + getTableName();\n431                   st.execute(sql);\n432                   sql = \"create table \" + getTableName() + \" (id varchar(1024), status varchar(32), \" +\n433                           \"timestamp timestamp with time zone)\";\n434                   st.execute(sql);\n435               }\n436           }\n",
            "cost": 0.119455,
            "harness_id": "TikaOne",
            "sanitizer": "SQL Injection",
            "sink": "src/tika/tika-pipes/tika-pipes-reporters/tika-pipes-reporter-jdbc/src/main/java/org/apache/tika/pipes/reporters/jdbc/JDBCPipesReporter.java:434:28",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 40
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n1040           public void process(InputStream input, OutputStream output, Metadata metadata) throws Exception {\n1041               Parser p = parser;\n1042               if (fork) {\n1043                   p = new ForkParser(TikaCLI.class.getClassLoader(), p);\n1044               }\n1045               ContentHandler handler = getContentHandler(output, metadata);\n1046               try {\n1047                   p.parse(input, handler, metadata, context);\n1048                   // fix for TIKA-596: if a parser doesn't generate\n1049                   // XHTML output, the lack of an output document prevents\n1050                   // metadata from being output: this fixes that\n1051                   if (handler instanceof NoDocumentMetHandler) {\n1052                       NoDocumentMetHandler metHandler = (NoDocumentMetHandler) handler;\n1053                       if (!metHandler.metOutput()) {\n1054                           metHandler.endDocument();\n1055                       }\n1056                   }\n1057               } finally {\n1058                   if (fork) {\n1059                       ((ForkParser) p).close();\n1060                   }\n1061               }\n1062           }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-jdbc-commons/src/main/java/org/apache/tika/parser/jdbc/AbstractDBParser.java:\n 54       @Override\n 55       public void parse(InputStream stream, ContentHandler handler, Metadata metadata,\n 56                         ParseContext context) throws IOException, SAXException, TikaException {\n 57           connection = getConnection(stream, metadata, context);\n 58           XHTMLContentHandler xHandler = null;\n 59           List<String> tableNames = null;\n 60           EmbeddedDocumentUtil embeddedDocumentUtil = new EmbeddedDocumentUtil(context);\n 61           try {\n 62               tableNames = getTableNames(connection, metadata, context);\n 63           } catch (SQLException e) {\n 64               try {\n 65                   close();\n 66               } catch (SQLException sqlE) {\n 67                   //swallow\n 68               }\n 69               if (e.getClass().toString().contains(\"SQLiteException\") && e.getMessage() != null &&\n 70                       (e.getMessage().contains(\"[SQLITE_ERROR]\") ||\n 71                               e.getMessage().contains(\"[SQLITE_CORRUPT]\"))) {\n 72                   throw new CorruptedFileException(\"Corrupt SQLITE\", e);\n 73               }\n 74   \n 75               throw new IOException(e);\n 76           }\n 77           for (String tableName : tableNames) {\n 78               //add table names to parent metadata\n 79               metadata.add(Database.TABLE_NAME, tableName);\n 80           }\n 81   \n 82           extractMetadata(connection, metadata);\n 83   \n 84           xHandler = new XHTMLContentHandler(handler, metadata);\n 85           xHandler.startDocument();\n 86   \n 87           try {\n 88               for (String tableName : tableNames) {\n 89                   JDBCTableReader tableReader =\n 90                           getTableReader(connection, tableName, embeddedDocumentUtil);\n 91                   xHandler.startElement(\"table\", \"name\", tableReader.getTableName());\n 92                   xHandler.startElement(\"thead\");\n 93                   xHandler.startElement(\"tr\");\n 94                   for (String header : tableReader.getHeaders()) {\n 95                       xHandler.startElement(\"th\");\n 96                       xHandler.characters(header);\n 97                       xHandler.endElement(\"th\");\n 98                   }\n 99                   xHandler.endElement(\"tr\");\n100                   xHandler.endElement(\"thead\");\n101                   xHandler.startElement(\"tbody\");\n102                   while (tableReader.nextRow(xHandler, context)) {\n103                       //no-op\n104                   }\n105                   xHandler.endElement(\"tbody\");\n106                   xHandler.endElement(\"table\");\n107               }\n108           } finally {\n109               try {\n110                   close();\n111               } catch (IOException | SQLException e) {\n112                   //swallow\n113               }\n114               if (xHandler != null) {\n115                   xHandler.endDocument();\n116               }\n117           }\n118       }\n\nsrc/tika/tika-parsers/tika-parsers-extended/tika-parser-sqlite3-module/src/main/java/org/apache/tika/parser/sqlite3/SQLite3DBParser.java:\n128       @Override\n129       protected List<String> getTableNames(Connection connection, Metadata metadata,\n130                                            ParseContext context) throws SQLException {\n131           List<String> tableNames = new LinkedList<>();\n132   \n133           try (Statement st = connection.createStatement()) {\n134               String sql = \"SELECT name FROM sqlite_master WHERE type='table'\";\n135               try (ResultSet rs = st.executeQuery(sql)) {\n136                   while (rs.next()) {\n137                       tableNames.add(rs.getString(1));\n138                   }\n139               }\n140           }\n141           return tableNames;\n142       }\n",
            "cost": 0.08495,
            "harness_id": "TikaOne",
            "sanitizer": "SQL Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-extended/tika-parser-sqlite3-module/src/main/java/org/apache/tika/parser/sqlite3/SQLite3DBParser.java:135:49",
            "status": "corpus",
            "valid_path": "NO",
            "id": 41
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n 667           @SuppressWarnings(\"unchecked\")\n 668           CT loadOverall(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 669                   throws TikaException, IOException {\n 670               List<T> loaded = new ArrayList<>();\n 671   \n 672               // Find the children of the parent tag, if any\n 673               for (Element le : getTopLevelElementChildren(element, getParentTagName(),\n 674                       getLoaderTagName())) {\n 675                   T loadedChild = loadOne(le, mimeTypes, loader);\n 676                   if (loadedChild != null) {\n 677                       loaded.add(loadedChild);\n 678                   }\n 679               }\n 680   \n 681               // Build the classes, and wrap as needed\n 682               if (loaded.isEmpty()) {\n 683                   // Nothing defined, create a Default\n 684                   return createDefault(mimeTypes, loader);\n 685               } else if (loaded.size() == 1) {\n 686                   T single = loaded.get(0);\n 687                   if (isComposite(single)) {\n 688                       // Single Composite defined, use that\n 689                       return (CT) single;\n 690                   }\n 691               } else if (!supportsComposite()) {\n 692                   // No composite support, just return the first one\n 693                   if (loaded.size() == 1) {\n 694                       return (CT) loaded.get(0);\n 695                   } else if (loaded.size() > 1) {\n 696                       throw new TikaConfigException(\n 697                               \"Composite not supported for \" + getParentTagName() +\n 698                                       \". Must specify only one child!\");\n 699                   } else {\n 700                       //throw exception if empty?\n 701                   }\n 702               }\n 703               // Wrap the defined parsers/detectors up in a Composite\n 704               return createComposite(loaded, mimeTypes, loader);\n 705           }\n 707           T loadOne(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 708                   throws TikaException, IOException {\n 709               String name = element.getAttribute(\"class\");\n 710               if (name == null) {\n 711                   throw new TikaConfigException(\"class attribute must not be null: \" + element);\n 712               }\n 713               String initProbHandler = element.getAttribute(\"initializableProblemHandler\");\n 714               InitializableProblemHandler initializableProblemHandler;\n 715               if (initProbHandler == null || initProbHandler.length() == 0) {\n 716                   initializableProblemHandler = loader.getInitializableProblemHandler();\n 717               } else {\n 718                   initializableProblemHandler = getInitializableProblemHandler(initProbHandler);\n 719               }\n 720   \n 721               T loaded = null;\n 722   \n 723               try {\n 724                   Class<? extends T> loadedClass = loader.getServiceClass(getLoaderClass(), name);\n 725   \n 726                   // Do pre-load checks and short-circuits\n 727                   //TODO : allow duplicate instances with different configurations\n 728                   loaded = preLoadOne(loadedClass, name, mimeTypes);\n 729                   if (loaded != null) {\n 730                       return loaded;\n 731                   }\n 732   \n 733                   // Get any parameters / settings for the parser\n 734                   Map<String, Param> params = null;\n 735                   try {\n 736                       params = getParams(element);\n 737                   } catch (Exception e) {\n 738                       throw new TikaConfigException(e.getMessage(), e);\n 739                   }\n 740   \n 741                   // Is this a composite or decorated class? If so, support recursion\n 742                   if (isComposite(loadedClass)) {\n 743                       // Get the child objects for it\n 744                       List<T> children = new ArrayList<>();\n 745                       NodeList childNodes = element.getElementsByTagName(getLoaderTagName());\n 746                       if (childNodes.getLength() > 0) {\n 747                           for (int i = 0; i < childNodes.getLength(); i++) {\n 748                               T loadedChild =\n 749                                       loadOne((Element) childNodes.item(i), mimeTypes, loader);\n 750                               if (loadedChild != null) {\n 751                                   children.add(loadedChild);\n 752                               }\n 753                           }\n 754                       }\n 755   \n 756                       // Get the list of children to exclude\n 757                       Set<Class<? extends T>> excludeChildren = new HashSet<>();\n 758                       NodeList excludeChildNodes =\n 759                               element.getElementsByTagName(getLoaderTagName() + \"-exclude\");\n 760                       if (excludeChildNodes.getLength() > 0) {\n 761                           for (int i = 0; i < excludeChildNodes.getLength(); i++) {\n 762                               Element excl = (Element) excludeChildNodes.item(i);\n 763                               String exclName = excl.getAttribute(\"class\");\n 764                               try {\n 765                                   excludeChildren\n 766                                           .add(loader.getServiceClass(getLoaderClass(), exclName));\n 767                               } catch (ClassNotFoundException e) {\n 768                                   //TIKA-3268 -- This should stop the world.\n 769                                   throw new TikaConfigException(\n 770                                           \"Class not found in -exclude list: \" + exclName);\n 771                               }\n 772                           }\n 773                       }\n 774   \n 775                       // Create the Composite\n 776                       loaded = createComposite(loadedClass, children, excludeChildren, params,\n 777                               mimeTypes, loader);\n 778   \n 779                       // Default constructor fallback\n 780                       if (loaded == null) {\n 781                           loaded = newInstance(loadedClass);\n 782                       }\n 783                   } else {\n 784                       // Regular class, create as-is\n 785                       loaded = newInstance(loadedClass);\n 786                       // TODO Support arguments, needed for Translators etc\n 787                       // See the thread \"Configuring parsers and translators\" for details\n 788                   }\n 789   \n 790                   //Assigning the params to bean fields/setters\n 791                   AnnotationUtils.assignFieldParams(loaded, params);\n 792                   if (loaded instanceof Initializable) {\n 793                       ((Initializable) loaded).initialize(params);\n 794                       ((Initializable) loaded).checkInitialization(initializableProblemHandler);\n 795                   }\n 796                   // Have any decoration performed, eg explicit mimetypes\n 797                   loaded = decorate(loaded, element);\n 798                   // All done with setup\n 799                   return loaded;\n 800               } catch (ClassNotFoundException e) {\n 801                   if (loader.getLoadErrorHandler() == LoadErrorHandler.THROW) {\n 802                       // Use a different exception signature here\n 803                       throw new TikaConfigException(\n 804                               \"Unable to find a \" + getLoaderTagName() + \" class: \" + name, e);\n 805                   }\n 806                   // Report the problem\n 807                   loader.getLoadErrorHandler().handleLoadError(name, e);\n 808                   return null;\n 809               } catch (IllegalAccessException e) {\n 810                   throw new TikaException(\n 811                           \"Unable to access a \" + getLoaderTagName() + \" class: \" + name, e);\n 812               } catch (InvocationTargetException e) {\n 813                   throw new TikaException(\n 814                           \"Unable to create a \" + getLoaderTagName() + \" class: \" + name, e);\n 815               } catch (InstantiationException e) {\n 816                   throw new TikaException(\n 817                           \"Unable to instantiate a \" + getLoaderTagName() + \" class: \" + name, e);\n 818               } catch (NoSuchMethodException e) {\n 819                   throw new TikaException(\n 820                           \"Unable to find the right constructor for \" + getLoaderTagName() +\n 821                                   \" class: \" + name, e);\n 822               }\n 823           }\n\nsrc/tika/tika-pipes/tika-emitters/tika-emitter-jdbc/src/main/java/org/apache/tika/pipes/emitter/jdbc/JDBCEmitter.java:\n379       private void createConnection() throws SQLException {\n380           connection = DriverManager.getConnection(connectionString);\n381           connection.setAutoCommit(false);\n382           if (postConnectionString.isPresent()) {\n383               try (Statement st = connection.createStatement()) {\n384                   st.execute(postConnectionString.get());\n385               }\n386           }\n387       }\n535       @Override\n536       public void initialize(Map<String, Param> params) throws TikaConfigException {\n537           parseColTypes();\n538           setStringNormalizer();\n539           try {\n540               createConnection();\n541           } catch (SQLException e) {\n542               throw new TikaConfigException(\"couldn't open connection: \" + connectionString, e);\n543           }\n544           if (!StringUtils.isBlank(createTable)) {\n545               //synchronize table creation\n546               READ_WRITE_LOCK.writeLock().lock();\n547               try {\n548                   String tableCreationString = connectionString + \" \" + createTable;\n549                   if (!TABLES_CREATED.contains(tableCreationString)) {\n550                       try (Statement st = connection.createStatement()) {\n551                           st.execute(createTable);\n552                           if (!StringUtils.isBlank(alterTable)) {\n553                               st.execute(alterTable);\n554                           }\n555                           TABLES_CREATED.add(tableCreationString);\n556                       } catch (SQLException e) {\n557                           throw new TikaConfigException(\"can't create table\", e);\n558                       }\n559                   }\n560               } finally {\n561                   READ_WRITE_LOCK.writeLock().unlock();\n562               }\n563           }\n564           try {\n565               insertStatement = connection.prepareStatement(insert);\n566           } catch (SQLException e) {\n567               throw new TikaConfigException(\"can't create insert statement\", e);\n568           }\n569       }\n",
            "cost": 0.11868999999999999,
            "harness_id": "TikaOne",
            "sanitizer": "SQL Injection",
            "sink": "src/tika/tika-pipes/tika-emitters/tika-emitter-jdbc/src/main/java/org/apache/tika/pipes/emitter/jdbc/JDBCEmitter.java:384:28",
            "status": "corpus",
            "valid_path": "NO",
            "id": 42
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n1040           public void process(InputStream input, OutputStream output, Metadata metadata) throws Exception {\n1041               Parser p = parser;\n1042               if (fork) {\n1043                   p = new ForkParser(TikaCLI.class.getClassLoader(), p);\n1044               }\n1045               ContentHandler handler = getContentHandler(output, metadata);\n1046               try {\n1047                   p.parse(input, handler, metadata, context);\n1048                   // fix for TIKA-596: if a parser doesn't generate\n1049                   // XHTML output, the lack of an output document prevents\n1050                   // metadata from being output: this fixes that\n1051                   if (handler instanceof NoDocumentMetHandler) {\n1052                       NoDocumentMetHandler metHandler = (NoDocumentMetHandler) handler;\n1053                       if (!metHandler.metOutput()) {\n1054                           metHandler.endDocument();\n1055                       }\n1056                   }\n1057               } finally {\n1058                   if (fork) {\n1059                       ((ForkParser) p).close();\n1060                   }\n1061               }\n1062           }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-jdbc-commons/src/main/java/org/apache/tika/parser/jdbc/AbstractDBParser.java:\n 54       @Override\n 55       public void parse(InputStream stream, ContentHandler handler, Metadata metadata,\n 56                         ParseContext context) throws IOException, SAXException, TikaException {\n 57           connection = getConnection(stream, metadata, context);\n 58           XHTMLContentHandler xHandler = null;\n 59           List<String> tableNames = null;\n 60           EmbeddedDocumentUtil embeddedDocumentUtil = new EmbeddedDocumentUtil(context);\n 61           try {\n 62               tableNames = getTableNames(connection, metadata, context);\n 63           } catch (SQLException e) {\n 64               try {\n 65                   close();\n 66               } catch (SQLException sqlE) {\n 67                   //swallow\n 68               }\n 69               if (e.getClass().toString().contains(\"SQLiteException\") && e.getMessage() != null &&\n 70                       (e.getMessage().contains(\"[SQLITE_ERROR]\") ||\n 71                               e.getMessage().contains(\"[SQLITE_CORRUPT]\"))) {\n 72                   throw new CorruptedFileException(\"Corrupt SQLITE\", e);\n 73               }\n 74   \n 75               throw new IOException(e);\n 76           }\n 77           for (String tableName : tableNames) {\n 78               //add table names to parent metadata\n 79               metadata.add(Database.TABLE_NAME, tableName);\n 80           }\n 81   \n 82           extractMetadata(connection, metadata);\n 83   \n 84           xHandler = new XHTMLContentHandler(handler, metadata);\n 85           xHandler.startDocument();\n 86   \n 87           try {\n 88               for (String tableName : tableNames) {\n 89                   JDBCTableReader tableReader =\n 90                           getTableReader(connection, tableName, embeddedDocumentUtil);\n 91                   xHandler.startElement(\"table\", \"name\", tableReader.getTableName());\n 92                   xHandler.startElement(\"thead\");\n 93                   xHandler.startElement(\"tr\");\n 94                   for (String header : tableReader.getHeaders()) {\n 95                       xHandler.startElement(\"th\");\n 96                       xHandler.characters(header);\n 97                       xHandler.endElement(\"th\");\n 98                   }\n 99                   xHandler.endElement(\"tr\");\n100                   xHandler.endElement(\"thead\");\n101                   xHandler.startElement(\"tbody\");\n102                   while (tableReader.nextRow(xHandler, context)) {\n103                       //no-op\n104                   }\n105                   xHandler.endElement(\"tbody\");\n106                   xHandler.endElement(\"table\");\n107               }\n108           } finally {\n109               try {\n110                   close();\n111               } catch (IOException | SQLException e) {\n112                   //swallow\n113               }\n114               if (xHandler != null) {\n115                   xHandler.endDocument();\n116               }\n117           }\n118       }\n\nsrc/tika/tika-parsers/tika-parsers-extended/tika-parser-sqlite3-module/src/main/java/org/apache/tika/parser/sqlite3/SQLite3DBParser.java:\n156       @Override\n157       protected void extractMetadata(Connection connection, Metadata metadata) {\n158           //TODO -- figure out how to get the version of sqlite3 that last modified this file and\n159           // version-valid-for.\n160           // version-valid-for is at offset 92, last modified by app version isat offset 96 --\n161           // not clear how to get this info via sql\n162           //'file' extracts this info; we should to :\\\n163           //See: https://www.sqlite.org/fileformat.html\n164           for (Map.Entry<Property, String> e : METADATA_KEYS.entrySet()) {\n165               try (Statement st = connection.createStatement()) {\n166                   try (ResultSet rs = st.executeQuery(e.getValue())) {\n167                       if (rs.next()) {\n168                           int val = rs.getInt(1);\n169                           if (! rs.wasNull()) {\n170                               metadata.set(e.getKey(), Integer.toString(val, 16));\n171                           }\n172                       }\n173                   }\n174               } catch (SQLException ex) {\n175                   //swallow\n176               }\n177           }\n178       }\n",
            "cost": 0.087835,
            "harness_id": "TikaOne",
            "sanitizer": "SQL Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-extended/tika-parser-sqlite3-module/src/main/java/org/apache/tika/parser/sqlite3/SQLite3DBParser.java:166:53",
            "status": "corpus",
            "valid_path": "NO",
            "id": 43
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n 667           @SuppressWarnings(\"unchecked\")\n 668           CT loadOverall(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 669                   throws TikaException, IOException {\n 670               List<T> loaded = new ArrayList<>();\n 671   \n 672               // Find the children of the parent tag, if any\n 673               for (Element le : getTopLevelElementChildren(element, getParentTagName(),\n 674                       getLoaderTagName())) {\n 675                   T loadedChild = loadOne(le, mimeTypes, loader);\n 676                   if (loadedChild != null) {\n 677                       loaded.add(loadedChild);\n 678                   }\n 679               }\n 680   \n 681               // Build the classes, and wrap as needed\n 682               if (loaded.isEmpty()) {\n 683                   // Nothing defined, create a Default\n 684                   return createDefault(mimeTypes, loader);\n 685               } else if (loaded.size() == 1) {\n 686                   T single = loaded.get(0);\n 687                   if (isComposite(single)) {\n 688                       // Single Composite defined, use that\n 689                       return (CT) single;\n 690                   }\n 691               } else if (!supportsComposite()) {\n 692                   // No composite support, just return the first one\n 693                   if (loaded.size() == 1) {\n 694                       return (CT) loaded.get(0);\n 695                   } else if (loaded.size() > 1) {\n 696                       throw new TikaConfigException(\n 697                               \"Composite not supported for \" + getParentTagName() +\n 698                                       \". Must specify only one child!\");\n 699                   } else {\n 700                       //throw exception if empty?\n 701                   }\n 702               }\n 703               // Wrap the defined parsers/detectors up in a Composite\n 704               return createComposite(loaded, mimeTypes, loader);\n 705           }\n 707           T loadOne(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 708                   throws TikaException, IOException {\n 709               String name = element.getAttribute(\"class\");\n 710               if (name == null) {\n 711                   throw new TikaConfigException(\"class attribute must not be null: \" + element);\n 712               }\n 713               String initProbHandler = element.getAttribute(\"initializableProblemHandler\");\n 714               InitializableProblemHandler initializableProblemHandler;\n 715               if (initProbHandler == null || initProbHandler.length() == 0) {\n 716                   initializableProblemHandler = loader.getInitializableProblemHandler();\n 717               } else {\n 718                   initializableProblemHandler = getInitializableProblemHandler(initProbHandler);\n 719               }\n 720   \n 721               T loaded = null;\n 722   \n 723               try {\n 724                   Class<? extends T> loadedClass = loader.getServiceClass(getLoaderClass(), name);\n 725   \n 726                   // Do pre-load checks and short-circuits\n 727                   //TODO : allow duplicate instances with different configurations\n 728                   loaded = preLoadOne(loadedClass, name, mimeTypes);\n 729                   if (loaded != null) {\n 730                       return loaded;\n 731                   }\n 732   \n 733                   // Get any parameters / settings for the parser\n 734                   Map<String, Param> params = null;\n 735                   try {\n 736                       params = getParams(element);\n 737                   } catch (Exception e) {\n 738                       throw new TikaConfigException(e.getMessage(), e);\n 739                   }\n 740   \n 741                   // Is this a composite or decorated class? If so, support recursion\n 742                   if (isComposite(loadedClass)) {\n 743                       // Get the child objects for it\n 744                       List<T> children = new ArrayList<>();\n 745                       NodeList childNodes = element.getElementsByTagName(getLoaderTagName());\n 746                       if (childNodes.getLength() > 0) {\n 747                           for (int i = 0; i < childNodes.getLength(); i++) {\n 748                               T loadedChild =\n 749                                       loadOne((Element) childNodes.item(i), mimeTypes, loader);\n 750                               if (loadedChild != null) {\n 751                                   children.add(loadedChild);\n 752                               }\n 753                           }\n 754                       }\n 755   \n 756                       // Get the list of children to exclude\n 757                       Set<Class<? extends T>> excludeChildren = new HashSet<>();\n 758                       NodeList excludeChildNodes =\n 759                               element.getElementsByTagName(getLoaderTagName() + \"-exclude\");\n 760                       if (excludeChildNodes.getLength() > 0) {\n 761                           for (int i = 0; i < excludeChildNodes.getLength(); i++) {\n 762                               Element excl = (Element) excludeChildNodes.item(i);\n 763                               String exclName = excl.getAttribute(\"class\");\n 764                               try {\n 765                                   excludeChildren\n 766                                           .add(loader.getServiceClass(getLoaderClass(), exclName));\n 767                               } catch (ClassNotFoundException e) {\n 768                                   //TIKA-3268 -- This should stop the world.\n 769                                   throw new TikaConfigException(\n 770                                           \"Class not found in -exclude list: \" + exclName);\n 771                               }\n 772                           }\n 773                       }\n 774   \n 775                       // Create the Composite\n 776                       loaded = createComposite(loadedClass, children, excludeChildren, params,\n 777                               mimeTypes, loader);\n 778   \n 779                       // Default constructor fallback\n 780                       if (loaded == null) {\n 781                           loaded = newInstance(loadedClass);\n 782                       }\n 783                   } else {\n 784                       // Regular class, create as-is\n 785                       loaded = newInstance(loadedClass);\n 786                       // TODO Support arguments, needed for Translators etc\n 787                       // See the thread \"Configuring parsers and translators\" for details\n 788                   }\n 789   \n 790                   //Assigning the params to bean fields/setters\n 791                   AnnotationUtils.assignFieldParams(loaded, params);\n 792                   if (loaded instanceof Initializable) {\n 793                       ((Initializable) loaded).initialize(params);\n 794                       ((Initializable) loaded).checkInitialization(initializableProblemHandler);\n 795                   }\n 796                   // Have any decoration performed, eg explicit mimetypes\n 797                   loaded = decorate(loaded, element);\n 798                   // All done with setup\n 799                   return loaded;\n 800               } catch (ClassNotFoundException e) {\n 801                   if (loader.getLoadErrorHandler() == LoadErrorHandler.THROW) {\n 802                       // Use a different exception signature here\n 803                       throw new TikaConfigException(\n 804                               \"Unable to find a \" + getLoaderTagName() + \" class: \" + name, e);\n 805                   }\n 806                   // Report the problem\n 807                   loader.getLoadErrorHandler().handleLoadError(name, e);\n 808                   return null;\n 809               } catch (IllegalAccessException e) {\n 810                   throw new TikaException(\n 811                           \"Unable to access a \" + getLoaderTagName() + \" class: \" + name, e);\n 812               } catch (InvocationTargetException e) {\n 813                   throw new TikaException(\n 814                           \"Unable to create a \" + getLoaderTagName() + \" class: \" + name, e);\n 815               } catch (InstantiationException e) {\n 816                   throw new TikaException(\n 817                           \"Unable to instantiate a \" + getLoaderTagName() + \" class: \" + name, e);\n 818               } catch (NoSuchMethodException e) {\n 819                   throw new TikaException(\n 820                           \"Unable to find the right constructor for \" + getLoaderTagName() +\n 821                                   \" class: \" + name, e);\n 822               }\n 823           }\n\nsrc/tika/tika-pipes/tika-emitters/tika-emitter-jdbc/src/main/java/org/apache/tika/pipes/emitter/jdbc/JDBCEmitter.java:\n535       @Override\n536       public void initialize(Map<String, Param> params) throws TikaConfigException {\n537           parseColTypes();\n538           setStringNormalizer();\n539           try {\n540               createConnection();\n541           } catch (SQLException e) {\n542               throw new TikaConfigException(\"couldn't open connection: \" + connectionString, e);\n543           }\n544           if (!StringUtils.isBlank(createTable)) {\n545               //synchronize table creation\n546               READ_WRITE_LOCK.writeLock().lock();\n547               try {\n548                   String tableCreationString = connectionString + \" \" + createTable;\n549                   if (!TABLES_CREATED.contains(tableCreationString)) {\n550                       try (Statement st = connection.createStatement()) {\n551                           st.execute(createTable);\n552                           if (!StringUtils.isBlank(alterTable)) {\n553                               st.execute(alterTable);\n554                           }\n555                           TABLES_CREATED.add(tableCreationString);\n556                       } catch (SQLException e) {\n557                           throw new TikaConfigException(\"can't create table\", e);\n558                       }\n559                   }\n560               } finally {\n561                   READ_WRITE_LOCK.writeLock().unlock();\n562               }\n563           }\n564           try {\n565               insertStatement = connection.prepareStatement(insert);\n566           } catch (SQLException e) {\n567               throw new TikaConfigException(\"can't create insert statement\", e);\n568           }\n569       }\n",
            "cost": 0.12459,
            "harness_id": "TikaOne",
            "sanitizer": "SQL Injection",
            "sink": "src/tika/tika-pipes/tika-emitters/tika-emitter-jdbc/src/main/java/org/apache/tika/pipes/emitter/jdbc/JDBCEmitter.java:551:36",
            "status": "corpus",
            "valid_path": "NO",
            "id": 44
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n 667           @SuppressWarnings(\"unchecked\")\n 668           CT loadOverall(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 669                   throws TikaException, IOException {\n 670               List<T> loaded = new ArrayList<>();\n 671   \n 672               // Find the children of the parent tag, if any\n 673               for (Element le : getTopLevelElementChildren(element, getParentTagName(),\n 674                       getLoaderTagName())) {\n 675                   T loadedChild = loadOne(le, mimeTypes, loader);\n 676                   if (loadedChild != null) {\n 677                       loaded.add(loadedChild);\n 678                   }\n 679               }\n 680   \n 681               // Build the classes, and wrap as needed\n 682               if (loaded.isEmpty()) {\n 683                   // Nothing defined, create a Default\n 684                   return createDefault(mimeTypes, loader);\n 685               } else if (loaded.size() == 1) {\n 686                   T single = loaded.get(0);\n 687                   if (isComposite(single)) {\n 688                       // Single Composite defined, use that\n 689                       return (CT) single;\n 690                   }\n 691               } else if (!supportsComposite()) {\n 692                   // No composite support, just return the first one\n 693                   if (loaded.size() == 1) {\n 694                       return (CT) loaded.get(0);\n 695                   } else if (loaded.size() > 1) {\n 696                       throw new TikaConfigException(\n 697                               \"Composite not supported for \" + getParentTagName() +\n 698                                       \". Must specify only one child!\");\n 699                   } else {\n 700                       //throw exception if empty?\n 701                   }\n 702               }\n 703               // Wrap the defined parsers/detectors up in a Composite\n 704               return createComposite(loaded, mimeTypes, loader);\n 705           }\n 707           T loadOne(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 708                   throws TikaException, IOException {\n 709               String name = element.getAttribute(\"class\");\n 710               if (name == null) {\n 711                   throw new TikaConfigException(\"class attribute must not be null: \" + element);\n 712               }\n 713               String initProbHandler = element.getAttribute(\"initializableProblemHandler\");\n 714               InitializableProblemHandler initializableProblemHandler;\n 715               if (initProbHandler == null || initProbHandler.length() == 0) {\n 716                   initializableProblemHandler = loader.getInitializableProblemHandler();\n 717               } else {\n 718                   initializableProblemHandler = getInitializableProblemHandler(initProbHandler);\n 719               }\n 720   \n 721               T loaded = null;\n 722   \n 723               try {\n 724                   Class<? extends T> loadedClass = loader.getServiceClass(getLoaderClass(), name);\n 725   \n 726                   // Do pre-load checks and short-circuits\n 727                   //TODO : allow duplicate instances with different configurations\n 728                   loaded = preLoadOne(loadedClass, name, mimeTypes);\n 729                   if (loaded != null) {\n 730                       return loaded;\n 731                   }\n 732   \n 733                   // Get any parameters / settings for the parser\n 734                   Map<String, Param> params = null;\n 735                   try {\n 736                       params = getParams(element);\n 737                   } catch (Exception e) {\n 738                       throw new TikaConfigException(e.getMessage(), e);\n 739                   }\n 740   \n 741                   // Is this a composite or decorated class? If so, support recursion\n 742                   if (isComposite(loadedClass)) {\n 743                       // Get the child objects for it\n 744                       List<T> children = new ArrayList<>();\n 745                       NodeList childNodes = element.getElementsByTagName(getLoaderTagName());\n 746                       if (childNodes.getLength() > 0) {\n 747                           for (int i = 0; i < childNodes.getLength(); i++) {\n 748                               T loadedChild =\n 749                                       loadOne((Element) childNodes.item(i), mimeTypes, loader);\n 750                               if (loadedChild != null) {\n 751                                   children.add(loadedChild);\n 752                               }\n 753                           }\n 754                       }\n 755   \n 756                       // Get the list of children to exclude\n 757                       Set<Class<? extends T>> excludeChildren = new HashSet<>();\n 758                       NodeList excludeChildNodes =\n 759                               element.getElementsByTagName(getLoaderTagName() + \"-exclude\");\n 760                       if (excludeChildNodes.getLength() > 0) {\n 761                           for (int i = 0; i < excludeChildNodes.getLength(); i++) {\n 762                               Element excl = (Element) excludeChildNodes.item(i);\n 763                               String exclName = excl.getAttribute(\"class\");\n 764                               try {\n 765                                   excludeChildren\n 766                                           .add(loader.getServiceClass(getLoaderClass(), exclName));\n 767                               } catch (ClassNotFoundException e) {\n 768                                   //TIKA-3268 -- This should stop the world.\n 769                                   throw new TikaConfigException(\n 770                                           \"Class not found in -exclude list: \" + exclName);\n 771                               }\n 772                           }\n 773                       }\n 774   \n 775                       // Create the Composite\n 776                       loaded = createComposite(loadedClass, children, excludeChildren, params,\n 777                               mimeTypes, loader);\n 778   \n 779                       // Default constructor fallback\n 780                       if (loaded == null) {\n 781                           loaded = newInstance(loadedClass);\n 782                       }\n 783                   } else {\n 784                       // Regular class, create as-is\n 785                       loaded = newInstance(loadedClass);\n 786                       // TODO Support arguments, needed for Translators etc\n 787                       // See the thread \"Configuring parsers and translators\" for details\n 788                   }\n 789   \n 790                   //Assigning the params to bean fields/setters\n 791                   AnnotationUtils.assignFieldParams(loaded, params);\n 792                   if (loaded instanceof Initializable) {\n 793                       ((Initializable) loaded).initialize(params);\n 794                       ((Initializable) loaded).checkInitialization(initializableProblemHandler);\n 795                   }\n 796                   // Have any decoration performed, eg explicit mimetypes\n 797                   loaded = decorate(loaded, element);\n 798                   // All done with setup\n 799                   return loaded;\n 800               } catch (ClassNotFoundException e) {\n 801                   if (loader.getLoadErrorHandler() == LoadErrorHandler.THROW) {\n 802                       // Use a different exception signature here\n 803                       throw new TikaConfigException(\n 804                               \"Unable to find a \" + getLoaderTagName() + \" class: \" + name, e);\n 805                   }\n 806                   // Report the problem\n 807                   loader.getLoadErrorHandler().handleLoadError(name, e);\n 808                   return null;\n 809               } catch (IllegalAccessException e) {\n 810                   throw new TikaException(\n 811                           \"Unable to access a \" + getLoaderTagName() + \" class: \" + name, e);\n 812               } catch (InvocationTargetException e) {\n 813                   throw new TikaException(\n 814                           \"Unable to create a \" + getLoaderTagName() + \" class: \" + name, e);\n 815               } catch (InstantiationException e) {\n 816                   throw new TikaException(\n 817                           \"Unable to instantiate a \" + getLoaderTagName() + \" class: \" + name, e);\n 818               } catch (NoSuchMethodException e) {\n 819                   throw new TikaException(\n 820                           \"Unable to find the right constructor for \" + getLoaderTagName() +\n 821                                   \" class: \" + name, e);\n 822               }\n 823           }\n\nsrc/tika/tika-pipes/tika-emitters/tika-emitter-jdbc/src/main/java/org/apache/tika/pipes/emitter/jdbc/JDBCEmitter.java:\n535       @Override\n536       public void initialize(Map<String, Param> params) throws TikaConfigException {\n537           parseColTypes();\n538           setStringNormalizer();\n539           try {\n540               createConnection();\n541           } catch (SQLException e) {\n542               throw new TikaConfigException(\"couldn't open connection: \" + connectionString, e);\n543           }\n544           if (!StringUtils.isBlank(createTable)) {\n545               //synchronize table creation\n546               READ_WRITE_LOCK.writeLock().lock();\n547               try {\n548                   String tableCreationString = connectionString + \" \" + createTable;\n549                   if (!TABLES_CREATED.contains(tableCreationString)) {\n550                       try (Statement st = connection.createStatement()) {\n551                           st.execute(createTable);\n552                           if (!StringUtils.isBlank(alterTable)) {\n553                               st.execute(alterTable);\n554                           }\n555                           TABLES_CREATED.add(tableCreationString);\n556                       } catch (SQLException e) {\n557                           throw new TikaConfigException(\"can't create table\", e);\n558                       }\n559                   }\n560               } finally {\n561                   READ_WRITE_LOCK.writeLock().unlock();\n562               }\n563           }\n564           try {\n565               insertStatement = connection.prepareStatement(insert);\n566           } catch (SQLException e) {\n567               throw new TikaConfigException(\"can't create insert statement\", e);\n568           }\n569       }\n",
            "cost": 0.11589,
            "harness_id": "TikaOne",
            "sanitizer": "SQL Injection",
            "sink": "src/tika/tika-pipes/tika-emitters/tika-emitter-jdbc/src/main/java/org/apache/tika/pipes/emitter/jdbc/JDBCEmitter.java:553:40",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 45
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "SQL Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-jdbc-commons/src/main/java/org/apache/tika/parser/jdbc/JDBCTableReader.java:301:39",
            "status": "error",
            "id": 46
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n 667           @SuppressWarnings(\"unchecked\")\n 668           CT loadOverall(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 669                   throws TikaException, IOException {\n 670               List<T> loaded = new ArrayList<>();\n 671   \n 672               // Find the children of the parent tag, if any\n 673               for (Element le : getTopLevelElementChildren(element, getParentTagName(),\n 674                       getLoaderTagName())) {\n 675                   T loadedChild = loadOne(le, mimeTypes, loader);\n 676                   if (loadedChild != null) {\n 677                       loaded.add(loadedChild);\n 678                   }\n 679               }\n 680   \n 681               // Build the classes, and wrap as needed\n 682               if (loaded.isEmpty()) {\n 683                   // Nothing defined, create a Default\n 684                   return createDefault(mimeTypes, loader);\n 685               } else if (loaded.size() == 1) {\n 686                   T single = loaded.get(0);\n 687                   if (isComposite(single)) {\n 688                       // Single Composite defined, use that\n 689                       return (CT) single;\n 690                   }\n 691               } else if (!supportsComposite()) {\n 692                   // No composite support, just return the first one\n 693                   if (loaded.size() == 1) {\n 694                       return (CT) loaded.get(0);\n 695                   } else if (loaded.size() > 1) {\n 696                       throw new TikaConfigException(\n 697                               \"Composite not supported for \" + getParentTagName() +\n 698                                       \". Must specify only one child!\");\n 699                   } else {\n 700                       //throw exception if empty?\n 701                   }\n 702               }\n 703               // Wrap the defined parsers/detectors up in a Composite\n 704               return createComposite(loaded, mimeTypes, loader);\n 705           }\n 707           T loadOne(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 708                   throws TikaException, IOException {\n 709               String name = element.getAttribute(\"class\");\n 710               if (name == null) {\n 711                   throw new TikaConfigException(\"class attribute must not be null: \" + element);\n 712               }\n 713               String initProbHandler = element.getAttribute(\"initializableProblemHandler\");\n 714               InitializableProblemHandler initializableProblemHandler;\n 715               if (initProbHandler == null || initProbHandler.length() == 0) {\n 716                   initializableProblemHandler = loader.getInitializableProblemHandler();\n 717               } else {\n 718                   initializableProblemHandler = getInitializableProblemHandler(initProbHandler);\n 719               }\n 720   \n 721               T loaded = null;\n 722   \n 723               try {\n 724                   Class<? extends T> loadedClass = loader.getServiceClass(getLoaderClass(), name);\n 725   \n 726                   // Do pre-load checks and short-circuits\n 727                   //TODO : allow duplicate instances with different configurations\n 728                   loaded = preLoadOne(loadedClass, name, mimeTypes);\n 729                   if (loaded != null) {\n 730                       return loaded;\n 731                   }\n 732   \n 733                   // Get any parameters / settings for the parser\n 734                   Map<String, Param> params = null;\n 735                   try {\n 736                       params = getParams(element);\n 737                   } catch (Exception e) {\n 738                       throw new TikaConfigException(e.getMessage(), e);\n 739                   }\n 740   \n 741                   // Is this a composite or decorated class? If so, support recursion\n 742                   if (isComposite(loadedClass)) {\n 743                       // Get the child objects for it\n 744                       List<T> children = new ArrayList<>();\n 745                       NodeList childNodes = element.getElementsByTagName(getLoaderTagName());\n 746                       if (childNodes.getLength() > 0) {\n 747                           for (int i = 0; i < childNodes.getLength(); i++) {\n 748                               T loadedChild =\n 749                                       loadOne((Element) childNodes.item(i), mimeTypes, loader);\n 750                               if (loadedChild != null) {\n 751                                   children.add(loadedChild);\n 752                               }\n 753                           }\n 754                       }\n 755   \n 756                       // Get the list of children to exclude\n 757                       Set<Class<? extends T>> excludeChildren = new HashSet<>();\n 758                       NodeList excludeChildNodes =\n 759                               element.getElementsByTagName(getLoaderTagName() + \"-exclude\");\n 760                       if (excludeChildNodes.getLength() > 0) {\n 761                           for (int i = 0; i < excludeChildNodes.getLength(); i++) {\n 762                               Element excl = (Element) excludeChildNodes.item(i);\n 763                               String exclName = excl.getAttribute(\"class\");\n 764                               try {\n 765                                   excludeChildren\n 766                                           .add(loader.getServiceClass(getLoaderClass(), exclName));\n 767                               } catch (ClassNotFoundException e) {\n 768                                   //TIKA-3268 -- This should stop the world.\n 769                                   throw new TikaConfigException(\n 770                                           \"Class not found in -exclude list: \" + exclName);\n 771                               }\n 772                           }\n 773                       }\n 774   \n 775                       // Create the Composite\n 776                       loaded = createComposite(loadedClass, children, excludeChildren, params,\n 777                               mimeTypes, loader);\n 778   \n 779                       // Default constructor fallback\n 780                       if (loaded == null) {\n 781                           loaded = newInstance(loadedClass);\n 782                       }\n 783                   } else {\n 784                       // Regular class, create as-is\n 785                       loaded = newInstance(loadedClass);\n 786                       // TODO Support arguments, needed for Translators etc\n 787                       // See the thread \"Configuring parsers and translators\" for details\n 788                   }\n 789   \n 790                   //Assigning the params to bean fields/setters\n 791                   AnnotationUtils.assignFieldParams(loaded, params);\n 792                   if (loaded instanceof Initializable) {\n 793                       ((Initializable) loaded).initialize(params);\n 794                       ((Initializable) loaded).checkInitialization(initializableProblemHandler);\n 795                   }\n 796                   // Have any decoration performed, eg explicit mimetypes\n 797                   loaded = decorate(loaded, element);\n 798                   // All done with setup\n 799                   return loaded;\n 800               } catch (ClassNotFoundException e) {\n 801                   if (loader.getLoadErrorHandler() == LoadErrorHandler.THROW) {\n 802                       // Use a different exception signature here\n 803                       throw new TikaConfigException(\n 804                               \"Unable to find a \" + getLoaderTagName() + \" class: \" + name, e);\n 805                   }\n 806                   // Report the problem\n 807                   loader.getLoadErrorHandler().handleLoadError(name, e);\n 808                   return null;\n 809               } catch (IllegalAccessException e) {\n 810                   throw new TikaException(\n 811                           \"Unable to access a \" + getLoaderTagName() + \" class: \" + name, e);\n 812               } catch (InvocationTargetException e) {\n 813                   throw new TikaException(\n 814                           \"Unable to create a \" + getLoaderTagName() + \" class: \" + name, e);\n 815               } catch (InstantiationException e) {\n 816                   throw new TikaException(\n 817                           \"Unable to instantiate a \" + getLoaderTagName() + \" class: \" + name, e);\n 818               } catch (NoSuchMethodException e) {\n 819                   throw new TikaException(\n 820                           \"Unable to find the right constructor for \" + getLoaderTagName() +\n 821                                   \" class: \" + name, e);\n 822               }\n 823           }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java:\n210       @SuppressWarnings(\"unchecked\")\n211       public <T> Class<? extends T> getServiceClass(Class<T> iface, String name)\n212               throws ClassNotFoundException {\n213           if (loader == null) {\n214               throw new ClassNotFoundException(\"Service class \" + name + \" is not available\");\n215           }\n216           Class<?> klass = Class.forName(name, true, loader);\n217           if (klass.isInterface()) {\n218               throw new ClassNotFoundException(\"Service class \" + name + \" is an interface\");\n219           } else if (!iface.isAssignableFrom(klass)) {\n220               throw new ClassNotFoundException(\n221                       \"Service class \" + name + \" does not implement \" + iface.getName());\n222           } else {\n223               return (Class<? extends T>) klass;\n224           }\n225       }\n",
            "cost": 0.113625,
            "harness_id": "TikaOne",
            "sanitizer": "load arbitrary library",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java:216:40",
            "status": "corpus",
            "valid_path": "NO",
            "id": 47
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n 557       private void updateXMLReaderUtils(Element element) throws TikaException {\n 558   \n 559           Element child = getChild(element, \"xml-reader-utils\");\n 560           if (child == null) {\n 561               return;\n 562           }\n 563   \n 564           if (child.hasAttribute(\"maxEntityExpansions\")) {\n 565               XMLReaderUtils.setMaxEntityExpansions(Integer.parseInt(child.getAttribute(\"maxEntityExpansions\")));\n 566           }\n 567   \n 568           // make sure to call this after set entity expansions\n 569           if (child.hasAttribute(\"poolSize\")) {\n 570               XMLReaderUtils.setPoolSize(Integer.parseInt(child.getAttribute(\"poolSize\")));\n 571           }\n 572   \n 573       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java:\n 830       public static void setPoolSize(int poolSize) throws TikaException {\n 831           //stop the world with a write lock.\n 832           //parsers that are currently in use will be offered later (once the lock is released),\n 833           //but not accepted and will be gc'd.  We have to do this locking and\n 834           //the read locking in case one thread resizes the pool when the\n 835           //parsers have already started.  We could have an NPE on SAX_PARSERS\n 836           //if we didn't lock.\n 837           SAX_READ_WRITE_LOCK.writeLock().lock();\n 838           try {\n 839               //free up any resources before emptying SAX_PARSERS\n 840               for (PoolSAXParser parser : SAX_PARSERS) {\n 841                   parser.reset();\n 842               }\n 843               SAX_PARSERS.clear();\n 844               SAX_PARSERS = new ArrayBlockingQueue<>(poolSize);\n 845               int generation = POOL_GENERATION.incrementAndGet();\n 846               for (int i = 0; i < poolSize; i++) {\n 847                   try {\n 848                       SAX_PARSERS.offer(buildPoolParser(generation,\n 849                               getSAXParserFactory().newSAXParser()));\n 850                   } catch (SAXException | ParserConfigurationException e) {\n 851                       throw new TikaException(\"problem creating sax parser\", e);\n 852                   }\n 853               }\n 854           } finally {\n 855               SAX_READ_WRITE_LOCK.writeLock().unlock();\n 856           }\n 857   \n 858           DOM_READ_WRITE_LOCK.writeLock().lock();\n 859           try {\n 860               DOM_BUILDERS.clear();\n 861               DOM_BUILDERS = new ArrayBlockingQueue<>(poolSize);\n 862               for (int i = 0; i < poolSize; i++) {\n 863                   DOM_BUILDERS.offer(new PoolDOMBuilder(POOL_GENERATION.get(), getDocumentBuilder()));\n 864               }\n 865           } finally {\n 866               DOM_READ_WRITE_LOCK.writeLock().unlock();\n 867           }\n 868           POOL_SIZE = poolSize;\n 869       }\n 907       private static PoolSAXParser buildPoolParser(int generation, SAXParser parser) {\n 908           boolean canReset = false;\n 909           try {\n 910               parser.reset();\n 911               canReset = true;\n 912           } catch (UnsupportedOperationException e) {\n 913               canReset = false;\n 914           }\n 915           boolean hasSecurityManager = false;\n 916           try {\n 917               Object mgr =\n 918                       Class.forName(XERCES_SECURITY_MANAGER).getDeclaredConstructor().newInstance();\n 919               Method setLimit = mgr.getClass().getMethod(\"setEntityExpansionLimit\", Integer.TYPE);\n 920               setLimit.invoke(mgr, MAX_ENTITY_EXPANSIONS);\n 921   \n 922               parser.setProperty(XERCES_SECURITY_MANAGER_PROPERTY, mgr);\n 923               hasSecurityManager = true;\n 924           } catch (SecurityException e) {\n 925               //don't swallow security exceptions\n 926               throw e;\n 927           } catch (ClassNotFoundException e) {\n 928               // continue without log, this is expected in some setups\n 929           } catch (Throwable e) {\n 930               // NOSONAR - also catch things like NoClassDefError here\n 931               // throttle the log somewhat as it can spam the log otherwise\n 932               if (System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {\n 933                   LOG.warn(\"SAX Security Manager could not be setup [log suppressed for 5 minutes]\",\n 934                           e);\n 935                   LAST_LOG = System.currentTimeMillis();\n 936               }\n 937           }\n 938   \n 939           boolean canSetJaxPEntity = false;\n 940           if (!hasSecurityManager) {\n 941               // use the builtin way of setting the property\n 942               try {\n 943                   parser.setProperty(\"http://www.oracle.com/xml/jaxp/properties/entityExpansionLimit\",\n 944                           MAX_ENTITY_EXPANSIONS);\n 945                   canSetJaxPEntity = true;\n 946               } catch (SAXException e) {     // NOSONAR - also catch things like NoClassDefError here\n 947                   // throttle the log somewhat as it can spam the log otherwise\n 948                   if (System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {\n 949                       LOG.warn(\n 950                               \"SAX Security Manager could not be setup [log suppressed for 5 \" +\n 951                                       \"minutes]\",\n 952                               e);\n 953                       LAST_LOG = System.currentTimeMillis();\n 954                   }\n 955               }\n 956           }\n 957   \n 958           if (!canReset && hasSecurityManager) {\n 959               return new XercesPoolSAXParser(generation, parser);\n 960           } else if (canReset && hasSecurityManager) {\n 961               return new Xerces2PoolSAXParser(generation, parser);\n 962           } else if (canReset && !hasSecurityManager && canSetJaxPEntity) {\n 963               return new BuiltInPoolSAXParser(generation, parser);\n 964           } else {\n 965               return new UnrecognizedPoolSAXParser(generation, parser);\n 966           }\n 967   \n 968       }\n",
            "cost": 0.10698,
            "harness_id": "TikaOne",
            "sanitizer": "load arbitrary library",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java:918:35",
            "status": "corpus",
            "valid_path": "NO",
            "id": 48
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n1040           public void process(InputStream input, OutputStream output, Metadata metadata) throws Exception {\n1041               Parser p = parser;\n1042               if (fork) {\n1043                   p = new ForkParser(TikaCLI.class.getClassLoader(), p);\n1044               }\n1045               ContentHandler handler = getContentHandler(output, metadata);\n1046               try {\n1047                   p.parse(input, handler, metadata, context);\n1048                   // fix for TIKA-596: if a parser doesn't generate\n1049                   // XHTML output, the lack of an output document prevents\n1050                   // metadata from being output: this fixes that\n1051                   if (handler instanceof NoDocumentMetHandler) {\n1052                       NoDocumentMetHandler metHandler = (NoDocumentMetHandler) handler;\n1053                       if (!metHandler.metOutput()) {\n1054                           metHandler.endDocument();\n1055                       }\n1056                   }\n1057               } finally {\n1058                   if (fork) {\n1059                       ((ForkParser) p).close();\n1060                   }\n1061               }\n1062           }\n\nsrc/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/NamedEntityParser.java:\n 76       private synchronized void initialize(ParseContext context) {\n 77           if (initialized) {\n 78               return;\n 79           }\n 80           initialized = true;\n 81   \n 82           //TODO: read class name from context or config\n 83           //There can be multiple classes in the form of comma separated class names;\n 84           String classNamesString = System.getProperty(SYS_PROP_NER_IMPL, DEFAULT_NER_IMPL);\n 85           String[] classNames = classNamesString.split(\",\");\n 86           this.nerChain = new ArrayList<>(classNames.length);\n 87           for (String className : classNames) {\n 88               className = className.trim();\n 89               LOG.info(\"going to load, instantiate and bind the instance of {}\", className);\n 90               try {\n 91                   NERecogniser recogniser =\n 92                           (NERecogniser) Class.forName(className).getDeclaredConstructor().newInstance();\n 93                   LOG.info(\"{} is available ? {}\", className, recogniser.isAvailable());\n 94                   if (recogniser.isAvailable()) {\n 95                       nerChain.add(recogniser);\n 96                   }\n 97               } catch (Exception e) {\n 98                   LOG.error(e.getMessage(), e);\n 99               }\n100           }\n101           try {\n102               TikaConfig config = new TikaConfig();\n103               this.secondaryParser = new Tika(config);\n104               this.available = !nerChain.isEmpty();\n105               LOG.info(\"Number of NERecognisers in chain {}\", nerChain.size());\n106           } catch (Exception e) {\n107               LOG.error(e.getMessage(), e);\n108               this.available = false;\n109           }\n110       }\n116       public void parse(InputStream inputStream, ContentHandler contentHandler, Metadata metadata,\n117                         ParseContext parseContext) throws IOException, SAXException, TikaException {\n118   \n119           if (!initialized) {\n120               initialize(parseContext);\n121           }\n122           if (!available) {\n123               return;\n124           }\n125   \n126           Reader reader =\n127                   MediaType.TEXT_PLAIN.toString().equals(metadata.get(Metadata.CONTENT_TYPE)) ?\n128                           new InputStreamReader(inputStream, StandardCharsets.UTF_8) :\n129                           secondaryParser.parse(inputStream);\n130   \n131           String text = IOUtils.toString(reader);\n132           IOUtils.closeQuietly(reader);\n133   \n134           for (NERecogniser ner : nerChain) {\n135               Map<String, Set<String>> names = ner.recognise(text);\n136               if (names != null) {\n137                   for (Map.Entry<String, Set<String>> entry : names.entrySet()) {\n138                       if (entry.getValue() != null) {\n139                           String mdKey = MD_KEY_PREFIX + entry.getKey();\n140                           for (String name : entry.getValue()) {\n141                               metadata.add(mdKey, name);\n142                           }\n143                       }\n144                   }\n145               }\n146           }\n147           XHTMLContentHandler xhtml = new XHTMLContentHandler(contentHandler, metadata);\n148           extractOutput(text.trim(), xhtml);\n149       }\n",
            "cost": 0.087715,
            "harness_id": "TikaOne",
            "sanitizer": "load arbitrary library",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/NamedEntityParser.java:92:54",
            "status": "corpus",
            "valid_path": "NO",
            "id": 49
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n 487       private void dumpConfig(TikaConfigSerializer.Mode mode) throws Exception {\n 488           configure();\n 489           TikaConfig localConfig = (config == null) ? TikaConfig.getDefaultConfig() : config;\n 490   \n 491           TikaConfigSerializer.serialize(localConfig, mode, new OutputStreamWriter(System.out, UTF_8), UTF_8);\n 492       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfigSerializer.java:\n 95       public static void serialize(TikaConfig config, Mode mode, Writer writer, Charset charset)\n 96               throws Exception {\n 97           DocumentBuilder docBuilder = XMLReaderUtils.getDocumentBuilder();\n 98   \n 99           // root elements\n100           Document doc = docBuilder.newDocument();\n101           Element rootElement = doc.createElement(\"properties\");\n102   \n103           doc.appendChild(rootElement);\n104           addMimeComment(mode, rootElement, doc);\n105           addServiceLoader(mode, rootElement, doc, config);\n106           addExecutorService(mode, rootElement, doc, config);\n107           addEncodingDetectors(mode, rootElement, doc, config);\n108           addTranslator(mode, rootElement, doc, config);\n109           addDetectors(mode, rootElement, doc, config);\n110           addParsers(mode, rootElement, doc, config);\n111           // TODO Service Loader section\n112   \n113           // now write\n114           Transformer transformer = XMLReaderUtils.getTransformer();\n115           transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n116           transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"2\");\n117           transformer.setOutputProperty(OutputKeys.ENCODING, charset.name());\n118           DOMSource source = new DOMSource(doc);\n119           StreamResult result = new StreamResult(writer);\n120   \n121           transformer.transform(source, result);\n122       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java:\n 244       public static DocumentBuilderFactory getDocumentBuilderFactory() {\n 245           //borrowed from Apache POI\n 246           DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n 247           if (LOG.isDebugEnabled()) {\n 248               LOG.debug(\"DocumentBuilderFactory class {}\", factory.getClass());\n 249           }\n 250   \n 251           factory.setExpandEntityReferences(false);\n 252           factory.setNamespaceAware(true);\n 253           factory.setValidating(false);\n 254   \n 255           trySetSAXFeature(factory, XMLConstants.FEATURE_SECURE_PROCESSING, true);\n 256           trySetSAXFeature(factory, \"http://xml.org/sax/features/external-general-entities\", false);\n 257           trySetSAXFeature(factory, \"http://xml.org/sax/features/external-parameter-entities\", false);\n 258           trySetSAXFeature(factory, \"http://apache.org/xml/features/nonvalidating/load-external-dtd\",\n 259                   false);\n 260           trySetSAXFeature(factory, \"http://apache.org/xml/features/nonvalidating/load-dtd-grammar\",\n 261                   false);\n 262           trySetXercesSecurityManager(factory);\n 263           return factory;\n 264       }\n 276       public static DocumentBuilder getDocumentBuilder() throws TikaException {\n 277           try {\n 278               DocumentBuilderFactory documentBuilderFactory = getDocumentBuilderFactory();\n 279               DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n 280               documentBuilder.setEntityResolver(IGNORING_SAX_ENTITY_RESOLVER);\n 281               documentBuilder.setErrorHandler(null);\n 282               return documentBuilder;\n 283           } catch (ParserConfigurationException e) {\n 284               throw new TikaException(\"XML parser not available\", e);\n 285           }\n 286       }\n 713       private static void trySetXercesSecurityManager(DocumentBuilderFactory factory) {\n 714           //from POI\n 715           // Try built-in JVM one first, standalone if not\n 716           for (String securityManagerClassName : new String[]{\n 717                   //\"com.sun.org.apache.xerces.internal.util.SecurityManager\",\n 718                   XERCES_SECURITY_MANAGER}) {\n 719               try {\n 720                   Object mgr =\n 721                           Class.forName(securityManagerClassName).getDeclaredConstructor().newInstance();\n 722                   Method setLimit = mgr.getClass().getMethod(\"setEntityExpansionLimit\",\n 723                           Integer.TYPE);\n 724                   setLimit.invoke(mgr, MAX_ENTITY_EXPANSIONS);\n 725                   factory.setAttribute(XERCES_SECURITY_MANAGER_PROPERTY, mgr);\n 726                   // Stop once one can be setup without error\n 727                   return;\n 728               } catch (ClassNotFoundException e) {\n 729                   // continue without log, this is expected in some setups\n 730               } catch (Throwable e) {     // NOSONAR - also catch things like NoClassDefError here\n 731                   // throttle the log somewhat as it can spam the log otherwise\n 732                   if (System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {\n 733                       LOG.warn(\n 734                               \"SAX Security Manager could not be setup [log suppressed for 5 \" +\n 735                                       \"minutes]\",\n 736                               e);\n 737                       LAST_LOG = System.currentTimeMillis();\n 738                   }\n 739               }\n 740           }\n 741   \n 742           // separate old version of Xerces not found => use the builtin way of setting the property\n 743           try {\n 744               factory.setAttribute(\"http://www.oracle.com/xml/jaxp/properties/entityExpansionLimit\",\n 745                       MAX_ENTITY_EXPANSIONS);\n 746           } catch (IllegalArgumentException e) {\n 747               // NOSONAR - also catch things like NoClassDefError here\n 748               // throttle the log somewhat as it can spam the log otherwise\n 749               if (System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {\n 750                   LOG.warn(\"SAX Security Manager could not be setup [log suppressed for 5 minutes]\",\n 751                           e);\n 752                   LAST_LOG = System.currentTimeMillis();\n 753               }\n 754           }\n 755       }\n",
            "cost": 0.09096000000000001,
            "harness_id": "TikaOne",
            "sanitizer": "load arbitrary library",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java:721:39",
            "status": "corpus",
            "valid_path": "NO",
            "id": 50
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n 667           @SuppressWarnings(\"unchecked\")\n 668           CT loadOverall(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 669                   throws TikaException, IOException {\n 670               List<T> loaded = new ArrayList<>();\n 671   \n 672               // Find the children of the parent tag, if any\n 673               for (Element le : getTopLevelElementChildren(element, getParentTagName(),\n 674                       getLoaderTagName())) {\n 675                   T loadedChild = loadOne(le, mimeTypes, loader);\n 676                   if (loadedChild != null) {\n 677                       loaded.add(loadedChild);\n 678                   }\n 679               }\n 680   \n 681               // Build the classes, and wrap as needed\n 682               if (loaded.isEmpty()) {\n 683                   // Nothing defined, create a Default\n 684                   return createDefault(mimeTypes, loader);\n 685               } else if (loaded.size() == 1) {\n 686                   T single = loaded.get(0);\n 687                   if (isComposite(single)) {\n 688                       // Single Composite defined, use that\n 689                       return (CT) single;\n 690                   }\n 691               } else if (!supportsComposite()) {\n 692                   // No composite support, just return the first one\n 693                   if (loaded.size() == 1) {\n 694                       return (CT) loaded.get(0);\n 695                   } else if (loaded.size() > 1) {\n 696                       throw new TikaConfigException(\n 697                               \"Composite not supported for \" + getParentTagName() +\n 698                                       \". Must specify only one child!\");\n 699                   } else {\n 700                       //throw exception if empty?\n 701                   }\n 702               }\n 703               // Wrap the defined parsers/detectors up in a Composite\n 704               return createComposite(loaded, mimeTypes, loader);\n 705           }\n 707           T loadOne(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 708                   throws TikaException, IOException {\n 709               String name = element.getAttribute(\"class\");\n 710               if (name == null) {\n 711                   throw new TikaConfigException(\"class attribute must not be null: \" + element);\n 712               }\n 713               String initProbHandler = element.getAttribute(\"initializableProblemHandler\");\n 714               InitializableProblemHandler initializableProblemHandler;\n 715               if (initProbHandler == null || initProbHandler.length() == 0) {\n 716                   initializableProblemHandler = loader.getInitializableProblemHandler();\n 717               } else {\n 718                   initializableProblemHandler = getInitializableProblemHandler(initProbHandler);\n 719               }\n 720   \n 721               T loaded = null;\n 722   \n 723               try {\n 724                   Class<? extends T> loadedClass = loader.getServiceClass(getLoaderClass(), name);\n 725   \n 726                   // Do pre-load checks and short-circuits\n 727                   //TODO : allow duplicate instances with different configurations\n 728                   loaded = preLoadOne(loadedClass, name, mimeTypes);\n 729                   if (loaded != null) {\n 730                       return loaded;\n 731                   }\n 732   \n 733                   // Get any parameters / settings for the parser\n 734                   Map<String, Param> params = null;\n 735                   try {\n 736                       params = getParams(element);\n 737                   } catch (Exception e) {\n 738                       throw new TikaConfigException(e.getMessage(), e);\n 739                   }\n 740   \n 741                   // Is this a composite or decorated class? If so, support recursion\n 742                   if (isComposite(loadedClass)) {\n 743                       // Get the child objects for it\n 744                       List<T> children = new ArrayList<>();\n 745                       NodeList childNodes = element.getElementsByTagName(getLoaderTagName());\n 746                       if (childNodes.getLength() > 0) {\n 747                           for (int i = 0; i < childNodes.getLength(); i++) {\n 748                               T loadedChild =\n 749                                       loadOne((Element) childNodes.item(i), mimeTypes, loader);\n 750                               if (loadedChild != null) {\n 751                                   children.add(loadedChild);\n 752                               }\n 753                           }\n 754                       }\n 755   \n 756                       // Get the list of children to exclude\n 757                       Set<Class<? extends T>> excludeChildren = new HashSet<>();\n 758                       NodeList excludeChildNodes =\n 759                               element.getElementsByTagName(getLoaderTagName() + \"-exclude\");\n 760                       if (excludeChildNodes.getLength() > 0) {\n 761                           for (int i = 0; i < excludeChildNodes.getLength(); i++) {\n 762                               Element excl = (Element) excludeChildNodes.item(i);\n 763                               String exclName = excl.getAttribute(\"class\");\n 764                               try {\n 765                                   excludeChildren\n 766                                           .add(loader.getServiceClass(getLoaderClass(), exclName));\n 767                               } catch (ClassNotFoundException e) {\n 768                                   //TIKA-3268 -- This should stop the world.\n 769                                   throw new TikaConfigException(\n 770                                           \"Class not found in -exclude list: \" + exclName);\n 771                               }\n 772                           }\n 773                       }\n 774   \n 775                       // Create the Composite\n 776                       loaded = createComposite(loadedClass, children, excludeChildren, params,\n 777                               mimeTypes, loader);\n 778   \n 779                       // Default constructor fallback\n 780                       if (loaded == null) {\n 781                           loaded = newInstance(loadedClass);\n 782                       }\n 783                   } else {\n 784                       // Regular class, create as-is\n 785                       loaded = newInstance(loadedClass);\n 786                       // TODO Support arguments, needed for Translators etc\n 787                       // See the thread \"Configuring parsers and translators\" for details\n 788                   }\n 789   \n 790                   //Assigning the params to bean fields/setters\n 791                   AnnotationUtils.assignFieldParams(loaded, params);\n 792                   if (loaded instanceof Initializable) {\n 793                       ((Initializable) loaded).initialize(params);\n 794                       ((Initializable) loaded).checkInitialization(initializableProblemHandler);\n 795                   }\n 796                   // Have any decoration performed, eg explicit mimetypes\n 797                   loaded = decorate(loaded, element);\n 798                   // All done with setup\n 799                   return loaded;\n 800               } catch (ClassNotFoundException e) {\n 801                   if (loader.getLoadErrorHandler() == LoadErrorHandler.THROW) {\n 802                       // Use a different exception signature here\n 803                       throw new TikaConfigException(\n 804                               \"Unable to find a \" + getLoaderTagName() + \" class: \" + name, e);\n 805                   }\n 806                   // Report the problem\n 807                   loader.getLoadErrorHandler().handleLoadError(name, e);\n 808                   return null;\n 809               } catch (IllegalAccessException e) {\n 810                   throw new TikaException(\n 811                           \"Unable to access a \" + getLoaderTagName() + \" class: \" + name, e);\n 812               } catch (InvocationTargetException e) {\n 813                   throw new TikaException(\n 814                           \"Unable to create a \" + getLoaderTagName() + \" class: \" + name, e);\n 815               } catch (InstantiationException e) {\n 816                   throw new TikaException(\n 817                           \"Unable to instantiate a \" + getLoaderTagName() + \" class: \" + name, e);\n 818               } catch (NoSuchMethodException e) {\n 819                   throw new TikaException(\n 820                           \"Unable to find the right constructor for \" + getLoaderTagName() +\n 821                                   \" class: \" + name, e);\n 822               }\n 823           }\n\nsrc/tika/tika-pipes/tika-emitters/tika-emitter-kafka/src/main/java/org/apache/tika/pipes/emitter/kafka/KafkaEmitter.java:\n226       @Override\n227       public void initialize(Map<String, Param> params) throws TikaConfigException {\n228   \n229           // create instance for properties to access producer configs   \n230           Properties props = new Properties();\n231   \n232           //Assign localhost id\n233           safePut(props, ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n234   \n235           //Set acknowledgements for producer requests.      \n236           safePut(props, ProducerConfig.ACKS_CONFIG, acks);\n237   \n238           //If the request fails, the producer can automatically retry,\n239           safePut(props, ProducerConfig.RETRIES_CONFIG, retries);\n240   \n241           //Specify buffer size in config\n242           safePut(props, ProducerConfig.BATCH_SIZE_CONFIG, batchSize);\n243   \n244           //Reduce the no of requests less than 0   \n245           safePut(props, ProducerConfig.LINGER_MS_CONFIG, lingerMs);\n246   \n247           //The buffer.memory controls the total amount of memory available to the producer for buffering.   \n248           safePut(props, ProducerConfig.BUFFER_MEMORY_CONFIG, bufferMemory);\n249   \n250           safePut(props, ProducerConfig.CLIENT_ID_CONFIG, clientId);\n251           safePut(props, ProducerConfig.COMPRESSION_TYPE_CONFIG, compressionType);\n252           safePut(props, ProducerConfig.DELIVERY_TIMEOUT_MS_CONFIG, deliveryTimeoutMs);\n253           safePut(props, ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG, enableIdempotence);\n254           safePut(props, ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, interceptorClasses);\n255           safePut(props, ProducerConfig.MAX_BLOCK_MS_CONFIG, maxBlockMs);\n256           safePut(props, ProducerConfig.MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION, maxInFlightRequestsPerConnection);\n257           safePut(props, ProducerConfig.MAX_REQUEST_SIZE_CONFIG, maxRequestSize);\n258           safePut(props, ProducerConfig.METADATA_MAX_AGE_CONFIG, metadataMaxAgeMs);\n259           safePut(props, ProducerConfig.REQUEST_TIMEOUT_MS_CONFIG, requestTimeoutMs);\n260           safePut(props, ProducerConfig.RETRY_BACKOFF_MS_CONFIG, retryBackoffMs);\n261           safePut(props, ProducerConfig.TRANSACTION_TIMEOUT_CONFIG, transactionTimeoutMs);\n262           safePut(props, ProducerConfig.TRANSACTIONAL_ID_CONFIG, transactionalId);\n263   \n264           safePut(props, ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,\n265                   serializerClass(keySerializer, StringSerializer.class));\n266           safePut(props, ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,\n267                   serializerClass(valueSerializer, StringSerializer.class));\n268   \n269           producer = new KafkaProducer<>(props);\n270       }\n272       private Object serializerClass(String className, Class defaultClass) {\n273           try {\n274               return className == null ? defaultClass : Class.forName(className);\n275           } catch (ClassNotFoundException e) {\n276               LOGGER.error(\"Could not find key serializer class: {}\", className);\n277               return null;\n278           }\n279       }\n",
            "cost": 0.13402,
            "harness_id": "TikaOne",
            "sanitizer": "load arbitrary library",
            "sink": "src/tika/tika-pipes/tika-emitters/tika-emitter-kafka/src/main/java/org/apache/tika/pipes/emitter/kafka/KafkaEmitter.java:274:69",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 51
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/metadata/filter/MetadataFilter.java:\n44       public static MetadataFilter load(Element root, boolean allowMissing) throws TikaConfigException,\n45               IOException {\n46           try {\n47               return buildComposite(\"metadataFilters\", CompositeMetadataFilter.class,\n48                       \"metadataFilter\", MetadataFilter.class, root);\n49           } catch (TikaConfigException e) {\n50               if (allowMissing && e.getMessage().contains(\"could not find metadataFilters\")) {\n51                   return new NoOpFilter();\n52               }\n53               throw e;\n54           }\n55       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:\n139       protected static <P, T> P buildComposite(String compositeElementName, Class<P> compositeClass,\n140                                                String itemName, Class<T> itemClass,\n141                                                Element properties)\n142               throws TikaConfigException, IOException {\n143   \n144           if (!properties.getLocalName().equals(\"properties\")) {\n145               throw new TikaConfigException(\"expect properties as root node\");\n146           }\n147           NodeList children = properties.getChildNodes();\n148   \n149           for (int i = 0; i < children.getLength(); i++) {\n150               Node child = children.item(i);\n151               if (child.getNodeType() != 1) {\n152                   continue;\n153               }\n154               if (compositeElementName.equals(child.getLocalName())) {\n155                   List<T> components = loadComposite(child, itemName, itemClass);\n156                   Constructor constructor = null;\n157                   try {\n158                       constructor = compositeClass.getConstructor(List.class);\n159                       P composite = (P) constructor.newInstance(components);\n160                       setParams(composite, child, new HashSet<>(), itemName);\n161                       return composite;\n162                   } catch (NoSuchMethodException | InvocationTargetException |\n163                            InstantiationException | IllegalAccessException e) {\n164                       throw new TikaConfigException(\"can't build composite class\", e);\n165                   }\n166               }\n167           }\n168           throw new TikaConfigException(\"could not find \" + compositeElementName);\n169       }\n218       private static void setParams(Object object, Node targetNode, Set<String> settings,\n219                                     String exceptNodeName) throws TikaConfigException {\n220           NodeList children = targetNode.getChildNodes();\n221           List<Node> params = new ArrayList<>();\n222           for (int i = 0; i < children.getLength(); i++) {\n223               Node child = children.item(i);\n224   \n225               if (\"params\".equals(child.getLocalName())) {\n226                   NodeList paramsList = child.getChildNodes();\n227                   for (int j = 0; j < paramsList.getLength(); j++) {\n228                       params.add(paramsList.item(j));\n229                   }\n230               } else {\n231                   params.add(child);\n232               }\n233           }\n234           for (int i = 0; i < params.size(); i++) {\n235               Node param = params.get(i);\n236               if (param.getNodeType() != 1) {\n237                   continue;\n238               }\n239               String localName = param.getLocalName();\n240               if (localName == null || localName.equals(exceptNodeName)) {\n241                   continue;\n242               }\n243               String txt = param.getTextContent();\n244               String itemName = param.getLocalName();\n245               SetterClassPair setterClassPair = findSetterClassPair(object, itemName);\n246               boolean processed = false;\n247               if (!hasClass(param)) {\n248                   if (setterClassPair.itemClass.isAssignableFrom(Map.class) && isMap(param)) {\n249                       tryToSetMap(object, param);\n250                       processed = true;\n251                   } else if (setterClassPair.itemClass.isAssignableFrom(List.class)) {\n252                       tryToSetList(object, param);\n253                       processed = true;\n254                   }\n255               }\n256               if (!processed) {\n257                   if (isPrimitive(setterClassPair.itemClass)) {\n258                       tryToSetPrimitive(object, setterClassPair, param.getTextContent());\n259                   } else {\n260                       //tryToSetPrimitive(object, localName, txt);\n261                       Object item = buildClass(param, itemName, setterClassPair.itemClass);\n262                       setParams(setterClassPair.itemClass.cast(item), param, new HashSet<>());\n263                       try {\n264                           setterClassPair.setterMethod.invoke(object, item);\n265                       } catch (IllegalAccessException | InvocationTargetException e) {\n266                           throw new TikaConfigException(\"problem creating \" + itemName, e);\n267                       }\n268                   }\n269               }\n270   \n271               if (txt != null) {\n272                   settings.add(localName);\n273               }\n274           }\n275   \n276           if (object instanceof Initializable) {\n277               ((Initializable) object).initialize(Collections.EMPTY_MAP);\n278               ((Initializable) object).checkInitialization(InitializableProblemHandler.THROW);\n279           }\n280       }\n360       private static void tryToSetList(Object object, Node param) throws TikaConfigException {\n361           if (hasClass(param)) {\n362               tryToSetClassList(object, param);\n363           } else {\n364               tryToSetStringList(object, param);\n365           }\n366       }\n368       private static void tryToSetClassList(Object object, Node node) throws TikaConfigException {\n369           String name = node.getLocalName();\n370           try {\n371               Class interfaze =\n372                       Class.forName(node.getAttributes().getNamedItem(\"class\").getTextContent());\n373               List items = new ArrayList<Object>();\n374               NodeList nodeList = node.getChildNodes();\n375               for (int i = 0; i < nodeList.getLength(); i++) {\n376                   Node child = nodeList.item(i);\n377                   if (child.getNodeType() == 1) {\n378                       Object item = buildClass(child, child.getLocalName(), interfaze);\n379                       setParams(item, child, new HashSet<>());\n380                       items.add(item);\n381                   }\n382               }\n383   \n384               String setter = \"set\" + name.substring(0, 1).toUpperCase(Locale.US) + name.substring(1);\n385               Method m = object.getClass().getMethod(setter, List.class);\n386               m.invoke(object, items);\n387   \n388           } catch (ClassNotFoundException | InvocationTargetException | NoSuchMethodException |\n389                    IllegalAccessException e) {\n390               throw new TikaConfigException(\"couldn't build class for \" + name, e);\n391           }\n392       }\n",
            "cost": 0.11403,
            "harness_id": "TikaOne",
            "sanitizer": "load arbitrary library",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:372:35",
            "status": "corpus",
            "valid_path": "NO",
            "id": 52
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n1040           public void process(InputStream input, OutputStream output, Metadata metadata) throws Exception {\n1041               Parser p = parser;\n1042               if (fork) {\n1043                   p = new ForkParser(TikaCLI.class.getClassLoader(), p);\n1044               }\n1045               ContentHandler handler = getContentHandler(output, metadata);\n1046               try {\n1047                   p.parse(input, handler, metadata, context);\n1048                   // fix for TIKA-596: if a parser doesn't generate\n1049                   // XHTML output, the lack of an output document prevents\n1050                   // metadata from being output: this fixes that\n1051                   if (handler instanceof NoDocumentMetHandler) {\n1052                       NoDocumentMetHandler metHandler = (NoDocumentMetHandler) handler;\n1053                       if (!metHandler.metOutput()) {\n1054                           metHandler.endDocument();\n1055                       }\n1056                   }\n1057               } finally {\n1058                   if (fork) {\n1059                       ((ForkParser) p).close();\n1060                   }\n1061               }\n1062           }\n\nsrc/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/NamedEntityParser.java:\n116       public void parse(InputStream inputStream, ContentHandler contentHandler, Metadata metadata,\n117                         ParseContext parseContext) throws IOException, SAXException, TikaException {\n118   \n119           if (!initialized) {\n120               initialize(parseContext);\n121           }\n122           if (!available) {\n123               return;\n124           }\n125   \n126           Reader reader =\n127                   MediaType.TEXT_PLAIN.toString().equals(metadata.get(Metadata.CONTENT_TYPE)) ?\n128                           new InputStreamReader(inputStream, StandardCharsets.UTF_8) :\n129                           secondaryParser.parse(inputStream);\n130   \n131           String text = IOUtils.toString(reader);\n132           IOUtils.closeQuietly(reader);\n133   \n134           for (NERecogniser ner : nerChain) {\n135               Map<String, Set<String>> names = ner.recognise(text);\n136               if (names != null) {\n137                   for (Map.Entry<String, Set<String>> entry : names.entrySet()) {\n138                       if (entry.getValue() != null) {\n139                           String mdKey = MD_KEY_PREFIX + entry.getKey();\n140                           for (String name : entry.getValue()) {\n141                               metadata.add(mdKey, name);\n142                           }\n143                       }\n144                   }\n145               }\n146           }\n147           XHTMLContentHandler xhtml = new XHTMLContentHandler(contentHandler, metadata);\n148           extractOutput(text.trim(), xhtml);\n149       }\n\nsrc/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java:\n108       public Map<String, Set<String>> recognise(String text) {\n109           Map<String, Set<String>> names = new HashMap<>();\n110   \n111           try {\n112   \n113               Class<?> stringVectorClass = Class.forName(\"edu.mit.ll.mitie.StringVector\");\n114               Class<?> entityMentionVectorClass =\n115                       Class.forName(\"edu.mit.ll.mitie.EntityMentionVector\");\n116               Class<?> entityMentionClass = Class.forName(\"edu.mit.ll.mitie.EntityMention\");\n117               Object entityMentionObject = null;\n118               Class<?> globalClass = Class.forName(\"edu.mit.ll.mitie.global\");\n119               Object stringVectorObject = extractorInstance.getClass().getMethod(\"getPossibleNerTags\")\n120                       .invoke(extractorInstance);\n121               long size = (Long) stringVectorClass.getMethod(\"size\").invoke(stringVectorObject);\n122               ArrayList<String> possibleTags = new ArrayList<>();\n123               for (long i = 0; i < size; i++) {\n124                   String t = (String) stringVectorClass.getMethod(\"get\", Integer.TYPE)\n125                           .invoke(stringVectorObject, (int) i);\n126                   possibleTags.add(t);\n127               }\n128               Method tokenize = globalClass.getMethod(\"tokenize\", String.class);\n129               stringVectorObject = tokenize.invoke(globalClass, text);\n130   \n131               ArrayList<String> stringVector = new ArrayList<>();\n132               size = (Long) stringVectorClass.getMethod(\"size\").invoke(stringVectorObject);\n133               for (long i = 0; i < size; i++) {\n134                   String t = (String) stringVectorClass.getMethod(\"get\", Integer.TYPE)\n135                           .invoke(stringVectorObject, (int) i);\n136                   stringVector.add(t);\n137               }\n138               Method extractEntities =\n139                       extractorInstance.getClass().getMethod(\"extractEntities\", stringVectorClass);\n140               Object entities = extractEntities.invoke(extractorInstance, stringVectorObject);\n141               size = (Long) entityMentionVectorClass.getMethod(\"size\").invoke(entities);\n142               for (long i = 0; i < size; i++) {\n143                   entityMentionObject = entityMentionVectorClass.getMethod(\"get\", Integer.TYPE)\n144                           .invoke(entities, (int) i);\n145                   int tag_index = (Integer) entityMentionClass.getMethod(\"getTag\")\n146                           .invoke(entityMentionObject);\n147                   String tag = possibleTags.get(tag_index);\n148                   Set<String> x = new HashSet<>();\n149                   if (names.containsKey(tag)) {\n150                       x = names.get(tag);\n151                   } else {\n152                       names.put(tag, x);\n153                   }\n154                   int start = (Integer) entityMentionClass.getMethod(\"getStart\")\n155                           .invoke(entityMentionObject);\n156                   int end = (Integer) entityMentionClass.getMethod(\"getEnd\")\n157                           .invoke(entityMentionObject);\n158                   StringBuilder match = new StringBuilder();\n159                   while (start < end) {\n160                       match.append(stringVector.get(start)).append(\" \");\n161                       start++;\n162                   }\n163                   x.add(match.toString().trim());\n164               }\n165   \n166           } catch (Exception e) {\n167   \n168               LOG.debug(e.getMessage(), e);\n169           }\n170           return names;\n171       }\n",
            "cost": 0.09753,
            "harness_id": "TikaOne",
            "sanitizer": "load arbitrary library",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java:113:56",
            "status": "corpus",
            "valid_path": "NO",
            "id": 53
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "load arbitrary library",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java:115:35",
            "status": "error",
            "id": 54
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "load arbitrary library",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java:116:57",
            "status": "error",
            "id": 55
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "load arbitrary library",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java:118:50",
            "status": "error",
            "id": 56
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 265       private static void async(String[] args) throws Exception {\n 266           String tikaConfigPath = \"\";\n 267           String config = \"--config=\";\n 268           for (String arg : args) {\n 269               if (arg.startsWith(config)) {\n 270                   tikaConfigPath = arg.substring(config.length());\n 271               }\n 272           }\n 273           TikaAsyncCLI.main(new String[]{tikaConfigPath});\n 274       }\n\nsrc/tika/tika-pipes/tika-async-cli/src/main/java/org/apache/tika/async/cli/TikaAsyncCLI.java:\n35       public static void main(String[] args) throws Exception {\n36           Path tikaConfigPath = Paths.get(args[0]);\n37           PipesIterator pipesIterator = PipesIterator.build(tikaConfigPath);\n38           long start = System.currentTimeMillis();\n39           try (AsyncProcessor processor = new AsyncProcessor(tikaConfigPath, pipesIterator)) {\n40   \n41               for (FetchEmitTuple t : pipesIterator) {\n42                   boolean offered = processor.offer(t, TIMEOUT_MS);\n43                   if (!offered) {\n44                       throw new TimeoutException(\"timed out waiting to add a fetch emit tuple\");\n45                   }\n46               }\n47               processor.finished();\n48               while (true) {\n49                   if (processor.checkActive()) {\n50                       Thread.sleep(500);\n51                   } else {\n52                       break;\n53                   }\n54               }\n55               long elapsed = System.currentTimeMillis() - start;\n56               LOG.info(\"Successfully finished processing {} files in {} ms\", processor.getTotalProcessed(), elapsed);\n57           }\n58       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/pipes/pipesiterator/PipesIterator.java:\n 83       public static PipesIterator build(Path tikaConfigFile) throws IOException,\n 84               TikaConfigException {\n 85           try (InputStream is = Files.newInputStream(tikaConfigFile)) {\n 86               return buildSingle(\n 87                       \"pipesIterator\",\n 88                       PipesIterator.class, is);\n 89           }\n 90       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:\n 59       protected static <T> T buildSingle(String itemName, Class<T> itemClass, InputStream is)\n 60               throws TikaConfigException, IOException {\n 61           Element properties = null;\n 62           try {\n 63               properties = XMLReaderUtils.buildDOM(is).getDocumentElement();\n 64           } catch (SAXException e) {\n 65               throw new IOException(e);\n 66           } catch (TikaException e) {\n 67               throw new TikaConfigException(\"problem loading xml to dom\", e);\n 68           }\n 69           if (!properties.getLocalName().equals(\"properties\")) {\n 70               throw new TikaConfigException(\"expect properties as root node\");\n 71           }\n 72           return buildSingle(itemName, itemClass, properties, null);\n 73       }\n 84       protected static <T> T buildSingle(String itemName, Class<T> itemClass, Element properties,\n 85                                          T defaultValue) throws TikaConfigException, IOException {\n 86   \n 87           NodeList children = properties.getChildNodes();\n 88           T toConfigure = null;\n 89           for (int i = 0; i < children.getLength(); i++) {\n 90               Node child = children.item(i);\n 91               if (child.getNodeType() != 1) {\n 92                   continue;\n 93               }\n 94               if (itemName.equals(child.getLocalName())) {\n 95                   if (toConfigure != null) {\n 96                       throw new TikaConfigException(\n 97                               \"There can only be one \" + itemName + \" in a config\");\n 98                   }\n 99                   T item = buildClass(child, itemName, itemClass);\n100                   setParams(item, child, new HashSet<>());\n101                   toConfigure = (T) item;\n102               }\n103           }\n104           if (toConfigure == null) {\n105               if (defaultValue == null) {\n106                   throw new TikaConfigException(\"could not find \" + itemName);\n107               }\n108               return defaultValue;\n109           }\n110           return toConfigure;\n111       }\n190       private static <T> T buildClass(Node node, String elementName, Class itemClass)\n191               throws TikaConfigException {\n192           String className = itemClass.getName();\n193           Node classNameNode = node.getAttributes().getNamedItem(\"class\");\n194   \n195           if (classNameNode != null) {\n196               className = classNameNode.getTextContent();\n197           }\n198           try {\n199               Class clazz = Class.forName(className);\n200               if (!itemClass.isAssignableFrom(clazz)) {\n201                   throw new TikaConfigException(\n202                           elementName + \" with class name \" + className + \" must be of type '\" +\n203                                   itemClass.getName() + \"'\");\n204               }\n205               return (T) clazz.getDeclaredConstructor().newInstance();\n206           } catch (InstantiationException | IllegalAccessException | ClassNotFoundException |\n207                    NoSuchMethodException | InvocationTargetException e) {\n208               throw new TikaConfigException(\"problem loading \" + elementName +\n209                       \" with class \" + itemClass.getName(), e);\n210           }\n211       }\n",
            "cost": 0.066105,
            "harness_id": "TikaOne",
            "sanitizer": "load arbitrary library",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:199:41",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 57
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/extractor/DefaultEmbeddedStreamTranslator.java:\n37       private static List<EmbeddedStreamTranslator> getDefaultFilters(ServiceLoader loader) {\n38           List<EmbeddedStreamTranslator> embeddedStreamTranslators\n39                   = loader.loadServiceProviders(EmbeddedStreamTranslator.class);\n40           ServiceLoaderUtils.sortLoadedClasses(embeddedStreamTranslators);\n41           return embeddedStreamTranslators;\n42       }\n44       public DefaultEmbeddedStreamTranslator() {\n45           this(getDefaultFilters(new ServiceLoader()));\n46       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java:\n251       public <T> List<T> loadServiceProviders(Class<T> iface) {\n252           List<T> tmp = new ArrayList<>();\n253           tmp.addAll(loadDynamicServiceProviders(iface));\n254           tmp.addAll(loadStaticServiceProviders(iface));\n255   \n256           List<T> providers = new ArrayList<>();\n257           Set<String> seen = new HashSet<>();\n258           for (T provider : tmp) {\n259               if (! seen.contains(provider.getClass().getCanonicalName())) {\n260                   providers.add(provider);\n261                   seen.add(provider.getClass().getCanonicalName());\n262               }\n263           }\n264           return providers;\n265       }\n324       public <T> List<T> loadStaticServiceProviders(Class<T> iface) {\n325           return loadStaticServiceProviders(iface, Collections.EMPTY_SET);\n326       }\n339       @SuppressWarnings(\"unchecked\")\n340       public <T> List<T> loadStaticServiceProviders(Class<T> iface,\n341                                                     Collection<Class<? extends T>> excludes) {\n342           List<T> providers = new ArrayList<>();\n343   \n344           if (loader != null) {\n345               List<String> names = identifyStaticServiceProviders(iface);\n346               for (String name : names) {\n347                   try {\n348                       Class<?> klass = loader.loadClass(name);\n349                       if (iface.isAssignableFrom(klass)) {\n350                           boolean shouldExclude = false;\n351                           for (Class<? extends T> ex : excludes) {\n352                               if (ex.isAssignableFrom(klass)) {\n353                                   shouldExclude = true;\n354                                   break;\n355                               }\n356                           }\n357                           if (!shouldExclude) {\n358                               T instance = ServiceLoaderUtils.newInstance(klass, this);\n359                               if (instance instanceof Initializable) {\n360                                   ((Initializable) instance).initialize(Collections.EMPTY_MAP);\n361                                   ((Initializable) instance)\n362                                           .checkInitialization(initializableProblemHandler);\n363                               }\n364                               providers.add(instance);\n365                           }\n366                       } else {\n367                           throw new TikaConfigException(\n368                                   \"Class \" + name + \" is not of type: \" + iface);\n369                       }\n370                   } catch (Throwable t) {\n371                       handler.handleLoadError(name, t);\n372                   }\n373               }\n374           }\n375           return providers;\n376       }\n",
            "cost": 0.081045,
            "harness_id": "TikaOne",
            "sanitizer": "load arbitrary library",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java:348:55",
            "status": "corpus",
            "valid_path": "NO",
            "id": 58
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n1040           public void process(InputStream input, OutputStream output, Metadata metadata) throws Exception {\n1041               Parser p = parser;\n1042               if (fork) {\n1043                   p = new ForkParser(TikaCLI.class.getClassLoader(), p);\n1044               }\n1045               ContentHandler handler = getContentHandler(output, metadata);\n1046               try {\n1047                   p.parse(input, handler, metadata, context);\n1048                   // fix for TIKA-596: if a parser doesn't generate\n1049                   // XHTML output, the lack of an output document prevents\n1050                   // metadata from being output: this fixes that\n1051                   if (handler instanceof NoDocumentMetHandler) {\n1052                       NoDocumentMetHandler metHandler = (NoDocumentMetHandler) handler;\n1053                       if (!metHandler.metOutput()) {\n1054                           metHandler.endDocument();\n1055                       }\n1056                   }\n1057               } finally {\n1058                   if (fork) {\n1059                       ((ForkParser) p).close();\n1060                   }\n1061               }\n1062           }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-jdbc-commons/src/main/java/org/apache/tika/parser/jdbc/AbstractDBParser.java:\n 54       @Override\n 55       public void parse(InputStream stream, ContentHandler handler, Metadata metadata,\n 56                         ParseContext context) throws IOException, SAXException, TikaException {\n 57           connection = getConnection(stream, metadata, context);\n 58           XHTMLContentHandler xHandler = null;\n 59           List<String> tableNames = null;\n 60           EmbeddedDocumentUtil embeddedDocumentUtil = new EmbeddedDocumentUtil(context);\n 61           try {\n 62               tableNames = getTableNames(connection, metadata, context);\n 63           } catch (SQLException e) {\n 64               try {\n 65                   close();\n 66               } catch (SQLException sqlE) {\n 67                   //swallow\n 68               }\n 69               if (e.getClass().toString().contains(\"SQLiteException\") && e.getMessage() != null &&\n 70                       (e.getMessage().contains(\"[SQLITE_ERROR]\") ||\n 71                               e.getMessage().contains(\"[SQLITE_CORRUPT]\"))) {\n 72                   throw new CorruptedFileException(\"Corrupt SQLITE\", e);\n 73               }\n 74   \n 75               throw new IOException(e);\n 76           }\n 77           for (String tableName : tableNames) {\n 78               //add table names to parent metadata\n 79               metadata.add(Database.TABLE_NAME, tableName);\n 80           }\n 81   \n 82           extractMetadata(connection, metadata);\n 83   \n 84           xHandler = new XHTMLContentHandler(handler, metadata);\n 85           xHandler.startDocument();\n 86   \n 87           try {\n 88               for (String tableName : tableNames) {\n 89                   JDBCTableReader tableReader =\n 90                           getTableReader(connection, tableName, embeddedDocumentUtil);\n 91                   xHandler.startElement(\"table\", \"name\", tableReader.getTableName());\n 92                   xHandler.startElement(\"thead\");\n 93                   xHandler.startElement(\"tr\");\n 94                   for (String header : tableReader.getHeaders()) {\n 95                       xHandler.startElement(\"th\");\n 96                       xHandler.characters(header);\n 97                       xHandler.endElement(\"th\");\n 98                   }\n 99                   xHandler.endElement(\"tr\");\n100                   xHandler.endElement(\"thead\");\n101                   xHandler.startElement(\"tbody\");\n102                   while (tableReader.nextRow(xHandler, context)) {\n103                       //no-op\n104                   }\n105                   xHandler.endElement(\"tbody\");\n106                   xHandler.endElement(\"table\");\n107               }\n108           } finally {\n109               try {\n110                   close();\n111               } catch (IOException | SQLException e) {\n112                   //swallow\n113               }\n114               if (xHandler != null) {\n115                   xHandler.endDocument();\n116               }\n117           }\n118       }\n152       protected Connection getConnection(InputStream stream, Metadata metadata, ParseContext context)\n153               throws IOException, TikaException {\n154           String connectionString = getConnectionString(stream, metadata, context);\n155   \n156           Connection connection = null;\n157           try {\n158               Class.forName(getJDBCClassName());\n159           } catch (ClassNotFoundException e) {\n160               throw new TikaException(e.getMessage());\n161           }\n162           try {\n163               connection = DriverManager.getConnection(connectionString);\n164           } catch (SQLException e) {\n165               throw new IOException(e);\n166           }\n167           return connection;\n168       }\n",
            "cost": 0.089605,
            "harness_id": "TikaOne",
            "sanitizer": "load arbitrary library",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-jdbc-commons/src/main/java/org/apache/tika/parser/jdbc/AbstractDBParser.java:158:27",
            "status": "corpus",
            "valid_path": "NO",
            "id": 59
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n1040           public void process(InputStream input, OutputStream output, Metadata metadata) throws Exception {\n1041               Parser p = parser;\n1042               if (fork) {\n1043                   p = new ForkParser(TikaCLI.class.getClassLoader(), p);\n1044               }\n1045               ContentHandler handler = getContentHandler(output, metadata);\n1046               try {\n1047                   p.parse(input, handler, metadata, context);\n1048                   // fix for TIKA-596: if a parser doesn't generate\n1049                   // XHTML output, the lack of an output document prevents\n1050                   // metadata from being output: this fixes that\n1051                   if (handler instanceof NoDocumentMetHandler) {\n1052                       NoDocumentMetHandler metHandler = (NoDocumentMetHandler) handler;\n1053                       if (!metHandler.metOutput()) {\n1054                           metHandler.endDocument();\n1055                       }\n1056                   }\n1057               } finally {\n1058                   if (fork) {\n1059                       ((ForkParser) p).close();\n1060                   }\n1061               }\n1062           }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/xml/AbstractXML2003Parser.java:\n 84       @Override\n 85       public void parse(InputStream stream, ContentHandler handler, Metadata metadata,\n 86                         ParseContext context) throws IOException, SAXException, TikaException {\n 87           setContentType(metadata);\n 88   \n 89           final XHTMLContentHandler xhtml = new XHTMLContentHandler(handler, metadata);\n 90           xhtml.startDocument();\n 91   \n 92           TaggedContentHandler tagged = new TaggedContentHandler(xhtml);\n 93           try {\n 94               //need to get new SAXParser because\n 95               //an attachment might require another SAXParser\n 96               //mid-parse\n 97               XMLReaderUtils.getSAXParser().parse(CloseShieldInputStream.wrap(stream),\n 98                       new EmbeddedContentHandler(\n 99                               getContentHandler(tagged, metadata, context)));\n100           } catch (SAXException e) {\n101               WriteLimitReachedException.throwIfWriteLimitReached(e);\n102               throw new TikaException(\"XML parse error\", e);\n103           } finally {\n104               xhtml.endDocument();\n105           }\n106       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java:\n 194       public static SAXParser getSAXParser() throws TikaException {\n 195           try {\n 196               SAXParser parser = getSAXParserFactory().newSAXParser();\n 197               trySetXercesSecurityManager(parser);\n 198               return parser;\n 199           } catch (ParserConfigurationException e) {\n 200               throw new TikaException(\"Unable to configure a SAX parser\", e);\n 201           } catch (SAXException e) {\n 202               throw new TikaException(\"Unable to create a SAX parser\", e);\n 203           }\n 204       }\n 757       private static void trySetXercesSecurityManager(SAXParser parser) {\n 758           //from POI\n 759           // Try built-in JVM one first, standalone if not\n 760           for (String securityManagerClassName : new String[]{\n 761                   //\"com.sun.org.apache.xerces.internal.util.SecurityManager\",\n 762                   XERCES_SECURITY_MANAGER}) {\n 763               try {\n 764                   Object mgr =\n 765                           Class.forName(securityManagerClassName).getDeclaredConstructor().newInstance();\n 766                   Method setLimit = mgr.getClass().getMethod(\"setEntityExpansionLimit\", Integer.TYPE);\n 767                   setLimit.invoke(mgr, MAX_ENTITY_EXPANSIONS);\n 768   \n 769                   parser.setProperty(XERCES_SECURITY_MANAGER_PROPERTY, mgr);\n 770                   // Stop once one can be setup without error\n 771                   return;\n 772               } catch (ClassNotFoundException e) {\n 773                   // continue without log, this is expected in some setups\n 774               } catch (Throwable e) {\n 775                   // NOSONAR - also catch things like NoClassDefError here\n 776                   // throttle the log somewhat as it can spam the log otherwise\n 777                   if (System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {\n 778                       LOG.warn(\n 779                               \"SAX Security Manager could not be setup [log suppressed for 5 \" +\n 780                                       \"minutes]\",\n 781                               e);\n 782                       LAST_LOG = System.currentTimeMillis();\n 783                   }\n 784               }\n 785           }\n 786   \n 787           // separate old version of Xerces not found => use the builtin way of setting the property\n 788           try {\n 789               parser.setProperty(\"http://www.oracle.com/xml/jaxp/properties/entityExpansionLimit\",\n 790                       MAX_ENTITY_EXPANSIONS);\n 791           } catch (SAXException e) {     // NOSONAR - also catch things like NoClassDefError here\n 792               // throttle the log somewhat as it can spam the log otherwise\n 793               if (System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {\n 794                   LOG.warn(\"SAX Security Manager could not be setup [log suppressed for 5 minutes]\",\n 795                           e);\n 796                   LAST_LOG = System.currentTimeMillis();\n 797               }\n 798           }\n 799       }\n",
            "cost": 0.09186,
            "harness_id": "TikaOne",
            "sanitizer": "load arbitrary library",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java:765:39",
            "status": "corpus",
            "valid_path": "NO",
            "id": 60
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n 667           @SuppressWarnings(\"unchecked\")\n 668           CT loadOverall(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 669                   throws TikaException, IOException {\n 670               List<T> loaded = new ArrayList<>();\n 671   \n 672               // Find the children of the parent tag, if any\n 673               for (Element le : getTopLevelElementChildren(element, getParentTagName(),\n 674                       getLoaderTagName())) {\n 675                   T loadedChild = loadOne(le, mimeTypes, loader);\n 676                   if (loadedChild != null) {\n 677                       loaded.add(loadedChild);\n 678                   }\n 679               }\n 680   \n 681               // Build the classes, and wrap as needed\n 682               if (loaded.isEmpty()) {\n 683                   // Nothing defined, create a Default\n 684                   return createDefault(mimeTypes, loader);\n 685               } else if (loaded.size() == 1) {\n 686                   T single = loaded.get(0);\n 687                   if (isComposite(single)) {\n 688                       // Single Composite defined, use that\n 689                       return (CT) single;\n 690                   }\n 691               } else if (!supportsComposite()) {\n 692                   // No composite support, just return the first one\n 693                   if (loaded.size() == 1) {\n 694                       return (CT) loaded.get(0);\n 695                   } else if (loaded.size() > 1) {\n 696                       throw new TikaConfigException(\n 697                               \"Composite not supported for \" + getParentTagName() +\n 698                                       \". Must specify only one child!\");\n 699                   } else {\n 700                       //throw exception if empty?\n 701                   }\n 702               }\n 703               // Wrap the defined parsers/detectors up in a Composite\n 704               return createComposite(loaded, mimeTypes, loader);\n 705           }\n 707           T loadOne(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 708                   throws TikaException, IOException {\n 709               String name = element.getAttribute(\"class\");\n 710               if (name == null) {\n 711                   throw new TikaConfigException(\"class attribute must not be null: \" + element);\n 712               }\n 713               String initProbHandler = element.getAttribute(\"initializableProblemHandler\");\n 714               InitializableProblemHandler initializableProblemHandler;\n 715               if (initProbHandler == null || initProbHandler.length() == 0) {\n 716                   initializableProblemHandler = loader.getInitializableProblemHandler();\n 717               } else {\n 718                   initializableProblemHandler = getInitializableProblemHandler(initProbHandler);\n 719               }\n 720   \n 721               T loaded = null;\n 722   \n 723               try {\n 724                   Class<? extends T> loadedClass = loader.getServiceClass(getLoaderClass(), name);\n 725   \n 726                   // Do pre-load checks and short-circuits\n 727                   //TODO : allow duplicate instances with different configurations\n 728                   loaded = preLoadOne(loadedClass, name, mimeTypes);\n 729                   if (loaded != null) {\n 730                       return loaded;\n 731                   }\n 732   \n 733                   // Get any parameters / settings for the parser\n 734                   Map<String, Param> params = null;\n 735                   try {\n 736                       params = getParams(element);\n 737                   } catch (Exception e) {\n 738                       throw new TikaConfigException(e.getMessage(), e);\n 739                   }\n 740   \n 741                   // Is this a composite or decorated class? If so, support recursion\n 742                   if (isComposite(loadedClass)) {\n 743                       // Get the child objects for it\n 744                       List<T> children = new ArrayList<>();\n 745                       NodeList childNodes = element.getElementsByTagName(getLoaderTagName());\n 746                       if (childNodes.getLength() > 0) {\n 747                           for (int i = 0; i < childNodes.getLength(); i++) {\n 748                               T loadedChild =\n 749                                       loadOne((Element) childNodes.item(i), mimeTypes, loader);\n 750                               if (loadedChild != null) {\n 751                                   children.add(loadedChild);\n 752                               }\n 753                           }\n 754                       }\n 755   \n 756                       // Get the list of children to exclude\n 757                       Set<Class<? extends T>> excludeChildren = new HashSet<>();\n 758                       NodeList excludeChildNodes =\n 759                               element.getElementsByTagName(getLoaderTagName() + \"-exclude\");\n 760                       if (excludeChildNodes.getLength() > 0) {\n 761                           for (int i = 0; i < excludeChildNodes.getLength(); i++) {\n 762                               Element excl = (Element) excludeChildNodes.item(i);\n 763                               String exclName = excl.getAttribute(\"class\");\n 764                               try {\n 765                                   excludeChildren\n 766                                           .add(loader.getServiceClass(getLoaderClass(), exclName));\n 767                               } catch (ClassNotFoundException e) {\n 768                                   //TIKA-3268 -- This should stop the world.\n 769                                   throw new TikaConfigException(\n 770                                           \"Class not found in -exclude list: \" + exclName);\n 771                               }\n 772                           }\n 773                       }\n 774   \n 775                       // Create the Composite\n 776                       loaded = createComposite(loadedClass, children, excludeChildren, params,\n 777                               mimeTypes, loader);\n 778   \n 779                       // Default constructor fallback\n 780                       if (loaded == null) {\n 781                           loaded = newInstance(loadedClass);\n 782                       }\n 783                   } else {\n 784                       // Regular class, create as-is\n 785                       loaded = newInstance(loadedClass);\n 786                       // TODO Support arguments, needed for Translators etc\n 787                       // See the thread \"Configuring parsers and translators\" for details\n 788                   }\n 789   \n 790                   //Assigning the params to bean fields/setters\n 791                   AnnotationUtils.assignFieldParams(loaded, params);\n 792                   if (loaded instanceof Initializable) {\n 793                       ((Initializable) loaded).initialize(params);\n 794                       ((Initializable) loaded).checkInitialization(initializableProblemHandler);\n 795                   }\n 796                   // Have any decoration performed, eg explicit mimetypes\n 797                   loaded = decorate(loaded, element);\n 798                   // All done with setup\n 799                   return loaded;\n 800               } catch (ClassNotFoundException e) {\n 801                   if (loader.getLoadErrorHandler() == LoadErrorHandler.THROW) {\n 802                       // Use a different exception signature here\n 803                       throw new TikaConfigException(\n 804                               \"Unable to find a \" + getLoaderTagName() + \" class: \" + name, e);\n 805                   }\n 806                   // Report the problem\n 807                   loader.getLoadErrorHandler().handleLoadError(name, e);\n 808                   return null;\n 809               } catch (IllegalAccessException e) {\n 810                   throw new TikaException(\n 811                           \"Unable to access a \" + getLoaderTagName() + \" class: \" + name, e);\n 812               } catch (InvocationTargetException e) {\n 813                   throw new TikaException(\n 814                           \"Unable to create a \" + getLoaderTagName() + \" class: \" + name, e);\n 815               } catch (InstantiationException e) {\n 816                   throw new TikaException(\n 817                           \"Unable to instantiate a \" + getLoaderTagName() + \" class: \" + name, e);\n 818               } catch (NoSuchMethodException e) {\n 819                   throw new TikaException(\n 820                           \"Unable to find the right constructor for \" + getLoaderTagName() +\n 821                                   \" class: \" + name, e);\n 822               }\n 823           }\n\nsrc/tika/tika-pipes/tika-pipes-iterators/tika-pipes-iterator-kafka/src/main/java/org/apache/tika/pipes/pipesiterator/kafka/KafkaPipesIterator.java:\n120       @Override\n121       public void initialize(Map<String, Param> params) {\n122           props = new Properties();\n123           safePut(props, ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n124           safePut(props, ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, serializerClass(keySerializer, StringDeserializer.class));\n125           safePut(props, ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, serializerClass(valueSerializer, StringDeserializer.class));\n126           safePut(props, ConsumerConfig.GROUP_ID_CONFIG, groupId);\n127           safePut(props, ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, autoOffsetReset);\n128           safePut(props, \"group.inital.rebalance.delay.ms\", groupInitialRebalanceDelayMs);\n129           consumer = new KafkaConsumer<>(props);\n130           consumer.subscribe(Arrays.asList(topic));\n131       }\n133       private Object serializerClass(String className, Class defaultClass) {\n134           try {\n135               return className == null ? defaultClass : Class.forName(className);\n136           } catch (ClassNotFoundException e) {\n137               LOGGER.error(\"Could not find key serializer class: {}\", className);\n138               return null;\n139           }\n140       }\n",
            "cost": 0.11727499999999999,
            "harness_id": "TikaOne",
            "sanitizer": "load arbitrary library",
            "sink": "src/tika/tika-pipes/tika-pipes-iterators/tika-pipes-iterator-kafka/src/main/java/org/apache/tika/pipes/pipesiterator/kafka/KafkaPipesIterator.java:135:69",
            "status": "corpus",
            "valid_path": "NO",
            "id": 61
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n 667           @SuppressWarnings(\"unchecked\")\n 668           CT loadOverall(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 669                   throws TikaException, IOException {\n 670               List<T> loaded = new ArrayList<>();\n 671   \n 672               // Find the children of the parent tag, if any\n 673               for (Element le : getTopLevelElementChildren(element, getParentTagName(),\n 674                       getLoaderTagName())) {\n 675                   T loadedChild = loadOne(le, mimeTypes, loader);\n 676                   if (loadedChild != null) {\n 677                       loaded.add(loadedChild);\n 678                   }\n 679               }\n 680   \n 681               // Build the classes, and wrap as needed\n 682               if (loaded.isEmpty()) {\n 683                   // Nothing defined, create a Default\n 684                   return createDefault(mimeTypes, loader);\n 685               } else if (loaded.size() == 1) {\n 686                   T single = loaded.get(0);\n 687                   if (isComposite(single)) {\n 688                       // Single Composite defined, use that\n 689                       return (CT) single;\n 690                   }\n 691               } else if (!supportsComposite()) {\n 692                   // No composite support, just return the first one\n 693                   if (loaded.size() == 1) {\n 694                       return (CT) loaded.get(0);\n 695                   } else if (loaded.size() > 1) {\n 696                       throw new TikaConfigException(\n 697                               \"Composite not supported for \" + getParentTagName() +\n 698                                       \". Must specify only one child!\");\n 699                   } else {\n 700                       //throw exception if empty?\n 701                   }\n 702               }\n 703               // Wrap the defined parsers/detectors up in a Composite\n 704               return createComposite(loaded, mimeTypes, loader);\n 705           }\n 707           T loadOne(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 708                   throws TikaException, IOException {\n 709               String name = element.getAttribute(\"class\");\n 710               if (name == null) {\n 711                   throw new TikaConfigException(\"class attribute must not be null: \" + element);\n 712               }\n 713               String initProbHandler = element.getAttribute(\"initializableProblemHandler\");\n 714               InitializableProblemHandler initializableProblemHandler;\n 715               if (initProbHandler == null || initProbHandler.length() == 0) {\n 716                   initializableProblemHandler = loader.getInitializableProblemHandler();\n 717               } else {\n 718                   initializableProblemHandler = getInitializableProblemHandler(initProbHandler);\n 719               }\n 720   \n 721               T loaded = null;\n 722   \n 723               try {\n 724                   Class<? extends T> loadedClass = loader.getServiceClass(getLoaderClass(), name);\n 725   \n 726                   // Do pre-load checks and short-circuits\n 727                   //TODO : allow duplicate instances with different configurations\n 728                   loaded = preLoadOne(loadedClass, name, mimeTypes);\n 729                   if (loaded != null) {\n 730                       return loaded;\n 731                   }\n 732   \n 733                   // Get any parameters / settings for the parser\n 734                   Map<String, Param> params = null;\n 735                   try {\n 736                       params = getParams(element);\n 737                   } catch (Exception e) {\n 738                       throw new TikaConfigException(e.getMessage(), e);\n 739                   }\n 740   \n 741                   // Is this a composite or decorated class? If so, support recursion\n 742                   if (isComposite(loadedClass)) {\n 743                       // Get the child objects for it\n 744                       List<T> children = new ArrayList<>();\n 745                       NodeList childNodes = element.getElementsByTagName(getLoaderTagName());\n 746                       if (childNodes.getLength() > 0) {\n 747                           for (int i = 0; i < childNodes.getLength(); i++) {\n 748                               T loadedChild =\n 749                                       loadOne((Element) childNodes.item(i), mimeTypes, loader);\n 750                               if (loadedChild != null) {\n 751                                   children.add(loadedChild);\n 752                               }\n 753                           }\n 754                       }\n 755   \n 756                       // Get the list of children to exclude\n 757                       Set<Class<? extends T>> excludeChildren = new HashSet<>();\n 758                       NodeList excludeChildNodes =\n 759                               element.getElementsByTagName(getLoaderTagName() + \"-exclude\");\n 760                       if (excludeChildNodes.getLength() > 0) {\n 761                           for (int i = 0; i < excludeChildNodes.getLength(); i++) {\n 762                               Element excl = (Element) excludeChildNodes.item(i);\n 763                               String exclName = excl.getAttribute(\"class\");\n 764                               try {\n 765                                   excludeChildren\n 766                                           .add(loader.getServiceClass(getLoaderClass(), exclName));\n 767                               } catch (ClassNotFoundException e) {\n 768                                   //TIKA-3268 -- This should stop the world.\n 769                                   throw new TikaConfigException(\n 770                                           \"Class not found in -exclude list: \" + exclName);\n 771                               }\n 772                           }\n 773                       }\n 774   \n 775                       // Create the Composite\n 776                       loaded = createComposite(loadedClass, children, excludeChildren, params,\n 777                               mimeTypes, loader);\n 778   \n 779                       // Default constructor fallback\n 780                       if (loaded == null) {\n 781                           loaded = newInstance(loadedClass);\n 782                       }\n 783                   } else {\n 784                       // Regular class, create as-is\n 785                       loaded = newInstance(loadedClass);\n 786                       // TODO Support arguments, needed for Translators etc\n 787                       // See the thread \"Configuring parsers and translators\" for details\n 788                   }\n 789   \n 790                   //Assigning the params to bean fields/setters\n 791                   AnnotationUtils.assignFieldParams(loaded, params);\n 792                   if (loaded instanceof Initializable) {\n 793                       ((Initializable) loaded).initialize(params);\n 794                       ((Initializable) loaded).checkInitialization(initializableProblemHandler);\n 795                   }\n 796                   // Have any decoration performed, eg explicit mimetypes\n 797                   loaded = decorate(loaded, element);\n 798                   // All done with setup\n 799                   return loaded;\n 800               } catch (ClassNotFoundException e) {\n 801                   if (loader.getLoadErrorHandler() == LoadErrorHandler.THROW) {\n 802                       // Use a different exception signature here\n 803                       throw new TikaConfigException(\n 804                               \"Unable to find a \" + getLoaderTagName() + \" class: \" + name, e);\n 805                   }\n 806                   // Report the problem\n 807                   loader.getLoadErrorHandler().handleLoadError(name, e);\n 808                   return null;\n 809               } catch (IllegalAccessException e) {\n 810                   throw new TikaException(\n 811                           \"Unable to access a \" + getLoaderTagName() + \" class: \" + name, e);\n 812               } catch (InvocationTargetException e) {\n 813                   throw new TikaException(\n 814                           \"Unable to create a \" + getLoaderTagName() + \" class: \" + name, e);\n 815               } catch (InstantiationException e) {\n 816                   throw new TikaException(\n 817                           \"Unable to instantiate a \" + getLoaderTagName() + \" class: \" + name, e);\n 818               } catch (NoSuchMethodException e) {\n 819                   throw new TikaException(\n 820                           \"Unable to find the right constructor for \" + getLoaderTagName() +\n 821                                   \" class: \" + name, e);\n 822               }\n 823           }\n 838           Map<String, Param> getParams(Element el) throws TikaException {\n 839               Map<String, Param> params = new HashMap<>();\n 840               for (Node child = el.getFirstChild(); child != null; child = child.getNextSibling()) {\n 841                   if (PARAMS_TAG_NAME.equals(child.getNodeName())) { //found the node\n 842                       if (child.hasChildNodes()) { //it has children\n 843                           NodeList childNodes = child.getChildNodes();\n 844                           for (int i = 0; i < childNodes.getLength(); i++) {\n 845                               Node item = childNodes.item(i);\n 846                               if (item.getNodeType() == Node.ELEMENT_NODE) {\n 847                                   Param<?> param = Param.load(item);\n 848                                   params.put(param.getName(), param);\n 849                               }\n 850                           }\n 851                       }\n 852                       break; //only the first one is used\n 853                   }\n 854               }\n 855               return params;\n 856           }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/Param.java:\n127       public static <T> Param<T> load(Node node) throws TikaConfigException {\n128   \n129           Node nameAttr = node.getAttributes().getNamedItem(\"name\");\n130           Node typeAttr = node.getAttributes().getNamedItem(\"type\");\n131           Node valueAttr = node.getAttributes().getNamedItem(\"value\");\n132           Node classAttr = node.getAttributes().getNamedItem(\"class\");\n133           Class clazz = null;\n134           if (classAttr != null) {\n135               try {\n136                   clazz = Class.forName(classAttr.getTextContent());\n137               } catch (ClassNotFoundException e) {\n138                   throw new TikaConfigException(\"can't find class: \" + classAttr.getTextContent(), e);\n139               }\n140           }\n141           Node value = node.getFirstChild();\n142           if (value instanceof NodeList && valueAttr != null) {\n143               throw new TikaConfigException(\"can't specify a value attr _and_ a node list\");\n144           }\n145           if (valueAttr != null && (value == null || value.getTextContent() == null)) {\n146               value = valueAttr;\n147           }\n148   \n149           Param<T> ret = new Param<>();\n150           ret.name = nameAttr.getTextContent();\n151           if (typeAttr != null) {\n152               String type = typeAttr.getTextContent();\n153               if (\"class\".equals(type)) {\n154                   if (classAttr == null) {\n155                       throw new TikaConfigException(\"must specify a class attribute if \" +\n156                               \"type=\\\"class\\\"\");\n157                   }\n158                   ret.setType(clazz);\n159               } else {\n160                   ret.setTypeString(typeAttr.getTextContent());\n161               }\n162           } else {\n163               ret.type = (Class<T>) wellKnownMap.get(ret.name);\n164               if (ret.type == null) {\n165                   ret.type = clazz;\n166               }\n167               if (ret.type == null) {\n168                   throw new TikaConfigException(\"Must specify a \\\"type\\\" in: \" + node.getLocalName());\n169               }\n170           }\n171   \n172           if (clazz != null) {\n173               loadObject(ret, node, clazz);\n174           } else if (List.class.isAssignableFrom(ret.type)) {\n175               loadList(ret, node);\n176           } else if (Map.class.isAssignableFrom(ret.type)) {\n177               loadMap(ret, node);\n178           } else {\n179               //allow the empty string\n180               String textContent = \"\";\n181               if (value != null) {\n182                   textContent = value.getTextContent();\n183               }\n184               ret.actualValue = getTypedValue(ret.type, textContent);\n185               ret.valueStrings.add(textContent);\n186           }\n187           return ret;\n188       }\n255       private static <T> void loadList(Param<T> ret, Node root) {\n256           Node child = root.getFirstChild();\n257           ret.actualValue = (T) new ArrayList<>();\n258           while (child != null) {\n259               if (child.getNodeType() == Node.ELEMENT_NODE) {\n260                   Class type = classFromType(child.getLocalName());\n261                   ((List) ret.actualValue).add(getTypedValue(type, child.getTextContent()));\n262                   ret.valueStrings.add(child.getTextContent());\n263               }\n264               child = child.getNextSibling();\n265           }\n266       }\n268       private static <T> Class<T> classFromType(String type) {\n269           if (reverseMap.containsKey(type)) {\n270               return (Class<T>) reverseMap.get(type);\n271           } else {\n272               try {\n273                   return (Class<T>) Class.forName(type);\n274               } catch (ClassNotFoundException e) {\n275                   throw new RuntimeException(e);\n276               }\n277           }\n278       }\n",
            "cost": 0.124245,
            "harness_id": "TikaOne",
            "sanitizer": "load arbitrary library",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/Param.java:273:49",
            "status": "corpus",
            "valid_path": "NO",
            "id": 62
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n 667           @SuppressWarnings(\"unchecked\")\n 668           CT loadOverall(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 669                   throws TikaException, IOException {\n 670               List<T> loaded = new ArrayList<>();\n 671   \n 672               // Find the children of the parent tag, if any\n 673               for (Element le : getTopLevelElementChildren(element, getParentTagName(),\n 674                       getLoaderTagName())) {\n 675                   T loadedChild = loadOne(le, mimeTypes, loader);\n 676                   if (loadedChild != null) {\n 677                       loaded.add(loadedChild);\n 678                   }\n 679               }\n 680   \n 681               // Build the classes, and wrap as needed\n 682               if (loaded.isEmpty()) {\n 683                   // Nothing defined, create a Default\n 684                   return createDefault(mimeTypes, loader);\n 685               } else if (loaded.size() == 1) {\n 686                   T single = loaded.get(0);\n 687                   if (isComposite(single)) {\n 688                       // Single Composite defined, use that\n 689                       return (CT) single;\n 690                   }\n 691               } else if (!supportsComposite()) {\n 692                   // No composite support, just return the first one\n 693                   if (loaded.size() == 1) {\n 694                       return (CT) loaded.get(0);\n 695                   } else if (loaded.size() > 1) {\n 696                       throw new TikaConfigException(\n 697                               \"Composite not supported for \" + getParentTagName() +\n 698                                       \". Must specify only one child!\");\n 699                   } else {\n 700                       //throw exception if empty?\n 701                   }\n 702               }\n 703               // Wrap the defined parsers/detectors up in a Composite\n 704               return createComposite(loaded, mimeTypes, loader);\n 705           }\n 707           T loadOne(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 708                   throws TikaException, IOException {\n 709               String name = element.getAttribute(\"class\");\n 710               if (name == null) {\n 711                   throw new TikaConfigException(\"class attribute must not be null: \" + element);\n 712               }\n 713               String initProbHandler = element.getAttribute(\"initializableProblemHandler\");\n 714               InitializableProblemHandler initializableProblemHandler;\n 715               if (initProbHandler == null || initProbHandler.length() == 0) {\n 716                   initializableProblemHandler = loader.getInitializableProblemHandler();\n 717               } else {\n 718                   initializableProblemHandler = getInitializableProblemHandler(initProbHandler);\n 719               }\n 720   \n 721               T loaded = null;\n 722   \n 723               try {\n 724                   Class<? extends T> loadedClass = loader.getServiceClass(getLoaderClass(), name);\n 725   \n 726                   // Do pre-load checks and short-circuits\n 727                   //TODO : allow duplicate instances with different configurations\n 728                   loaded = preLoadOne(loadedClass, name, mimeTypes);\n 729                   if (loaded != null) {\n 730                       return loaded;\n 731                   }\n 732   \n 733                   // Get any parameters / settings for the parser\n 734                   Map<String, Param> params = null;\n 735                   try {\n 736                       params = getParams(element);\n 737                   } catch (Exception e) {\n 738                       throw new TikaConfigException(e.getMessage(), e);\n 739                   }\n 740   \n 741                   // Is this a composite or decorated class? If so, support recursion\n 742                   if (isComposite(loadedClass)) {\n 743                       // Get the child objects for it\n 744                       List<T> children = new ArrayList<>();\n 745                       NodeList childNodes = element.getElementsByTagName(getLoaderTagName());\n 746                       if (childNodes.getLength() > 0) {\n 747                           for (int i = 0; i < childNodes.getLength(); i++) {\n 748                               T loadedChild =\n 749                                       loadOne((Element) childNodes.item(i), mimeTypes, loader);\n 750                               if (loadedChild != null) {\n 751                                   children.add(loadedChild);\n 752                               }\n 753                           }\n 754                       }\n 755   \n 756                       // Get the list of children to exclude\n 757                       Set<Class<? extends T>> excludeChildren = new HashSet<>();\n 758                       NodeList excludeChildNodes =\n 759                               element.getElementsByTagName(getLoaderTagName() + \"-exclude\");\n 760                       if (excludeChildNodes.getLength() > 0) {\n 761                           for (int i = 0; i < excludeChildNodes.getLength(); i++) {\n 762                               Element excl = (Element) excludeChildNodes.item(i);\n 763                               String exclName = excl.getAttribute(\"class\");\n 764                               try {\n 765                                   excludeChildren\n 766                                           .add(loader.getServiceClass(getLoaderClass(), exclName));\n 767                               } catch (ClassNotFoundException e) {\n 768                                   //TIKA-3268 -- This should stop the world.\n 769                                   throw new TikaConfigException(\n 770                                           \"Class not found in -exclude list: \" + exclName);\n 771                               }\n 772                           }\n 773                       }\n 774   \n 775                       // Create the Composite\n 776                       loaded = createComposite(loadedClass, children, excludeChildren, params,\n 777                               mimeTypes, loader);\n 778   \n 779                       // Default constructor fallback\n 780                       if (loaded == null) {\n 781                           loaded = newInstance(loadedClass);\n 782                       }\n 783                   } else {\n 784                       // Regular class, create as-is\n 785                       loaded = newInstance(loadedClass);\n 786                       // TODO Support arguments, needed for Translators etc\n 787                       // See the thread \"Configuring parsers and translators\" for details\n 788                   }\n 789   \n 790                   //Assigning the params to bean fields/setters\n 791                   AnnotationUtils.assignFieldParams(loaded, params);\n 792                   if (loaded instanceof Initializable) {\n 793                       ((Initializable) loaded).initialize(params);\n 794                       ((Initializable) loaded).checkInitialization(initializableProblemHandler);\n 795                   }\n 796                   // Have any decoration performed, eg explicit mimetypes\n 797                   loaded = decorate(loaded, element);\n 798                   // All done with setup\n 799                   return loaded;\n 800               } catch (ClassNotFoundException e) {\n 801                   if (loader.getLoadErrorHandler() == LoadErrorHandler.THROW) {\n 802                       // Use a different exception signature here\n 803                       throw new TikaConfigException(\n 804                               \"Unable to find a \" + getLoaderTagName() + \" class: \" + name, e);\n 805                   }\n 806                   // Report the problem\n 807                   loader.getLoadErrorHandler().handleLoadError(name, e);\n 808                   return null;\n 809               } catch (IllegalAccessException e) {\n 810                   throw new TikaException(\n 811                           \"Unable to access a \" + getLoaderTagName() + \" class: \" + name, e);\n 812               } catch (InvocationTargetException e) {\n 813                   throw new TikaException(\n 814                           \"Unable to create a \" + getLoaderTagName() + \" class: \" + name, e);\n 815               } catch (InstantiationException e) {\n 816                   throw new TikaException(\n 817                           \"Unable to instantiate a \" + getLoaderTagName() + \" class: \" + name, e);\n 818               } catch (NoSuchMethodException e) {\n 819                   throw new TikaException(\n 820                           \"Unable to find the right constructor for \" + getLoaderTagName() +\n 821                                   \" class: \" + name, e);\n 822               }\n 823           }\n 838           Map<String, Param> getParams(Element el) throws TikaException {\n 839               Map<String, Param> params = new HashMap<>();\n 840               for (Node child = el.getFirstChild(); child != null; child = child.getNextSibling()) {\n 841                   if (PARAMS_TAG_NAME.equals(child.getNodeName())) { //found the node\n 842                       if (child.hasChildNodes()) { //it has children\n 843                           NodeList childNodes = child.getChildNodes();\n 844                           for (int i = 0; i < childNodes.getLength(); i++) {\n 845                               Node item = childNodes.item(i);\n 846                               if (item.getNodeType() == Node.ELEMENT_NODE) {\n 847                                   Param<?> param = Param.load(item);\n 848                                   params.put(param.getName(), param);\n 849                               }\n 850                           }\n 851                       }\n 852                       break; //only the first one is used\n 853                   }\n 854               }\n 855               return params;\n 856           }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/Param.java:\n127       public static <T> Param<T> load(Node node) throws TikaConfigException {\n128   \n129           Node nameAttr = node.getAttributes().getNamedItem(\"name\");\n130           Node typeAttr = node.getAttributes().getNamedItem(\"type\");\n131           Node valueAttr = node.getAttributes().getNamedItem(\"value\");\n132           Node classAttr = node.getAttributes().getNamedItem(\"class\");\n133           Class clazz = null;\n134           if (classAttr != null) {\n135               try {\n136                   clazz = Class.forName(classAttr.getTextContent());\n137               } catch (ClassNotFoundException e) {\n138                   throw new TikaConfigException(\"can't find class: \" + classAttr.getTextContent(), e);\n139               }\n140           }\n141           Node value = node.getFirstChild();\n142           if (value instanceof NodeList && valueAttr != null) {\n143               throw new TikaConfigException(\"can't specify a value attr _and_ a node list\");\n144           }\n145           if (valueAttr != null && (value == null || value.getTextContent() == null)) {\n146               value = valueAttr;\n147           }\n148   \n149           Param<T> ret = new Param<>();\n150           ret.name = nameAttr.getTextContent();\n151           if (typeAttr != null) {\n152               String type = typeAttr.getTextContent();\n153               if (\"class\".equals(type)) {\n154                   if (classAttr == null) {\n155                       throw new TikaConfigException(\"must specify a class attribute if \" +\n156                               \"type=\\\"class\\\"\");\n157                   }\n158                   ret.setType(clazz);\n159               } else {\n160                   ret.setTypeString(typeAttr.getTextContent());\n161               }\n162           } else {\n163               ret.type = (Class<T>) wellKnownMap.get(ret.name);\n164               if (ret.type == null) {\n165                   ret.type = clazz;\n166               }\n167               if (ret.type == null) {\n168                   throw new TikaConfigException(\"Must specify a \\\"type\\\" in: \" + node.getLocalName());\n169               }\n170           }\n171   \n172           if (clazz != null) {\n173               loadObject(ret, node, clazz);\n174           } else if (List.class.isAssignableFrom(ret.type)) {\n175               loadList(ret, node);\n176           } else if (Map.class.isAssignableFrom(ret.type)) {\n177               loadMap(ret, node);\n178           } else {\n179               //allow the empty string\n180               String textContent = \"\";\n181               if (value != null) {\n182                   textContent = value.getTextContent();\n183               }\n184               ret.actualValue = getTypedValue(ret.type, textContent);\n185               ret.valueStrings.add(textContent);\n186           }\n187           return ret;\n188       }\n",
            "cost": 0.13131500000000002,
            "harness_id": "TikaOne",
            "sanitizer": "load arbitrary library",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/Param.java:136:39",
            "status": "corpus",
            "valid_path": "NO",
            "id": 63
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n1040           public void process(InputStream input, OutputStream output, Metadata metadata) throws Exception {\n1041               Parser p = parser;\n1042               if (fork) {\n1043                   p = new ForkParser(TikaCLI.class.getClassLoader(), p);\n1044               }\n1045               ContentHandler handler = getContentHandler(output, metadata);\n1046               try {\n1047                   p.parse(input, handler, metadata, context);\n1048                   // fix for TIKA-596: if a parser doesn't generate\n1049                   // XHTML output, the lack of an output document prevents\n1050                   // metadata from being output: this fixes that\n1051                   if (handler instanceof NoDocumentMetHandler) {\n1052                       NoDocumentMetHandler metHandler = (NoDocumentMetHandler) handler;\n1053                       if (!metHandler.metOutput()) {\n1054                           metHandler.endDocument();\n1055                       }\n1056                   }\n1057               } finally {\n1058                   if (fork) {\n1059                       ((ForkParser) p).close();\n1060                   }\n1061               }\n1062           }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-jdbc-commons/src/main/java/org/apache/tika/parser/jdbc/AbstractDBParser.java:\n 54       @Override\n 55       public void parse(InputStream stream, ContentHandler handler, Metadata metadata,\n 56                         ParseContext context) throws IOException, SAXException, TikaException {\n 57           connection = getConnection(stream, metadata, context);\n 58           XHTMLContentHandler xHandler = null;\n 59           List<String> tableNames = null;\n 60           EmbeddedDocumentUtil embeddedDocumentUtil = new EmbeddedDocumentUtil(context);\n 61           try {\n 62               tableNames = getTableNames(connection, metadata, context);\n 63           } catch (SQLException e) {\n 64               try {\n 65                   close();\n 66               } catch (SQLException sqlE) {\n 67                   //swallow\n 68               }\n 69               if (e.getClass().toString().contains(\"SQLiteException\") && e.getMessage() != null &&\n 70                       (e.getMessage().contains(\"[SQLITE_ERROR]\") ||\n 71                               e.getMessage().contains(\"[SQLITE_CORRUPT]\"))) {\n 72                   throw new CorruptedFileException(\"Corrupt SQLITE\", e);\n 73               }\n 74   \n 75               throw new IOException(e);\n 76           }\n 77           for (String tableName : tableNames) {\n 78               //add table names to parent metadata\n 79               metadata.add(Database.TABLE_NAME, tableName);\n 80           }\n 81   \n 82           extractMetadata(connection, metadata);\n 83   \n 84           xHandler = new XHTMLContentHandler(handler, metadata);\n 85           xHandler.startDocument();\n 86   \n 87           try {\n 88               for (String tableName : tableNames) {\n 89                   JDBCTableReader tableReader =\n 90                           getTableReader(connection, tableName, embeddedDocumentUtil);\n 91                   xHandler.startElement(\"table\", \"name\", tableReader.getTableName());\n 92                   xHandler.startElement(\"thead\");\n 93                   xHandler.startElement(\"tr\");\n 94                   for (String header : tableReader.getHeaders()) {\n 95                       xHandler.startElement(\"th\");\n 96                       xHandler.characters(header);\n 97                       xHandler.endElement(\"th\");\n 98                   }\n 99                   xHandler.endElement(\"tr\");\n100                   xHandler.endElement(\"thead\");\n101                   xHandler.startElement(\"tbody\");\n102                   while (tableReader.nextRow(xHandler, context)) {\n103                       //no-op\n104                   }\n105                   xHandler.endElement(\"tbody\");\n106                   xHandler.endElement(\"table\");\n107               }\n108           } finally {\n109               try {\n110                   close();\n111               } catch (IOException | SQLException e) {\n112                   //swallow\n113               }\n114               if (xHandler != null) {\n115                   xHandler.endDocument();\n116               }\n117           }\n118       }\n\nsrc/tika/tika-parsers/tika-parsers-extended/tika-parser-sqlite3-module/src/main/java/org/apache/tika/parser/sqlite3/SQLite3DBParser.java:\n 71       @Override\n 72       protected Connection getConnection(InputStream stream, Metadata metadata, ParseContext context)\n 73               throws IOException {\n 74           String connectionString = getConnectionString(stream, metadata, context);\n 75   \n 76           Connection connection = null;\n 77           try {\n 78               Class.forName(getJDBCClassName());\n 79           } catch (ClassNotFoundException e) {\n 80               throw new IOException(e);\n 81           }\n 82           try {\n 83               SQLiteConfig config = new SQLiteConfig();\n 84   \n 85               //good habit, but effectively meaningless here\n 86               config.setReadOnly(true);\n 87               connection = config.createConnection(connectionString);\n 88   \n 89           } catch (SQLException e) {\n 90               throw new IOException(e.getMessage());\n 91           }\n 92           return connection;\n 93       }\n",
            "cost": 0.090825,
            "harness_id": "TikaOne",
            "sanitizer": "load arbitrary library",
            "sink": "src/tika/tika-parsers/tika-parsers-extended/tika-parser-sqlite3-module/src/main/java/org/apache/tika/parser/sqlite3/SQLite3DBParser.java:78:27",
            "status": "corpus",
            "valid_path": "NO",
            "id": 64
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:1132:36",
            "status": "error",
            "id": 65
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/pot/PooledTimeSeriesParser.java:216:45",
            "status": "error",
            "id": 66
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n1040           public void process(InputStream input, OutputStream output, Metadata metadata) throws Exception {\n1041               Parser p = parser;\n1042               if (fork) {\n1043                   p = new ForkParser(TikaCLI.class.getClassLoader(), p);\n1044               }\n1045               ContentHandler handler = getContentHandler(output, metadata);\n1046               try {\n1047                   p.parse(input, handler, metadata, context);\n1048                   // fix for TIKA-596: if a parser doesn't generate\n1049                   // XHTML output, the lack of an output document prevents\n1050                   // metadata from being output: this fixes that\n1051                   if (handler instanceof NoDocumentMetHandler) {\n1052                       NoDocumentMetHandler metHandler = (NoDocumentMetHandler) handler;\n1053                       if (!metHandler.metOutput()) {\n1054                           metHandler.endDocument();\n1055                       }\n1056                   }\n1057               } finally {\n1058                   if (fork) {\n1059                       ((ForkParser) p).close();\n1060                   }\n1061               }\n1062           }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-image-module/src/main/java/org/apache/tika/parser/image/WebPParser.java:\n51       public void parse(InputStream stream, ContentHandler handler, Metadata metadata,\n52                         ParseContext context) throws IOException, SAXException, TikaException {\n53           TemporaryResources tmp = new TemporaryResources();\n54           try {\n55               TikaInputStream tis = TikaInputStream.get(stream, tmp, metadata);\n56               new ImageMetadataExtractor(metadata).parseWebP(tis.getFile());\n57           } finally {\n58               tmp.dispose();\n59           }\n60   \n61           XHTMLContentHandler xhtml = new XHTMLContentHandler(handler, metadata);\n62           xhtml.startDocument();\n63           xhtml.endDocument();\n64       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-image-module/src/main/java/org/apache/tika/parser/image/ImageMetadataExtractor.java:\n 92       public ImageMetadataExtractor(Metadata metadata) {\n 93           this(metadata, new CopyUnknownFieldsHandler(), new TiffPageNumberHandler(),\n 94                   new JpegCommentHandler(), new ExifHandler(), new DimensionsHandler(),\n 95                   new GeotagHandler(), new IptcHandler());\n 96       }\n",
            "cost": 0.08146,
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-image-module/src/main/java/org/apache/tika/parser/image/ImageMetadataExtractor.java:329:65",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 67
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-example/src/main/java/org/apache/tika/example/DirListParser.java:93:44",
            "status": "error",
            "id": 68
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-font-module/src/main/java/org/apache/tika/parser/font/AdobeFontMetricParser.java:135:31",
            "status": "error",
            "id": 69
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n1040           public void process(InputStream input, OutputStream output, Metadata metadata) throws Exception {\n1041               Parser p = parser;\n1042               if (fork) {\n1043                   p = new ForkParser(TikaCLI.class.getClassLoader(), p);\n1044               }\n1045               ContentHandler handler = getContentHandler(output, metadata);\n1046               try {\n1047                   p.parse(input, handler, metadata, context);\n1048                   // fix for TIKA-596: if a parser doesn't generate\n1049                   // XHTML output, the lack of an output document prevents\n1050                   // metadata from being output: this fixes that\n1051                   if (handler instanceof NoDocumentMetHandler) {\n1052                       NoDocumentMetHandler metHandler = (NoDocumentMetHandler) handler;\n1053                       if (!metHandler.metOutput()) {\n1054                           metHandler.endDocument();\n1055                       }\n1056                   }\n1057               } finally {\n1058                   if (fork) {\n1059                       ((ForkParser) p).close();\n1060                   }\n1061               }\n1062           }\n\nsrc/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ctakes/CTAKESParser.java:\n80       @Override\n81       public void parse(InputStream stream, ContentHandler handler, Metadata metadata,\n82                         ParseContext context) throws IOException, SAXException, TikaException {\n83           CTAKESConfig config = context.get(CTAKESConfig.class, new CTAKESConfig());\n84           CTAKESContentHandler ctakesHandler = new CTAKESContentHandler(handler, metadata, config);\n85           super.parse(stream, ctakesHandler, metadata, context);\n86       }\n\nsrc/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ctakes/CTAKESConfig.java:\n 75       public CTAKESConfig() {\n 76           init(this.getClass().getResourceAsStream(\"CTAKESConfig.properties\"));\n 77       }\n 88       private void init(InputStream stream) {\n 89           if (stream == null) {\n 90               return;\n 91           }\n 92           Properties props = new Properties();\n 93   \n 94           try {\n 95               props.load(stream);\n 96           } catch (IOException e) {\n 97               // TODO warning\n 98           } finally {\n 99               try {\n100                   stream.close();\n101               } catch (IOException ioe) {\n102                   // TODO warning\n103               }\n104           }\n105   \n106           setAeDescriptorPath(props.getProperty(\"aeDescriptorPath\", getAeDescriptorPath()));\n107           setUMLSUser(props.getProperty(\"UMLSUser\", getUMLSUser()));\n108           setUMLSPass(props.getProperty(\"UMLSPass\", getUMLSPass()));\n109           setText(Boolean.parseBoolean(props.getProperty(\"text\", Boolean.toString(isText()))));\n110           setMetadata(props.getProperty(\"metadata\", getMetadataAsString()).split(\",\"));\n111           setAnnotationProps(\n112                   props.getProperty(\"annotationProps\", getAnnotationPropsAsString()).split(\",\"));\n113           setSeparatorChar(props.getProperty(\"separatorChar\", Character.toString(getSeparatorChar()))\n114                   .charAt(0));\n115       }\n",
            "cost": 0.08421000000000001,
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ctakes/CTAKESConfig.java:110:80",
            "status": "corpus",
            "valid_path": "NO",
            "id": 70
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n1040           public void process(InputStream input, OutputStream output, Metadata metadata) throws Exception {\n1041               Parser p = parser;\n1042               if (fork) {\n1043                   p = new ForkParser(TikaCLI.class.getClassLoader(), p);\n1044               }\n1045               ContentHandler handler = getContentHandler(output, metadata);\n1046               try {\n1047                   p.parse(input, handler, metadata, context);\n1048                   // fix for TIKA-596: if a parser doesn't generate\n1049                   // XHTML output, the lack of an output document prevents\n1050                   // metadata from being output: this fixes that\n1051                   if (handler instanceof NoDocumentMetHandler) {\n1052                       NoDocumentMetHandler metHandler = (NoDocumentMetHandler) handler;\n1053                       if (!metHandler.metOutput()) {\n1054                           metHandler.endDocument();\n1055                       }\n1056                   }\n1057               } finally {\n1058                   if (fork) {\n1059                       ((ForkParser) p).close();\n1060                   }\n1061               }\n1062           }\n\nsrc/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ctakes/CTAKESParser.java:\n80       @Override\n81       public void parse(InputStream stream, ContentHandler handler, Metadata metadata,\n82                         ParseContext context) throws IOException, SAXException, TikaException {\n83           CTAKESConfig config = context.get(CTAKESConfig.class, new CTAKESConfig());\n84           CTAKESContentHandler ctakesHandler = new CTAKESContentHandler(handler, metadata, config);\n85           super.parse(stream, ctakesHandler, metadata, context);\n86       }\n\nsrc/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ctakes/CTAKESConfig.java:\n 75       public CTAKESConfig() {\n 76           init(this.getClass().getResourceAsStream(\"CTAKESConfig.properties\"));\n 77       }\n 88       private void init(InputStream stream) {\n 89           if (stream == null) {\n 90               return;\n 91           }\n 92           Properties props = new Properties();\n 93   \n 94           try {\n 95               props.load(stream);\n 96           } catch (IOException e) {\n 97               // TODO warning\n 98           } finally {\n 99               try {\n100                   stream.close();\n101               } catch (IOException ioe) {\n102                   // TODO warning\n103               }\n104           }\n105   \n106           setAeDescriptorPath(props.getProperty(\"aeDescriptorPath\", getAeDescriptorPath()));\n107           setUMLSUser(props.getProperty(\"UMLSUser\", getUMLSUser()));\n108           setUMLSPass(props.getProperty(\"UMLSPass\", getUMLSPass()));\n109           setText(Boolean.parseBoolean(props.getProperty(\"text\", Boolean.toString(isText()))));\n110           setMetadata(props.getProperty(\"metadata\", getMetadataAsString()).split(\",\"));\n111           setAnnotationProps(\n112                   props.getProperty(\"annotationProps\", getAnnotationPropsAsString()).split(\",\"));\n113           setSeparatorChar(props.getProperty(\"separatorChar\", Character.toString(getSeparatorChar()))\n114                   .charAt(0));\n115       }\n",
            "cost": 0.08216000000000001,
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ctakes/CTAKESConfig.java:112:90",
            "status": "corpus",
            "valid_path": "NO",
            "id": 71
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-extended/tika-parser-scientific-module/src/main/java/org/apache/tika/parser/envi/EnviHeaderParser.java:113:44",
            "status": "error",
            "id": 72
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-dl/src/main/java/org/apache/tika/dl/imagerec/DL4JInceptionV3Net.java:166:52",
            "status": "error",
            "id": 73
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n1040           public void process(InputStream input, OutputStream output, Metadata metadata) throws Exception {\n1041               Parser p = parser;\n1042               if (fork) {\n1043                   p = new ForkParser(TikaCLI.class.getClassLoader(), p);\n1044               }\n1045               ContentHandler handler = getContentHandler(output, metadata);\n1046               try {\n1047                   p.parse(input, handler, metadata, context);\n1048                   // fix for TIKA-596: if a parser doesn't generate\n1049                   // XHTML output, the lack of an output document prevents\n1050                   // metadata from being output: this fixes that\n1051                   if (handler instanceof NoDocumentMetHandler) {\n1052                       NoDocumentMetHandler metHandler = (NoDocumentMetHandler) handler;\n1053                       if (!metHandler.metOutput()) {\n1054                           metHandler.endDocument();\n1055                       }\n1056                   }\n1057               } finally {\n1058                   if (fork) {\n1059                       ((ForkParser) p).close();\n1060                   }\n1061               }\n1062           }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParser.java:\n268       public void parse(InputStream stream, ContentHandler handler, Metadata metadata,\n269                         ParseContext context) throws IOException, SAXException, TikaException {\n270           XHTMLContentHandler xhtml = new XHTMLContentHandler(handler, metadata);\n271   \n272           TemporaryResources tmp = new TemporaryResources();\n273           try {\n274               parse(TikaInputStream.get(stream, tmp, metadata), xhtml, metadata, tmp);\n275           } finally {\n276               tmp.dispose();\n277           }\n278       }\n280       private void parse(TikaInputStream stream, XHTMLContentHandler xhtml, Metadata metadata,\n281                          TemporaryResources tmp) throws IOException, SAXException, TikaException {\n282           boolean inputToStdIn = true;\n283           boolean outputFromStdOut = true;\n284           boolean hasPatterns = (metadataPatterns != null && !metadataPatterns.isEmpty());\n285   \n286           File output = null;\n287   \n288           // Build our command\n289           String[] cmd;\n290           if (command.length == 1) {\n291               cmd = command[0].split(\" \");\n292           } else {\n293               cmd = new String[command.length];\n294               System.arraycopy(command, 0, cmd, 0, command.length);\n295           }\n296           for (int i = 0; i < cmd.length; i++) {\n297               if (cmd[i].contains(INPUT_FILE_TOKEN)) {\n298                   cmd[i] = cmd[i].replace(INPUT_FILE_TOKEN, stream.getFile().getPath());\n299                   inputToStdIn = false;\n300               }\n301               if (cmd[i].contains(OUTPUT_FILE_TOKEN)) {\n302                   output = tmp.createTemporaryFile();\n303                   outputFromStdOut = false;\n304                   cmd[i] = cmd[i].replace(OUTPUT_FILE_TOKEN, output.getPath());\n305               }\n306           }\n307   \n308           // Execute\n309           Process process = null;\n310           try {\n311               if (cmd.length == 1) {\n312                   process = Runtime.getRuntime().exec(cmd[0]);\n313               } else {\n314                   process = Runtime.getRuntime().exec(cmd);\n315               }\n316           } catch (Exception e) {\n317               LOG.warn(\"problem with process exec\", e);\n318           }\n319   \n320           try {\n321               if (inputToStdIn) {\n322                   sendInput(process, stream);\n323               } else {\n324                   process.getOutputStream().close();\n325               }\n326   \n327               InputStream out = process.getInputStream();\n328               InputStream err = process.getErrorStream();\n329   \n330               if (hasPatterns) {\n331                   extractMetadata(err, metadata);\n332   \n333                   if (outputFromStdOut) {\n334                       extractOutput(out, xhtml);\n335                   } else {\n336                       extractMetadata(out, metadata);\n337                   }\n338               } else {\n339                   ignoreStream(err);\n340   \n341                   if (outputFromStdOut) {\n342                       extractOutput(out, xhtml);\n343                   } else {\n344                       ignoreStream(out);\n345                   }\n346               }\n347           } finally {\n348               try {\n349                   process.waitFor();\n350               } catch (InterruptedException ignore) {\n351               }\n352           }\n353   \n354           // Grab the output if we haven't already\n355           if (!outputFromStdOut) {\n356               try (FileInputStream fileInputStream = new FileInputStream(output)) {\n357                   extractOutput(fileInputStream, xhtml);\n358               }\n359           }\n360       }\n",
            "cost": 0.08714000000000001,
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParser.java:291:36",
            "status": "corpus",
            "valid_path": "NO",
            "id": 74
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-mail-commons/src/main/java/org/apache/tika/parser/mailcommons/MailUtil.java:82:26",
            "status": "error",
            "id": 75
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 191           @Override\n 192           public void process(InputStream stream, OutputStream output, Metadata metadata) throws Exception {\n 193               PrintWriter writer = new PrintWriter(getOutputWriter(output, encoding));\n 194               writer.println(detector\n 195                       .detect(stream, metadata)\n 196                       .toString());\n 197               writer.flush();\n 198           }\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/detect/MagicDetector.java:\n340       public MediaType detect(InputStream input, Metadata metadata) throws IOException {\n341           if (input == null) {\n342               return MediaType.OCTET_STREAM;\n343           }\n344   \n345           input.mark(offsetRangeEnd + length);\n346           try {\n347               int offset = 0;\n348   \n349               // Skip bytes at the beginning, using skip() or read()\n350               while (offset < offsetRangeBegin) {\n351                   long n = input.skip(offsetRangeBegin - offset);\n352                   if (n > 0) {\n353                       offset += n;\n354                   } else if (input.read() != -1) {\n355                       offset += 1;\n356                   } else {\n357                       return MediaType.OCTET_STREAM;\n358                   }\n359               }\n360   \n361               // Fill in the comparison window\n362               byte[] buffer = new byte[length + (offsetRangeEnd - offsetRangeBegin)];\n363               int n = input.read(buffer);\n364               if (n > 0) {\n365                   offset += n;\n366               }\n367               while (n != -1 && offset < offsetRangeEnd + length) {\n368                   int bufferOffset = offset - offsetRangeBegin;\n369                   n = input.read(buffer, bufferOffset, buffer.length - bufferOffset);\n370                   // increment offset - in case not all read (see testDetectStreamReadProblems)\n371                   if (n > 0) {\n372                       offset += n;\n373                   }\n374               }\n375   \n376               if (this.isRegex) {\n377                   int flags = 0;\n378                   if (this.isStringIgnoreCase) {\n379                       flags = Pattern.CASE_INSENSITIVE;\n380                   }\n381   \n382                   Pattern p = Pattern.compile(new String(this.pattern, UTF_8), flags);\n383   \n384                   ByteBuffer bb = ByteBuffer.wrap(buffer);\n385                   CharBuffer result = ISO_8859_1.decode(bb);\n386                   Matcher m = p.matcher(result);\n387   \n388                   boolean match = false;\n389                   // Loop until we've covered the entire offset range\n390                   for (int i = 0; i <= offsetRangeEnd - offsetRangeBegin; i++) {\n391                       m.region(i, length + i);\n392                       match = m.lookingAt(); // match regex from start of region\n393                       if (match) {\n394                           return type;\n395                       }\n396                   }\n397               } else {\n398                   if (offset < offsetRangeBegin + length) {\n399                       return MediaType.OCTET_STREAM;\n400                   }\n401                   // Loop until we've covered the entire offset range\n402                   for (int i = 0; i <= offsetRangeEnd - offsetRangeBegin; i++) {\n403                       boolean match = true;\n404                       int masked;\n405                       for (int j = 0; match && j < length; j++) {\n406                           masked = (buffer[i + j] & mask[j]);\n407                           if (this.isStringIgnoreCase) {\n408                               masked = Character.toLowerCase(masked);\n409                           }\n410                           match = (masked == pattern[j]);\n411                       }\n412                       if (match) {\n413                           return type;\n414                       }\n415                   }\n416               }\n417   \n418               return MediaType.OCTET_STREAM;\n419           } finally {\n420               input.reset();\n421           }\n422       }\n",
            "cost": 0.07993,
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/detect/MagicDetector.java:382:45",
            "status": "corpus",
            "valid_path": "NO",
            "id": 76
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java:363:43",
            "status": "error",
            "id": 77
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n1040           public void process(InputStream input, OutputStream output, Metadata metadata) throws Exception {\n1041               Parser p = parser;\n1042               if (fork) {\n1043                   p = new ForkParser(TikaCLI.class.getClassLoader(), p);\n1044               }\n1045               ContentHandler handler = getContentHandler(output, metadata);\n1046               try {\n1047                   p.parse(input, handler, metadata, context);\n1048                   // fix for TIKA-596: if a parser doesn't generate\n1049                   // XHTML output, the lack of an output document prevents\n1050                   // metadata from being output: this fixes that\n1051                   if (handler instanceof NoDocumentMetHandler) {\n1052                       NoDocumentMetHandler metHandler = (NoDocumentMetHandler) handler;\n1053                       if (!metHandler.metOutput()) {\n1054                           metHandler.endDocument();\n1055                       }\n1056                   }\n1057               } finally {\n1058                   if (fork) {\n1059                       ((ForkParser) p).close();\n1060                   }\n1061               }\n1062           }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-cad-module/src/main/java/org/apache/tika/parser/dwg/DWGReadParser.java:\n 97       @Override\n 98       public void parse(InputStream stream, ContentHandler handler, Metadata metadata, ParseContext context)\n 99               throws IOException, SAXException, TikaException {\n100   \n101           configure(context);\n102           DWGParserConfig dwgc = context.get(DWGParserConfig.class);\n103           final XHTMLContentHandler xhtml = new XHTMLContentHandler(handler, metadata);\n104           xhtml.startDocument();\n105           // create unique files so we avoid overwriting out files if multithreaded\n106           UUID uuid = UUID.randomUUID();\n107           File tmpFileOut = Files.createTempFile(uuid + \"dwgreadout\", \".json\").toFile();\n108           File tmpFileOutCleaned = Files.createTempFile(uuid + \"dwgreadoutclean\", \".json\").toFile();\n109           File tmpFileIn = Files.createTempFile(uuid + \"dwgreadin\", \".dwg\").toFile();\n110           try {\n111               \n112   \n113               FileUtils.copyInputStreamToFile(stream, tmpFileIn);\n114   \n115               List<String> command = Arrays.asList(dwgc.getDwgReadExecutable(), \"-O\", \"JSON\", \"-o\",\n116                       tmpFileOut.getCanonicalPath(), tmpFileIn.getCanonicalPath());\n117               ProcessBuilder pb = new ProcessBuilder().command(command);\n118               LOG.info(\"About to call DWGRead: \" + command.toString());\n119               FileProcessResult fpr = ProcessUtils.execute(pb, dwgc.getDwgReadTimeout(), 10000, 10000);\n120               LOG.info(\"DWGRead Exit code is: \" + fpr.getExitValue());\n121               if (fpr.getExitValue() == 0) {\n122                   if (dwgc.isCleanDwgReadOutput()) {\n123                       // dwgread sometimes creates strings with invalid utf-8 sequences or invalid\n124                       // json (nan instead of NaN). replace them\n125                       // with empty string.\n126                       LOG.debug(\"Cleaning Json Output - Replace: \" + dwgc.getCleanDwgReadRegexToReplace() \n127                                 + \" with: \" + dwgc.getCleanDwgReadReplaceWith());\n128                       try ( BufferedReader br = new BufferedReader(\n129                                 new InputStreamReader(\n130                                         Files.newInputStream(tmpFileOut.toPath()),\n131                                 StandardCharsets.UTF_8));\n132                               \n133                               BufferedWriter out = new BufferedWriter(\n134                                       new OutputStreamWriter(\n135                                               new FileOutputStream(tmpFileOutCleaned, true), \n136                                               StandardCharsets.UTF_8),32768))\n137                       {\n138   \n139                           String sCurrentLine;\n140                           while ((sCurrentLine = br.readLine()) != null) \n141                           {\n142                               sCurrentLine = sCurrentLine\n143                                               .replaceAll( dwgc.getCleanDwgReadRegexToReplace(), \n144                                                       dwgc.getCleanDwgReadReplaceWith())\n145                                               .replaceAll(\"\\\\bnan\\\\b\", \" 0,\")\n146                                               .replaceAll(\"\\\\.,\", \" \\\\. ,\") + \"\\n\";\n147                               out.write(sCurrentLine);\n148                           }                            \n149                                    \n150                       } finally {\n151                           FileUtils.deleteQuietly(tmpFileIn);\n152                           FileUtils.deleteQuietly(tmpFileOut);\n153                           tmpFileOut = tmpFileOutCleaned;\n154                       }\n155   \n156                   } else {\n157                       LOG.debug(\n158                               \"Json wasn't cleaned, \"\n159                               + \"if json parsing fails consider reviewing dwgread json output to check it's valid\");\n160                   }\n161               } else if (fpr.isTimeout()) {\n162                   throw new TikaException(\n163                           \"DWGRead Failed - Timeout setting exceeded current setting of \" + dwgc.getDwgReadTimeout() );\n164               }\n165               else {\n166                   throw new TikaException(\n167                           \"DWGRead Failed - Exit Code is:\" + fpr.getExitValue() + \" Exe error is: \" + fpr.getStderr() );\n168               }\n169   \n170               // we can't guarantee the json output is correct so we try to ignore as many\n171               // errors as we can\n172               JsonFactory jfactory = JsonFactory.builder()\n173                       .enable(JsonReadFeature.ALLOW_MISSING_VALUES, \n174                               JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS,\n175                               JsonReadFeature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER, \n176                               JsonReadFeature.ALLOW_UNQUOTED_FIELD_NAMES, \n177                               JsonReadFeature.ALLOW_TRAILING_COMMA,\n178                               JsonReadFeature.ALLOW_NON_NUMERIC_NUMBERS, \n179                               JsonReadFeature.ALLOW_LEADING_ZEROS_FOR_NUMBERS)\n180                       .build();\n181               JsonParser jParser;\n182               try {\n183                   jParser = jfactory.createParser(tmpFileOut);\n184               } catch (JsonParseException e1) {\n185                   throw new TikaException(\"Failed to parse Json: \" + ExceptionUtils.getStackTrace(e1));\n186               } catch (IOException e1) {\n187                   throw new TikaException(\"Failed to read json file: \" + ExceptionUtils.getStackTrace(e1));\n188               }\n189               // read json token in a stream using jackson, iterate over each token. We only\n190               // support OBJECTS, FILEHEADER and SummaryInfo\n191               // these are the only ones we have in either sample files or have been tested\n192               // with\n193               DWGReadFormatRemover dwgReadFormatRemover = new DWGReadFormatRemover();\n194               JsonToken nextToken = jParser.nextToken();\n195               while ((nextToken = jParser.nextToken()) != JsonToken.END_OBJECT) {\n196                   if (nextToken == JsonToken.FIELD_NAME) {\n197                       String nextFieldName = jParser.currentName();\n198                       nextToken = jParser.nextToken();\n199                       if (nextToken.isStructStart()) {\n200   \n201                           if (\"OBJECTS\".equals(nextFieldName)) {\n202                               // Start array\n203                               while (jParser.nextToken() != JsonToken.END_ARRAY) {\n204                                   parseDwgObject(jParser, (nextTextValue) -> {\n205   \n206                                       try {\n207                                           xhtml.characters(dwgReadFormatRemover.cleanupDwgString(nextTextValue));\n208                                           xhtml.newline();\n209                                       } catch (SAXException e) {\n210                                           LOG.error(\"Could not write next text value {} to xhtml stream\", nextTextValue);\n211                                       }\n212                                   });\n213                               }\n214                           } else if (\"FILEHEADER\".equals(nextFieldName)) {\n215                               parseHeader(jParser, metadata);\n216                           } else if (\"SummaryInfo\".equals(nextFieldName)) {\n217                               parseSummaryInfo(jParser, metadata);\n218                           } else {\n219                               jParser.skipChildren();\n220                           }\n221                       }\n222                   }\n223               }\n224               jParser.close();\n225           } finally {\n226               // make sure we delete all temp files\n227               FileUtils.deleteQuietly(tmpFileOut);\n228               FileUtils.deleteQuietly(tmpFileIn);\n229               FileUtils.deleteQuietly(tmpFileOutCleaned);\n230           }\n231   \n232           xhtml.endDocument();\n233       }\n",
            "cost": 0.09771,
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-cad-module/src/main/java/org/apache/tika/parser/dwg/DWGReadParser.java:146:57",
            "status": "corpus",
            "valid_path": "NO",
            "id": 78
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-cad-module/src/main/java/org/apache/tika/parser/dwg/DWGReadParser.java:145:57",
            "status": "error",
            "id": 79
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-cad-module/src/main/java/org/apache/tika/parser/dwg/DWGReadParser.java:143:58",
            "status": "error",
            "id": 80
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n1040           public void process(InputStream input, OutputStream output, Metadata metadata) throws Exception {\n1041               Parser p = parser;\n1042               if (fork) {\n1043                   p = new ForkParser(TikaCLI.class.getClassLoader(), p);\n1044               }\n1045               ContentHandler handler = getContentHandler(output, metadata);\n1046               try {\n1047                   p.parse(input, handler, metadata, context);\n1048                   // fix for TIKA-596: if a parser doesn't generate\n1049                   // XHTML output, the lack of an output document prevents\n1050                   // metadata from being output: this fixes that\n1051                   if (handler instanceof NoDocumentMetHandler) {\n1052                       NoDocumentMetHandler metHandler = (NoDocumentMetHandler) handler;\n1053                       if (!metHandler.metOutput()) {\n1054                           metHandler.endDocument();\n1055                       }\n1056                   }\n1057               } finally {\n1058                   if (fork) {\n1059                       ((ForkParser) p).close();\n1060                   }\n1061               }\n1062           }\n\nsrc/tika/tika-parsers/tika-parsers-extended/tika-parser-scientific-module/src/main/java/org/apache/tika/parser/gdal/GDALParser.java:\n174       @Override\n175       public void parse(InputStream stream, ContentHandler handler, Metadata metadata,\n176                         ParseContext context) throws IOException, SAXException, TikaException {\n177   \n178           if (!ExternalParser.check(\"gdalinfo\")) {\n179               return;\n180           }\n181   \n182           // first set up and run GDAL\n183           // process the command\n184           TemporaryResources tmp = new TemporaryResources();\n185           TikaInputStream tis = TikaInputStream.get(stream, tmp, metadata);\n186   \n187           String runCommand = processCommand(tis);\n188           String output = execCommand(new String[]{runCommand});\n189   \n190           // now extract the actual metadata params\n191           // from the GDAL output in the content stream\n192           // to do this, we need to literally process the output\n193           // from the invoked command b/c we can't read metadata and\n194           // output text from the handler in ExternalParser\n195           // at the same time, so for now, we can't use the\n196           // ExternalParser to do this and I've had to bring some of\n197           // that functionality directly into this class\n198           // TODO: investigate a way to do both using ExternalParser\n199   \n200           extractMetFromOutput(output, metadata);\n201           applyPatternsToOutput(output, metadata, getPatterns());\n202   \n203           // make the content handler and provide output there\n204           // now that we have metadata\n205           processOutput(handler, metadata, output);\n206       }\n208       private Map<Pattern, String> getPatterns() {\n209           Map<Pattern, String> patterns = new HashMap<>();\n210           this.addPatternWithColon(\"Driver\", patterns);\n211           this.addPatternWithColon(\"Files\", patterns);\n212           this.addPatternWithIs(\"Size\", patterns);\n213           this.addPatternWithIs(\"Coordinate System\", patterns);\n214           this.addBoundingBoxPattern(\"Upper Left\", patterns);\n215           this.addBoundingBoxPattern(\"Lower Left\", patterns);\n216           this.addBoundingBoxPattern(\"Upper Right\", patterns);\n217           this.addBoundingBoxPattern(\"Lower Right\", patterns);\n218           return patterns;\n219       }\n221       private void addPatternWithColon(String name, Map<Pattern, String> patterns) {\n222           patterns.put(Pattern.compile(name + \"\\\\:\\\\s*([A-Za-z0-9/ _\\\\-\\\\.]+)\\\\s*\"), name);\n223       }\n",
            "cost": 0.084995,
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-extended/tika-parser-scientific-module/src/main/java/org/apache/tika/parser/gdal/GDALParser.java:222:38",
            "status": "corpus",
            "valid_path": "NO",
            "id": 81
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/corenlp/CoreNLPNERecogniser.java:167:47",
            "status": "error",
            "id": 82
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n1040           public void process(InputStream input, OutputStream output, Metadata metadata) throws Exception {\n1041               Parser p = parser;\n1042               if (fork) {\n1043                   p = new ForkParser(TikaCLI.class.getClassLoader(), p);\n1044               }\n1045               ContentHandler handler = getContentHandler(output, metadata);\n1046               try {\n1047                   p.parse(input, handler, metadata, context);\n1048                   // fix for TIKA-596: if a parser doesn't generate\n1049                   // XHTML output, the lack of an output document prevents\n1050                   // metadata from being output: this fixes that\n1051                   if (handler instanceof NoDocumentMetHandler) {\n1052                       NoDocumentMetHandler metHandler = (NoDocumentMetHandler) handler;\n1053                       if (!metHandler.metOutput()) {\n1054                           metHandler.endDocument();\n1055                       }\n1056                   }\n1057               } finally {\n1058                   if (fork) {\n1059                       ((ForkParser) p).close();\n1060                   }\n1061               }\n1062           }\n\nsrc/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/NamedEntityParser.java:\n 76       private synchronized void initialize(ParseContext context) {\n 77           if (initialized) {\n 78               return;\n 79           }\n 80           initialized = true;\n 81   \n 82           //TODO: read class name from context or config\n 83           //There can be multiple classes in the form of comma separated class names;\n 84           String classNamesString = System.getProperty(SYS_PROP_NER_IMPL, DEFAULT_NER_IMPL);\n 85           String[] classNames = classNamesString.split(\",\");\n 86           this.nerChain = new ArrayList<>(classNames.length);\n 87           for (String className : classNames) {\n 88               className = className.trim();\n 89               LOG.info(\"going to load, instantiate and bind the instance of {}\", className);\n 90               try {\n 91                   NERecogniser recogniser =\n 92                           (NERecogniser) Class.forName(className).getDeclaredConstructor().newInstance();\n 93                   LOG.info(\"{} is available ? {}\", className, recogniser.isAvailable());\n 94                   if (recogniser.isAvailable()) {\n 95                       nerChain.add(recogniser);\n 96                   }\n 97               } catch (Exception e) {\n 98                   LOG.error(e.getMessage(), e);\n 99               }\n100           }\n101           try {\n102               TikaConfig config = new TikaConfig();\n103               this.secondaryParser = new Tika(config);\n104               this.available = !nerChain.isEmpty();\n105               LOG.info(\"Number of NERecognisers in chain {}\", nerChain.size());\n106           } catch (Exception e) {\n107               LOG.error(e.getMessage(), e);\n108               this.available = false;\n109           }\n110       }\n116       public void parse(InputStream inputStream, ContentHandler contentHandler, Metadata metadata,\n117                         ParseContext parseContext) throws IOException, SAXException, TikaException {\n118   \n119           if (!initialized) {\n120               initialize(parseContext);\n121           }\n122           if (!available) {\n123               return;\n124           }\n125   \n126           Reader reader =\n127                   MediaType.TEXT_PLAIN.toString().equals(metadata.get(Metadata.CONTENT_TYPE)) ?\n128                           new InputStreamReader(inputStream, StandardCharsets.UTF_8) :\n129                           secondaryParser.parse(inputStream);\n130   \n131           String text = IOUtils.toString(reader);\n132           IOUtils.closeQuietly(reader);\n133   \n134           for (NERecogniser ner : nerChain) {\n135               Map<String, Set<String>> names = ner.recognise(text);\n136               if (names != null) {\n137                   for (Map.Entry<String, Set<String>> entry : names.entrySet()) {\n138                       if (entry.getValue() != null) {\n139                           String mdKey = MD_KEY_PREFIX + entry.getKey();\n140                           for (String name : entry.getValue()) {\n141                               metadata.add(mdKey, name);\n142                           }\n143                       }\n144                   }\n145               }\n146           }\n147           XHTMLContentHandler xhtml = new XHTMLContentHandler(contentHandler, metadata);\n148           extractOutput(text.trim(), xhtml);\n149       }\n",
            "cost": 0.087515,
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/NamedEntityParser.java:85:54",
            "status": "corpus",
            "valid_path": "NO",
            "id": 83
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n 487       private void dumpConfig(TikaConfigSerializer.Mode mode) throws Exception {\n 488           configure();\n 489           TikaConfig localConfig = (config == null) ? TikaConfig.getDefaultConfig() : config;\n 490   \n 491           TikaConfigSerializer.serialize(localConfig, mode, new OutputStreamWriter(System.out, UTF_8), UTF_8);\n 492       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfigSerializer.java:\n 95       public static void serialize(TikaConfig config, Mode mode, Writer writer, Charset charset)\n 96               throws Exception {\n 97           DocumentBuilder docBuilder = XMLReaderUtils.getDocumentBuilder();\n 98   \n 99           // root elements\n100           Document doc = docBuilder.newDocument();\n101           Element rootElement = doc.createElement(\"properties\");\n102   \n103           doc.appendChild(rootElement);\n104           addMimeComment(mode, rootElement, doc);\n105           addServiceLoader(mode, rootElement, doc, config);\n106           addExecutorService(mode, rootElement, doc, config);\n107           addEncodingDetectors(mode, rootElement, doc, config);\n108           addTranslator(mode, rootElement, doc, config);\n109           addDetectors(mode, rootElement, doc, config);\n110           addParsers(mode, rootElement, doc, config);\n111           // TODO Service Loader section\n112   \n113           // now write\n114           Transformer transformer = XMLReaderUtils.getTransformer();\n115           transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n116           transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"2\");\n117           transformer.setOutputProperty(OutputKeys.ENCODING, charset.name());\n118           DOMSource source = new DOMSource(doc);\n119           StreamResult result = new StreamResult(writer);\n120   \n121           transformer.transform(source, result);\n122       }\n181       private static void addEncodingDetectors(Mode mode, Element rootElement, Document doc,\n182                                                TikaConfig config) throws Exception {\n183           EncodingDetector encDetector = config.getEncodingDetector();\n184   \n185           if (mode == Mode.MINIMAL && encDetector instanceof DefaultEncodingDetector) {\n186               // Don't output anything, all using defaults\n187               Node detComment = doc.createComment(\n188                       \"for example: <encodingDetectors><encodingDetector class=\\\"\" +\n189                               \"org.apache.tika.detect.DefaultEncodingDetector\\\">\" +\n190                               \"</encodingDetectors>\");\n191               rootElement.appendChild(detComment);\n192               return;\n193           }\n194   \n195           Element encDetectorsElement = doc.createElement(\"encodingDetectors\");\n196           if (mode == Mode.CURRENT && encDetector instanceof DefaultEncodingDetector ||\n197                   !(encDetector instanceof CompositeEncodingDetector)) {\n198               Element encDetectorElement = doc.createElement(\"encodingDetector\");\n199               encDetectorElement.setAttribute(\"class\", encDetector.getClass().getCanonicalName());\n200               encDetectorsElement.appendChild(encDetectorElement);\n201           } else {\n202               List<EncodingDetector> children =\n203                       ((CompositeEncodingDetector) encDetector).getDetectors();\n204               for (EncodingDetector d : children) {\n205                   Element encDetectorElement = doc.createElement(\"encodingDetector\");\n206                   encDetectorElement.setAttribute(\"class\", d.getClass().getCanonicalName());\n207                   serializeParams(doc, encDetectorElement, d);\n208   \n209                   encDetectorsElement.appendChild(encDetectorElement);\n210               }\n211           }\n212           rootElement.appendChild(encDetectorsElement);\n213       }\n342       public static void serializeParams(Document doc, Element element, Object object) {\n343           Matcher setterMatcher = Pattern.compile(\"\\\\Aset([A-Z].*)\").matcher(\"\");\n344           Matcher getterMatcher = Pattern.compile(\"\\\\A(?:get|is)([A-Z].+)\\\\Z\").matcher(\"\");\n345   \n346           //TODO -- check code base for setters with lowercase initial letters?!\n347           MethodTuples nonPrimitiveSetters = new MethodTuples();\n348           MethodTuples primitiveSetters = new MethodTuples();\n349           MethodTuples nonPrimitiveGetters = new MethodTuples();\n350           MethodTuples primitiveGetters = new MethodTuples();\n351           for (Method method : object.getClass().getMethods()) {\n352               Class[] parameterTypes = method.getParameterTypes();\n353   \n354               if (setterMatcher.reset(method.getName()).find()) {\n355                   if (!Modifier.isPublic(method.getModifiers())) {\n356                       //we could just call getMethods, but this can be helpful debugging inf\n357                       LOG.trace(\"inaccessible setter: {} in {}\", method.getName(), object.getClass());\n358                       continue;\n359                   }\n360                   //require @Field on setters\n361                   if (method.getAnnotation(Field.class) == null) {\n362                      // LOG.warn(\"unannotated setter {} in {}\", method.getName(), object.getClass());\n363                       continue;\n364                   }\n365                   if (parameterTypes.length != 1) {\n366                       //TODO -- check code base for setX() zero parameters that set boolean to true\n367                       LOG.warn(\"setter with wrong number of params \" + method.getName() + \" \" + parameterTypes.length);\n368                       continue;\n369                   }\n370                   String paramName = methodToParamName(setterMatcher.group(1));\n371                   if (PRIMITIVES.containsKey(parameterTypes[0])) {\n372                       primitiveSetters.add(new MethodTuple(paramName, method, parameterTypes[0]));\n373                   } else {\n374                       nonPrimitiveSetters.add(new MethodTuple(paramName, method, parameterTypes[0]));\n375                   }\n376               } else if (getterMatcher.reset(method.getName()).find()) {\n377                   if (parameterTypes.length != 0) {\n378                       //require 0 parameters for the getter\n379                       continue;\n380                   }\n381                   String paramName = methodToParamName(getterMatcher.group(1));\n382                   if (PRIMITIVES.containsKey(method.getReturnType())) {\n383                       primitiveGetters.add(new MethodTuple(paramName, method, method.getReturnType()));\n384                   } else {\n385                       nonPrimitiveGetters.add(new MethodTuple(paramName, method, method.getReturnType()));\n386                   }\n387   \n388               }\n389           }\n390   \n391           //TODO -- remove nonprimitive setters/getters that have a string equivalent\n392           serializePrimitives(doc, element, object, primitiveSetters, primitiveGetters);\n393           serializeNonPrimitives(doc, element, object, nonPrimitiveSetters, nonPrimitiveGetters);\n394   \n395       }\n",
            "cost": 0.08938000000000001,
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfigSerializer.java:343:49",
            "status": "corpus",
            "valid_path": "NO",
            "id": 84
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n 487       private void dumpConfig(TikaConfigSerializer.Mode mode) throws Exception {\n 488           configure();\n 489           TikaConfig localConfig = (config == null) ? TikaConfig.getDefaultConfig() : config;\n 490   \n 491           TikaConfigSerializer.serialize(localConfig, mode, new OutputStreamWriter(System.out, UTF_8), UTF_8);\n 492       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfigSerializer.java:\n 95       public static void serialize(TikaConfig config, Mode mode, Writer writer, Charset charset)\n 96               throws Exception {\n 97           DocumentBuilder docBuilder = XMLReaderUtils.getDocumentBuilder();\n 98   \n 99           // root elements\n100           Document doc = docBuilder.newDocument();\n101           Element rootElement = doc.createElement(\"properties\");\n102   \n103           doc.appendChild(rootElement);\n104           addMimeComment(mode, rootElement, doc);\n105           addServiceLoader(mode, rootElement, doc, config);\n106           addExecutorService(mode, rootElement, doc, config);\n107           addEncodingDetectors(mode, rootElement, doc, config);\n108           addTranslator(mode, rootElement, doc, config);\n109           addDetectors(mode, rootElement, doc, config);\n110           addParsers(mode, rootElement, doc, config);\n111           // TODO Service Loader section\n112   \n113           // now write\n114           Transformer transformer = XMLReaderUtils.getTransformer();\n115           transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n116           transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"2\");\n117           transformer.setOutputProperty(OutputKeys.ENCODING, charset.name());\n118           DOMSource source = new DOMSource(doc);\n119           StreamResult result = new StreamResult(writer);\n120   \n121           transformer.transform(source, result);\n122       }\n181       private static void addEncodingDetectors(Mode mode, Element rootElement, Document doc,\n182                                                TikaConfig config) throws Exception {\n183           EncodingDetector encDetector = config.getEncodingDetector();\n184   \n185           if (mode == Mode.MINIMAL && encDetector instanceof DefaultEncodingDetector) {\n186               // Don't output anything, all using defaults\n187               Node detComment = doc.createComment(\n188                       \"for example: <encodingDetectors><encodingDetector class=\\\"\" +\n189                               \"org.apache.tika.detect.DefaultEncodingDetector\\\">\" +\n190                               \"</encodingDetectors>\");\n191               rootElement.appendChild(detComment);\n192               return;\n193           }\n194   \n195           Element encDetectorsElement = doc.createElement(\"encodingDetectors\");\n196           if (mode == Mode.CURRENT && encDetector instanceof DefaultEncodingDetector ||\n197                   !(encDetector instanceof CompositeEncodingDetector)) {\n198               Element encDetectorElement = doc.createElement(\"encodingDetector\");\n199               encDetectorElement.setAttribute(\"class\", encDetector.getClass().getCanonicalName());\n200               encDetectorsElement.appendChild(encDetectorElement);\n201           } else {\n202               List<EncodingDetector> children =\n203                       ((CompositeEncodingDetector) encDetector).getDetectors();\n204               for (EncodingDetector d : children) {\n205                   Element encDetectorElement = doc.createElement(\"encodingDetector\");\n206                   encDetectorElement.setAttribute(\"class\", d.getClass().getCanonicalName());\n207                   serializeParams(doc, encDetectorElement, d);\n208   \n209                   encDetectorsElement.appendChild(encDetectorElement);\n210               }\n211           }\n212           rootElement.appendChild(encDetectorsElement);\n213       }\n342       public static void serializeParams(Document doc, Element element, Object object) {\n343           Matcher setterMatcher = Pattern.compile(\"\\\\Aset([A-Z].*)\").matcher(\"\");\n344           Matcher getterMatcher = Pattern.compile(\"\\\\A(?:get|is)([A-Z].+)\\\\Z\").matcher(\"\");\n345   \n346           //TODO -- check code base for setters with lowercase initial letters?!\n347           MethodTuples nonPrimitiveSetters = new MethodTuples();\n348           MethodTuples primitiveSetters = new MethodTuples();\n349           MethodTuples nonPrimitiveGetters = new MethodTuples();\n350           MethodTuples primitiveGetters = new MethodTuples();\n351           for (Method method : object.getClass().getMethods()) {\n352               Class[] parameterTypes = method.getParameterTypes();\n353   \n354               if (setterMatcher.reset(method.getName()).find()) {\n355                   if (!Modifier.isPublic(method.getModifiers())) {\n356                       //we could just call getMethods, but this can be helpful debugging inf\n357                       LOG.trace(\"inaccessible setter: {} in {}\", method.getName(), object.getClass());\n358                       continue;\n359                   }\n360                   //require @Field on setters\n361                   if (method.getAnnotation(Field.class) == null) {\n362                      // LOG.warn(\"unannotated setter {} in {}\", method.getName(), object.getClass());\n363                       continue;\n364                   }\n365                   if (parameterTypes.length != 1) {\n366                       //TODO -- check code base for setX() zero parameters that set boolean to true\n367                       LOG.warn(\"setter with wrong number of params \" + method.getName() + \" \" + parameterTypes.length);\n368                       continue;\n369                   }\n370                   String paramName = methodToParamName(setterMatcher.group(1));\n371                   if (PRIMITIVES.containsKey(parameterTypes[0])) {\n372                       primitiveSetters.add(new MethodTuple(paramName, method, parameterTypes[0]));\n373                   } else {\n374                       nonPrimitiveSetters.add(new MethodTuple(paramName, method, parameterTypes[0]));\n375                   }\n376               } else if (getterMatcher.reset(method.getName()).find()) {\n377                   if (parameterTypes.length != 0) {\n378                       //require 0 parameters for the getter\n379                       continue;\n380                   }\n381                   String paramName = methodToParamName(getterMatcher.group(1));\n382                   if (PRIMITIVES.containsKey(method.getReturnType())) {\n383                       primitiveGetters.add(new MethodTuple(paramName, method, method.getReturnType()));\n384                   } else {\n385                       nonPrimitiveGetters.add(new MethodTuple(paramName, method, method.getReturnType()));\n386                   }\n387   \n388               }\n389           }\n390   \n391           //TODO -- remove nonprimitive setters/getters that have a string equivalent\n392           serializePrimitives(doc, element, object, primitiveSetters, primitiveGetters);\n393           serializeNonPrimitives(doc, element, object, nonPrimitiveSetters, nonPrimitiveGetters);\n394   \n395       }\n",
            "cost": 0.08713000000000001,
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfigSerializer.java:344:49",
            "status": "corpus",
            "valid_path": "NO",
            "id": 85
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/HSLFExtractor.java:468:59",
            "status": "error",
            "id": 86
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/opennlp/OpenNLPNameFinder.java:80:63",
            "status": "error",
            "id": 87
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/opennlp/OpenNLPNameFinder.java:80:39",
            "status": "error",
            "id": 88
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-server/tika-server-core/src/main/java/org/apache/tika/server/core/resource/UnpackerResource.java:245:36",
            "status": "error",
            "id": 89
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-audiovideo-module/src/main/java/org/apache/tika/parser/mp4/MP4Parser.java:223:49",
            "status": "error",
            "id": 90
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/WordExtractor.java:422:32",
            "status": "error",
            "id": 91
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n1040           public void process(InputStream input, OutputStream output, Metadata metadata) throws Exception {\n1041               Parser p = parser;\n1042               if (fork) {\n1043                   p = new ForkParser(TikaCLI.class.getClassLoader(), p);\n1044               }\n1045               ContentHandler handler = getContentHandler(output, metadata);\n1046               try {\n1047                   p.parse(input, handler, metadata, context);\n1048                   // fix for TIKA-596: if a parser doesn't generate\n1049                   // XHTML output, the lack of an output document prevents\n1050                   // metadata from being output: this fixes that\n1051                   if (handler instanceof NoDocumentMetHandler) {\n1052                       NoDocumentMetHandler metHandler = (NoDocumentMetHandler) handler;\n1053                       if (!metHandler.metOutput()) {\n1054                           metHandler.endDocument();\n1055                       }\n1056                   }\n1057               } finally {\n1058                   if (fork) {\n1059                       ((ForkParser) p).close();\n1060                   }\n1061               }\n1062           }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/OfficeParser.java:\n148       public void parse(InputStream stream, ContentHandler handler, Metadata metadata,\n149                         ParseContext context) throws IOException, SAXException, TikaException {\n150   \n151           configure(context);\n152           XHTMLContentHandler xhtml = new XHTMLContentHandler(handler, metadata);\n153           xhtml.startDocument();\n154   \n155           final DirectoryNode root;\n156           TikaInputStream tstream = TikaInputStream.cast(stream);\n157           POIFSFileSystem mustCloseFs = null;\n158           boolean isDirectoryNode = false;\n159           try {\n160               if (tstream == null) {\n161                   mustCloseFs = new POIFSFileSystem(CloseShieldInputStream.wrap(stream));\n162                   root = mustCloseFs.getRoot();\n163               } else {\n164                   final Object container = tstream.getOpenContainer();\n165                   if (container instanceof POIFSFileSystem) {\n166                       root = ((POIFSFileSystem) container).getRoot();\n167                   } else if (container instanceof DirectoryNode) {\n168                       root = (DirectoryNode) container;\n169                       isDirectoryNode = true;\n170                   } else {\n171                       POIFSFileSystem fs = null;\n172                       if (tstream.hasFile()) {\n173                           fs = new POIFSFileSystem(tstream.getFile(), true);\n174                       } else {\n175                           fs = new POIFSFileSystem(CloseShieldInputStream.wrap(tstream));\n176                       }\n177                       //tstream will close the fs, no need to close this below\n178                       tstream.setOpenContainer(fs);\n179                       root = fs.getRoot();\n180   \n181                   }\n182               }\n183               parse(root, context, metadata, xhtml);\n184               OfficeParserConfig officeParserConfig = context.get(OfficeParserConfig.class);\n185   \n186               if (officeParserConfig.isExtractMacros()) {\n187                   //now try to get macros.\n188                   //Note that macros are handled separately for ppt in HSLFExtractor.\n189   \n190                   //We might consider not bothering to check for macros in root,\n191                   //if we know we're processing ppt based on content-type identified in metadata\n192                   if (! isDirectoryNode) {\n193                       // if the \"root\" is a directory node, we assume that the macros have already\n194                       // been extracted from the parent's fileSystem -- TIKA-4116\n195                       extractMacros(root.getFileSystem(), xhtml,\n196                               EmbeddedDocumentUtil.getEmbeddedDocumentExtractor(context));\n197                   }\n198   \n199               }\n200           } finally {\n201               IOUtils.closeQuietly(mustCloseFs);\n202           }\n203           xhtml.endDocument();\n204       }\n206       protected void parse(DirectoryNode root, ParseContext context, Metadata metadata,\n207                            XHTMLContentHandler xhtml)\n208               throws IOException, SAXException, TikaException {\n209   \n210           // Parse summary entries first, to make metadata available early\n211           new SummaryExtractor(metadata).parseSummaries(root);\n212   \n213           // Parse remaining document entries\n214           POIFSDocumentType type = POIFSDocumentType.detectType(root);\n215   \n216           if (type != POIFSDocumentType.UNKNOWN) {\n217               setType(metadata, type.getType());\n218           }\n219   \n220           switch (type) {\n221               case SOLIDWORKS_PART:\n222               case SOLIDWORKS_ASSEMBLY:\n223               case SOLIDWORKS_DRAWING:\n224                   break;\n225               case PUBLISHER:\n226                   PublisherTextExtractor publisherTextExtractor = new PublisherTextExtractor(root);\n227                   xhtml.element(\"p\", publisherTextExtractor.getText());\n228                   break;\n229               case WORDDOCUMENT:\n230                   new WordExtractor(context, metadata).parse(root, xhtml);\n231                   break;\n232               case POWERPOINT:\n233                   new HSLFExtractor(context, metadata).parse(root, xhtml);\n234                   break;\n235               case WORKBOOK:\n236               case XLR:\n237                   Locale locale = context.get(Locale.class, LocaleUtil.getUserLocale());\n238                   new ExcelExtractor(context, metadata).parse(root, xhtml, locale);\n239                   break;\n240               case PROJECT:\n241                   // We currently can't do anything beyond the metadata\n242                   break;\n243               case VISIO:\n244                   VisioTextExtractor visioTextExtractor = new VisioTextExtractor(root);\n245                   for (String text : visioTextExtractor.getAllText()) {\n246                       xhtml.element(\"p\", text);\n247                   }\n248                   break;\n249               case OUTLOOK:\n250                   OutlookExtractor extractor = new OutlookExtractor(root, metadata, context);\n251   \n252                   extractor.parse(xhtml);\n253                   break;\n254               case ENCRYPTED:\n255   \n256                   try {\n257                       EncryptionInfo info = new EncryptionInfo(root);\n258                       Decryptor d = Decryptor.getInstance(info);\n259                       // By default, use the default Office Password\n260                       String password = Decryptor.DEFAULT_PASSWORD;\n261   \n262                       // If they supplied a Password Provider, ask that for the password,\n263                       //  and use the provider given one if available (stick with default if not)\n264                       PasswordProvider passwordProvider = context.get(PasswordProvider.class);\n265                       if (passwordProvider != null) {\n266                           String suppliedPassword = passwordProvider.getPassword(metadata);\n267                           if (suppliedPassword != null) {\n268                               password = suppliedPassword;\n269                           }\n270                       }\n271   \n272                       // Check if we've the right password or not\n273                       if (!d.verifyPassword(password)) {\n274                           throw new EncryptedDocumentException();\n275                       }\n276   \n277                       // Decrypt the OLE2 stream, and delegate the resulting OOXML\n278                       //  file to the regular OOXML parser for normal handling\n279                       OOXMLParser parser = new OOXMLParser();\n280                       try (TikaInputStream tis = TikaInputStream.get(d.getDataStream(root))) {\n281                           parser.parse(tis, new EmbeddedContentHandler(new BodyContentHandler(xhtml)),\n282                                   metadata, context);\n283                       }\n284                   } catch (GeneralSecurityException ex) {\n285                       throw new EncryptedDocumentException(ex);\n286                   } catch (FileNotFoundException ex) {\n287                       //this can happen because POI may not support case-insensitive ole2 object\n288                       //lookups\n289                       throw new EncryptedDocumentException(ex);\n290                   }\n291                   break;\n292               case DRMENCRYPTED:\n293                   throw new EncryptedDocumentException(\"DRM encrypted document is not yet supported\" +\n294                           \" by Apache POI\");\n295               default:\n296                   if (root.hasEntry(\"EncryptedPackage\")) {\n297                       throw new EncryptedDocumentException(\"OLE2 file with an unrecognized \" +\n298                               \"EncryptedPackage entry\");\n299                   }\n300                   // For unsupported / unhandled types, just the metadata\n301                   //  is extracted, which happened above\n302                   break;\n303           }\n304       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/WordExtractor.java:\n151       protected void parse(DirectoryNode root, XHTMLContentHandler xhtml)\n152               throws IOException, SAXException, TikaException {\n153           HWPFDocument document;\n154           try {\n155               document = new HWPFDocument(root);\n156           } catch (org.apache.poi.EncryptedDocumentException e) {\n157               throw new EncryptedDocumentException(e);\n158           } catch (OldWordFileFormatException e) {\n159               parseWord6(root, xhtml);\n160               return;\n161           }\n162   \n163           extractSavedByMetadata(document);\n164   \n165           org.apache.poi.hwpf.extractor.WordExtractor wordExtractor =\n166                   new org.apache.poi.hwpf.extractor.WordExtractor(document);\n167   \n168           // Grab the list of pictures. As far as we can tell,\n169           //  the pictures should be in order, and may be directly\n170           //  placed or referenced from an anchor\n171           PicturesTable pictureTable = document.getPicturesTable();\n172           PicturesSource pictures = new PicturesSource(document);\n173           HeaderStories headerFooter = null;\n174           // Do any headers, if present\n175           if (officeParserConfig.isIncludeHeadersAndFooters()) {\n176               headerFooter = new HeaderStories(document);\n177               Range[] headers = new Range[]{headerFooter.getFirstHeaderSubrange(),\n178                       headerFooter.getEvenHeaderSubrange(), headerFooter.getOddHeaderSubrange()};\n179               handleHeaderFooter(headers, \"header\", document, pictures, pictureTable, xhtml);\n180           }\n181           // Do the main paragraph text\n182           Range r = document.getRange();\n183           ListManager listManager = new ListManager(document);\n184           for (int i = 0; i < r.numParagraphs(); i++) {\n185               Paragraph p = r.getParagraph(i);\n186               i += handleParagraph(p, 0, r, document, FieldsDocumentPart.MAIN, pictures, pictureTable,\n187                       listManager, xhtml);\n188           }\n189   \n190           if (officeParserConfig.isIncludeShapeBasedContent()) {\n191               // Do everything else\n192               for (String paragraph : wordExtractor.getMainTextboxText()) {\n193                   xhtml.element(\"p\", paragraph);\n194               }\n195           }\n196   \n197           for (String paragraph : wordExtractor.getFootnoteText()) {\n198               xhtml.element(\"p\", paragraph);\n199           }\n200   \n201           for (String paragraph : wordExtractor.getCommentsText()) {\n202               xhtml.element(\"p\", paragraph);\n203           }\n204   \n205           for (String paragraph : wordExtractor.getEndnoteText()) {\n206               xhtml.element(\"p\", paragraph);\n207           }\n208   \n209           if (officeParserConfig.isIncludeHeadersAndFooters()) {\n210               // Do any footers, if present\n211               Range[] footers = new Range[]{headerFooter.getFirstFooterSubrange(),\n212                       headerFooter.getEvenFooterSubrange(), headerFooter.getOddFooterSubrange()};\n213               handleHeaderFooter(footers, \"footer\", document, pictures, pictureTable, xhtml);\n214           }\n215           // Handle any pictures that we haven't output yet\n216           for (Picture p = pictures.nextUnclaimed(); p != null; ) {\n217               handlePictureCharacterRun(null, p, pictures, xhtml);\n218               p = pictures.nextUnclaimed();\n219           }\n220   \n221           // Handle any embedded office documents\n222           try {\n223   \n224               DirectoryEntry op = (DirectoryEntry) root.getEntry(\"ObjectPool\");\n225               for (Entry entry : op) {\n226                   if (entry.getName().startsWith(\"_\") && entry instanceof DirectoryEntry) {\n227                       handleEmbeddedOfficeDoc((DirectoryEntry) entry, xhtml, true);\n228                   }\n229               }\n230   \n231           } catch (FileNotFoundException e) {\n232               //swallow\n233           }\n234       }\n272       private int handleParagraph(Paragraph p, int parentTableLevel, Range r, HWPFDocument document,\n273                                   FieldsDocumentPart docPart, PicturesSource pictures,\n274                                   PicturesTable pictureTable, ListManager listManager,\n275                                   XHTMLContentHandler xhtml)\n276               throws SAXException, IOException, TikaException {\n277           // Note - a poi bug means we can't currently properly recurse\n278           //  into nested tables, so currently we don't\n279           if (p.isInTable() && p.getTableLevel() > parentTableLevel && parentTableLevel == 0) {\n280               Table t = r.getTable(p);\n281               xhtml.startElement(\"table\");\n282               xhtml.startElement(\"tbody\");\n283               for (int rn = 0; rn < t.numRows(); rn++) {\n284                   TableRow row = t.getRow(rn);\n285                   xhtml.startElement(\"tr\");\n286                   for (int cn = 0; cn < row.numCells(); cn++) {\n287                       TableCell cell = row.getCell(cn);\n288                       xhtml.startElement(\"td\");\n289   \n290                       for (int pn = 0; pn < cell.numParagraphs(); pn++) {\n291                           Paragraph cellP = cell.getParagraph(pn);\n292                           handleParagraph(cellP, p.getTableLevel(), cell, document, docPart, pictures,\n293                                   pictureTable, listManager, xhtml);\n294                       }\n295                       xhtml.endElement(\"td\");\n296                   }\n297                   xhtml.endElement(\"tr\");\n298               }\n299               xhtml.endElement(\"tbody\");\n300               xhtml.endElement(\"table\");\n301               return (t.numParagraphs() - 1);\n302           }\n303   \n304           String text = p.text();\n305           if (text.replaceAll(\"[\\\\r\\\\n\\\\s]+\", \"\").isEmpty()) {\n306               // Skip empty paragraphs\n307               return 0;\n308           }\n309   \n310           TagAndStyle tas;\n311           String numbering = null;\n312   \n313           if (document.getStyleSheet().numStyles() > p.getStyleIndex()) {\n314               StyleDescription style =\n315                       document.getStyleSheet().getStyleDescription(p.getStyleIndex());\n316               if (style != null && style.getName() != null && style.getName().length() > 0) {\n317                   if (p.isInList()) {\n318                       numbering = listManager.getFormattedNumber(p);\n319                   }\n320                   tas = buildParagraphTagAndStyle(style.getName(), (parentTableLevel > 0));\n321               } else {\n322                   tas = new TagAndStyle(\"p\", null);\n323               }\n324           } else {\n325               tas = new TagAndStyle(\"p\", null);\n326           }\n327   \n328           if (tas.getStyleClass() != null) {\n329               xhtml.startElement(tas.getTag(), \"class\", tas.getStyleClass());\n330           } else {\n331               xhtml.startElement(tas.getTag());\n332           }\n333   \n334           if (numbering != null) {\n335               xhtml.characters(numbering);\n336           }\n337   \n338           for (int j = 0; j < p.numCharacterRuns(); j++) {\n339               CharacterRun cr = p.getCharacterRun(j);\n340   \n341               // FIELD_BEGIN_MARK:\n342               if (cr.text().getBytes(UTF_8)[0] == 0x13) {\n343                   Field field =\n344                           document.getFields().getFieldByStartOffset(docPart, cr.getStartOffset());\n345                   // 58 is an embedded document\n346                   // 56 is a document link\n347                   if (field != null && (field.getType() == 58 || field.getType() == 56)) {\n348                       // Embedded Object: add a <div\n349                       // class=\"embedded\" id=\"_X\"/> so consumer can see where\n350                       // in the main text each embedded document\n351                       // occurred:\n352                       String id = \"_unknown_id\";\n353                       //this can return null (TIKA-1956)\n354                       CharacterRun mscr = field.getMarkSeparatorCharacterRun(r);\n355                       if (mscr != null) {\n356                           id = \"_\" + mscr.getPicOffset();\n357                       }\n358                       AttributesImpl attributes = new AttributesImpl();\n359                       attributes.addAttribute(\"\", \"class\", \"class\", \"CDATA\", \"embedded\");\n360                       attributes.addAttribute(\"\", \"id\", \"id\", \"CDATA\", id);\n361                       xhtml.startElement(\"div\", attributes);\n362                       xhtml.endElement(\"div\");\n363                   }\n364               }\n365   \n366               if (cr.text().equals(\"\\u0013\")) {\n367                   j += handleSpecialCharacterRuns(p, j, tas.isHeading(), pictures, xhtml);\n368               } else if (cr.text().startsWith(\"\\b\")) { //\\u0008\"\n369                   // Floating Picture(s)\n370                   for (int pn = 0; pn < cr.text().length(); pn++) {\n371                       // Assume they're in the order from the unclaimed list...\n372                       Picture picture = pictures.nextUnclaimed();\n373   \n374                       // Output\n375                       handlePictureCharacterRun(cr, picture, pictures, xhtml);\n376                   }\n377               } else if (pictureTable.hasPicture(cr)) {\n378                   // Inline Picture\n379                   Picture picture = pictures.getFor(cr);\n380                   handlePictureCharacterRun(cr, picture, pictures, xhtml);\n381               } else {\n382                   handleCharacterRun(cr, tas.isHeading(), xhtml);\n383               }\n384           }\n385   \n386           closeStyleElements(false, xhtml);\n387   \n388           xhtml.endElement(tas.getTag());\n389   \n390           return 0;\n391       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/ListManager.java:\n 63       public String getFormattedNumber(final Paragraph paragraph) {\n 64           if (paragraph == null) {\n 65               throw new IllegalArgumentException(\"Given paragraph cannot be null.\");\n 66           }\n 67           if (!paragraph.isInList()) {\n 68               throw new IllegalArgumentException(\"Can only process list paragraphs.\");\n 69           }\n 70           //lsid is equivalent to docx's abnum\n 71           //ilfo is equivalent to docx's num\n 72           int currAbNumId = -1;\n 73           try {\n 74               currAbNumId = paragraph.getList().getLsid();\n 75           } catch (NoSuchElementException e) {\n 76               //somewhat frequent exception when initializing HWPFList\n 77               return \"\";\n 78           } catch (IllegalArgumentException | NullPointerException e) {\n 79               return \"\";\n 80           }\n 81   \n 82           int currNumId = paragraph.getIlfo();\n 83           ParagraphLevelCounter lc = listLevelMap.get(currAbNumId);\n 84           LevelTuple[] overrideTuples = overrideTupleMap.get(currNumId);\n 85   \n 86           if (lc == null) {\n 87               ListData listData = listTables.getListData(paragraph.getList().getLsid());\n 88               if (listData == null) {\n 89                   //silently skip\n 90                   return \"\";\n 91               }\n 92               LevelTuple[] levelTuples = new LevelTuple[listData.getLevels().length];\n 93               for (int i = 0; i < listData.getLevels().length; i++) {\n 94                   levelTuples[i] = buildTuple(i, listData.getLevels()[i]);\n 95               }\n 96               lc = new ParagraphLevelCounter(levelTuples);\n 97           }\n 98           if (overrideTuples == null) {\n 99               overrideTuples = buildOverrideTuples(paragraph, lc.getNumberOfLevels());\n100           }\n101           String formattedString = lc.incrementLevel(paragraph.getIlvl(), overrideTuples);\n102   \n103           listLevelMap.put(currAbNumId, lc);\n104           overrideTupleMap.put(currNumId, overrideTuples);\n105           return formattedString;\n106       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/AbstractListManager.java:\n 47           public ParagraphLevelCounter(LevelTuple[] levelTuples) {\n 48               this.levelTuples = levelTuples;\n 49           }\n",
            "cost": 0.14350000000000002,
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/AbstractListManager.java:43:54",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 92
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/mime/Patterns.java:162:30",
            "status": "error",
            "id": 93
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-news-module/src/main/java/org/apache/tika/parser/iptc/IptcAnpaParser.java:860:34",
            "status": "error",
            "id": 94
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-news-module/src/main/java/org/apache/tika/parser/iptc/IptcAnpaParser.java:861:34",
            "status": "error",
            "id": 95
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-news-module/src/main/java/org/apache/tika/parser/iptc/IptcAnpaParser.java:862:34",
            "status": "error",
            "id": 96
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-news-module/src/main/java/org/apache/tika/parser/iptc/IptcAnpaParser.java:863:34",
            "status": "error",
            "id": 97
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-news-module/src/main/java/org/apache/tika/parser/iptc/IptcAnpaParser.java:864:34",
            "status": "error",
            "id": 98
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-news-module/src/main/java/org/apache/tika/parser/iptc/IptcAnpaParser.java:865:34",
            "status": "error",
            "id": 99
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-image-module/src/main/java/org/apache/tika/parser/image/ImageMetadataExtractor.java:616:45",
            "status": "error",
            "id": 100
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-example/src/main/java/org/apache/tika/example/ExtractEmbeddedFiles.java:87:40",
            "status": "error",
            "id": 101
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n1040           public void process(InputStream input, OutputStream output, Metadata metadata) throws Exception {\n1041               Parser p = parser;\n1042               if (fork) {\n1043                   p = new ForkParser(TikaCLI.class.getClassLoader(), p);\n1044               }\n1045               ContentHandler handler = getContentHandler(output, metadata);\n1046               try {\n1047                   p.parse(input, handler, metadata, context);\n1048                   // fix for TIKA-596: if a parser doesn't generate\n1049                   // XHTML output, the lack of an output document prevents\n1050                   // metadata from being output: this fixes that\n1051                   if (handler instanceof NoDocumentMetHandler) {\n1052                       NoDocumentMetHandler metHandler = (NoDocumentMetHandler) handler;\n1053                       if (!metHandler.metOutput()) {\n1054                           metHandler.endDocument();\n1055                       }\n1056                   }\n1057               } finally {\n1058                   if (fork) {\n1059                       ((ForkParser) p).close();\n1060                   }\n1061               }\n1062           }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-pdf-module/src/main/java/org/apache/tika/parser/pdf/PDFParser.java:\n 143       public void parse(InputStream stream, ContentHandler handler, Metadata metadata,\n 144                         ParseContext context) throws IOException, SAXException, TikaException {\n 145   \n 146           PDFParserConfig localConfig = defaultConfig;\n 147           PDFParserConfig userConfig = context.get(PDFParserConfig.class);\n 148           if (userConfig != null) {\n 149               localConfig = defaultConfig.cloneAndUpdate(userConfig);\n 150           }\n 151           if (localConfig.isSetKCMS()) {\n 152               System.setProperty(\"sun.java2d.cmm\", \"sun.java2d.cmm.kcms.KcmsServiceProvider\");\n 153           }\n 154           IncrementalUpdateRecord incomingIncrementalUpdateRecord = context.get(IncrementalUpdateRecord.class);\n 155           context.set(IncrementalUpdateRecord.class, null);\n 156           initRenderer(localConfig, context);\n 157           PDDocument pdfDocument = null;\n 158   \n 159           String password = \"\";\n 160           PDFRenderingState incomingRenderingState = context.get(PDFRenderingState.class);\n 161           TikaInputStream tstream = null;\n 162           boolean shouldClose = false;\n 163           OCRPageCounter prevOCRCounter = context.get(OCRPageCounter.class);\n 164           context.set(OCRPageCounter.class, new OCRPageCounter());\n 165           try {\n 166               if (shouldSpool(localConfig)) {\n 167                   if (stream instanceof TikaInputStream) {\n 168                       tstream = (TikaInputStream) stream;\n 169                   } else {\n 170                       tstream = TikaInputStream.get(CloseShieldInputStream.wrap(stream));\n 171                       shouldClose = true;\n 172                   }\n 173                   context.set(PDFRenderingState.class, new PDFRenderingState(tstream));\n 174               } else {\n 175                   tstream = TikaInputStream.cast(stream);\n 176               }\n 177   \n 178   \n 179               scanXRefOffsets(localConfig, tstream, metadata, context);\n 180   \n 181               password = getPassword(metadata, context);\n 182               MemoryUsageSetting memoryUsageSetting = null;\n 183   \n 184               if (localConfig.getMaxMainMemoryBytes() >= 0) {\n 185                   memoryUsageSetting =\n 186                           MemoryUsageSetting.setupMixed(localConfig.getMaxMainMemoryBytes());\n 187               } else {\n 188                   memoryUsageSetting = MemoryUsageSetting.setupMainMemoryOnly();\n 189               }\n 190   \n 191               pdfDocument = getPDDocument(stream, tstream, password,\n 192                       memoryUsageSetting.streamCache, metadata, context);\n 193   \n 194   \n 195               boolean hasCollection = hasCollection(pdfDocument, metadata);\n 196   \n 197               checkEncryptedPayload(pdfDocument, hasCollection, localConfig);\n 198   \n 199               boolean hasXFA = hasXFA(pdfDocument, metadata);\n 200               boolean hasMarkedContent = hasMarkedContent(pdfDocument, metadata);\n 201               extractMetadata(pdfDocument, metadata, context);\n 202               extractSignatures(pdfDocument, metadata);\n 203               checkIllustrator(pdfDocument, metadata);\n 204               AccessChecker checker = localConfig.getAccessChecker();\n 205               checker.check(metadata);\n 206               renderPagesBeforeParse(tstream, handler, metadata, context, localConfig);\n 207               if (handler != null) {\n 208                   if (shouldHandleXFAOnly(hasXFA, localConfig)) {\n 209                       handleXFAOnly(pdfDocument, handler, metadata, context);\n 210                   } else if (localConfig.getOcrStrategy()\n 211                           .equals(PDFParserConfig.OCR_STRATEGY.OCR_ONLY)) {\n 212                       OCR2XHTML.process(pdfDocument, handler, context, metadata,\n 213                               localConfig);\n 214                   } else if (hasMarkedContent && localConfig.isExtractMarkedContent()) {\n 215                       PDFMarkedContent2XHTML\n 216                               .process(pdfDocument, handler, context, metadata,\n 217                                       localConfig);\n 218                   } else {\n 219                       PDF2XHTML.process(pdfDocument, handler, context, metadata,\n 220                               localConfig);\n 221                   }\n 222               }\n 223           } catch (InvalidPasswordException e) {\n 224               metadata.set(PDF.IS_ENCRYPTED, \"true\");\n 225               throw new EncryptedDocumentException(e);\n 226           } finally {\n 227               metadata.set(OCR_PAGE_COUNT, context.get(OCRPageCounter.class).getCount());\n 228               context.set(OCRPageCounter.class, prevOCRCounter);\n 229               //reset the incrementalUpdateRecord even if null\n 230               context.set(IncrementalUpdateRecord.class, incomingIncrementalUpdateRecord);\n 231               PDFRenderingState currState = context.get(PDFRenderingState.class);\n 232               try {\n 233                   if (currState != null && currState.getRenderResults() != null) {\n 234                       currState.getRenderResults().close();\n 235                   }\n 236                   if (pdfDocument != null) {\n 237                       pdfDocument.close();\n 238                   }\n 239               } finally {\n 240                   //replace the one that was here\n 241                   context.set(PDFRenderingState.class, incomingRenderingState);\n 242                   if (shouldClose && tstream != null) {\n 243                       tstream.close();\n 244                   }\n 245               }\n 246   \n 247           }\n 248       }\n 412       private void renderPagesBeforeParse(TikaInputStream tstream,\n 413                                           ContentHandler xhtml, Metadata parentMetadata,\n 414                                           ParseContext context,\n 415                                           PDFParserConfig config) {\n 416           if (config.getImageStrategy() != PDFParserConfig.IMAGE_STRATEGY.RENDER_PAGES_BEFORE_PARSE) {\n 417               return;\n 418           }\n 419           RenderResults renderResults = null;\n 420           try {\n 421               renderResults = renderPDF(tstream, context, config);\n 422           } catch (SecurityException e) {\n 423               throw e;\n 424           } catch (Exception e) {\n 425               EmbeddedDocumentUtil.recordException(e, parentMetadata);\n 426               return;\n 427           }\n 428           context.get(PDFRenderingState.class).setRenderResults(renderResults);\n 429           EmbeddedDocumentExtractor embeddedDocumentExtractor =\n 430                   EmbeddedDocumentUtil.getEmbeddedDocumentExtractor(context);\n 431   \n 432           for (RenderResult result : renderResults.getResults()) {\n 433               if (result.getStatus() == RenderResult.STATUS.SUCCESS) {\n 434                   if (embeddedDocumentExtractor.shouldParseEmbedded(result.getMetadata())) {\n 435                       try (InputStream is = result.getInputStream()) {\n 436                           embeddedDocumentExtractor.parseEmbedded(is, xhtml, result.getMetadata(),\n 437                                   false);\n 438                       } catch (SecurityException e) {\n 439                           throw e;\n 440                       } catch (Exception e) {\n 441                           EmbeddedDocumentUtil.recordException(e, parentMetadata);\n 442                       }\n 443                   }\n 444               }\n 445           }\n 446       }\n 448       private RenderResults renderPDF(TikaInputStream tstream,\n 449                                       ParseContext parseContext, PDFParserConfig localConfig)\n 450               throws IOException, TikaException {\n 451           Metadata metadata = new Metadata();\n 452           metadata.set(TikaCoreProperties.TYPE, MEDIA_TYPE.toString());\n 453           return localConfig.getRenderer().render(\n 454                   tstream, metadata, parseContext, PageRangeRequest.RENDER_ALL);\n 455       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-pdf-module/src/main/java/org/apache/tika/renderer/pdf/mutool/MuPDFRenderer.java:\n 59       @Override\n 60       public RenderResults render(InputStream is, Metadata metadata, ParseContext parseContext,\n 61                                   RenderRequest... requests) throws IOException, TikaException {\n 62           TemporaryResources tmp = new TemporaryResources();\n 63           PageBasedRenderResults results = new PageBasedRenderResults(tmp);\n 64           Path path = TikaInputStream.get(is, tmp, metadata).getPath();\n 65           for (RenderRequest request : requests) {\n 66               renderRequest(path, metadata, parseContext, request, results, tmp);\n 67           }\n 68           return results;\n 69       }\n 71       private RenderResults renderRequest(Path pdf, Metadata metadata, ParseContext parseContext,\n 72                                           RenderRequest request, RenderResults results,\n 73                                           TemporaryResources tmp) throws TikaException, IOException {\n 74           if (! (request instanceof PageRangeRequest)) {\n 75               throw new TikaException(\"I regret that this renderer can only handle \" +\n 76                       \"PageRangeRequests, not \" + request.getClass());\n 77           }\n 78           PageRangeRequest rangeRequest = (PageRangeRequest)request;\n 79           RenderingTracker tracker = parseContext.get(RenderingTracker.class);\n 80           if (tracker == null) {\n 81               tracker = new RenderingTracker();\n 82               parseContext.set(RenderingTracker.class, tracker);\n 83           }\n 84   \n 85           Path dir = Files.createTempDirectory(\"tika-render-\");\n 86           //TODO -- this assumes files have been deleted first\n 87           //do something smarter\n 88           tmp.addResource(new Closeable() {\n 89               @Override\n 90               public void close() throws IOException {\n 91                   Files.delete(dir);\n 92               }\n 93           });\n 94           //TODO -- run mutool pages to get page sizes\n 95           //and then use that information in the -O to get proper scaling\n 96           //etc.\n 97           // This would also allow us to run on a single page at a time if that's of any interest\n 98           String[] args = createCommandLine(pdf, dir, rangeRequest);\n 99   \n100           ProcessBuilder builder = new ProcessBuilder();\n101           builder.command(args);\n102           //TODO: parameterize timeout\n103           FileProcessResult result = ProcessUtils.execute(builder, 60000, 10, 1000);\n104           if (result.getExitValue() != 0) {\n105               throw new TikaException(result.getStderr());\n106           }\n107           //TODO -- fix this\n108           Matcher m = Pattern.compile(\"tika-mutool-render-(\\\\d+)\\\\.png\").matcher(\"\");\n109           for (File f : dir.toFile().listFiles()) {\n110               String n = f.getName();\n111               if (m.reset(n).find()) {\n112                   int pageIndex = Integer.parseInt(m.group(1));\n113                   Metadata renderMetadata = new Metadata();\n114                   renderMetadata.set(TikaPagedText.PAGE_NUMBER, pageIndex);\n115                   renderMetadata.set(TikaCoreProperties.EMBEDDED_RESOURCE_TYPE,\n116                           TikaCoreProperties.EmbeddedResourceType.RENDERING.name());\n117                   results.add(new RenderResult(RenderResult.STATUS.SUCCESS, tracker.getNextId(),\n118                           TikaInputStream.get(f.toPath()), renderMetadata));\n119               }\n120           }\n121   \n122           return results;\n123       }\n",
            "cost": 0.11572,
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-pdf-module/src/main/java/org/apache/tika/renderer/pdf/mutool/MuPDFRenderer.java:108:37",
            "status": "corpus",
            "valid_path": "NO",
            "id": 102
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRConfig.java:114:40",
            "status": "error",
            "id": 103
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n1040           public void process(InputStream input, OutputStream output, Metadata metadata) throws Exception {\n1041               Parser p = parser;\n1042               if (fork) {\n1043                   p = new ForkParser(TikaCLI.class.getClassLoader(), p);\n1044               }\n1045               ContentHandler handler = getContentHandler(output, metadata);\n1046               try {\n1047                   p.parse(input, handler, metadata, context);\n1048                   // fix for TIKA-596: if a parser doesn't generate\n1049                   // XHTML output, the lack of an output document prevents\n1050                   // metadata from being output: this fixes that\n1051                   if (handler instanceof NoDocumentMetHandler) {\n1052                       NoDocumentMetHandler metHandler = (NoDocumentMetHandler) handler;\n1053                       if (!metHandler.metOutput()) {\n1054                           metHandler.endDocument();\n1055                       }\n1056                   }\n1057               } finally {\n1058                   if (fork) {\n1059                       ((ForkParser) p).close();\n1060                   }\n1061               }\n1062           }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java:\n242       @Override\n243       public void parse(InputStream stream, ContentHandler handler, Metadata metadata,\n244                         ParseContext parseContext) throws IOException, SAXException, TikaException {\n245   \n246           TesseractOCRConfig userConfig = parseContext.get(TesseractOCRConfig.class);\n247           TesseractOCRConfig config = defaultConfig;\n248           if (userConfig != null) {\n249               config = defaultConfig.cloneAndUpdate(userConfig);\n250           }\n251           // If Tesseract is not on the path with the current config, do not try to run OCR\n252           // getSupportedTypes shouldn't have listed us as handling it, so this should only\n253           //  occur if someone directly calls this parser, not via DefaultParser or similar\n254           if (!hasTesseract || (config != null && config.isSkipOcr())) {\n255               return;\n256           }\n257   \n258           //if you haven't checked yet, and a per file config requests imagemagick\n259           //and if the default is not to use image processing\n260           if (! HAS_CHECKED_FOR_IMAGE_MAGICK && config.isEnableImagePreprocessing()) {\n261               hasImageMagick = hasImageMagick();\n262           }\n263   \n264           try (TemporaryResources tmp = new TemporaryResources()) {\n265               TikaInputStream tikaStream = TikaInputStream.get(stream, tmp, metadata);\n266   \n267               //trigger the spooling to a tmp file if the stream wasn't\n268               //already a TikaInputStream that contained a file\n269               tikaStream.getPath();\n270               //this is the text output file name specified on the tesseract\n271               //commandline.  The actual output file name will have a suffix added.\n272               File tmpOCROutputFile = tmp.createTemporaryFile();\n273               ContentHandler baseHandler = getContentHandler(config.isInlineContent(), handler, metadata, parseContext);\n274               XHTMLContentHandler xhtml = new XHTMLContentHandler(baseHandler, metadata);\n275               xhtml.startDocument();\n276               parse(tikaStream, tmpOCROutputFile, xhtml, metadata, parseContext, config);\n277               xhtml.endDocument();\n278           }\n279       }\n300       private void parse(TikaInputStream tikaInputStream, File tmpOCROutputFile,\n301                          ContentHandler xhtml,\n302                          Metadata metadata, ParseContext parseContext, TesseractOCRConfig config)\n303               throws IOException, SAXException, TikaException {\n304           warnOnFirstParse();\n305           validateLangString(config.getLanguage());\n306   \n307           File tmpTxtOutput = null;\n308           try {\n309               Path input = tikaInputStream.getPath();\n310               long size = tikaInputStream.getLength();\n311   \n312               if (size >= config.getMinFileSizeToOcr() && size <= config.getMaxFileSizeToOcr()) {\n313   \n314                   // Process image\n315                   if (config.isEnableImagePreprocessing() || config.isApplyRotation()) {\n316                       if (!hasImageMagick) {\n317                           LOG.warn(\n318                                   \"User has selected to preprocess images, \" +\n319                                           \"but I can't find ImageMagick.\" +\n320                                           \"Backing off to original file.\");\n321                           doOCR(input.toFile(), tmpOCROutputFile, config, parseContext);\n322                       } else {\n323                           // copy the contents of the original input file into a temporary file\n324                           // which will be preprocessed for OCR\n325   \n326                           try (TemporaryResources tmp = new TemporaryResources()) {\n327                               Path tmpFile = tmp.createTempFile();\n328                               Files.copy(input, tmpFile, StandardCopyOption.REPLACE_EXISTING);\n329                               imagePreprocessor.process(tmpFile, tmpFile, metadata, config);\n330                               doOCR(tmpFile.toFile(), tmpOCROutputFile, config, parseContext);\n331                           }\n332                       }\n333                   } else {\n334                       doOCR(input.toFile(), tmpOCROutputFile, config, parseContext);\n335                   }\n336   \n337                   String extension = config.getPageSegMode().equals(\"0\") ? \"osd\" :\n338                           config.getOutputType().toString().toLowerCase(Locale.US);\n339                   // Tesseract appends the output type (.txt or .hocr or .osd) to output file name\n340                   tmpTxtOutput = new File(tmpOCROutputFile.getAbsolutePath() +\n341                           \".\" + extension);\n342   \n343                   if (tmpTxtOutput.exists()) {\n344                       try (InputStream is = new FileInputStream(tmpTxtOutput)) {\n345                           if (config.getPageSegMode().equals(\"0\")) {\n346                               extractOSD(is, metadata);\n347                           } else if (config.getOutputType().equals(TesseractOCRConfig.OUTPUT_TYPE.HOCR)) {\n348                               extractHOCROutput(is, parseContext, xhtml);\n349                           } else {\n350                               extractOutput(is, xhtml);\n351                           }\n352                       }\n353                   }\n354               }\n355           } finally {\n356               if (tmpTxtOutput != null) {\n357                   tmpTxtOutput.delete();\n358               }\n359           }\n360       }\n580       private void validateLangString(String language) throws TikaConfigException {\n581           Set<String> invalidlangs = new HashSet<>();\n582           Set<String> validLangs = new HashSet<>();\n583           TesseractOCRConfig.getLangs(language, validLangs, invalidlangs);\n584           if (invalidlangs.size() > 0) {\n585               throw new TikaConfigException(\"Invalid language code(s): \" + invalidlangs);\n586           }\n587           if (langs.size() > 0) {\n588               for (String lang : validLangs) {\n589                   if (!langs.contains(lang)) {\n590                       throw new TikaConfigException(\n591                               \"tesseract does not have \" + lang + \" available. I see only: \" + langs);\n592                   }\n593               }\n594           }\n595       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRConfig.java:\n109       public static void getLangs(String language, Set<String> validLangs, Set<String> invalidLangs) {\n110           if (StringUtils.isBlank(language)) {\n111               return;\n112           }\n113           // Get rid of embedded spaces\n114           language = language.replaceAll(\"\\\\s\", \"\");\n115           // Test for leading or trailing +\n116           if (language.matches(\"\\\\+.*|.*\\\\+\")) {\n117               throw new IllegalArgumentException(\n118                       \"Invalid syntax - Can't start or end with +\" + language);\n119           }\n120           // Split on the + sign\n121           final String[] langs = language.split(\"\\\\+\");\n122           for (String lang : langs) {\n123               // First, make sure it conforms to the correct syntax\n124               if (!lang.matches(\n125                       \"([a-zA-Z]{3}(_[a-zA-Z]{3,4}){0,2})|script(/|\\\\\\\\)[A-Z][a-zA-Z_]+\")) {\n126                   invalidLangs.add(lang + \" (invalid syntax)\");\n127               } else {\n128                   validLangs.add(lang);\n129               }\n130           }\n131       }\n",
            "cost": 0.10487,
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRConfig.java:116:30",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 104
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRConfig.java:121:47",
            "status": "error",
            "id": 105
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRConfig.java:125:21",
            "status": "error",
            "id": 106
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/OutlookExtractor.java:579:45",
            "status": "error",
            "id": 107
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n1040           public void process(InputStream input, OutputStream output, Metadata metadata) throws Exception {\n1041               Parser p = parser;\n1042               if (fork) {\n1043                   p = new ForkParser(TikaCLI.class.getClassLoader(), p);\n1044               }\n1045               ContentHandler handler = getContentHandler(output, metadata);\n1046               try {\n1047                   p.parse(input, handler, metadata, context);\n1048                   // fix for TIKA-596: if a parser doesn't generate\n1049                   // XHTML output, the lack of an output document prevents\n1050                   // metadata from being output: this fixes that\n1051                   if (handler instanceof NoDocumentMetHandler) {\n1052                       NoDocumentMetHandler metHandler = (NoDocumentMetHandler) handler;\n1053                       if (!metHandler.metOutput()) {\n1054                           metHandler.endDocument();\n1055                       }\n1056                   }\n1057               } finally {\n1058                   if (fork) {\n1059                       ((ForkParser) p).close();\n1060                   }\n1061               }\n1062           }\n\nsrc/tika/tika-parsers/tika-parsers-extended/tika-parser-scientific-module/src/main/java/org/apache/tika/parser/gdal/GDALParser.java:\n174       @Override\n175       public void parse(InputStream stream, ContentHandler handler, Metadata metadata,\n176                         ParseContext context) throws IOException, SAXException, TikaException {\n177   \n178           if (!ExternalParser.check(\"gdalinfo\")) {\n179               return;\n180           }\n181   \n182           // first set up and run GDAL\n183           // process the command\n184           TemporaryResources tmp = new TemporaryResources();\n185           TikaInputStream tis = TikaInputStream.get(stream, tmp, metadata);\n186   \n187           String runCommand = processCommand(tis);\n188           String output = execCommand(new String[]{runCommand});\n189   \n190           // now extract the actual metadata params\n191           // from the GDAL output in the content stream\n192           // to do this, we need to literally process the output\n193           // from the invoked command b/c we can't read metadata and\n194           // output text from the handler in ExternalParser\n195           // at the same time, so for now, we can't use the\n196           // ExternalParser to do this and I've had to bring some of\n197           // that functionality directly into this class\n198           // TODO: investigate a way to do both using ExternalParser\n199   \n200           extractMetFromOutput(output, metadata);\n201           applyPatternsToOutput(output, metadata, getPatterns());\n202   \n203           // make the content handler and provide output there\n204           // now that we have metadata\n205           processOutput(handler, metadata, output);\n206       }\n208       private Map<Pattern, String> getPatterns() {\n209           Map<Pattern, String> patterns = new HashMap<>();\n210           this.addPatternWithColon(\"Driver\", patterns);\n211           this.addPatternWithColon(\"Files\", patterns);\n212           this.addPatternWithIs(\"Size\", patterns);\n213           this.addPatternWithIs(\"Coordinate System\", patterns);\n214           this.addBoundingBoxPattern(\"Upper Left\", patterns);\n215           this.addBoundingBoxPattern(\"Lower Left\", patterns);\n216           this.addBoundingBoxPattern(\"Upper Right\", patterns);\n217           this.addBoundingBoxPattern(\"Lower Right\", patterns);\n218           return patterns;\n219       }\n225       private void addPatternWithIs(String name, Map<Pattern, String> patterns) {\n226           patterns.put(Pattern.compile(name + \" is ([A-Za-z0-9\\\\.,\\\\s`']+)\"), name);\n227       }\n",
            "cost": 0.08197,
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-extended/tika-parser-scientific-module/src/main/java/org/apache/tika/parser/gdal/GDALParser.java:226:38",
            "status": "corpus",
            "valid_path": "NO",
            "id": 108
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n 667           @SuppressWarnings(\"unchecked\")\n 668           CT loadOverall(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 669                   throws TikaException, IOException {\n 670               List<T> loaded = new ArrayList<>();\n 671   \n 672               // Find the children of the parent tag, if any\n 673               for (Element le : getTopLevelElementChildren(element, getParentTagName(),\n 674                       getLoaderTagName())) {\n 675                   T loadedChild = loadOne(le, mimeTypes, loader);\n 676                   if (loadedChild != null) {\n 677                       loaded.add(loadedChild);\n 678                   }\n 679               }\n 680   \n 681               // Build the classes, and wrap as needed\n 682               if (loaded.isEmpty()) {\n 683                   // Nothing defined, create a Default\n 684                   return createDefault(mimeTypes, loader);\n 685               } else if (loaded.size() == 1) {\n 686                   T single = loaded.get(0);\n 687                   if (isComposite(single)) {\n 688                       // Single Composite defined, use that\n 689                       return (CT) single;\n 690                   }\n 691               } else if (!supportsComposite()) {\n 692                   // No composite support, just return the first one\n 693                   if (loaded.size() == 1) {\n 694                       return (CT) loaded.get(0);\n 695                   } else if (loaded.size() > 1) {\n 696                       throw new TikaConfigException(\n 697                               \"Composite not supported for \" + getParentTagName() +\n 698                                       \". Must specify only one child!\");\n 699                   } else {\n 700                       //throw exception if empty?\n 701                   }\n 702               }\n 703               // Wrap the defined parsers/detectors up in a Composite\n 704               return createComposite(loaded, mimeTypes, loader);\n 705           }\n 707           T loadOne(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 708                   throws TikaException, IOException {\n 709               String name = element.getAttribute(\"class\");\n 710               if (name == null) {\n 711                   throw new TikaConfigException(\"class attribute must not be null: \" + element);\n 712               }\n 713               String initProbHandler = element.getAttribute(\"initializableProblemHandler\");\n 714               InitializableProblemHandler initializableProblemHandler;\n 715               if (initProbHandler == null || initProbHandler.length() == 0) {\n 716                   initializableProblemHandler = loader.getInitializableProblemHandler();\n 717               } else {\n 718                   initializableProblemHandler = getInitializableProblemHandler(initProbHandler);\n 719               }\n 720   \n 721               T loaded = null;\n 722   \n 723               try {\n 724                   Class<? extends T> loadedClass = loader.getServiceClass(getLoaderClass(), name);\n 725   \n 726                   // Do pre-load checks and short-circuits\n 727                   //TODO : allow duplicate instances with different configurations\n 728                   loaded = preLoadOne(loadedClass, name, mimeTypes);\n 729                   if (loaded != null) {\n 730                       return loaded;\n 731                   }\n 732   \n 733                   // Get any parameters / settings for the parser\n 734                   Map<String, Param> params = null;\n 735                   try {\n 736                       params = getParams(element);\n 737                   } catch (Exception e) {\n 738                       throw new TikaConfigException(e.getMessage(), e);\n 739                   }\n 740   \n 741                   // Is this a composite or decorated class? If so, support recursion\n 742                   if (isComposite(loadedClass)) {\n 743                       // Get the child objects for it\n 744                       List<T> children = new ArrayList<>();\n 745                       NodeList childNodes = element.getElementsByTagName(getLoaderTagName());\n 746                       if (childNodes.getLength() > 0) {\n 747                           for (int i = 0; i < childNodes.getLength(); i++) {\n 748                               T loadedChild =\n 749                                       loadOne((Element) childNodes.item(i), mimeTypes, loader);\n 750                               if (loadedChild != null) {\n 751                                   children.add(loadedChild);\n 752                               }\n 753                           }\n 754                       }\n 755   \n 756                       // Get the list of children to exclude\n 757                       Set<Class<? extends T>> excludeChildren = new HashSet<>();\n 758                       NodeList excludeChildNodes =\n 759                               element.getElementsByTagName(getLoaderTagName() + \"-exclude\");\n 760                       if (excludeChildNodes.getLength() > 0) {\n 761                           for (int i = 0; i < excludeChildNodes.getLength(); i++) {\n 762                               Element excl = (Element) excludeChildNodes.item(i);\n 763                               String exclName = excl.getAttribute(\"class\");\n 764                               try {\n 765                                   excludeChildren\n 766                                           .add(loader.getServiceClass(getLoaderClass(), exclName));\n 767                               } catch (ClassNotFoundException e) {\n 768                                   //TIKA-3268 -- This should stop the world.\n 769                                   throw new TikaConfigException(\n 770                                           \"Class not found in -exclude list: \" + exclName);\n 771                               }\n 772                           }\n 773                       }\n 774   \n 775                       // Create the Composite\n 776                       loaded = createComposite(loadedClass, children, excludeChildren, params,\n 777                               mimeTypes, loader);\n 778   \n 779                       // Default constructor fallback\n 780                       if (loaded == null) {\n 781                           loaded = newInstance(loadedClass);\n 782                       }\n 783                   } else {\n 784                       // Regular class, create as-is\n 785                       loaded = newInstance(loadedClass);\n 786                       // TODO Support arguments, needed for Translators etc\n 787                       // See the thread \"Configuring parsers and translators\" for details\n 788                   }\n 789   \n 790                   //Assigning the params to bean fields/setters\n 791                   AnnotationUtils.assignFieldParams(loaded, params);\n 792                   if (loaded instanceof Initializable) {\n 793                       ((Initializable) loaded).initialize(params);\n 794                       ((Initializable) loaded).checkInitialization(initializableProblemHandler);\n 795                   }\n 796                   // Have any decoration performed, eg explicit mimetypes\n 797                   loaded = decorate(loaded, element);\n 798                   // All done with setup\n 799                   return loaded;\n 800               } catch (ClassNotFoundException e) {\n 801                   if (loader.getLoadErrorHandler() == LoadErrorHandler.THROW) {\n 802                       // Use a different exception signature here\n 803                       throw new TikaConfigException(\n 804                               \"Unable to find a \" + getLoaderTagName() + \" class: \" + name, e);\n 805                   }\n 806                   // Report the problem\n 807                   loader.getLoadErrorHandler().handleLoadError(name, e);\n 808                   return null;\n 809               } catch (IllegalAccessException e) {\n 810                   throw new TikaException(\n 811                           \"Unable to access a \" + getLoaderTagName() + \" class: \" + name, e);\n 812               } catch (InvocationTargetException e) {\n 813                   throw new TikaException(\n 814                           \"Unable to create a \" + getLoaderTagName() + \" class: \" + name, e);\n 815               } catch (InstantiationException e) {\n 816                   throw new TikaException(\n 817                           \"Unable to instantiate a \" + getLoaderTagName() + \" class: \" + name, e);\n 818               } catch (NoSuchMethodException e) {\n 819                   throw new TikaException(\n 820                           \"Unable to find the right constructor for \" + getLoaderTagName() +\n 821                                   \" class: \" + name, e);\n 822               }\n 823           }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/metadata/filter/CaptureGroupMetadataFilter.java:\n102       @Override\n103       public void initialize(Map<String, Param> params) throws TikaConfigException {\n104           try {\n105               regex = Pattern.compile(regexString);\n106           } catch (PatternSyntaxException e) {\n107               throw new TikaConfigException(\"Couldn't parse regex\", e);\n108           }\n109   \n110       }\n",
            "cost": 0.11389500000000001,
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/metadata/filter/CaptureGroupMetadataFilter.java:105:37",
            "status": "corpus",
            "valid_path": "NO",
            "id": 109
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/sax/RecursiveParserWrapperHandler.java:158:41",
            "status": "error",
            "id": 110
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/WordExtractor.java:305:29",
            "status": "error",
            "id": 111
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/SummaryExtractor.java:75:39",
            "status": "error",
            "id": 112
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/onenote/GUID.java:48:49",
            "status": "error",
            "id": 113
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/onenote/GUID.java:48:29",
            "status": "error",
            "id": 114
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/onenote/GUID.java:47:82",
            "status": "error",
            "id": 115
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/pot/PooledTimeSeriesParser.java:201:46",
            "status": "error",
            "id": 116
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-xmp/src/main/java/org/apache/tika/xmp/XMPMetadata.java:631:39",
            "status": "error",
            "id": 117
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n 667           @SuppressWarnings(\"unchecked\")\n 668           CT loadOverall(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 669                   throws TikaException, IOException {\n 670               List<T> loaded = new ArrayList<>();\n 671   \n 672               // Find the children of the parent tag, if any\n 673               for (Element le : getTopLevelElementChildren(element, getParentTagName(),\n 674                       getLoaderTagName())) {\n 675                   T loadedChild = loadOne(le, mimeTypes, loader);\n 676                   if (loadedChild != null) {\n 677                       loaded.add(loadedChild);\n 678                   }\n 679               }\n 680   \n 681               // Build the classes, and wrap as needed\n 682               if (loaded.isEmpty()) {\n 683                   // Nothing defined, create a Default\n 684                   return createDefault(mimeTypes, loader);\n 685               } else if (loaded.size() == 1) {\n 686                   T single = loaded.get(0);\n 687                   if (isComposite(single)) {\n 688                       // Single Composite defined, use that\n 689                       return (CT) single;\n 690                   }\n 691               } else if (!supportsComposite()) {\n 692                   // No composite support, just return the first one\n 693                   if (loaded.size() == 1) {\n 694                       return (CT) loaded.get(0);\n 695                   } else if (loaded.size() > 1) {\n 696                       throw new TikaConfigException(\n 697                               \"Composite not supported for \" + getParentTagName() +\n 698                                       \". Must specify only one child!\");\n 699                   } else {\n 700                       //throw exception if empty?\n 701                   }\n 702               }\n 703               // Wrap the defined parsers/detectors up in a Composite\n 704               return createComposite(loaded, mimeTypes, loader);\n 705           }\n 707           T loadOne(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 708                   throws TikaException, IOException {\n 709               String name = element.getAttribute(\"class\");\n 710               if (name == null) {\n 711                   throw new TikaConfigException(\"class attribute must not be null: \" + element);\n 712               }\n 713               String initProbHandler = element.getAttribute(\"initializableProblemHandler\");\n 714               InitializableProblemHandler initializableProblemHandler;\n 715               if (initProbHandler == null || initProbHandler.length() == 0) {\n 716                   initializableProblemHandler = loader.getInitializableProblemHandler();\n 717               } else {\n 718                   initializableProblemHandler = getInitializableProblemHandler(initProbHandler);\n 719               }\n 720   \n 721               T loaded = null;\n 722   \n 723               try {\n 724                   Class<? extends T> loadedClass = loader.getServiceClass(getLoaderClass(), name);\n 725   \n 726                   // Do pre-load checks and short-circuits\n 727                   //TODO : allow duplicate instances with different configurations\n 728                   loaded = preLoadOne(loadedClass, name, mimeTypes);\n 729                   if (loaded != null) {\n 730                       return loaded;\n 731                   }\n 732   \n 733                   // Get any parameters / settings for the parser\n 734                   Map<String, Param> params = null;\n 735                   try {\n 736                       params = getParams(element);\n 737                   } catch (Exception e) {\n 738                       throw new TikaConfigException(e.getMessage(), e);\n 739                   }\n 740   \n 741                   // Is this a composite or decorated class? If so, support recursion\n 742                   if (isComposite(loadedClass)) {\n 743                       // Get the child objects for it\n 744                       List<T> children = new ArrayList<>();\n 745                       NodeList childNodes = element.getElementsByTagName(getLoaderTagName());\n 746                       if (childNodes.getLength() > 0) {\n 747                           for (int i = 0; i < childNodes.getLength(); i++) {\n 748                               T loadedChild =\n 749                                       loadOne((Element) childNodes.item(i), mimeTypes, loader);\n 750                               if (loadedChild != null) {\n 751                                   children.add(loadedChild);\n 752                               }\n 753                           }\n 754                       }\n 755   \n 756                       // Get the list of children to exclude\n 757                       Set<Class<? extends T>> excludeChildren = new HashSet<>();\n 758                       NodeList excludeChildNodes =\n 759                               element.getElementsByTagName(getLoaderTagName() + \"-exclude\");\n 760                       if (excludeChildNodes.getLength() > 0) {\n 761                           for (int i = 0; i < excludeChildNodes.getLength(); i++) {\n 762                               Element excl = (Element) excludeChildNodes.item(i);\n 763                               String exclName = excl.getAttribute(\"class\");\n 764                               try {\n 765                                   excludeChildren\n 766                                           .add(loader.getServiceClass(getLoaderClass(), exclName));\n 767                               } catch (ClassNotFoundException e) {\n 768                                   //TIKA-3268 -- This should stop the world.\n 769                                   throw new TikaConfigException(\n 770                                           \"Class not found in -exclude list: \" + exclName);\n 771                               }\n 772                           }\n 773                       }\n 774   \n 775                       // Create the Composite\n 776                       loaded = createComposite(loadedClass, children, excludeChildren, params,\n 777                               mimeTypes, loader);\n 778   \n 779                       // Default constructor fallback\n 780                       if (loaded == null) {\n 781                           loaded = newInstance(loadedClass);\n 782                       }\n 783                   } else {\n 784                       // Regular class, create as-is\n 785                       loaded = newInstance(loadedClass);\n 786                       // TODO Support arguments, needed for Translators etc\n 787                       // See the thread \"Configuring parsers and translators\" for details\n 788                   }\n 789   \n 790                   //Assigning the params to bean fields/setters\n 791                   AnnotationUtils.assignFieldParams(loaded, params);\n 792                   if (loaded instanceof Initializable) {\n 793                       ((Initializable) loaded).initialize(params);\n 794                       ((Initializable) loaded).checkInitialization(initializableProblemHandler);\n 795                   }\n 796                   // Have any decoration performed, eg explicit mimetypes\n 797                   loaded = decorate(loaded, element);\n 798                   // All done with setup\n 799                   return loaded;\n 800               } catch (ClassNotFoundException e) {\n 801                   if (loader.getLoadErrorHandler() == LoadErrorHandler.THROW) {\n 802                       // Use a different exception signature here\n 803                       throw new TikaConfigException(\n 804                               \"Unable to find a \" + getLoaderTagName() + \" class: \" + name, e);\n 805                   }\n 806                   // Report the problem\n 807                   loader.getLoadErrorHandler().handleLoadError(name, e);\n 808                   return null;\n 809               } catch (IllegalAccessException e) {\n 810                   throw new TikaException(\n 811                           \"Unable to access a \" + getLoaderTagName() + \" class: \" + name, e);\n 812               } catch (InvocationTargetException e) {\n 813                   throw new TikaException(\n 814                           \"Unable to create a \" + getLoaderTagName() + \" class: \" + name, e);\n 815               } catch (InstantiationException e) {\n 816                   throw new TikaException(\n 817                           \"Unable to instantiate a \" + getLoaderTagName() + \" class: \" + name, e);\n 818               } catch (NoSuchMethodException e) {\n 819                   throw new TikaException(\n 820                           \"Unable to find the right constructor for \" + getLoaderTagName() +\n 821                                   \" class: \" + name, e);\n 822               }\n 823           }\n\nsrc/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/recognition/tf/TensorflowImageRecParser.java:\n113       @Override\n114       public void initialize(Map<String, Param> params) throws TikaConfigException {\n115           try {\n116               if (!modelFile.exists()) {\n117                   modelFile.getParentFile().mkdirs();\n118                   LOG.warn(\"Model doesn't exist at {}. Expecting the script to download it.\",\n119                           modelFile);\n120               }\n121               if (!scriptFile.exists()) {\n122                   scriptFile.getParentFile().mkdirs();\n123                   LOG.info(\"Copying script to : {}\", scriptFile);\n124                   try (InputStream sourceStream = getClass().getResourceAsStream(SCRIPT_FILE_NAME)) {\n125                       try (OutputStream destStream = new FileOutputStream(scriptFile)) {\n126                           IOUtils.copy(sourceStream, destStream);\n127                       }\n128                   }\n129                   LOG.debug(\"Copied..\");\n130               }\n131               String[] availabilityCheckArgs =\n132                       {executor, scriptFile.getAbsolutePath(), modelArg, modelFile.getAbsolutePath(),\n133                               availabilityTestArgs};\n134               available = ExternalParser.check(availabilityCheckArgs);\n135               LOG.debug(\"Available? {}\", available);\n136               if (!available) {\n137                   return;\n138               }\n139               String[] parseCmd =\n140                       {executor, scriptFile.getAbsolutePath(), modelArg, modelFile.getAbsolutePath(),\n141                               imageArg, INPUT_FILE_TOKEN, \"--out_file\",\n142                               OUTPUT_FILE_TOKEN}; //inserting output token to let\n143               // external parser parse metadata\n144               setCommand(parseCmd);\n145               HashMap<Pattern, String> patterns = new HashMap<>();\n146               patterns.put(Pattern.compile(outPattern), null);\n147               setMetadataExtractionPatterns(patterns);\n148               setIgnoredLineConsumer(IGNORED_LINE_LOGGER);\n149           } catch (Exception e) {\n150               throw new TikaConfigException(e.getMessage(), e);\n151           }\n152       }\n",
            "cost": 0.11832999999999999,
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/recognition/tf/TensorflowImageRecParser.java:146:42",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 118
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/geo/topic/NameEntityExtractor.java:57:61",
            "status": "error",
            "id": 119
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/geo/topic/NameEntityExtractor.java:71:40",
            "status": "error",
            "id": 120
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-digest-commons/src/main/java/org/apache/tika/parser/digestutils/CommonsDigester.java:127:46",
            "status": "error",
            "id": 121
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-digest-commons/src/main/java/org/apache/tika/parser/digestutils/CommonsDigester.java:131:43",
            "status": "error",
            "id": 122
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-code-module/src/main/java/org/apache/tika/parser/mat/MatParser.java:83:48",
            "status": "error",
            "id": 123
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-extended/tika-parser-scientific-module/src/main/java/org/apache/tika/parser/gdal/GDALParser.java:248:52",
            "status": "error",
            "id": 124
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n1040           public void process(InputStream input, OutputStream output, Metadata metadata) throws Exception {\n1041               Parser p = parser;\n1042               if (fork) {\n1043                   p = new ForkParser(TikaCLI.class.getClassLoader(), p);\n1044               }\n1045               ContentHandler handler = getContentHandler(output, metadata);\n1046               try {\n1047                   p.parse(input, handler, metadata, context);\n1048                   // fix for TIKA-596: if a parser doesn't generate\n1049                   // XHTML output, the lack of an output document prevents\n1050                   // metadata from being output: this fixes that\n1051                   if (handler instanceof NoDocumentMetHandler) {\n1052                       NoDocumentMetHandler metHandler = (NoDocumentMetHandler) handler;\n1053                       if (!metHandler.metOutput()) {\n1054                           metHandler.endDocument();\n1055                       }\n1056                   }\n1057               } finally {\n1058                   if (fork) {\n1059                       ((ForkParser) p).close();\n1060                   }\n1061               }\n1062           }\n\nsrc/tika/tika-parsers/tika-parsers-extended/tika-parser-scientific-module/src/main/java/org/apache/tika/parser/gdal/GDALParser.java:\n174       @Override\n175       public void parse(InputStream stream, ContentHandler handler, Metadata metadata,\n176                         ParseContext context) throws IOException, SAXException, TikaException {\n177   \n178           if (!ExternalParser.check(\"gdalinfo\")) {\n179               return;\n180           }\n181   \n182           // first set up and run GDAL\n183           // process the command\n184           TemporaryResources tmp = new TemporaryResources();\n185           TikaInputStream tis = TikaInputStream.get(stream, tmp, metadata);\n186   \n187           String runCommand = processCommand(tis);\n188           String output = execCommand(new String[]{runCommand});\n189   \n190           // now extract the actual metadata params\n191           // from the GDAL output in the content stream\n192           // to do this, we need to literally process the output\n193           // from the invoked command b/c we can't read metadata and\n194           // output text from the handler in ExternalParser\n195           // at the same time, so for now, we can't use the\n196           // ExternalParser to do this and I've had to bring some of\n197           // that functionality directly into this class\n198           // TODO: investigate a way to do both using ExternalParser\n199   \n200           extractMetFromOutput(output, metadata);\n201           applyPatternsToOutput(output, metadata, getPatterns());\n202   \n203           // make the content handler and provide output there\n204           // now that we have metadata\n205           processOutput(handler, metadata, output);\n206       }\n208       private Map<Pattern, String> getPatterns() {\n209           Map<Pattern, String> patterns = new HashMap<>();\n210           this.addPatternWithColon(\"Driver\", patterns);\n211           this.addPatternWithColon(\"Files\", patterns);\n212           this.addPatternWithIs(\"Size\", patterns);\n213           this.addPatternWithIs(\"Coordinate System\", patterns);\n214           this.addBoundingBoxPattern(\"Upper Left\", patterns);\n215           this.addBoundingBoxPattern(\"Lower Left\", patterns);\n216           this.addBoundingBoxPattern(\"Upper Right\", patterns);\n217           this.addBoundingBoxPattern(\"Lower Right\", patterns);\n218           return patterns;\n219       }\n229       private void addBoundingBoxPattern(String name, Map<Pattern, String> patterns) {\n230           patterns.put(Pattern.compile(\n231                   name + \"\\\\s*\\\\(\\\\s*([0-9]+\\\\.[0-9]+\\\\s*,\\\\s*[0-9]+\\\\.[0-9]+\\\\s*)\\\\)\\\\s*\"), name);\n232       }\n",
            "cost": 0.08532000000000001,
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-extended/tika-parser-scientific-module/src/main/java/org/apache/tika/parser/gdal/GDALParser.java:231:17",
            "status": "corpus",
            "valid_path": "NO",
            "id": 125
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/HtmlEncodingDetector.java:123:49",
            "status": "error",
            "id": 126
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/onenote/OneNoteLegacyDumpStrings.java:159:34",
            "status": "error",
            "id": 127
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-extended/tika-parser-scientific-module/src/main/java/org/apache/tika/parser/envi/EnviHeaderParser.java:150:59",
            "status": "error",
            "id": 128
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-news-module/src/main/java/org/apache/tika/parser/feed/FeedParser.java:71:38",
            "status": "error",
            "id": 129
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/HSLFExtractor.java:78:38",
            "status": "error",
            "id": 130
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-mail-commons/src/main/java/org/apache/tika/parser/mailcommons/MailDateParser.java:562:32",
            "status": "error",
            "id": 131
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-mail-commons/src/main/java/org/apache/tika/parser/mailcommons/MailDateParser.java:595:32",
            "status": "error",
            "id": 132
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-mail-commons/src/main/java/org/apache/tika/parser/mailcommons/MailDateParser.java:597:32",
            "status": "error",
            "id": 133
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n 667           @SuppressWarnings(\"unchecked\")\n 668           CT loadOverall(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 669                   throws TikaException, IOException {\n 670               List<T> loaded = new ArrayList<>();\n 671   \n 672               // Find the children of the parent tag, if any\n 673               for (Element le : getTopLevelElementChildren(element, getParentTagName(),\n 674                       getLoaderTagName())) {\n 675                   T loadedChild = loadOne(le, mimeTypes, loader);\n 676                   if (loadedChild != null) {\n 677                       loaded.add(loadedChild);\n 678                   }\n 679               }\n 680   \n 681               // Build the classes, and wrap as needed\n 682               if (loaded.isEmpty()) {\n 683                   // Nothing defined, create a Default\n 684                   return createDefault(mimeTypes, loader);\n 685               } else if (loaded.size() == 1) {\n 686                   T single = loaded.get(0);\n 687                   if (isComposite(single)) {\n 688                       // Single Composite defined, use that\n 689                       return (CT) single;\n 690                   }\n 691               } else if (!supportsComposite()) {\n 692                   // No composite support, just return the first one\n 693                   if (loaded.size() == 1) {\n 694                       return (CT) loaded.get(0);\n 695                   } else if (loaded.size() > 1) {\n 696                       throw new TikaConfigException(\n 697                               \"Composite not supported for \" + getParentTagName() +\n 698                                       \". Must specify only one child!\");\n 699                   } else {\n 700                       //throw exception if empty?\n 701                   }\n 702               }\n 703               // Wrap the defined parsers/detectors up in a Composite\n 704               return createComposite(loaded, mimeTypes, loader);\n 705           }\n 707           T loadOne(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 708                   throws TikaException, IOException {\n 709               String name = element.getAttribute(\"class\");\n 710               if (name == null) {\n 711                   throw new TikaConfigException(\"class attribute must not be null: \" + element);\n 712               }\n 713               String initProbHandler = element.getAttribute(\"initializableProblemHandler\");\n 714               InitializableProblemHandler initializableProblemHandler;\n 715               if (initProbHandler == null || initProbHandler.length() == 0) {\n 716                   initializableProblemHandler = loader.getInitializableProblemHandler();\n 717               } else {\n 718                   initializableProblemHandler = getInitializableProblemHandler(initProbHandler);\n 719               }\n 720   \n 721               T loaded = null;\n 722   \n 723               try {\n 724                   Class<? extends T> loadedClass = loader.getServiceClass(getLoaderClass(), name);\n 725   \n 726                   // Do pre-load checks and short-circuits\n 727                   //TODO : allow duplicate instances with different configurations\n 728                   loaded = preLoadOne(loadedClass, name, mimeTypes);\n 729                   if (loaded != null) {\n 730                       return loaded;\n 731                   }\n 732   \n 733                   // Get any parameters / settings for the parser\n 734                   Map<String, Param> params = null;\n 735                   try {\n 736                       params = getParams(element);\n 737                   } catch (Exception e) {\n 738                       throw new TikaConfigException(e.getMessage(), e);\n 739                   }\n 740   \n 741                   // Is this a composite or decorated class? If so, support recursion\n 742                   if (isComposite(loadedClass)) {\n 743                       // Get the child objects for it\n 744                       List<T> children = new ArrayList<>();\n 745                       NodeList childNodes = element.getElementsByTagName(getLoaderTagName());\n 746                       if (childNodes.getLength() > 0) {\n 747                           for (int i = 0; i < childNodes.getLength(); i++) {\n 748                               T loadedChild =\n 749                                       loadOne((Element) childNodes.item(i), mimeTypes, loader);\n 750                               if (loadedChild != null) {\n 751                                   children.add(loadedChild);\n 752                               }\n 753                           }\n 754                       }\n 755   \n 756                       // Get the list of children to exclude\n 757                       Set<Class<? extends T>> excludeChildren = new HashSet<>();\n 758                       NodeList excludeChildNodes =\n 759                               element.getElementsByTagName(getLoaderTagName() + \"-exclude\");\n 760                       if (excludeChildNodes.getLength() > 0) {\n 761                           for (int i = 0; i < excludeChildNodes.getLength(); i++) {\n 762                               Element excl = (Element) excludeChildNodes.item(i);\n 763                               String exclName = excl.getAttribute(\"class\");\n 764                               try {\n 765                                   excludeChildren\n 766                                           .add(loader.getServiceClass(getLoaderClass(), exclName));\n 767                               } catch (ClassNotFoundException e) {\n 768                                   //TIKA-3268 -- This should stop the world.\n 769                                   throw new TikaConfigException(\n 770                                           \"Class not found in -exclude list: \" + exclName);\n 771                               }\n 772                           }\n 773                       }\n 774   \n 775                       // Create the Composite\n 776                       loaded = createComposite(loadedClass, children, excludeChildren, params,\n 777                               mimeTypes, loader);\n 778   \n 779                       // Default constructor fallback\n 780                       if (loaded == null) {\n 781                           loaded = newInstance(loadedClass);\n 782                       }\n 783                   } else {\n 784                       // Regular class, create as-is\n 785                       loaded = newInstance(loadedClass);\n 786                       // TODO Support arguments, needed for Translators etc\n 787                       // See the thread \"Configuring parsers and translators\" for details\n 788                   }\n 789   \n 790                   //Assigning the params to bean fields/setters\n 791                   AnnotationUtils.assignFieldParams(loaded, params);\n 792                   if (loaded instanceof Initializable) {\n 793                       ((Initializable) loaded).initialize(params);\n 794                       ((Initializable) loaded).checkInitialization(initializableProblemHandler);\n 795                   }\n 796                   // Have any decoration performed, eg explicit mimetypes\n 797                   loaded = decorate(loaded, element);\n 798                   // All done with setup\n 799                   return loaded;\n 800               } catch (ClassNotFoundException e) {\n 801                   if (loader.getLoadErrorHandler() == LoadErrorHandler.THROW) {\n 802                       // Use a different exception signature here\n 803                       throw new TikaConfigException(\n 804                               \"Unable to find a \" + getLoaderTagName() + \" class: \" + name, e);\n 805                   }\n 806                   // Report the problem\n 807                   loader.getLoadErrorHandler().handleLoadError(name, e);\n 808                   return null;\n 809               } catch (IllegalAccessException e) {\n 810                   throw new TikaException(\n 811                           \"Unable to access a \" + getLoaderTagName() + \" class: \" + name, e);\n 812               } catch (InvocationTargetException e) {\n 813                   throw new TikaException(\n 814                           \"Unable to create a \" + getLoaderTagName() + \" class: \" + name, e);\n 815               } catch (InstantiationException e) {\n 816                   throw new TikaException(\n 817                           \"Unable to instantiate a \" + getLoaderTagName() + \" class: \" + name, e);\n 818               } catch (NoSuchMethodException e) {\n 819                   throw new TikaException(\n 820                           \"Unable to find the right constructor for \" + getLoaderTagName() +\n 821                                   \" class: \" + name, e);\n 822               }\n 823           }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java:\n563       @Override\n564       public void initialize(Map<String, Param> params) throws TikaConfigException {\n565           hasTesseract = hasTesseract();\n566           if (isEnableImagePreprocessing()) {\n567               hasImageMagick = hasImageMagick();\n568           } else {\n569               hasImageMagick = false;\n570           }\n571           if (preloadLangs) {\n572               preloadLangs();\n573               if (!StringUtils.isBlank(defaultConfig.getLanguage())) {\n574                   validateLangString(defaultConfig.getLanguage());\n575               }\n576           }\n577           imagePreprocessor = new ImagePreprocessor(getImageMagickPath() + getImageMagickProg());\n578       }\n886       private void preloadLangs() {\n887           String[] args = new String[]{getTesseractPath() + getTesseractProg(), \"--list-langs\"};\n888   \n889           ProcessBuilder pb = new ProcessBuilder(args);\n890   \n891           setEnv(pb);\n892   \n893           Process process = null;\n894           try {\n895               process = pb.start();\n896               getLangs(process, defaultConfig.getTimeoutSeconds());\n897           } catch (TikaException | IOException e) {\n898               LOG.warn(\"Problem preloading langs\", e);\n899           } finally {\n900               if (process != null) {\n901                   process.destroyForcibly();\n902               }\n903           }\n904       }\n906       private void getLangs(Process process, int timeoutSeconds) throws IOException, TikaException {\n907           process.getOutputStream().close();\n908           InputStream out = process.getInputStream();\n909           InputStream err = process.getErrorStream();\n910           StringBuilder outBuilder = new StringBuilder();\n911           StringBuilder errBuilder = new StringBuilder();\n912           Thread outThread = logStream(out, outBuilder);\n913           Thread errThread = logStream(err, errBuilder);\n914           outThread.start();\n915           errThread.start();\n916   \n917           int exitValue = Integer.MIN_VALUE;\n918           try {\n919               boolean finished = process.waitFor(timeoutSeconds, TimeUnit.SECONDS);\n920               if (!finished) {\n921                   throw new TikaException(\"TesseractOCRParser timeout\");\n922               }\n923               exitValue = process.exitValue();\n924               outThread.join(1000);\n925           } catch (InterruptedException e) {\n926               Thread.currentThread().interrupt();\n927               throw new TikaException(\"TesseractOCRParser interrupted\", e);\n928           } catch (IllegalThreadStateException e) {\n929               //this _should_ never be thrown\n930               throw new TikaException(\"TesseractOCRParser timeout\");\n931           }\n932           if (exitValue > 0) {\n933               throw new TikaException(\n934                       \"TesseractOCRParser bad exit value \" + exitValue + \" err msg: \" +\n935                               errBuilder.toString());\n936           }\n937           for (String line : outBuilder.toString().split(\"[\\r\\n]+\")) {\n938               if (line.startsWith(\"List of available\")) {\n939                   continue;\n940               }\n941               langs.add(line.trim());\n942           }\n943       }\n",
            "cost": 0.12804,
            "harness_id": "TikaOne",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java:937:56",
            "status": "corpus",
            "valid_path": "NO",
            "id": 134
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/metadata/filter/MetadataFilter.java:\n44       public static MetadataFilter load(Element root, boolean allowMissing) throws TikaConfigException,\n45               IOException {\n46           try {\n47               return buildComposite(\"metadataFilters\", CompositeMetadataFilter.class,\n48                       \"metadataFilter\", MetadataFilter.class, root);\n49           } catch (TikaConfigException e) {\n50               if (allowMissing && e.getMessage().contains(\"could not find metadataFilters\")) {\n51                   return new NoOpFilter();\n52               }\n53               throw e;\n54           }\n55       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:\n139       protected static <P, T> P buildComposite(String compositeElementName, Class<P> compositeClass,\n140                                                String itemName, Class<T> itemClass,\n141                                                Element properties)\n142               throws TikaConfigException, IOException {\n143   \n144           if (!properties.getLocalName().equals(\"properties\")) {\n145               throw new TikaConfigException(\"expect properties as root node\");\n146           }\n147           NodeList children = properties.getChildNodes();\n148   \n149           for (int i = 0; i < children.getLength(); i++) {\n150               Node child = children.item(i);\n151               if (child.getNodeType() != 1) {\n152                   continue;\n153               }\n154               if (compositeElementName.equals(child.getLocalName())) {\n155                   List<T> components = loadComposite(child, itemName, itemClass);\n156                   Constructor constructor = null;\n157                   try {\n158                       constructor = compositeClass.getConstructor(List.class);\n159                       P composite = (P) constructor.newInstance(components);\n160                       setParams(composite, child, new HashSet<>(), itemName);\n161                       return composite;\n162                   } catch (NoSuchMethodException | InvocationTargetException |\n163                            InstantiationException | IllegalAccessException e) {\n164                       throw new TikaConfigException(\"can't build composite class\", e);\n165                   }\n166               }\n167           }\n168           throw new TikaConfigException(\"could not find \" + compositeElementName);\n169       }\n218       private static void setParams(Object object, Node targetNode, Set<String> settings,\n219                                     String exceptNodeName) throws TikaConfigException {\n220           NodeList children = targetNode.getChildNodes();\n221           List<Node> params = new ArrayList<>();\n222           for (int i = 0; i < children.getLength(); i++) {\n223               Node child = children.item(i);\n224   \n225               if (\"params\".equals(child.getLocalName())) {\n226                   NodeList paramsList = child.getChildNodes();\n227                   for (int j = 0; j < paramsList.getLength(); j++) {\n228                       params.add(paramsList.item(j));\n229                   }\n230               } else {\n231                   params.add(child);\n232               }\n233           }\n234           for (int i = 0; i < params.size(); i++) {\n235               Node param = params.get(i);\n236               if (param.getNodeType() != 1) {\n237                   continue;\n238               }\n239               String localName = param.getLocalName();\n240               if (localName == null || localName.equals(exceptNodeName)) {\n241                   continue;\n242               }\n243               String txt = param.getTextContent();\n244               String itemName = param.getLocalName();\n245               SetterClassPair setterClassPair = findSetterClassPair(object, itemName);\n246               boolean processed = false;\n247               if (!hasClass(param)) {\n248                   if (setterClassPair.itemClass.isAssignableFrom(Map.class) && isMap(param)) {\n249                       tryToSetMap(object, param);\n250                       processed = true;\n251                   } else if (setterClassPair.itemClass.isAssignableFrom(List.class)) {\n252                       tryToSetList(object, param);\n253                       processed = true;\n254                   }\n255               }\n256               if (!processed) {\n257                   if (isPrimitive(setterClassPair.itemClass)) {\n258                       tryToSetPrimitive(object, setterClassPair, param.getTextContent());\n259                   } else {\n260                       //tryToSetPrimitive(object, localName, txt);\n261                       Object item = buildClass(param, itemName, setterClassPair.itemClass);\n262                       setParams(setterClassPair.itemClass.cast(item), param, new HashSet<>());\n263                       try {\n264                           setterClassPair.setterMethod.invoke(object, item);\n265                       } catch (IllegalAccessException | InvocationTargetException e) {\n266                           throw new TikaConfigException(\"problem creating \" + itemName, e);\n267                       }\n268                   }\n269               }\n270   \n271               if (txt != null) {\n272                   settings.add(localName);\n273               }\n274           }\n275   \n276           if (object instanceof Initializable) {\n277               ((Initializable) object).initialize(Collections.EMPTY_MAP);\n278               ((Initializable) object).checkInitialization(InitializableProblemHandler.THROW);\n279           }\n280       }\n483       private static void tryToSetPrimitive(Object object, SetterClassPair setterClassPair,\n484                                             String value) throws TikaConfigException {\n485           try {\n486               if (setterClassPair.itemClass == int.class) {\n487                   setterClassPair.setterMethod.invoke(object, Integer.parseInt(value));\n488               } else if (setterClassPair.itemClass == long.class) {\n489                   setterClassPair.setterMethod.invoke(object, Long.parseLong(value));\n490               } else if (setterClassPair.itemClass == float.class) {\n491                   setterClassPair.setterMethod.invoke(object, Float.parseFloat(value));\n492               } else if (setterClassPair.itemClass == double.class) {\n493                   setterClassPair.setterMethod.invoke(object, Double.parseDouble(value));\n494               } else if (setterClassPair.itemClass == boolean.class) {\n495                   setterClassPair.setterMethod.invoke(object, Boolean.parseBoolean(value));\n496               } else {\n497                   setterClassPair.setterMethod.invoke(object, value);\n498               }\n499           } catch (IllegalAccessException | InvocationTargetException e) {\n500               throw new TikaConfigException(\"bad parameter \" + setterClassPair + \" \" + value, e);\n501           }\n502       }\n",
            "cost": 0.11114000000000002,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:487:17",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 135
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/metadata/filter/MetadataFilter.java:\n44       public static MetadataFilter load(Element root, boolean allowMissing) throws TikaConfigException,\n45               IOException {\n46           try {\n47               return buildComposite(\"metadataFilters\", CompositeMetadataFilter.class,\n48                       \"metadataFilter\", MetadataFilter.class, root);\n49           } catch (TikaConfigException e) {\n50               if (allowMissing && e.getMessage().contains(\"could not find metadataFilters\")) {\n51                   return new NoOpFilter();\n52               }\n53               throw e;\n54           }\n55       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:\n139       protected static <P, T> P buildComposite(String compositeElementName, Class<P> compositeClass,\n140                                                String itemName, Class<T> itemClass,\n141                                                Element properties)\n142               throws TikaConfigException, IOException {\n143   \n144           if (!properties.getLocalName().equals(\"properties\")) {\n145               throw new TikaConfigException(\"expect properties as root node\");\n146           }\n147           NodeList children = properties.getChildNodes();\n148   \n149           for (int i = 0; i < children.getLength(); i++) {\n150               Node child = children.item(i);\n151               if (child.getNodeType() != 1) {\n152                   continue;\n153               }\n154               if (compositeElementName.equals(child.getLocalName())) {\n155                   List<T> components = loadComposite(child, itemName, itemClass);\n156                   Constructor constructor = null;\n157                   try {\n158                       constructor = compositeClass.getConstructor(List.class);\n159                       P composite = (P) constructor.newInstance(components);\n160                       setParams(composite, child, new HashSet<>(), itemName);\n161                       return composite;\n162                   } catch (NoSuchMethodException | InvocationTargetException |\n163                            InstantiationException | IllegalAccessException e) {\n164                       throw new TikaConfigException(\"can't build composite class\", e);\n165                   }\n166               }\n167           }\n168           throw new TikaConfigException(\"could not find \" + compositeElementName);\n169       }\n218       private static void setParams(Object object, Node targetNode, Set<String> settings,\n219                                     String exceptNodeName) throws TikaConfigException {\n220           NodeList children = targetNode.getChildNodes();\n221           List<Node> params = new ArrayList<>();\n222           for (int i = 0; i < children.getLength(); i++) {\n223               Node child = children.item(i);\n224   \n225               if (\"params\".equals(child.getLocalName())) {\n226                   NodeList paramsList = child.getChildNodes();\n227                   for (int j = 0; j < paramsList.getLength(); j++) {\n228                       params.add(paramsList.item(j));\n229                   }\n230               } else {\n231                   params.add(child);\n232               }\n233           }\n234           for (int i = 0; i < params.size(); i++) {\n235               Node param = params.get(i);\n236               if (param.getNodeType() != 1) {\n237                   continue;\n238               }\n239               String localName = param.getLocalName();\n240               if (localName == null || localName.equals(exceptNodeName)) {\n241                   continue;\n242               }\n243               String txt = param.getTextContent();\n244               String itemName = param.getLocalName();\n245               SetterClassPair setterClassPair = findSetterClassPair(object, itemName);\n246               boolean processed = false;\n247               if (!hasClass(param)) {\n248                   if (setterClassPair.itemClass.isAssignableFrom(Map.class) && isMap(param)) {\n249                       tryToSetMap(object, param);\n250                       processed = true;\n251                   } else if (setterClassPair.itemClass.isAssignableFrom(List.class)) {\n252                       tryToSetList(object, param);\n253                       processed = true;\n254                   }\n255               }\n256               if (!processed) {\n257                   if (isPrimitive(setterClassPair.itemClass)) {\n258                       tryToSetPrimitive(object, setterClassPair, param.getTextContent());\n259                   } else {\n260                       //tryToSetPrimitive(object, localName, txt);\n261                       Object item = buildClass(param, itemName, setterClassPair.itemClass);\n262                       setParams(setterClassPair.itemClass.cast(item), param, new HashSet<>());\n263                       try {\n264                           setterClassPair.setterMethod.invoke(object, item);\n265                       } catch (IllegalAccessException | InvocationTargetException e) {\n266                           throw new TikaConfigException(\"problem creating \" + itemName, e);\n267                       }\n268                   }\n269               }\n270   \n271               if (txt != null) {\n272                   settings.add(localName);\n273               }\n274           }\n275   \n276           if (object instanceof Initializable) {\n277               ((Initializable) object).initialize(Collections.EMPTY_MAP);\n278               ((Initializable) object).checkInitialization(InitializableProblemHandler.THROW);\n279           }\n280       }\n483       private static void tryToSetPrimitive(Object object, SetterClassPair setterClassPair,\n484                                             String value) throws TikaConfigException {\n485           try {\n486               if (setterClassPair.itemClass == int.class) {\n487                   setterClassPair.setterMethod.invoke(object, Integer.parseInt(value));\n488               } else if (setterClassPair.itemClass == long.class) {\n489                   setterClassPair.setterMethod.invoke(object, Long.parseLong(value));\n490               } else if (setterClassPair.itemClass == float.class) {\n491                   setterClassPair.setterMethod.invoke(object, Float.parseFloat(value));\n492               } else if (setterClassPair.itemClass == double.class) {\n493                   setterClassPair.setterMethod.invoke(object, Double.parseDouble(value));\n494               } else if (setterClassPair.itemClass == boolean.class) {\n495                   setterClassPair.setterMethod.invoke(object, Boolean.parseBoolean(value));\n496               } else {\n497                   setterClassPair.setterMethod.invoke(object, value);\n498               }\n499           } catch (IllegalAccessException | InvocationTargetException e) {\n500               throw new TikaConfigException(\"bad parameter \" + setterClassPair + \" \" + value, e);\n501           }\n502       }\n",
            "cost": 0.10684000000000002,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:487:53",
            "status": "corpus",
            "valid_path": "NO",
            "id": 136
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/metadata/filter/MetadataFilter.java:\n44       public static MetadataFilter load(Element root, boolean allowMissing) throws TikaConfigException,\n45               IOException {\n46           try {\n47               return buildComposite(\"metadataFilters\", CompositeMetadataFilter.class,\n48                       \"metadataFilter\", MetadataFilter.class, root);\n49           } catch (TikaConfigException e) {\n50               if (allowMissing && e.getMessage().contains(\"could not find metadataFilters\")) {\n51                   return new NoOpFilter();\n52               }\n53               throw e;\n54           }\n55       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:\n139       protected static <P, T> P buildComposite(String compositeElementName, Class<P> compositeClass,\n140                                                String itemName, Class<T> itemClass,\n141                                                Element properties)\n142               throws TikaConfigException, IOException {\n143   \n144           if (!properties.getLocalName().equals(\"properties\")) {\n145               throw new TikaConfigException(\"expect properties as root node\");\n146           }\n147           NodeList children = properties.getChildNodes();\n148   \n149           for (int i = 0; i < children.getLength(); i++) {\n150               Node child = children.item(i);\n151               if (child.getNodeType() != 1) {\n152                   continue;\n153               }\n154               if (compositeElementName.equals(child.getLocalName())) {\n155                   List<T> components = loadComposite(child, itemName, itemClass);\n156                   Constructor constructor = null;\n157                   try {\n158                       constructor = compositeClass.getConstructor(List.class);\n159                       P composite = (P) constructor.newInstance(components);\n160                       setParams(composite, child, new HashSet<>(), itemName);\n161                       return composite;\n162                   } catch (NoSuchMethodException | InvocationTargetException |\n163                            InstantiationException | IllegalAccessException e) {\n164                       throw new TikaConfigException(\"can't build composite class\", e);\n165                   }\n166               }\n167           }\n168           throw new TikaConfigException(\"could not find \" + compositeElementName);\n169       }\n218       private static void setParams(Object object, Node targetNode, Set<String> settings,\n219                                     String exceptNodeName) throws TikaConfigException {\n220           NodeList children = targetNode.getChildNodes();\n221           List<Node> params = new ArrayList<>();\n222           for (int i = 0; i < children.getLength(); i++) {\n223               Node child = children.item(i);\n224   \n225               if (\"params\".equals(child.getLocalName())) {\n226                   NodeList paramsList = child.getChildNodes();\n227                   for (int j = 0; j < paramsList.getLength(); j++) {\n228                       params.add(paramsList.item(j));\n229                   }\n230               } else {\n231                   params.add(child);\n232               }\n233           }\n234           for (int i = 0; i < params.size(); i++) {\n235               Node param = params.get(i);\n236               if (param.getNodeType() != 1) {\n237                   continue;\n238               }\n239               String localName = param.getLocalName();\n240               if (localName == null || localName.equals(exceptNodeName)) {\n241                   continue;\n242               }\n243               String txt = param.getTextContent();\n244               String itemName = param.getLocalName();\n245               SetterClassPair setterClassPair = findSetterClassPair(object, itemName);\n246               boolean processed = false;\n247               if (!hasClass(param)) {\n248                   if (setterClassPair.itemClass.isAssignableFrom(Map.class) && isMap(param)) {\n249                       tryToSetMap(object, param);\n250                       processed = true;\n251                   } else if (setterClassPair.itemClass.isAssignableFrom(List.class)) {\n252                       tryToSetList(object, param);\n253                       processed = true;\n254                   }\n255               }\n256               if (!processed) {\n257                   if (isPrimitive(setterClassPair.itemClass)) {\n258                       tryToSetPrimitive(object, setterClassPair, param.getTextContent());\n259                   } else {\n260                       //tryToSetPrimitive(object, localName, txt);\n261                       Object item = buildClass(param, itemName, setterClassPair.itemClass);\n262                       setParams(setterClassPair.itemClass.cast(item), param, new HashSet<>());\n263                       try {\n264                           setterClassPair.setterMethod.invoke(object, item);\n265                       } catch (IllegalAccessException | InvocationTargetException e) {\n266                           throw new TikaConfigException(\"problem creating \" + itemName, e);\n267                       }\n268                   }\n269               }\n270   \n271               if (txt != null) {\n272                   settings.add(localName);\n273               }\n274           }\n275   \n276           if (object instanceof Initializable) {\n277               ((Initializable) object).initialize(Collections.EMPTY_MAP);\n278               ((Initializable) object).checkInitialization(InitializableProblemHandler.THROW);\n279           }\n280       }\n483       private static void tryToSetPrimitive(Object object, SetterClassPair setterClassPair,\n484                                             String value) throws TikaConfigException {\n485           try {\n486               if (setterClassPair.itemClass == int.class) {\n487                   setterClassPair.setterMethod.invoke(object, Integer.parseInt(value));\n488               } else if (setterClassPair.itemClass == long.class) {\n489                   setterClassPair.setterMethod.invoke(object, Long.parseLong(value));\n490               } else if (setterClassPair.itemClass == float.class) {\n491                   setterClassPair.setterMethod.invoke(object, Float.parseFloat(value));\n492               } else if (setterClassPair.itemClass == double.class) {\n493                   setterClassPair.setterMethod.invoke(object, Double.parseDouble(value));\n494               } else if (setterClassPair.itemClass == boolean.class) {\n495                   setterClassPair.setterMethod.invoke(object, Boolean.parseBoolean(value));\n496               } else {\n497                   setterClassPair.setterMethod.invoke(object, value);\n498               }\n499           } catch (IllegalAccessException | InvocationTargetException e) {\n500               throw new TikaConfigException(\"bad parameter \" + setterClassPair + \" \" + value, e);\n501           }\n502       }\n",
            "cost": 0.10684000000000002,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:489:17",
            "status": "corpus",
            "valid_path": "NO",
            "id": 137
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/metadata/filter/MetadataFilter.java:\n44       public static MetadataFilter load(Element root, boolean allowMissing) throws TikaConfigException,\n45               IOException {\n46           try {\n47               return buildComposite(\"metadataFilters\", CompositeMetadataFilter.class,\n48                       \"metadataFilter\", MetadataFilter.class, root);\n49           } catch (TikaConfigException e) {\n50               if (allowMissing && e.getMessage().contains(\"could not find metadataFilters\")) {\n51                   return new NoOpFilter();\n52               }\n53               throw e;\n54           }\n55       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:\n139       protected static <P, T> P buildComposite(String compositeElementName, Class<P> compositeClass,\n140                                                String itemName, Class<T> itemClass,\n141                                                Element properties)\n142               throws TikaConfigException, IOException {\n143   \n144           if (!properties.getLocalName().equals(\"properties\")) {\n145               throw new TikaConfigException(\"expect properties as root node\");\n146           }\n147           NodeList children = properties.getChildNodes();\n148   \n149           for (int i = 0; i < children.getLength(); i++) {\n150               Node child = children.item(i);\n151               if (child.getNodeType() != 1) {\n152                   continue;\n153               }\n154               if (compositeElementName.equals(child.getLocalName())) {\n155                   List<T> components = loadComposite(child, itemName, itemClass);\n156                   Constructor constructor = null;\n157                   try {\n158                       constructor = compositeClass.getConstructor(List.class);\n159                       P composite = (P) constructor.newInstance(components);\n160                       setParams(composite, child, new HashSet<>(), itemName);\n161                       return composite;\n162                   } catch (NoSuchMethodException | InvocationTargetException |\n163                            InstantiationException | IllegalAccessException e) {\n164                       throw new TikaConfigException(\"can't build composite class\", e);\n165                   }\n166               }\n167           }\n168           throw new TikaConfigException(\"could not find \" + compositeElementName);\n169       }\n218       private static void setParams(Object object, Node targetNode, Set<String> settings,\n219                                     String exceptNodeName) throws TikaConfigException {\n220           NodeList children = targetNode.getChildNodes();\n221           List<Node> params = new ArrayList<>();\n222           for (int i = 0; i < children.getLength(); i++) {\n223               Node child = children.item(i);\n224   \n225               if (\"params\".equals(child.getLocalName())) {\n226                   NodeList paramsList = child.getChildNodes();\n227                   for (int j = 0; j < paramsList.getLength(); j++) {\n228                       params.add(paramsList.item(j));\n229                   }\n230               } else {\n231                   params.add(child);\n232               }\n233           }\n234           for (int i = 0; i < params.size(); i++) {\n235               Node param = params.get(i);\n236               if (param.getNodeType() != 1) {\n237                   continue;\n238               }\n239               String localName = param.getLocalName();\n240               if (localName == null || localName.equals(exceptNodeName)) {\n241                   continue;\n242               }\n243               String txt = param.getTextContent();\n244               String itemName = param.getLocalName();\n245               SetterClassPair setterClassPair = findSetterClassPair(object, itemName);\n246               boolean processed = false;\n247               if (!hasClass(param)) {\n248                   if (setterClassPair.itemClass.isAssignableFrom(Map.class) && isMap(param)) {\n249                       tryToSetMap(object, param);\n250                       processed = true;\n251                   } else if (setterClassPair.itemClass.isAssignableFrom(List.class)) {\n252                       tryToSetList(object, param);\n253                       processed = true;\n254                   }\n255               }\n256               if (!processed) {\n257                   if (isPrimitive(setterClassPair.itemClass)) {\n258                       tryToSetPrimitive(object, setterClassPair, param.getTextContent());\n259                   } else {\n260                       //tryToSetPrimitive(object, localName, txt);\n261                       Object item = buildClass(param, itemName, setterClassPair.itemClass);\n262                       setParams(setterClassPair.itemClass.cast(item), param, new HashSet<>());\n263                       try {\n264                           setterClassPair.setterMethod.invoke(object, item);\n265                       } catch (IllegalAccessException | InvocationTargetException e) {\n266                           throw new TikaConfigException(\"problem creating \" + itemName, e);\n267                       }\n268                   }\n269               }\n270   \n271               if (txt != null) {\n272                   settings.add(localName);\n273               }\n274           }\n275   \n276           if (object instanceof Initializable) {\n277               ((Initializable) object).initialize(Collections.EMPTY_MAP);\n278               ((Initializable) object).checkInitialization(InitializableProblemHandler.THROW);\n279           }\n280       }\n483       private static void tryToSetPrimitive(Object object, SetterClassPair setterClassPair,\n484                                             String value) throws TikaConfigException {\n485           try {\n486               if (setterClassPair.itemClass == int.class) {\n487                   setterClassPair.setterMethod.invoke(object, Integer.parseInt(value));\n488               } else if (setterClassPair.itemClass == long.class) {\n489                   setterClassPair.setterMethod.invoke(object, Long.parseLong(value));\n490               } else if (setterClassPair.itemClass == float.class) {\n491                   setterClassPair.setterMethod.invoke(object, Float.parseFloat(value));\n492               } else if (setterClassPair.itemClass == double.class) {\n493                   setterClassPair.setterMethod.invoke(object, Double.parseDouble(value));\n494               } else if (setterClassPair.itemClass == boolean.class) {\n495                   setterClassPair.setterMethod.invoke(object, Boolean.parseBoolean(value));\n496               } else {\n497                   setterClassPair.setterMethod.invoke(object, value);\n498               }\n499           } catch (IllegalAccessException | InvocationTargetException e) {\n500               throw new TikaConfigException(\"bad parameter \" + setterClassPair + \" \" + value, e);\n501           }\n502       }\n",
            "cost": 0.10624,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:489:53",
            "status": "corpus",
            "valid_path": "NO",
            "id": 138
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/metadata/filter/MetadataFilter.java:\n44       public static MetadataFilter load(Element root, boolean allowMissing) throws TikaConfigException,\n45               IOException {\n46           try {\n47               return buildComposite(\"metadataFilters\", CompositeMetadataFilter.class,\n48                       \"metadataFilter\", MetadataFilter.class, root);\n49           } catch (TikaConfigException e) {\n50               if (allowMissing && e.getMessage().contains(\"could not find metadataFilters\")) {\n51                   return new NoOpFilter();\n52               }\n53               throw e;\n54           }\n55       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:\n139       protected static <P, T> P buildComposite(String compositeElementName, Class<P> compositeClass,\n140                                                String itemName, Class<T> itemClass,\n141                                                Element properties)\n142               throws TikaConfigException, IOException {\n143   \n144           if (!properties.getLocalName().equals(\"properties\")) {\n145               throw new TikaConfigException(\"expect properties as root node\");\n146           }\n147           NodeList children = properties.getChildNodes();\n148   \n149           for (int i = 0; i < children.getLength(); i++) {\n150               Node child = children.item(i);\n151               if (child.getNodeType() != 1) {\n152                   continue;\n153               }\n154               if (compositeElementName.equals(child.getLocalName())) {\n155                   List<T> components = loadComposite(child, itemName, itemClass);\n156                   Constructor constructor = null;\n157                   try {\n158                       constructor = compositeClass.getConstructor(List.class);\n159                       P composite = (P) constructor.newInstance(components);\n160                       setParams(composite, child, new HashSet<>(), itemName);\n161                       return composite;\n162                   } catch (NoSuchMethodException | InvocationTargetException |\n163                            InstantiationException | IllegalAccessException e) {\n164                       throw new TikaConfigException(\"can't build composite class\", e);\n165                   }\n166               }\n167           }\n168           throw new TikaConfigException(\"could not find \" + compositeElementName);\n169       }\n218       private static void setParams(Object object, Node targetNode, Set<String> settings,\n219                                     String exceptNodeName) throws TikaConfigException {\n220           NodeList children = targetNode.getChildNodes();\n221           List<Node> params = new ArrayList<>();\n222           for (int i = 0; i < children.getLength(); i++) {\n223               Node child = children.item(i);\n224   \n225               if (\"params\".equals(child.getLocalName())) {\n226                   NodeList paramsList = child.getChildNodes();\n227                   for (int j = 0; j < paramsList.getLength(); j++) {\n228                       params.add(paramsList.item(j));\n229                   }\n230               } else {\n231                   params.add(child);\n232               }\n233           }\n234           for (int i = 0; i < params.size(); i++) {\n235               Node param = params.get(i);\n236               if (param.getNodeType() != 1) {\n237                   continue;\n238               }\n239               String localName = param.getLocalName();\n240               if (localName == null || localName.equals(exceptNodeName)) {\n241                   continue;\n242               }\n243               String txt = param.getTextContent();\n244               String itemName = param.getLocalName();\n245               SetterClassPair setterClassPair = findSetterClassPair(object, itemName);\n246               boolean processed = false;\n247               if (!hasClass(param)) {\n248                   if (setterClassPair.itemClass.isAssignableFrom(Map.class) && isMap(param)) {\n249                       tryToSetMap(object, param);\n250                       processed = true;\n251                   } else if (setterClassPair.itemClass.isAssignableFrom(List.class)) {\n252                       tryToSetList(object, param);\n253                       processed = true;\n254                   }\n255               }\n256               if (!processed) {\n257                   if (isPrimitive(setterClassPair.itemClass)) {\n258                       tryToSetPrimitive(object, setterClassPair, param.getTextContent());\n259                   } else {\n260                       //tryToSetPrimitive(object, localName, txt);\n261                       Object item = buildClass(param, itemName, setterClassPair.itemClass);\n262                       setParams(setterClassPair.itemClass.cast(item), param, new HashSet<>());\n263                       try {\n264                           setterClassPair.setterMethod.invoke(object, item);\n265                       } catch (IllegalAccessException | InvocationTargetException e) {\n266                           throw new TikaConfigException(\"problem creating \" + itemName, e);\n267                       }\n268                   }\n269               }\n270   \n271               if (txt != null) {\n272                   settings.add(localName);\n273               }\n274           }\n275   \n276           if (object instanceof Initializable) {\n277               ((Initializable) object).initialize(Collections.EMPTY_MAP);\n278               ((Initializable) object).checkInitialization(InitializableProblemHandler.THROW);\n279           }\n280       }\n483       private static void tryToSetPrimitive(Object object, SetterClassPair setterClassPair,\n484                                             String value) throws TikaConfigException {\n485           try {\n486               if (setterClassPair.itemClass == int.class) {\n487                   setterClassPair.setterMethod.invoke(object, Integer.parseInt(value));\n488               } else if (setterClassPair.itemClass == long.class) {\n489                   setterClassPair.setterMethod.invoke(object, Long.parseLong(value));\n490               } else if (setterClassPair.itemClass == float.class) {\n491                   setterClassPair.setterMethod.invoke(object, Float.parseFloat(value));\n492               } else if (setterClassPair.itemClass == double.class) {\n493                   setterClassPair.setterMethod.invoke(object, Double.parseDouble(value));\n494               } else if (setterClassPair.itemClass == boolean.class) {\n495                   setterClassPair.setterMethod.invoke(object, Boolean.parseBoolean(value));\n496               } else {\n497                   setterClassPair.setterMethod.invoke(object, value);\n498               }\n499           } catch (IllegalAccessException | InvocationTargetException e) {\n500               throw new TikaConfigException(\"bad parameter \" + setterClassPair + \" \" + value, e);\n501           }\n502       }\n",
            "cost": 0.10604000000000001,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:491:17",
            "status": "corpus",
            "valid_path": "NO",
            "id": 139
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/metadata/filter/MetadataFilter.java:\n44       public static MetadataFilter load(Element root, boolean allowMissing) throws TikaConfigException,\n45               IOException {\n46           try {\n47               return buildComposite(\"metadataFilters\", CompositeMetadataFilter.class,\n48                       \"metadataFilter\", MetadataFilter.class, root);\n49           } catch (TikaConfigException e) {\n50               if (allowMissing && e.getMessage().contains(\"could not find metadataFilters\")) {\n51                   return new NoOpFilter();\n52               }\n53               throw e;\n54           }\n55       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:\n139       protected static <P, T> P buildComposite(String compositeElementName, Class<P> compositeClass,\n140                                                String itemName, Class<T> itemClass,\n141                                                Element properties)\n142               throws TikaConfigException, IOException {\n143   \n144           if (!properties.getLocalName().equals(\"properties\")) {\n145               throw new TikaConfigException(\"expect properties as root node\");\n146           }\n147           NodeList children = properties.getChildNodes();\n148   \n149           for (int i = 0; i < children.getLength(); i++) {\n150               Node child = children.item(i);\n151               if (child.getNodeType() != 1) {\n152                   continue;\n153               }\n154               if (compositeElementName.equals(child.getLocalName())) {\n155                   List<T> components = loadComposite(child, itemName, itemClass);\n156                   Constructor constructor = null;\n157                   try {\n158                       constructor = compositeClass.getConstructor(List.class);\n159                       P composite = (P) constructor.newInstance(components);\n160                       setParams(composite, child, new HashSet<>(), itemName);\n161                       return composite;\n162                   } catch (NoSuchMethodException | InvocationTargetException |\n163                            InstantiationException | IllegalAccessException e) {\n164                       throw new TikaConfigException(\"can't build composite class\", e);\n165                   }\n166               }\n167           }\n168           throw new TikaConfigException(\"could not find \" + compositeElementName);\n169       }\n218       private static void setParams(Object object, Node targetNode, Set<String> settings,\n219                                     String exceptNodeName) throws TikaConfigException {\n220           NodeList children = targetNode.getChildNodes();\n221           List<Node> params = new ArrayList<>();\n222           for (int i = 0; i < children.getLength(); i++) {\n223               Node child = children.item(i);\n224   \n225               if (\"params\".equals(child.getLocalName())) {\n226                   NodeList paramsList = child.getChildNodes();\n227                   for (int j = 0; j < paramsList.getLength(); j++) {\n228                       params.add(paramsList.item(j));\n229                   }\n230               } else {\n231                   params.add(child);\n232               }\n233           }\n234           for (int i = 0; i < params.size(); i++) {\n235               Node param = params.get(i);\n236               if (param.getNodeType() != 1) {\n237                   continue;\n238               }\n239               String localName = param.getLocalName();\n240               if (localName == null || localName.equals(exceptNodeName)) {\n241                   continue;\n242               }\n243               String txt = param.getTextContent();\n244               String itemName = param.getLocalName();\n245               SetterClassPair setterClassPair = findSetterClassPair(object, itemName);\n246               boolean processed = false;\n247               if (!hasClass(param)) {\n248                   if (setterClassPair.itemClass.isAssignableFrom(Map.class) && isMap(param)) {\n249                       tryToSetMap(object, param);\n250                       processed = true;\n251                   } else if (setterClassPair.itemClass.isAssignableFrom(List.class)) {\n252                       tryToSetList(object, param);\n253                       processed = true;\n254                   }\n255               }\n256               if (!processed) {\n257                   if (isPrimitive(setterClassPair.itemClass)) {\n258                       tryToSetPrimitive(object, setterClassPair, param.getTextContent());\n259                   } else {\n260                       //tryToSetPrimitive(object, localName, txt);\n261                       Object item = buildClass(param, itemName, setterClassPair.itemClass);\n262                       setParams(setterClassPair.itemClass.cast(item), param, new HashSet<>());\n263                       try {\n264                           setterClassPair.setterMethod.invoke(object, item);\n265                       } catch (IllegalAccessException | InvocationTargetException e) {\n266                           throw new TikaConfigException(\"problem creating \" + itemName, e);\n267                       }\n268                   }\n269               }\n270   \n271               if (txt != null) {\n272                   settings.add(localName);\n273               }\n274           }\n275   \n276           if (object instanceof Initializable) {\n277               ((Initializable) object).initialize(Collections.EMPTY_MAP);\n278               ((Initializable) object).checkInitialization(InitializableProblemHandler.THROW);\n279           }\n280       }\n483       private static void tryToSetPrimitive(Object object, SetterClassPair setterClassPair,\n484                                             String value) throws TikaConfigException {\n485           try {\n486               if (setterClassPair.itemClass == int.class) {\n487                   setterClassPair.setterMethod.invoke(object, Integer.parseInt(value));\n488               } else if (setterClassPair.itemClass == long.class) {\n489                   setterClassPair.setterMethod.invoke(object, Long.parseLong(value));\n490               } else if (setterClassPair.itemClass == float.class) {\n491                   setterClassPair.setterMethod.invoke(object, Float.parseFloat(value));\n492               } else if (setterClassPair.itemClass == double.class) {\n493                   setterClassPair.setterMethod.invoke(object, Double.parseDouble(value));\n494               } else if (setterClassPair.itemClass == boolean.class) {\n495                   setterClassPair.setterMethod.invoke(object, Boolean.parseBoolean(value));\n496               } else {\n497                   setterClassPair.setterMethod.invoke(object, value);\n498               }\n499           } catch (IllegalAccessException | InvocationTargetException e) {\n500               throw new TikaConfigException(\"bad parameter \" + setterClassPair + \" \" + value, e);\n501           }\n502       }\n",
            "cost": 0.10869000000000001,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:491:53",
            "status": "corpus",
            "valid_path": "NO",
            "id": 140
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/metadata/filter/MetadataFilter.java:\n44       public static MetadataFilter load(Element root, boolean allowMissing) throws TikaConfigException,\n45               IOException {\n46           try {\n47               return buildComposite(\"metadataFilters\", CompositeMetadataFilter.class,\n48                       \"metadataFilter\", MetadataFilter.class, root);\n49           } catch (TikaConfigException e) {\n50               if (allowMissing && e.getMessage().contains(\"could not find metadataFilters\")) {\n51                   return new NoOpFilter();\n52               }\n53               throw e;\n54           }\n55       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:\n139       protected static <P, T> P buildComposite(String compositeElementName, Class<P> compositeClass,\n140                                                String itemName, Class<T> itemClass,\n141                                                Element properties)\n142               throws TikaConfigException, IOException {\n143   \n144           if (!properties.getLocalName().equals(\"properties\")) {\n145               throw new TikaConfigException(\"expect properties as root node\");\n146           }\n147           NodeList children = properties.getChildNodes();\n148   \n149           for (int i = 0; i < children.getLength(); i++) {\n150               Node child = children.item(i);\n151               if (child.getNodeType() != 1) {\n152                   continue;\n153               }\n154               if (compositeElementName.equals(child.getLocalName())) {\n155                   List<T> components = loadComposite(child, itemName, itemClass);\n156                   Constructor constructor = null;\n157                   try {\n158                       constructor = compositeClass.getConstructor(List.class);\n159                       P composite = (P) constructor.newInstance(components);\n160                       setParams(composite, child, new HashSet<>(), itemName);\n161                       return composite;\n162                   } catch (NoSuchMethodException | InvocationTargetException |\n163                            InstantiationException | IllegalAccessException e) {\n164                       throw new TikaConfigException(\"can't build composite class\", e);\n165                   }\n166               }\n167           }\n168           throw new TikaConfigException(\"could not find \" + compositeElementName);\n169       }\n218       private static void setParams(Object object, Node targetNode, Set<String> settings,\n219                                     String exceptNodeName) throws TikaConfigException {\n220           NodeList children = targetNode.getChildNodes();\n221           List<Node> params = new ArrayList<>();\n222           for (int i = 0; i < children.getLength(); i++) {\n223               Node child = children.item(i);\n224   \n225               if (\"params\".equals(child.getLocalName())) {\n226                   NodeList paramsList = child.getChildNodes();\n227                   for (int j = 0; j < paramsList.getLength(); j++) {\n228                       params.add(paramsList.item(j));\n229                   }\n230               } else {\n231                   params.add(child);\n232               }\n233           }\n234           for (int i = 0; i < params.size(); i++) {\n235               Node param = params.get(i);\n236               if (param.getNodeType() != 1) {\n237                   continue;\n238               }\n239               String localName = param.getLocalName();\n240               if (localName == null || localName.equals(exceptNodeName)) {\n241                   continue;\n242               }\n243               String txt = param.getTextContent();\n244               String itemName = param.getLocalName();\n245               SetterClassPair setterClassPair = findSetterClassPair(object, itemName);\n246               boolean processed = false;\n247               if (!hasClass(param)) {\n248                   if (setterClassPair.itemClass.isAssignableFrom(Map.class) && isMap(param)) {\n249                       tryToSetMap(object, param);\n250                       processed = true;\n251                   } else if (setterClassPair.itemClass.isAssignableFrom(List.class)) {\n252                       tryToSetList(object, param);\n253                       processed = true;\n254                   }\n255               }\n256               if (!processed) {\n257                   if (isPrimitive(setterClassPair.itemClass)) {\n258                       tryToSetPrimitive(object, setterClassPair, param.getTextContent());\n259                   } else {\n260                       //tryToSetPrimitive(object, localName, txt);\n261                       Object item = buildClass(param, itemName, setterClassPair.itemClass);\n262                       setParams(setterClassPair.itemClass.cast(item), param, new HashSet<>());\n263                       try {\n264                           setterClassPair.setterMethod.invoke(object, item);\n265                       } catch (IllegalAccessException | InvocationTargetException e) {\n266                           throw new TikaConfigException(\"problem creating \" + itemName, e);\n267                       }\n268                   }\n269               }\n270   \n271               if (txt != null) {\n272                   settings.add(localName);\n273               }\n274           }\n275   \n276           if (object instanceof Initializable) {\n277               ((Initializable) object).initialize(Collections.EMPTY_MAP);\n278               ((Initializable) object).checkInitialization(InitializableProblemHandler.THROW);\n279           }\n280       }\n483       private static void tryToSetPrimitive(Object object, SetterClassPair setterClassPair,\n484                                             String value) throws TikaConfigException {\n485           try {\n486               if (setterClassPair.itemClass == int.class) {\n487                   setterClassPair.setterMethod.invoke(object, Integer.parseInt(value));\n488               } else if (setterClassPair.itemClass == long.class) {\n489                   setterClassPair.setterMethod.invoke(object, Long.parseLong(value));\n490               } else if (setterClassPair.itemClass == float.class) {\n491                   setterClassPair.setterMethod.invoke(object, Float.parseFloat(value));\n492               } else if (setterClassPair.itemClass == double.class) {\n493                   setterClassPair.setterMethod.invoke(object, Double.parseDouble(value));\n494               } else if (setterClassPair.itemClass == boolean.class) {\n495                   setterClassPair.setterMethod.invoke(object, Boolean.parseBoolean(value));\n496               } else {\n497                   setterClassPair.setterMethod.invoke(object, value);\n498               }\n499           } catch (IllegalAccessException | InvocationTargetException e) {\n500               throw new TikaConfigException(\"bad parameter \" + setterClassPair + \" \" + value, e);\n501           }\n502       }\n",
            "cost": 0.10209000000000001,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:493:17",
            "status": "corpus",
            "valid_path": "NO",
            "id": 141
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/metadata/filter/MetadataFilter.java:\n44       public static MetadataFilter load(Element root, boolean allowMissing) throws TikaConfigException,\n45               IOException {\n46           try {\n47               return buildComposite(\"metadataFilters\", CompositeMetadataFilter.class,\n48                       \"metadataFilter\", MetadataFilter.class, root);\n49           } catch (TikaConfigException e) {\n50               if (allowMissing && e.getMessage().contains(\"could not find metadataFilters\")) {\n51                   return new NoOpFilter();\n52               }\n53               throw e;\n54           }\n55       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:\n139       protected static <P, T> P buildComposite(String compositeElementName, Class<P> compositeClass,\n140                                                String itemName, Class<T> itemClass,\n141                                                Element properties)\n142               throws TikaConfigException, IOException {\n143   \n144           if (!properties.getLocalName().equals(\"properties\")) {\n145               throw new TikaConfigException(\"expect properties as root node\");\n146           }\n147           NodeList children = properties.getChildNodes();\n148   \n149           for (int i = 0; i < children.getLength(); i++) {\n150               Node child = children.item(i);\n151               if (child.getNodeType() != 1) {\n152                   continue;\n153               }\n154               if (compositeElementName.equals(child.getLocalName())) {\n155                   List<T> components = loadComposite(child, itemName, itemClass);\n156                   Constructor constructor = null;\n157                   try {\n158                       constructor = compositeClass.getConstructor(List.class);\n159                       P composite = (P) constructor.newInstance(components);\n160                       setParams(composite, child, new HashSet<>(), itemName);\n161                       return composite;\n162                   } catch (NoSuchMethodException | InvocationTargetException |\n163                            InstantiationException | IllegalAccessException e) {\n164                       throw new TikaConfigException(\"can't build composite class\", e);\n165                   }\n166               }\n167           }\n168           throw new TikaConfigException(\"could not find \" + compositeElementName);\n169       }\n218       private static void setParams(Object object, Node targetNode, Set<String> settings,\n219                                     String exceptNodeName) throws TikaConfigException {\n220           NodeList children = targetNode.getChildNodes();\n221           List<Node> params = new ArrayList<>();\n222           for (int i = 0; i < children.getLength(); i++) {\n223               Node child = children.item(i);\n224   \n225               if (\"params\".equals(child.getLocalName())) {\n226                   NodeList paramsList = child.getChildNodes();\n227                   for (int j = 0; j < paramsList.getLength(); j++) {\n228                       params.add(paramsList.item(j));\n229                   }\n230               } else {\n231                   params.add(child);\n232               }\n233           }\n234           for (int i = 0; i < params.size(); i++) {\n235               Node param = params.get(i);\n236               if (param.getNodeType() != 1) {\n237                   continue;\n238               }\n239               String localName = param.getLocalName();\n240               if (localName == null || localName.equals(exceptNodeName)) {\n241                   continue;\n242               }\n243               String txt = param.getTextContent();\n244               String itemName = param.getLocalName();\n245               SetterClassPair setterClassPair = findSetterClassPair(object, itemName);\n246               boolean processed = false;\n247               if (!hasClass(param)) {\n248                   if (setterClassPair.itemClass.isAssignableFrom(Map.class) && isMap(param)) {\n249                       tryToSetMap(object, param);\n250                       processed = true;\n251                   } else if (setterClassPair.itemClass.isAssignableFrom(List.class)) {\n252                       tryToSetList(object, param);\n253                       processed = true;\n254                   }\n255               }\n256               if (!processed) {\n257                   if (isPrimitive(setterClassPair.itemClass)) {\n258                       tryToSetPrimitive(object, setterClassPair, param.getTextContent());\n259                   } else {\n260                       //tryToSetPrimitive(object, localName, txt);\n261                       Object item = buildClass(param, itemName, setterClassPair.itemClass);\n262                       setParams(setterClassPair.itemClass.cast(item), param, new HashSet<>());\n263                       try {\n264                           setterClassPair.setterMethod.invoke(object, item);\n265                       } catch (IllegalAccessException | InvocationTargetException e) {\n266                           throw new TikaConfigException(\"problem creating \" + itemName, e);\n267                       }\n268                   }\n269               }\n270   \n271               if (txt != null) {\n272                   settings.add(localName);\n273               }\n274           }\n275   \n276           if (object instanceof Initializable) {\n277               ((Initializable) object).initialize(Collections.EMPTY_MAP);\n278               ((Initializable) object).checkInitialization(InitializableProblemHandler.THROW);\n279           }\n280       }\n483       private static void tryToSetPrimitive(Object object, SetterClassPair setterClassPair,\n484                                             String value) throws TikaConfigException {\n485           try {\n486               if (setterClassPair.itemClass == int.class) {\n487                   setterClassPair.setterMethod.invoke(object, Integer.parseInt(value));\n488               } else if (setterClassPair.itemClass == long.class) {\n489                   setterClassPair.setterMethod.invoke(object, Long.parseLong(value));\n490               } else if (setterClassPair.itemClass == float.class) {\n491                   setterClassPair.setterMethod.invoke(object, Float.parseFloat(value));\n492               } else if (setterClassPair.itemClass == double.class) {\n493                   setterClassPair.setterMethod.invoke(object, Double.parseDouble(value));\n494               } else if (setterClassPair.itemClass == boolean.class) {\n495                   setterClassPair.setterMethod.invoke(object, Boolean.parseBoolean(value));\n496               } else {\n497                   setterClassPair.setterMethod.invoke(object, value);\n498               }\n499           } catch (IllegalAccessException | InvocationTargetException e) {\n500               throw new TikaConfigException(\"bad parameter \" + setterClassPair + \" \" + value, e);\n501           }\n502       }\n",
            "cost": 0.10274000000000001,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:493:53",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 142
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/metadata/filter/MetadataFilter.java:\n44       public static MetadataFilter load(Element root, boolean allowMissing) throws TikaConfigException,\n45               IOException {\n46           try {\n47               return buildComposite(\"metadataFilters\", CompositeMetadataFilter.class,\n48                       \"metadataFilter\", MetadataFilter.class, root);\n49           } catch (TikaConfigException e) {\n50               if (allowMissing && e.getMessage().contains(\"could not find metadataFilters\")) {\n51                   return new NoOpFilter();\n52               }\n53               throw e;\n54           }\n55       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:\n139       protected static <P, T> P buildComposite(String compositeElementName, Class<P> compositeClass,\n140                                                String itemName, Class<T> itemClass,\n141                                                Element properties)\n142               throws TikaConfigException, IOException {\n143   \n144           if (!properties.getLocalName().equals(\"properties\")) {\n145               throw new TikaConfigException(\"expect properties as root node\");\n146           }\n147           NodeList children = properties.getChildNodes();\n148   \n149           for (int i = 0; i < children.getLength(); i++) {\n150               Node child = children.item(i);\n151               if (child.getNodeType() != 1) {\n152                   continue;\n153               }\n154               if (compositeElementName.equals(child.getLocalName())) {\n155                   List<T> components = loadComposite(child, itemName, itemClass);\n156                   Constructor constructor = null;\n157                   try {\n158                       constructor = compositeClass.getConstructor(List.class);\n159                       P composite = (P) constructor.newInstance(components);\n160                       setParams(composite, child, new HashSet<>(), itemName);\n161                       return composite;\n162                   } catch (NoSuchMethodException | InvocationTargetException |\n163                            InstantiationException | IllegalAccessException e) {\n164                       throw new TikaConfigException(\"can't build composite class\", e);\n165                   }\n166               }\n167           }\n168           throw new TikaConfigException(\"could not find \" + compositeElementName);\n169       }\n218       private static void setParams(Object object, Node targetNode, Set<String> settings,\n219                                     String exceptNodeName) throws TikaConfigException {\n220           NodeList children = targetNode.getChildNodes();\n221           List<Node> params = new ArrayList<>();\n222           for (int i = 0; i < children.getLength(); i++) {\n223               Node child = children.item(i);\n224   \n225               if (\"params\".equals(child.getLocalName())) {\n226                   NodeList paramsList = child.getChildNodes();\n227                   for (int j = 0; j < paramsList.getLength(); j++) {\n228                       params.add(paramsList.item(j));\n229                   }\n230               } else {\n231                   params.add(child);\n232               }\n233           }\n234           for (int i = 0; i < params.size(); i++) {\n235               Node param = params.get(i);\n236               if (param.getNodeType() != 1) {\n237                   continue;\n238               }\n239               String localName = param.getLocalName();\n240               if (localName == null || localName.equals(exceptNodeName)) {\n241                   continue;\n242               }\n243               String txt = param.getTextContent();\n244               String itemName = param.getLocalName();\n245               SetterClassPair setterClassPair = findSetterClassPair(object, itemName);\n246               boolean processed = false;\n247               if (!hasClass(param)) {\n248                   if (setterClassPair.itemClass.isAssignableFrom(Map.class) && isMap(param)) {\n249                       tryToSetMap(object, param);\n250                       processed = true;\n251                   } else if (setterClassPair.itemClass.isAssignableFrom(List.class)) {\n252                       tryToSetList(object, param);\n253                       processed = true;\n254                   }\n255               }\n256               if (!processed) {\n257                   if (isPrimitive(setterClassPair.itemClass)) {\n258                       tryToSetPrimitive(object, setterClassPair, param.getTextContent());\n259                   } else {\n260                       //tryToSetPrimitive(object, localName, txt);\n261                       Object item = buildClass(param, itemName, setterClassPair.itemClass);\n262                       setParams(setterClassPair.itemClass.cast(item), param, new HashSet<>());\n263                       try {\n264                           setterClassPair.setterMethod.invoke(object, item);\n265                       } catch (IllegalAccessException | InvocationTargetException e) {\n266                           throw new TikaConfigException(\"problem creating \" + itemName, e);\n267                       }\n268                   }\n269               }\n270   \n271               if (txt != null) {\n272                   settings.add(localName);\n273               }\n274           }\n275   \n276           if (object instanceof Initializable) {\n277               ((Initializable) object).initialize(Collections.EMPTY_MAP);\n278               ((Initializable) object).checkInitialization(InitializableProblemHandler.THROW);\n279           }\n280       }\n483       private static void tryToSetPrimitive(Object object, SetterClassPair setterClassPair,\n484                                             String value) throws TikaConfigException {\n485           try {\n486               if (setterClassPair.itemClass == int.class) {\n487                   setterClassPair.setterMethod.invoke(object, Integer.parseInt(value));\n488               } else if (setterClassPair.itemClass == long.class) {\n489                   setterClassPair.setterMethod.invoke(object, Long.parseLong(value));\n490               } else if (setterClassPair.itemClass == float.class) {\n491                   setterClassPair.setterMethod.invoke(object, Float.parseFloat(value));\n492               } else if (setterClassPair.itemClass == double.class) {\n493                   setterClassPair.setterMethod.invoke(object, Double.parseDouble(value));\n494               } else if (setterClassPair.itemClass == boolean.class) {\n495                   setterClassPair.setterMethod.invoke(object, Boolean.parseBoolean(value));\n496               } else {\n497                   setterClassPair.setterMethod.invoke(object, value);\n498               }\n499           } catch (IllegalAccessException | InvocationTargetException e) {\n500               throw new TikaConfigException(\"bad parameter \" + setterClassPair + \" \" + value, e);\n501           }\n502       }\n",
            "cost": 0.10874,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:495:17",
            "status": "corpus",
            "valid_path": "NO",
            "id": 143
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/metadata/filter/MetadataFilter.java:\n44       public static MetadataFilter load(Element root, boolean allowMissing) throws TikaConfigException,\n45               IOException {\n46           try {\n47               return buildComposite(\"metadataFilters\", CompositeMetadataFilter.class,\n48                       \"metadataFilter\", MetadataFilter.class, root);\n49           } catch (TikaConfigException e) {\n50               if (allowMissing && e.getMessage().contains(\"could not find metadataFilters\")) {\n51                   return new NoOpFilter();\n52               }\n53               throw e;\n54           }\n55       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:\n139       protected static <P, T> P buildComposite(String compositeElementName, Class<P> compositeClass,\n140                                                String itemName, Class<T> itemClass,\n141                                                Element properties)\n142               throws TikaConfigException, IOException {\n143   \n144           if (!properties.getLocalName().equals(\"properties\")) {\n145               throw new TikaConfigException(\"expect properties as root node\");\n146           }\n147           NodeList children = properties.getChildNodes();\n148   \n149           for (int i = 0; i < children.getLength(); i++) {\n150               Node child = children.item(i);\n151               if (child.getNodeType() != 1) {\n152                   continue;\n153               }\n154               if (compositeElementName.equals(child.getLocalName())) {\n155                   List<T> components = loadComposite(child, itemName, itemClass);\n156                   Constructor constructor = null;\n157                   try {\n158                       constructor = compositeClass.getConstructor(List.class);\n159                       P composite = (P) constructor.newInstance(components);\n160                       setParams(composite, child, new HashSet<>(), itemName);\n161                       return composite;\n162                   } catch (NoSuchMethodException | InvocationTargetException |\n163                            InstantiationException | IllegalAccessException e) {\n164                       throw new TikaConfigException(\"can't build composite class\", e);\n165                   }\n166               }\n167           }\n168           throw new TikaConfigException(\"could not find \" + compositeElementName);\n169       }\n218       private static void setParams(Object object, Node targetNode, Set<String> settings,\n219                                     String exceptNodeName) throws TikaConfigException {\n220           NodeList children = targetNode.getChildNodes();\n221           List<Node> params = new ArrayList<>();\n222           for (int i = 0; i < children.getLength(); i++) {\n223               Node child = children.item(i);\n224   \n225               if (\"params\".equals(child.getLocalName())) {\n226                   NodeList paramsList = child.getChildNodes();\n227                   for (int j = 0; j < paramsList.getLength(); j++) {\n228                       params.add(paramsList.item(j));\n229                   }\n230               } else {\n231                   params.add(child);\n232               }\n233           }\n234           for (int i = 0; i < params.size(); i++) {\n235               Node param = params.get(i);\n236               if (param.getNodeType() != 1) {\n237                   continue;\n238               }\n239               String localName = param.getLocalName();\n240               if (localName == null || localName.equals(exceptNodeName)) {\n241                   continue;\n242               }\n243               String txt = param.getTextContent();\n244               String itemName = param.getLocalName();\n245               SetterClassPair setterClassPair = findSetterClassPair(object, itemName);\n246               boolean processed = false;\n247               if (!hasClass(param)) {\n248                   if (setterClassPair.itemClass.isAssignableFrom(Map.class) && isMap(param)) {\n249                       tryToSetMap(object, param);\n250                       processed = true;\n251                   } else if (setterClassPair.itemClass.isAssignableFrom(List.class)) {\n252                       tryToSetList(object, param);\n253                       processed = true;\n254                   }\n255               }\n256               if (!processed) {\n257                   if (isPrimitive(setterClassPair.itemClass)) {\n258                       tryToSetPrimitive(object, setterClassPair, param.getTextContent());\n259                   } else {\n260                       //tryToSetPrimitive(object, localName, txt);\n261                       Object item = buildClass(param, itemName, setterClassPair.itemClass);\n262                       setParams(setterClassPair.itemClass.cast(item), param, new HashSet<>());\n263                       try {\n264                           setterClassPair.setterMethod.invoke(object, item);\n265                       } catch (IllegalAccessException | InvocationTargetException e) {\n266                           throw new TikaConfigException(\"problem creating \" + itemName, e);\n267                       }\n268                   }\n269               }\n270   \n271               if (txt != null) {\n272                   settings.add(localName);\n273               }\n274           }\n275   \n276           if (object instanceof Initializable) {\n277               ((Initializable) object).initialize(Collections.EMPTY_MAP);\n278               ((Initializable) object).checkInitialization(InitializableProblemHandler.THROW);\n279           }\n280       }\n483       private static void tryToSetPrimitive(Object object, SetterClassPair setterClassPair,\n484                                             String value) throws TikaConfigException {\n485           try {\n486               if (setterClassPair.itemClass == int.class) {\n487                   setterClassPair.setterMethod.invoke(object, Integer.parseInt(value));\n488               } else if (setterClassPair.itemClass == long.class) {\n489                   setterClassPair.setterMethod.invoke(object, Long.parseLong(value));\n490               } else if (setterClassPair.itemClass == float.class) {\n491                   setterClassPair.setterMethod.invoke(object, Float.parseFloat(value));\n492               } else if (setterClassPair.itemClass == double.class) {\n493                   setterClassPair.setterMethod.invoke(object, Double.parseDouble(value));\n494               } else if (setterClassPair.itemClass == boolean.class) {\n495                   setterClassPair.setterMethod.invoke(object, Boolean.parseBoolean(value));\n496               } else {\n497                   setterClassPair.setterMethod.invoke(object, value);\n498               }\n499           } catch (IllegalAccessException | InvocationTargetException e) {\n500               throw new TikaConfigException(\"bad parameter \" + setterClassPair + \" \" + value, e);\n501           }\n502       }\n",
            "cost": 0.10734,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:495:53",
            "status": "corpus",
            "valid_path": "NO",
            "id": 144
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/metadata/filter/MetadataFilter.java:\n44       public static MetadataFilter load(Element root, boolean allowMissing) throws TikaConfigException,\n45               IOException {\n46           try {\n47               return buildComposite(\"metadataFilters\", CompositeMetadataFilter.class,\n48                       \"metadataFilter\", MetadataFilter.class, root);\n49           } catch (TikaConfigException e) {\n50               if (allowMissing && e.getMessage().contains(\"could not find metadataFilters\")) {\n51                   return new NoOpFilter();\n52               }\n53               throw e;\n54           }\n55       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:\n139       protected static <P, T> P buildComposite(String compositeElementName, Class<P> compositeClass,\n140                                                String itemName, Class<T> itemClass,\n141                                                Element properties)\n142               throws TikaConfigException, IOException {\n143   \n144           if (!properties.getLocalName().equals(\"properties\")) {\n145               throw new TikaConfigException(\"expect properties as root node\");\n146           }\n147           NodeList children = properties.getChildNodes();\n148   \n149           for (int i = 0; i < children.getLength(); i++) {\n150               Node child = children.item(i);\n151               if (child.getNodeType() != 1) {\n152                   continue;\n153               }\n154               if (compositeElementName.equals(child.getLocalName())) {\n155                   List<T> components = loadComposite(child, itemName, itemClass);\n156                   Constructor constructor = null;\n157                   try {\n158                       constructor = compositeClass.getConstructor(List.class);\n159                       P composite = (P) constructor.newInstance(components);\n160                       setParams(composite, child, new HashSet<>(), itemName);\n161                       return composite;\n162                   } catch (NoSuchMethodException | InvocationTargetException |\n163                            InstantiationException | IllegalAccessException e) {\n164                       throw new TikaConfigException(\"can't build composite class\", e);\n165                   }\n166               }\n167           }\n168           throw new TikaConfigException(\"could not find \" + compositeElementName);\n169       }\n218       private static void setParams(Object object, Node targetNode, Set<String> settings,\n219                                     String exceptNodeName) throws TikaConfigException {\n220           NodeList children = targetNode.getChildNodes();\n221           List<Node> params = new ArrayList<>();\n222           for (int i = 0; i < children.getLength(); i++) {\n223               Node child = children.item(i);\n224   \n225               if (\"params\".equals(child.getLocalName())) {\n226                   NodeList paramsList = child.getChildNodes();\n227                   for (int j = 0; j < paramsList.getLength(); j++) {\n228                       params.add(paramsList.item(j));\n229                   }\n230               } else {\n231                   params.add(child);\n232               }\n233           }\n234           for (int i = 0; i < params.size(); i++) {\n235               Node param = params.get(i);\n236               if (param.getNodeType() != 1) {\n237                   continue;\n238               }\n239               String localName = param.getLocalName();\n240               if (localName == null || localName.equals(exceptNodeName)) {\n241                   continue;\n242               }\n243               String txt = param.getTextContent();\n244               String itemName = param.getLocalName();\n245               SetterClassPair setterClassPair = findSetterClassPair(object, itemName);\n246               boolean processed = false;\n247               if (!hasClass(param)) {\n248                   if (setterClassPair.itemClass.isAssignableFrom(Map.class) && isMap(param)) {\n249                       tryToSetMap(object, param);\n250                       processed = true;\n251                   } else if (setterClassPair.itemClass.isAssignableFrom(List.class)) {\n252                       tryToSetList(object, param);\n253                       processed = true;\n254                   }\n255               }\n256               if (!processed) {\n257                   if (isPrimitive(setterClassPair.itemClass)) {\n258                       tryToSetPrimitive(object, setterClassPair, param.getTextContent());\n259                   } else {\n260                       //tryToSetPrimitive(object, localName, txt);\n261                       Object item = buildClass(param, itemName, setterClassPair.itemClass);\n262                       setParams(setterClassPair.itemClass.cast(item), param, new HashSet<>());\n263                       try {\n264                           setterClassPair.setterMethod.invoke(object, item);\n265                       } catch (IllegalAccessException | InvocationTargetException e) {\n266                           throw new TikaConfigException(\"problem creating \" + itemName, e);\n267                       }\n268                   }\n269               }\n270   \n271               if (txt != null) {\n272                   settings.add(localName);\n273               }\n274           }\n275   \n276           if (object instanceof Initializable) {\n277               ((Initializable) object).initialize(Collections.EMPTY_MAP);\n278               ((Initializable) object).checkInitialization(InitializableProblemHandler.THROW);\n279           }\n280       }\n483       private static void tryToSetPrimitive(Object object, SetterClassPair setterClassPair,\n484                                             String value) throws TikaConfigException {\n485           try {\n486               if (setterClassPair.itemClass == int.class) {\n487                   setterClassPair.setterMethod.invoke(object, Integer.parseInt(value));\n488               } else if (setterClassPair.itemClass == long.class) {\n489                   setterClassPair.setterMethod.invoke(object, Long.parseLong(value));\n490               } else if (setterClassPair.itemClass == float.class) {\n491                   setterClassPair.setterMethod.invoke(object, Float.parseFloat(value));\n492               } else if (setterClassPair.itemClass == double.class) {\n493                   setterClassPair.setterMethod.invoke(object, Double.parseDouble(value));\n494               } else if (setterClassPair.itemClass == boolean.class) {\n495                   setterClassPair.setterMethod.invoke(object, Boolean.parseBoolean(value));\n496               } else {\n497                   setterClassPair.setterMethod.invoke(object, value);\n498               }\n499           } catch (IllegalAccessException | InvocationTargetException e) {\n500               throw new TikaConfigException(\"bad parameter \" + setterClassPair + \" \" + value, e);\n501           }\n502       }\n",
            "cost": 0.10889000000000001,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:497:17",
            "status": "corpus",
            "valid_path": "NO",
            "id": 145
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/metadata/filter/MetadataFilter.java:\n44       public static MetadataFilter load(Element root, boolean allowMissing) throws TikaConfigException,\n45               IOException {\n46           try {\n47               return buildComposite(\"metadataFilters\", CompositeMetadataFilter.class,\n48                       \"metadataFilter\", MetadataFilter.class, root);\n49           } catch (TikaConfigException e) {\n50               if (allowMissing && e.getMessage().contains(\"could not find metadataFilters\")) {\n51                   return new NoOpFilter();\n52               }\n53               throw e;\n54           }\n55       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:\n139       protected static <P, T> P buildComposite(String compositeElementName, Class<P> compositeClass,\n140                                                String itemName, Class<T> itemClass,\n141                                                Element properties)\n142               throws TikaConfigException, IOException {\n143   \n144           if (!properties.getLocalName().equals(\"properties\")) {\n145               throw new TikaConfigException(\"expect properties as root node\");\n146           }\n147           NodeList children = properties.getChildNodes();\n148   \n149           for (int i = 0; i < children.getLength(); i++) {\n150               Node child = children.item(i);\n151               if (child.getNodeType() != 1) {\n152                   continue;\n153               }\n154               if (compositeElementName.equals(child.getLocalName())) {\n155                   List<T> components = loadComposite(child, itemName, itemClass);\n156                   Constructor constructor = null;\n157                   try {\n158                       constructor = compositeClass.getConstructor(List.class);\n159                       P composite = (P) constructor.newInstance(components);\n160                       setParams(composite, child, new HashSet<>(), itemName);\n161                       return composite;\n162                   } catch (NoSuchMethodException | InvocationTargetException |\n163                            InstantiationException | IllegalAccessException e) {\n164                       throw new TikaConfigException(\"can't build composite class\", e);\n165                   }\n166               }\n167           }\n168           throw new TikaConfigException(\"could not find \" + compositeElementName);\n169       }\n218       private static void setParams(Object object, Node targetNode, Set<String> settings,\n219                                     String exceptNodeName) throws TikaConfigException {\n220           NodeList children = targetNode.getChildNodes();\n221           List<Node> params = new ArrayList<>();\n222           for (int i = 0; i < children.getLength(); i++) {\n223               Node child = children.item(i);\n224   \n225               if (\"params\".equals(child.getLocalName())) {\n226                   NodeList paramsList = child.getChildNodes();\n227                   for (int j = 0; j < paramsList.getLength(); j++) {\n228                       params.add(paramsList.item(j));\n229                   }\n230               } else {\n231                   params.add(child);\n232               }\n233           }\n234           for (int i = 0; i < params.size(); i++) {\n235               Node param = params.get(i);\n236               if (param.getNodeType() != 1) {\n237                   continue;\n238               }\n239               String localName = param.getLocalName();\n240               if (localName == null || localName.equals(exceptNodeName)) {\n241                   continue;\n242               }\n243               String txt = param.getTextContent();\n244               String itemName = param.getLocalName();\n245               SetterClassPair setterClassPair = findSetterClassPair(object, itemName);\n246               boolean processed = false;\n247               if (!hasClass(param)) {\n248                   if (setterClassPair.itemClass.isAssignableFrom(Map.class) && isMap(param)) {\n249                       tryToSetMap(object, param);\n250                       processed = true;\n251                   } else if (setterClassPair.itemClass.isAssignableFrom(List.class)) {\n252                       tryToSetList(object, param);\n253                       processed = true;\n254                   }\n255               }\n256               if (!processed) {\n257                   if (isPrimitive(setterClassPair.itemClass)) {\n258                       tryToSetPrimitive(object, setterClassPair, param.getTextContent());\n259                   } else {\n260                       //tryToSetPrimitive(object, localName, txt);\n261                       Object item = buildClass(param, itemName, setterClassPair.itemClass);\n262                       setParams(setterClassPair.itemClass.cast(item), param, new HashSet<>());\n263                       try {\n264                           setterClassPair.setterMethod.invoke(object, item);\n265                       } catch (IllegalAccessException | InvocationTargetException e) {\n266                           throw new TikaConfigException(\"problem creating \" + itemName, e);\n267                       }\n268                   }\n269               }\n270   \n271               if (txt != null) {\n272                   settings.add(localName);\n273               }\n274           }\n275   \n276           if (object instanceof Initializable) {\n277               ((Initializable) object).initialize(Collections.EMPTY_MAP);\n278               ((Initializable) object).checkInitialization(InitializableProblemHandler.THROW);\n279           }\n280       }\n483       private static void tryToSetPrimitive(Object object, SetterClassPair setterClassPair,\n484                                             String value) throws TikaConfigException {\n485           try {\n486               if (setterClassPair.itemClass == int.class) {\n487                   setterClassPair.setterMethod.invoke(object, Integer.parseInt(value));\n488               } else if (setterClassPair.itemClass == long.class) {\n489                   setterClassPair.setterMethod.invoke(object, Long.parseLong(value));\n490               } else if (setterClassPair.itemClass == float.class) {\n491                   setterClassPair.setterMethod.invoke(object, Float.parseFloat(value));\n492               } else if (setterClassPair.itemClass == double.class) {\n493                   setterClassPair.setterMethod.invoke(object, Double.parseDouble(value));\n494               } else if (setterClassPair.itemClass == boolean.class) {\n495                   setterClassPair.setterMethod.invoke(object, Boolean.parseBoolean(value));\n496               } else {\n497                   setterClassPair.setterMethod.invoke(object, value);\n498               }\n499           } catch (IllegalAccessException | InvocationTargetException e) {\n500               throw new TikaConfigException(\"bad parameter \" + setterClassPair + \" \" + value, e);\n501           }\n502       }\n",
            "cost": 0.10894000000000001,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:497:53",
            "status": "corpus",
            "valid_path": "NO",
            "id": 146
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/metadata/filter/MetadataFilter.java:\n44       public static MetadataFilter load(Element root, boolean allowMissing) throws TikaConfigException,\n45               IOException {\n46           try {\n47               return buildComposite(\"metadataFilters\", CompositeMetadataFilter.class,\n48                       \"metadataFilter\", MetadataFilter.class, root);\n49           } catch (TikaConfigException e) {\n50               if (allowMissing && e.getMessage().contains(\"could not find metadataFilters\")) {\n51                   return new NoOpFilter();\n52               }\n53               throw e;\n54           }\n55       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:\n139       protected static <P, T> P buildComposite(String compositeElementName, Class<P> compositeClass,\n140                                                String itemName, Class<T> itemClass,\n141                                                Element properties)\n142               throws TikaConfigException, IOException {\n143   \n144           if (!properties.getLocalName().equals(\"properties\")) {\n145               throw new TikaConfigException(\"expect properties as root node\");\n146           }\n147           NodeList children = properties.getChildNodes();\n148   \n149           for (int i = 0; i < children.getLength(); i++) {\n150               Node child = children.item(i);\n151               if (child.getNodeType() != 1) {\n152                   continue;\n153               }\n154               if (compositeElementName.equals(child.getLocalName())) {\n155                   List<T> components = loadComposite(child, itemName, itemClass);\n156                   Constructor constructor = null;\n157                   try {\n158                       constructor = compositeClass.getConstructor(List.class);\n159                       P composite = (P) constructor.newInstance(components);\n160                       setParams(composite, child, new HashSet<>(), itemName);\n161                       return composite;\n162                   } catch (NoSuchMethodException | InvocationTargetException |\n163                            InstantiationException | IllegalAccessException e) {\n164                       throw new TikaConfigException(\"can't build composite class\", e);\n165                   }\n166               }\n167           }\n168           throw new TikaConfigException(\"could not find \" + compositeElementName);\n169       }\n218       private static void setParams(Object object, Node targetNode, Set<String> settings,\n219                                     String exceptNodeName) throws TikaConfigException {\n220           NodeList children = targetNode.getChildNodes();\n221           List<Node> params = new ArrayList<>();\n222           for (int i = 0; i < children.getLength(); i++) {\n223               Node child = children.item(i);\n224   \n225               if (\"params\".equals(child.getLocalName())) {\n226                   NodeList paramsList = child.getChildNodes();\n227                   for (int j = 0; j < paramsList.getLength(); j++) {\n228                       params.add(paramsList.item(j));\n229                   }\n230               } else {\n231                   params.add(child);\n232               }\n233           }\n234           for (int i = 0; i < params.size(); i++) {\n235               Node param = params.get(i);\n236               if (param.getNodeType() != 1) {\n237                   continue;\n238               }\n239               String localName = param.getLocalName();\n240               if (localName == null || localName.equals(exceptNodeName)) {\n241                   continue;\n242               }\n243               String txt = param.getTextContent();\n244               String itemName = param.getLocalName();\n245               SetterClassPair setterClassPair = findSetterClassPair(object, itemName);\n246               boolean processed = false;\n247               if (!hasClass(param)) {\n248                   if (setterClassPair.itemClass.isAssignableFrom(Map.class) && isMap(param)) {\n249                       tryToSetMap(object, param);\n250                       processed = true;\n251                   } else if (setterClassPair.itemClass.isAssignableFrom(List.class)) {\n252                       tryToSetList(object, param);\n253                       processed = true;\n254                   }\n255               }\n256               if (!processed) {\n257                   if (isPrimitive(setterClassPair.itemClass)) {\n258                       tryToSetPrimitive(object, setterClassPair, param.getTextContent());\n259                   } else {\n260                       //tryToSetPrimitive(object, localName, txt);\n261                       Object item = buildClass(param, itemName, setterClassPair.itemClass);\n262                       setParams(setterClassPair.itemClass.cast(item), param, new HashSet<>());\n263                       try {\n264                           setterClassPair.setterMethod.invoke(object, item);\n265                       } catch (IllegalAccessException | InvocationTargetException e) {\n266                           throw new TikaConfigException(\"problem creating \" + itemName, e);\n267                       }\n268                   }\n269               }\n270   \n271               if (txt != null) {\n272                   settings.add(localName);\n273               }\n274           }\n275   \n276           if (object instanceof Initializable) {\n277               ((Initializable) object).initialize(Collections.EMPTY_MAP);\n278               ((Initializable) object).checkInitialization(InitializableProblemHandler.THROW);\n279           }\n280       }\n360       private static void tryToSetList(Object object, Node param) throws TikaConfigException {\n361           if (hasClass(param)) {\n362               tryToSetClassList(object, param);\n363           } else {\n364               tryToSetStringList(object, param);\n365           }\n366       }\n394       private static void tryToSetStringList(Object object, Node param) throws TikaConfigException {\n395           String name = param.getLocalName();\n396           List<String> strings = new ArrayList<>();\n397           NodeList nodeList = param.getChildNodes();\n398           for (int i = 0; i < nodeList.getLength(); i++) {\n399               Node n = nodeList.item(i);\n400               if (n.getNodeType() == 1) {\n401                   String txt = n.getTextContent();\n402                   if (txt != null) {\n403                       strings.add(txt);\n404                   }\n405               }\n406           }\n407           String setter = \"set\" + name.substring(0, 1).toUpperCase(Locale.US) + name.substring(1);\n408           try {\n409               Method m = object.getClass().getMethod(setter, List.class);\n410               m.invoke(object, strings);\n411           } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {\n412               throw new TikaConfigException(\"can't set \" + name, e);\n413           }\n414       }\n",
            "cost": 0.111805,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:410:13",
            "status": "corpus",
            "valid_path": "NO",
            "id": 147
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/metadata/filter/MetadataFilter.java:\n44       public static MetadataFilter load(Element root, boolean allowMissing) throws TikaConfigException,\n45               IOException {\n46           try {\n47               return buildComposite(\"metadataFilters\", CompositeMetadataFilter.class,\n48                       \"metadataFilter\", MetadataFilter.class, root);\n49           } catch (TikaConfigException e) {\n50               if (allowMissing && e.getMessage().contains(\"could not find metadataFilters\")) {\n51                   return new NoOpFilter();\n52               }\n53               throw e;\n54           }\n55       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:\n139       protected static <P, T> P buildComposite(String compositeElementName, Class<P> compositeClass,\n140                                                String itemName, Class<T> itemClass,\n141                                                Element properties)\n142               throws TikaConfigException, IOException {\n143   \n144           if (!properties.getLocalName().equals(\"properties\")) {\n145               throw new TikaConfigException(\"expect properties as root node\");\n146           }\n147           NodeList children = properties.getChildNodes();\n148   \n149           for (int i = 0; i < children.getLength(); i++) {\n150               Node child = children.item(i);\n151               if (child.getNodeType() != 1) {\n152                   continue;\n153               }\n154               if (compositeElementName.equals(child.getLocalName())) {\n155                   List<T> components = loadComposite(child, itemName, itemClass);\n156                   Constructor constructor = null;\n157                   try {\n158                       constructor = compositeClass.getConstructor(List.class);\n159                       P composite = (P) constructor.newInstance(components);\n160                       setParams(composite, child, new HashSet<>(), itemName);\n161                       return composite;\n162                   } catch (NoSuchMethodException | InvocationTargetException |\n163                            InstantiationException | IllegalAccessException e) {\n164                       throw new TikaConfigException(\"can't build composite class\", e);\n165                   }\n166               }\n167           }\n168           throw new TikaConfigException(\"could not find \" + compositeElementName);\n169       }\n218       private static void setParams(Object object, Node targetNode, Set<String> settings,\n219                                     String exceptNodeName) throws TikaConfigException {\n220           NodeList children = targetNode.getChildNodes();\n221           List<Node> params = new ArrayList<>();\n222           for (int i = 0; i < children.getLength(); i++) {\n223               Node child = children.item(i);\n224   \n225               if (\"params\".equals(child.getLocalName())) {\n226                   NodeList paramsList = child.getChildNodes();\n227                   for (int j = 0; j < paramsList.getLength(); j++) {\n228                       params.add(paramsList.item(j));\n229                   }\n230               } else {\n231                   params.add(child);\n232               }\n233           }\n234           for (int i = 0; i < params.size(); i++) {\n235               Node param = params.get(i);\n236               if (param.getNodeType() != 1) {\n237                   continue;\n238               }\n239               String localName = param.getLocalName();\n240               if (localName == null || localName.equals(exceptNodeName)) {\n241                   continue;\n242               }\n243               String txt = param.getTextContent();\n244               String itemName = param.getLocalName();\n245               SetterClassPair setterClassPair = findSetterClassPair(object, itemName);\n246               boolean processed = false;\n247               if (!hasClass(param)) {\n248                   if (setterClassPair.itemClass.isAssignableFrom(Map.class) && isMap(param)) {\n249                       tryToSetMap(object, param);\n250                       processed = true;\n251                   } else if (setterClassPair.itemClass.isAssignableFrom(List.class)) {\n252                       tryToSetList(object, param);\n253                       processed = true;\n254                   }\n255               }\n256               if (!processed) {\n257                   if (isPrimitive(setterClassPair.itemClass)) {\n258                       tryToSetPrimitive(object, setterClassPair, param.getTextContent());\n259                   } else {\n260                       //tryToSetPrimitive(object, localName, txt);\n261                       Object item = buildClass(param, itemName, setterClassPair.itemClass);\n262                       setParams(setterClassPair.itemClass.cast(item), param, new HashSet<>());\n263                       try {\n264                           setterClassPair.setterMethod.invoke(object, item);\n265                       } catch (IllegalAccessException | InvocationTargetException e) {\n266                           throw new TikaConfigException(\"problem creating \" + itemName, e);\n267                       }\n268                   }\n269               }\n270   \n271               if (txt != null) {\n272                   settings.add(localName);\n273               }\n274           }\n275   \n276           if (object instanceof Initializable) {\n277               ((Initializable) object).initialize(Collections.EMPTY_MAP);\n278               ((Initializable) object).checkInitialization(InitializableProblemHandler.THROW);\n279           }\n280       }\n360       private static void tryToSetList(Object object, Node param) throws TikaConfigException {\n361           if (hasClass(param)) {\n362               tryToSetClassList(object, param);\n363           } else {\n364               tryToSetStringList(object, param);\n365           }\n366       }\n394       private static void tryToSetStringList(Object object, Node param) throws TikaConfigException {\n395           String name = param.getLocalName();\n396           List<String> strings = new ArrayList<>();\n397           NodeList nodeList = param.getChildNodes();\n398           for (int i = 0; i < nodeList.getLength(); i++) {\n399               Node n = nodeList.item(i);\n400               if (n.getNodeType() == 1) {\n401                   String txt = n.getTextContent();\n402                   if (txt != null) {\n403                       strings.add(txt);\n404                   }\n405               }\n406           }\n407           String setter = \"set\" + name.substring(0, 1).toUpperCase(Locale.US) + name.substring(1);\n408           try {\n409               Method m = object.getClass().getMethod(setter, List.class);\n410               m.invoke(object, strings);\n411           } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {\n412               throw new TikaConfigException(\"can't set \" + name, e);\n413           }\n414       }\n",
            "cost": 0.111155,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:410:22",
            "status": "corpus",
            "valid_path": "NO",
            "id": 148
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n 487       private void dumpConfig(TikaConfigSerializer.Mode mode) throws Exception {\n 488           configure();\n 489           TikaConfig localConfig = (config == null) ? TikaConfig.getDefaultConfig() : config;\n 490   \n 491           TikaConfigSerializer.serialize(localConfig, mode, new OutputStreamWriter(System.out, UTF_8), UTF_8);\n 492       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfigSerializer.java:\n 95       public static void serialize(TikaConfig config, Mode mode, Writer writer, Charset charset)\n 96               throws Exception {\n 97           DocumentBuilder docBuilder = XMLReaderUtils.getDocumentBuilder();\n 98   \n 99           // root elements\n100           Document doc = docBuilder.newDocument();\n101           Element rootElement = doc.createElement(\"properties\");\n102   \n103           doc.appendChild(rootElement);\n104           addMimeComment(mode, rootElement, doc);\n105           addServiceLoader(mode, rootElement, doc, config);\n106           addExecutorService(mode, rootElement, doc, config);\n107           addEncodingDetectors(mode, rootElement, doc, config);\n108           addTranslator(mode, rootElement, doc, config);\n109           addDetectors(mode, rootElement, doc, config);\n110           addParsers(mode, rootElement, doc, config);\n111           // TODO Service Loader section\n112   \n113           // now write\n114           Transformer transformer = XMLReaderUtils.getTransformer();\n115           transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n116           transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"2\");\n117           transformer.setOutputProperty(OutputKeys.ENCODING, charset.name());\n118           DOMSource source = new DOMSource(doc);\n119           StreamResult result = new StreamResult(writer);\n120   \n121           transformer.transform(source, result);\n122       }\n181       private static void addEncodingDetectors(Mode mode, Element rootElement, Document doc,\n182                                                TikaConfig config) throws Exception {\n183           EncodingDetector encDetector = config.getEncodingDetector();\n184   \n185           if (mode == Mode.MINIMAL && encDetector instanceof DefaultEncodingDetector) {\n186               // Don't output anything, all using defaults\n187               Node detComment = doc.createComment(\n188                       \"for example: <encodingDetectors><encodingDetector class=\\\"\" +\n189                               \"org.apache.tika.detect.DefaultEncodingDetector\\\">\" +\n190                               \"</encodingDetectors>\");\n191               rootElement.appendChild(detComment);\n192               return;\n193           }\n194   \n195           Element encDetectorsElement = doc.createElement(\"encodingDetectors\");\n196           if (mode == Mode.CURRENT && encDetector instanceof DefaultEncodingDetector ||\n197                   !(encDetector instanceof CompositeEncodingDetector)) {\n198               Element encDetectorElement = doc.createElement(\"encodingDetector\");\n199               encDetectorElement.setAttribute(\"class\", encDetector.getClass().getCanonicalName());\n200               encDetectorsElement.appendChild(encDetectorElement);\n201           } else {\n202               List<EncodingDetector> children =\n203                       ((CompositeEncodingDetector) encDetector).getDetectors();\n204               for (EncodingDetector d : children) {\n205                   Element encDetectorElement = doc.createElement(\"encodingDetector\");\n206                   encDetectorElement.setAttribute(\"class\", d.getClass().getCanonicalName());\n207                   serializeParams(doc, encDetectorElement, d);\n208   \n209                   encDetectorsElement.appendChild(encDetectorElement);\n210               }\n211           }\n212           rootElement.appendChild(encDetectorsElement);\n213       }\n342       public static void serializeParams(Document doc, Element element, Object object) {\n343           Matcher setterMatcher = Pattern.compile(\"\\\\Aset([A-Z].*)\").matcher(\"\");\n344           Matcher getterMatcher = Pattern.compile(\"\\\\A(?:get|is)([A-Z].+)\\\\Z\").matcher(\"\");\n345   \n346           //TODO -- check code base for setters with lowercase initial letters?!\n347           MethodTuples nonPrimitiveSetters = new MethodTuples();\n348           MethodTuples primitiveSetters = new MethodTuples();\n349           MethodTuples nonPrimitiveGetters = new MethodTuples();\n350           MethodTuples primitiveGetters = new MethodTuples();\n351           for (Method method : object.getClass().getMethods()) {\n352               Class[] parameterTypes = method.getParameterTypes();\n353   \n354               if (setterMatcher.reset(method.getName()).find()) {\n355                   if (!Modifier.isPublic(method.getModifiers())) {\n356                       //we could just call getMethods, but this can be helpful debugging inf\n357                       LOG.trace(\"inaccessible setter: {} in {}\", method.getName(), object.getClass());\n358                       continue;\n359                   }\n360                   //require @Field on setters\n361                   if (method.getAnnotation(Field.class) == null) {\n362                      // LOG.warn(\"unannotated setter {} in {}\", method.getName(), object.getClass());\n363                       continue;\n364                   }\n365                   if (parameterTypes.length != 1) {\n366                       //TODO -- check code base for setX() zero parameters that set boolean to true\n367                       LOG.warn(\"setter with wrong number of params \" + method.getName() + \" \" + parameterTypes.length);\n368                       continue;\n369                   }\n370                   String paramName = methodToParamName(setterMatcher.group(1));\n371                   if (PRIMITIVES.containsKey(parameterTypes[0])) {\n372                       primitiveSetters.add(new MethodTuple(paramName, method, parameterTypes[0]));\n373                   } else {\n374                       nonPrimitiveSetters.add(new MethodTuple(paramName, method, parameterTypes[0]));\n375                   }\n376               } else if (getterMatcher.reset(method.getName()).find()) {\n377                   if (parameterTypes.length != 0) {\n378                       //require 0 parameters for the getter\n379                       continue;\n380                   }\n381                   String paramName = methodToParamName(getterMatcher.group(1));\n382                   if (PRIMITIVES.containsKey(method.getReturnType())) {\n383                       primitiveGetters.add(new MethodTuple(paramName, method, method.getReturnType()));\n384                   } else {\n385                       nonPrimitiveGetters.add(new MethodTuple(paramName, method, method.getReturnType()));\n386                   }\n387   \n388               }\n389           }\n390   \n391           //TODO -- remove nonprimitive setters/getters that have a string equivalent\n392           serializePrimitives(doc, element, object, primitiveSetters, primitiveGetters);\n393           serializeNonPrimitives(doc, element, object, nonPrimitiveSetters, nonPrimitiveGetters);\n394   \n395       }\n405       private static void serializeNonPrimitives(Document doc, Element element,\n406                                                  Object object,\n407                                                  MethodTuples setterTuples,\n408                                                  MethodTuples getterTuples) {\n409   \n410           for (Map.Entry<String, Set<MethodTuple>> e : setterTuples.tuples.entrySet()) {\n411               Set<MethodTuple> getters = getterTuples.tuples.get(e.getKey());\n412               processNonPrimitive(e.getKey(), e.getValue(), getters, doc, element, object);\n413               if (!getterTuples.tuples.containsKey(e.getKey())) {\n414                   LOG.warn(\"no getter for setter non-primitive: {} in {}\", e.getKey(),\n415                           object.getClass());\n416                   continue;\n417               }\n418           }\n419       }\n421       private static void processNonPrimitive(String name, Set<MethodTuple> setters,\n422                                               Set<MethodTuple> getters, Document doc, Element element,\n423                                               Object object) {\n424           for (MethodTuple setter : setters) {\n425               for (MethodTuple getter : getters) {\n426                   if (setter.singleParam.equals(getter.singleParam)) {\n427                       serializeObject(name, doc, element, setter, getter, object);\n428                       return;\n429                   }\n430               }\n431           }\n432       }\n434       private static void serializeObject(String name, Document doc, Element element,\n435                                           MethodTuple setter,\n436                                            MethodTuple getter, Object object) {\n437   \n438           Object item = null;\n439           try {\n440               item = getter.method.invoke(object);\n441           } catch (IllegalAccessException | InvocationTargetException e) {\n442               LOG.warn(\"couldn't get \" + name + \" on \" + object.getClass(), e);\n443               return;\n444           }\n445           if (item == null) {\n446               LOG.warn(\"Getter {} on {} returned null\", getter.name, object.getClass());\n447           }\n448           Element entry = doc.createElement(name);\n449           entry.setAttribute(\"class\", item.getClass().getCanonicalName());\n450           element.appendChild(entry);\n451           serializeParams(doc, element, item);\n452       }\n",
            "cost": 0.108405,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfigSerializer.java:440:20",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 149
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n 487       private void dumpConfig(TikaConfigSerializer.Mode mode) throws Exception {\n 488           configure();\n 489           TikaConfig localConfig = (config == null) ? TikaConfig.getDefaultConfig() : config;\n 490   \n 491           TikaConfigSerializer.serialize(localConfig, mode, new OutputStreamWriter(System.out, UTF_8), UTF_8);\n 492       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfigSerializer.java:\n 95       public static void serialize(TikaConfig config, Mode mode, Writer writer, Charset charset)\n 96               throws Exception {\n 97           DocumentBuilder docBuilder = XMLReaderUtils.getDocumentBuilder();\n 98   \n 99           // root elements\n100           Document doc = docBuilder.newDocument();\n101           Element rootElement = doc.createElement(\"properties\");\n102   \n103           doc.appendChild(rootElement);\n104           addMimeComment(mode, rootElement, doc);\n105           addServiceLoader(mode, rootElement, doc, config);\n106           addExecutorService(mode, rootElement, doc, config);\n107           addEncodingDetectors(mode, rootElement, doc, config);\n108           addTranslator(mode, rootElement, doc, config);\n109           addDetectors(mode, rootElement, doc, config);\n110           addParsers(mode, rootElement, doc, config);\n111           // TODO Service Loader section\n112   \n113           // now write\n114           Transformer transformer = XMLReaderUtils.getTransformer();\n115           transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n116           transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"2\");\n117           transformer.setOutputProperty(OutputKeys.ENCODING, charset.name());\n118           DOMSource source = new DOMSource(doc);\n119           StreamResult result = new StreamResult(writer);\n120   \n121           transformer.transform(source, result);\n122       }\n181       private static void addEncodingDetectors(Mode mode, Element rootElement, Document doc,\n182                                                TikaConfig config) throws Exception {\n183           EncodingDetector encDetector = config.getEncodingDetector();\n184   \n185           if (mode == Mode.MINIMAL && encDetector instanceof DefaultEncodingDetector) {\n186               // Don't output anything, all using defaults\n187               Node detComment = doc.createComment(\n188                       \"for example: <encodingDetectors><encodingDetector class=\\\"\" +\n189                               \"org.apache.tika.detect.DefaultEncodingDetector\\\">\" +\n190                               \"</encodingDetectors>\");\n191               rootElement.appendChild(detComment);\n192               return;\n193           }\n194   \n195           Element encDetectorsElement = doc.createElement(\"encodingDetectors\");\n196           if (mode == Mode.CURRENT && encDetector instanceof DefaultEncodingDetector ||\n197                   !(encDetector instanceof CompositeEncodingDetector)) {\n198               Element encDetectorElement = doc.createElement(\"encodingDetector\");\n199               encDetectorElement.setAttribute(\"class\", encDetector.getClass().getCanonicalName());\n200               encDetectorsElement.appendChild(encDetectorElement);\n201           } else {\n202               List<EncodingDetector> children =\n203                       ((CompositeEncodingDetector) encDetector).getDetectors();\n204               for (EncodingDetector d : children) {\n205                   Element encDetectorElement = doc.createElement(\"encodingDetector\");\n206                   encDetectorElement.setAttribute(\"class\", d.getClass().getCanonicalName());\n207                   serializeParams(doc, encDetectorElement, d);\n208   \n209                   encDetectorsElement.appendChild(encDetectorElement);\n210               }\n211           }\n212           rootElement.appendChild(encDetectorsElement);\n213       }\n342       public static void serializeParams(Document doc, Element element, Object object) {\n343           Matcher setterMatcher = Pattern.compile(\"\\\\Aset([A-Z].*)\").matcher(\"\");\n344           Matcher getterMatcher = Pattern.compile(\"\\\\A(?:get|is)([A-Z].+)\\\\Z\").matcher(\"\");\n345   \n346           //TODO -- check code base for setters with lowercase initial letters?!\n347           MethodTuples nonPrimitiveSetters = new MethodTuples();\n348           MethodTuples primitiveSetters = new MethodTuples();\n349           MethodTuples nonPrimitiveGetters = new MethodTuples();\n350           MethodTuples primitiveGetters = new MethodTuples();\n351           for (Method method : object.getClass().getMethods()) {\n352               Class[] parameterTypes = method.getParameterTypes();\n353   \n354               if (setterMatcher.reset(method.getName()).find()) {\n355                   if (!Modifier.isPublic(method.getModifiers())) {\n356                       //we could just call getMethods, but this can be helpful debugging inf\n357                       LOG.trace(\"inaccessible setter: {} in {}\", method.getName(), object.getClass());\n358                       continue;\n359                   }\n360                   //require @Field on setters\n361                   if (method.getAnnotation(Field.class) == null) {\n362                      // LOG.warn(\"unannotated setter {} in {}\", method.getName(), object.getClass());\n363                       continue;\n364                   }\n365                   if (parameterTypes.length != 1) {\n366                       //TODO -- check code base for setX() zero parameters that set boolean to true\n367                       LOG.warn(\"setter with wrong number of params \" + method.getName() + \" \" + parameterTypes.length);\n368                       continue;\n369                   }\n370                   String paramName = methodToParamName(setterMatcher.group(1));\n371                   if (PRIMITIVES.containsKey(parameterTypes[0])) {\n372                       primitiveSetters.add(new MethodTuple(paramName, method, parameterTypes[0]));\n373                   } else {\n374                       nonPrimitiveSetters.add(new MethodTuple(paramName, method, parameterTypes[0]));\n375                   }\n376               } else if (getterMatcher.reset(method.getName()).find()) {\n377                   if (parameterTypes.length != 0) {\n378                       //require 0 parameters for the getter\n379                       continue;\n380                   }\n381                   String paramName = methodToParamName(getterMatcher.group(1));\n382                   if (PRIMITIVES.containsKey(method.getReturnType())) {\n383                       primitiveGetters.add(new MethodTuple(paramName, method, method.getReturnType()));\n384                   } else {\n385                       nonPrimitiveGetters.add(new MethodTuple(paramName, method, method.getReturnType()));\n386                   }\n387   \n388               }\n389           }\n390   \n391           //TODO -- remove nonprimitive setters/getters that have a string equivalent\n392           serializePrimitives(doc, element, object, primitiveSetters, primitiveGetters);\n393           serializeNonPrimitives(doc, element, object, nonPrimitiveSetters, nonPrimitiveGetters);\n394   \n395       }\n405       private static void serializeNonPrimitives(Document doc, Element element,\n406                                                  Object object,\n407                                                  MethodTuples setterTuples,\n408                                                  MethodTuples getterTuples) {\n409   \n410           for (Map.Entry<String, Set<MethodTuple>> e : setterTuples.tuples.entrySet()) {\n411               Set<MethodTuple> getters = getterTuples.tuples.get(e.getKey());\n412               processNonPrimitive(e.getKey(), e.getValue(), getters, doc, element, object);\n413               if (!getterTuples.tuples.containsKey(e.getKey())) {\n414                   LOG.warn(\"no getter for setter non-primitive: {} in {}\", e.getKey(),\n415                           object.getClass());\n416                   continue;\n417               }\n418           }\n419       }\n421       private static void processNonPrimitive(String name, Set<MethodTuple> setters,\n422                                               Set<MethodTuple> getters, Document doc, Element element,\n423                                               Object object) {\n424           for (MethodTuple setter : setters) {\n425               for (MethodTuple getter : getters) {\n426                   if (setter.singleParam.equals(getter.singleParam)) {\n427                       serializeObject(name, doc, element, setter, getter, object);\n428                       return;\n429                   }\n430               }\n431           }\n432       }\n434       private static void serializeObject(String name, Document doc, Element element,\n435                                           MethodTuple setter,\n436                                            MethodTuple getter, Object object) {\n437   \n438           Object item = null;\n439           try {\n440               item = getter.method.invoke(object);\n441           } catch (IllegalAccessException | InvocationTargetException e) {\n442               LOG.warn(\"couldn't get \" + name + \" on \" + object.getClass(), e);\n443               return;\n444           }\n445           if (item == null) {\n446               LOG.warn(\"Getter {} on {} returned null\", getter.name, object.getClass());\n447           }\n448           Element entry = doc.createElement(name);\n449           entry.setAttribute(\"class\", item.getClass().getCanonicalName());\n450           element.appendChild(entry);\n451           serializeParams(doc, element, item);\n452       }\n",
            "cost": 0.104455,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfigSerializer.java:440:41",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 150
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/corenlp/CoreNLPNERecogniser.java:156:29",
            "status": "error",
            "id": 151
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/corenlp/CoreNLPNERecogniser.java:156:51",
            "status": "error",
            "id": 152
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n 557       private void updateXMLReaderUtils(Element element) throws TikaException {\n 558   \n 559           Element child = getChild(element, \"xml-reader-utils\");\n 560           if (child == null) {\n 561               return;\n 562           }\n 563   \n 564           if (child.hasAttribute(\"maxEntityExpansions\")) {\n 565               XMLReaderUtils.setMaxEntityExpansions(Integer.parseInt(child.getAttribute(\"maxEntityExpansions\")));\n 566           }\n 567   \n 568           // make sure to call this after set entity expansions\n 569           if (child.hasAttribute(\"poolSize\")) {\n 570               XMLReaderUtils.setPoolSize(Integer.parseInt(child.getAttribute(\"poolSize\")));\n 571           }\n 572   \n 573       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java:\n 830       public static void setPoolSize(int poolSize) throws TikaException {\n 831           //stop the world with a write lock.\n 832           //parsers that are currently in use will be offered later (once the lock is released),\n 833           //but not accepted and will be gc'd.  We have to do this locking and\n 834           //the read locking in case one thread resizes the pool when the\n 835           //parsers have already started.  We could have an NPE on SAX_PARSERS\n 836           //if we didn't lock.\n 837           SAX_READ_WRITE_LOCK.writeLock().lock();\n 838           try {\n 839               //free up any resources before emptying SAX_PARSERS\n 840               for (PoolSAXParser parser : SAX_PARSERS) {\n 841                   parser.reset();\n 842               }\n 843               SAX_PARSERS.clear();\n 844               SAX_PARSERS = new ArrayBlockingQueue<>(poolSize);\n 845               int generation = POOL_GENERATION.incrementAndGet();\n 846               for (int i = 0; i < poolSize; i++) {\n 847                   try {\n 848                       SAX_PARSERS.offer(buildPoolParser(generation,\n 849                               getSAXParserFactory().newSAXParser()));\n 850                   } catch (SAXException | ParserConfigurationException e) {\n 851                       throw new TikaException(\"problem creating sax parser\", e);\n 852                   }\n 853               }\n 854           } finally {\n 855               SAX_READ_WRITE_LOCK.writeLock().unlock();\n 856           }\n 857   \n 858           DOM_READ_WRITE_LOCK.writeLock().lock();\n 859           try {\n 860               DOM_BUILDERS.clear();\n 861               DOM_BUILDERS = new ArrayBlockingQueue<>(poolSize);\n 862               for (int i = 0; i < poolSize; i++) {\n 863                   DOM_BUILDERS.offer(new PoolDOMBuilder(POOL_GENERATION.get(), getDocumentBuilder()));\n 864               }\n 865           } finally {\n 866               DOM_READ_WRITE_LOCK.writeLock().unlock();\n 867           }\n 868           POOL_SIZE = poolSize;\n 869       }\n 907       private static PoolSAXParser buildPoolParser(int generation, SAXParser parser) {\n 908           boolean canReset = false;\n 909           try {\n 910               parser.reset();\n 911               canReset = true;\n 912           } catch (UnsupportedOperationException e) {\n 913               canReset = false;\n 914           }\n 915           boolean hasSecurityManager = false;\n 916           try {\n 917               Object mgr =\n 918                       Class.forName(XERCES_SECURITY_MANAGER).getDeclaredConstructor().newInstance();\n 919               Method setLimit = mgr.getClass().getMethod(\"setEntityExpansionLimit\", Integer.TYPE);\n 920               setLimit.invoke(mgr, MAX_ENTITY_EXPANSIONS);\n 921   \n 922               parser.setProperty(XERCES_SECURITY_MANAGER_PROPERTY, mgr);\n 923               hasSecurityManager = true;\n 924           } catch (SecurityException e) {\n 925               //don't swallow security exceptions\n 926               throw e;\n 927           } catch (ClassNotFoundException e) {\n 928               // continue without log, this is expected in some setups\n 929           } catch (Throwable e) {\n 930               // NOSONAR - also catch things like NoClassDefError here\n 931               // throttle the log somewhat as it can spam the log otherwise\n 932               if (System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {\n 933                   LOG.warn(\"SAX Security Manager could not be setup [log suppressed for 5 minutes]\",\n 934                           e);\n 935                   LAST_LOG = System.currentTimeMillis();\n 936               }\n 937           }\n 938   \n 939           boolean canSetJaxPEntity = false;\n 940           if (!hasSecurityManager) {\n 941               // use the builtin way of setting the property\n 942               try {\n 943                   parser.setProperty(\"http://www.oracle.com/xml/jaxp/properties/entityExpansionLimit\",\n 944                           MAX_ENTITY_EXPANSIONS);\n 945                   canSetJaxPEntity = true;\n 946               } catch (SAXException e) {     // NOSONAR - also catch things like NoClassDefError here\n 947                   // throttle the log somewhat as it can spam the log otherwise\n 948                   if (System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {\n 949                       LOG.warn(\n 950                               \"SAX Security Manager could not be setup [log suppressed for 5 \" +\n 951                                       \"minutes]\",\n 952                               e);\n 953                       LAST_LOG = System.currentTimeMillis();\n 954                   }\n 955               }\n 956           }\n 957   \n 958           if (!canReset && hasSecurityManager) {\n 959               return new XercesPoolSAXParser(generation, parser);\n 960           } else if (canReset && hasSecurityManager) {\n 961               return new Xerces2PoolSAXParser(generation, parser);\n 962           } else if (canReset && !hasSecurityManager && canSetJaxPEntity) {\n 963               return new BuiltInPoolSAXParser(generation, parser);\n 964           } else {\n 965               return new UnrecognizedPoolSAXParser(generation, parser);\n 966           }\n 967   \n 968       }\n",
            "cost": 0.10458,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java:920:13",
            "status": "corpus",
            "valid_path": "NO",
            "id": 153
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n 557       private void updateXMLReaderUtils(Element element) throws TikaException {\n 558   \n 559           Element child = getChild(element, \"xml-reader-utils\");\n 560           if (child == null) {\n 561               return;\n 562           }\n 563   \n 564           if (child.hasAttribute(\"maxEntityExpansions\")) {\n 565               XMLReaderUtils.setMaxEntityExpansions(Integer.parseInt(child.getAttribute(\"maxEntityExpansions\")));\n 566           }\n 567   \n 568           // make sure to call this after set entity expansions\n 569           if (child.hasAttribute(\"poolSize\")) {\n 570               XMLReaderUtils.setPoolSize(Integer.parseInt(child.getAttribute(\"poolSize\")));\n 571           }\n 572   \n 573       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java:\n 830       public static void setPoolSize(int poolSize) throws TikaException {\n 831           //stop the world with a write lock.\n 832           //parsers that are currently in use will be offered later (once the lock is released),\n 833           //but not accepted and will be gc'd.  We have to do this locking and\n 834           //the read locking in case one thread resizes the pool when the\n 835           //parsers have already started.  We could have an NPE on SAX_PARSERS\n 836           //if we didn't lock.\n 837           SAX_READ_WRITE_LOCK.writeLock().lock();\n 838           try {\n 839               //free up any resources before emptying SAX_PARSERS\n 840               for (PoolSAXParser parser : SAX_PARSERS) {\n 841                   parser.reset();\n 842               }\n 843               SAX_PARSERS.clear();\n 844               SAX_PARSERS = new ArrayBlockingQueue<>(poolSize);\n 845               int generation = POOL_GENERATION.incrementAndGet();\n 846               for (int i = 0; i < poolSize; i++) {\n 847                   try {\n 848                       SAX_PARSERS.offer(buildPoolParser(generation,\n 849                               getSAXParserFactory().newSAXParser()));\n 850                   } catch (SAXException | ParserConfigurationException e) {\n 851                       throw new TikaException(\"problem creating sax parser\", e);\n 852                   }\n 853               }\n 854           } finally {\n 855               SAX_READ_WRITE_LOCK.writeLock().unlock();\n 856           }\n 857   \n 858           DOM_READ_WRITE_LOCK.writeLock().lock();\n 859           try {\n 860               DOM_BUILDERS.clear();\n 861               DOM_BUILDERS = new ArrayBlockingQueue<>(poolSize);\n 862               for (int i = 0; i < poolSize; i++) {\n 863                   DOM_BUILDERS.offer(new PoolDOMBuilder(POOL_GENERATION.get(), getDocumentBuilder()));\n 864               }\n 865           } finally {\n 866               DOM_READ_WRITE_LOCK.writeLock().unlock();\n 867           }\n 868           POOL_SIZE = poolSize;\n 869       }\n 907       private static PoolSAXParser buildPoolParser(int generation, SAXParser parser) {\n 908           boolean canReset = false;\n 909           try {\n 910               parser.reset();\n 911               canReset = true;\n 912           } catch (UnsupportedOperationException e) {\n 913               canReset = false;\n 914           }\n 915           boolean hasSecurityManager = false;\n 916           try {\n 917               Object mgr =\n 918                       Class.forName(XERCES_SECURITY_MANAGER).getDeclaredConstructor().newInstance();\n 919               Method setLimit = mgr.getClass().getMethod(\"setEntityExpansionLimit\", Integer.TYPE);\n 920               setLimit.invoke(mgr, MAX_ENTITY_EXPANSIONS);\n 921   \n 922               parser.setProperty(XERCES_SECURITY_MANAGER_PROPERTY, mgr);\n 923               hasSecurityManager = true;\n 924           } catch (SecurityException e) {\n 925               //don't swallow security exceptions\n 926               throw e;\n 927           } catch (ClassNotFoundException e) {\n 928               // continue without log, this is expected in some setups\n 929           } catch (Throwable e) {\n 930               // NOSONAR - also catch things like NoClassDefError here\n 931               // throttle the log somewhat as it can spam the log otherwise\n 932               if (System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {\n 933                   LOG.warn(\"SAX Security Manager could not be setup [log suppressed for 5 minutes]\",\n 934                           e);\n 935                   LAST_LOG = System.currentTimeMillis();\n 936               }\n 937           }\n 938   \n 939           boolean canSetJaxPEntity = false;\n 940           if (!hasSecurityManager) {\n 941               // use the builtin way of setting the property\n 942               try {\n 943                   parser.setProperty(\"http://www.oracle.com/xml/jaxp/properties/entityExpansionLimit\",\n 944                           MAX_ENTITY_EXPANSIONS);\n 945                   canSetJaxPEntity = true;\n 946               } catch (SAXException e) {     // NOSONAR - also catch things like NoClassDefError here\n 947                   // throttle the log somewhat as it can spam the log otherwise\n 948                   if (System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {\n 949                       LOG.warn(\n 950                               \"SAX Security Manager could not be setup [log suppressed for 5 \" +\n 951                                       \"minutes]\",\n 952                               e);\n 953                       LAST_LOG = System.currentTimeMillis();\n 954                   }\n 955               }\n 956           }\n 957   \n 958           if (!canReset && hasSecurityManager) {\n 959               return new XercesPoolSAXParser(generation, parser);\n 960           } else if (canReset && hasSecurityManager) {\n 961               return new Xerces2PoolSAXParser(generation, parser);\n 962           } else if (canReset && !hasSecurityManager && canSetJaxPEntity) {\n 963               return new BuiltInPoolSAXParser(generation, parser);\n 964           } else {\n 965               return new UnrecognizedPoolSAXParser(generation, parser);\n 966           }\n 967   \n 968       }\n",
            "cost": 0.10798,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java:920:29",
            "status": "corpus",
            "valid_path": "NO",
            "id": 154
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n 487       private void dumpConfig(TikaConfigSerializer.Mode mode) throws Exception {\n 488           configure();\n 489           TikaConfig localConfig = (config == null) ? TikaConfig.getDefaultConfig() : config;\n 490   \n 491           TikaConfigSerializer.serialize(localConfig, mode, new OutputStreamWriter(System.out, UTF_8), UTF_8);\n 492       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfigSerializer.java:\n 95       public static void serialize(TikaConfig config, Mode mode, Writer writer, Charset charset)\n 96               throws Exception {\n 97           DocumentBuilder docBuilder = XMLReaderUtils.getDocumentBuilder();\n 98   \n 99           // root elements\n100           Document doc = docBuilder.newDocument();\n101           Element rootElement = doc.createElement(\"properties\");\n102   \n103           doc.appendChild(rootElement);\n104           addMimeComment(mode, rootElement, doc);\n105           addServiceLoader(mode, rootElement, doc, config);\n106           addExecutorService(mode, rootElement, doc, config);\n107           addEncodingDetectors(mode, rootElement, doc, config);\n108           addTranslator(mode, rootElement, doc, config);\n109           addDetectors(mode, rootElement, doc, config);\n110           addParsers(mode, rootElement, doc, config);\n111           // TODO Service Loader section\n112   \n113           // now write\n114           Transformer transformer = XMLReaderUtils.getTransformer();\n115           transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n116           transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"2\");\n117           transformer.setOutputProperty(OutputKeys.ENCODING, charset.name());\n118           DOMSource source = new DOMSource(doc);\n119           StreamResult result = new StreamResult(writer);\n120   \n121           transformer.transform(source, result);\n122       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java:\n 244       public static DocumentBuilderFactory getDocumentBuilderFactory() {\n 245           //borrowed from Apache POI\n 246           DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n 247           if (LOG.isDebugEnabled()) {\n 248               LOG.debug(\"DocumentBuilderFactory class {}\", factory.getClass());\n 249           }\n 250   \n 251           factory.setExpandEntityReferences(false);\n 252           factory.setNamespaceAware(true);\n 253           factory.setValidating(false);\n 254   \n 255           trySetSAXFeature(factory, XMLConstants.FEATURE_SECURE_PROCESSING, true);\n 256           trySetSAXFeature(factory, \"http://xml.org/sax/features/external-general-entities\", false);\n 257           trySetSAXFeature(factory, \"http://xml.org/sax/features/external-parameter-entities\", false);\n 258           trySetSAXFeature(factory, \"http://apache.org/xml/features/nonvalidating/load-external-dtd\",\n 259                   false);\n 260           trySetSAXFeature(factory, \"http://apache.org/xml/features/nonvalidating/load-dtd-grammar\",\n 261                   false);\n 262           trySetXercesSecurityManager(factory);\n 263           return factory;\n 264       }\n 276       public static DocumentBuilder getDocumentBuilder() throws TikaException {\n 277           try {\n 278               DocumentBuilderFactory documentBuilderFactory = getDocumentBuilderFactory();\n 279               DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n 280               documentBuilder.setEntityResolver(IGNORING_SAX_ENTITY_RESOLVER);\n 281               documentBuilder.setErrorHandler(null);\n 282               return documentBuilder;\n 283           } catch (ParserConfigurationException e) {\n 284               throw new TikaException(\"XML parser not available\", e);\n 285           }\n 286       }\n 713       private static void trySetXercesSecurityManager(DocumentBuilderFactory factory) {\n 714           //from POI\n 715           // Try built-in JVM one first, standalone if not\n 716           for (String securityManagerClassName : new String[]{\n 717                   //\"com.sun.org.apache.xerces.internal.util.SecurityManager\",\n 718                   XERCES_SECURITY_MANAGER}) {\n 719               try {\n 720                   Object mgr =\n 721                           Class.forName(securityManagerClassName).getDeclaredConstructor().newInstance();\n 722                   Method setLimit = mgr.getClass().getMethod(\"setEntityExpansionLimit\",\n 723                           Integer.TYPE);\n 724                   setLimit.invoke(mgr, MAX_ENTITY_EXPANSIONS);\n 725                   factory.setAttribute(XERCES_SECURITY_MANAGER_PROPERTY, mgr);\n 726                   // Stop once one can be setup without error\n 727                   return;\n 728               } catch (ClassNotFoundException e) {\n 729                   // continue without log, this is expected in some setups\n 730               } catch (Throwable e) {     // NOSONAR - also catch things like NoClassDefError here\n 731                   // throttle the log somewhat as it can spam the log otherwise\n 732                   if (System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {\n 733                       LOG.warn(\n 734                               \"SAX Security Manager could not be setup [log suppressed for 5 \" +\n 735                                       \"minutes]\",\n 736                               e);\n 737                       LAST_LOG = System.currentTimeMillis();\n 738                   }\n 739               }\n 740           }\n 741   \n 742           // separate old version of Xerces not found => use the builtin way of setting the property\n 743           try {\n 744               factory.setAttribute(\"http://www.oracle.com/xml/jaxp/properties/entityExpansionLimit\",\n 745                       MAX_ENTITY_EXPANSIONS);\n 746           } catch (IllegalArgumentException e) {\n 747               // NOSONAR - also catch things like NoClassDefError here\n 748               // throttle the log somewhat as it can spam the log otherwise\n 749               if (System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {\n 750                   LOG.warn(\"SAX Security Manager could not be setup [log suppressed for 5 minutes]\",\n 751                           e);\n 752                   LAST_LOG = System.currentTimeMillis();\n 753               }\n 754           }\n 755       }\n",
            "cost": 0.08901,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java:724:17",
            "status": "corpus",
            "valid_path": "NO",
            "id": 155
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n 487       private void dumpConfig(TikaConfigSerializer.Mode mode) throws Exception {\n 488           configure();\n 489           TikaConfig localConfig = (config == null) ? TikaConfig.getDefaultConfig() : config;\n 490   \n 491           TikaConfigSerializer.serialize(localConfig, mode, new OutputStreamWriter(System.out, UTF_8), UTF_8);\n 492       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfigSerializer.java:\n 95       public static void serialize(TikaConfig config, Mode mode, Writer writer, Charset charset)\n 96               throws Exception {\n 97           DocumentBuilder docBuilder = XMLReaderUtils.getDocumentBuilder();\n 98   \n 99           // root elements\n100           Document doc = docBuilder.newDocument();\n101           Element rootElement = doc.createElement(\"properties\");\n102   \n103           doc.appendChild(rootElement);\n104           addMimeComment(mode, rootElement, doc);\n105           addServiceLoader(mode, rootElement, doc, config);\n106           addExecutorService(mode, rootElement, doc, config);\n107           addEncodingDetectors(mode, rootElement, doc, config);\n108           addTranslator(mode, rootElement, doc, config);\n109           addDetectors(mode, rootElement, doc, config);\n110           addParsers(mode, rootElement, doc, config);\n111           // TODO Service Loader section\n112   \n113           // now write\n114           Transformer transformer = XMLReaderUtils.getTransformer();\n115           transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n116           transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"2\");\n117           transformer.setOutputProperty(OutputKeys.ENCODING, charset.name());\n118           DOMSource source = new DOMSource(doc);\n119           StreamResult result = new StreamResult(writer);\n120   \n121           transformer.transform(source, result);\n122       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java:\n 244       public static DocumentBuilderFactory getDocumentBuilderFactory() {\n 245           //borrowed from Apache POI\n 246           DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n 247           if (LOG.isDebugEnabled()) {\n 248               LOG.debug(\"DocumentBuilderFactory class {}\", factory.getClass());\n 249           }\n 250   \n 251           factory.setExpandEntityReferences(false);\n 252           factory.setNamespaceAware(true);\n 253           factory.setValidating(false);\n 254   \n 255           trySetSAXFeature(factory, XMLConstants.FEATURE_SECURE_PROCESSING, true);\n 256           trySetSAXFeature(factory, \"http://xml.org/sax/features/external-general-entities\", false);\n 257           trySetSAXFeature(factory, \"http://xml.org/sax/features/external-parameter-entities\", false);\n 258           trySetSAXFeature(factory, \"http://apache.org/xml/features/nonvalidating/load-external-dtd\",\n 259                   false);\n 260           trySetSAXFeature(factory, \"http://apache.org/xml/features/nonvalidating/load-dtd-grammar\",\n 261                   false);\n 262           trySetXercesSecurityManager(factory);\n 263           return factory;\n 264       }\n 276       public static DocumentBuilder getDocumentBuilder() throws TikaException {\n 277           try {\n 278               DocumentBuilderFactory documentBuilderFactory = getDocumentBuilderFactory();\n 279               DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n 280               documentBuilder.setEntityResolver(IGNORING_SAX_ENTITY_RESOLVER);\n 281               documentBuilder.setErrorHandler(null);\n 282               return documentBuilder;\n 283           } catch (ParserConfigurationException e) {\n 284               throw new TikaException(\"XML parser not available\", e);\n 285           }\n 286       }\n 713       private static void trySetXercesSecurityManager(DocumentBuilderFactory factory) {\n 714           //from POI\n 715           // Try built-in JVM one first, standalone if not\n 716           for (String securityManagerClassName : new String[]{\n 717                   //\"com.sun.org.apache.xerces.internal.util.SecurityManager\",\n 718                   XERCES_SECURITY_MANAGER}) {\n 719               try {\n 720                   Object mgr =\n 721                           Class.forName(securityManagerClassName).getDeclaredConstructor().newInstance();\n 722                   Method setLimit = mgr.getClass().getMethod(\"setEntityExpansionLimit\",\n 723                           Integer.TYPE);\n 724                   setLimit.invoke(mgr, MAX_ENTITY_EXPANSIONS);\n 725                   factory.setAttribute(XERCES_SECURITY_MANAGER_PROPERTY, mgr);\n 726                   // Stop once one can be setup without error\n 727                   return;\n 728               } catch (ClassNotFoundException e) {\n 729                   // continue without log, this is expected in some setups\n 730               } catch (Throwable e) {     // NOSONAR - also catch things like NoClassDefError here\n 731                   // throttle the log somewhat as it can spam the log otherwise\n 732                   if (System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {\n 733                       LOG.warn(\n 734                               \"SAX Security Manager could not be setup [log suppressed for 5 \" +\n 735                                       \"minutes]\",\n 736                               e);\n 737                       LAST_LOG = System.currentTimeMillis();\n 738                   }\n 739               }\n 740           }\n 741   \n 742           // separate old version of Xerces not found => use the builtin way of setting the property\n 743           try {\n 744               factory.setAttribute(\"http://www.oracle.com/xml/jaxp/properties/entityExpansionLimit\",\n 745                       MAX_ENTITY_EXPANSIONS);\n 746           } catch (IllegalArgumentException e) {\n 747               // NOSONAR - also catch things like NoClassDefError here\n 748               // throttle the log somewhat as it can spam the log otherwise\n 749               if (System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {\n 750                   LOG.warn(\"SAX Security Manager could not be setup [log suppressed for 5 minutes]\",\n 751                           e);\n 752                   LAST_LOG = System.currentTimeMillis();\n 753               }\n 754           }\n 755       }\n",
            "cost": 0.09126000000000001,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java:724:33",
            "status": "corpus",
            "valid_path": "NO",
            "id": 156
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n 667           @SuppressWarnings(\"unchecked\")\n 668           CT loadOverall(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 669                   throws TikaException, IOException {\n 670               List<T> loaded = new ArrayList<>();\n 671   \n 672               // Find the children of the parent tag, if any\n 673               for (Element le : getTopLevelElementChildren(element, getParentTagName(),\n 674                       getLoaderTagName())) {\n 675                   T loadedChild = loadOne(le, mimeTypes, loader);\n 676                   if (loadedChild != null) {\n 677                       loaded.add(loadedChild);\n 678                   }\n 679               }\n 680   \n 681               // Build the classes, and wrap as needed\n 682               if (loaded.isEmpty()) {\n 683                   // Nothing defined, create a Default\n 684                   return createDefault(mimeTypes, loader);\n 685               } else if (loaded.size() == 1) {\n 686                   T single = loaded.get(0);\n 687                   if (isComposite(single)) {\n 688                       // Single Composite defined, use that\n 689                       return (CT) single;\n 690                   }\n 691               } else if (!supportsComposite()) {\n 692                   // No composite support, just return the first one\n 693                   if (loaded.size() == 1) {\n 694                       return (CT) loaded.get(0);\n 695                   } else if (loaded.size() > 1) {\n 696                       throw new TikaConfigException(\n 697                               \"Composite not supported for \" + getParentTagName() +\n 698                                       \". Must specify only one child!\");\n 699                   } else {\n 700                       //throw exception if empty?\n 701                   }\n 702               }\n 703               // Wrap the defined parsers/detectors up in a Composite\n 704               return createComposite(loaded, mimeTypes, loader);\n 705           }\n 707           T loadOne(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 708                   throws TikaException, IOException {\n 709               String name = element.getAttribute(\"class\");\n 710               if (name == null) {\n 711                   throw new TikaConfigException(\"class attribute must not be null: \" + element);\n 712               }\n 713               String initProbHandler = element.getAttribute(\"initializableProblemHandler\");\n 714               InitializableProblemHandler initializableProblemHandler;\n 715               if (initProbHandler == null || initProbHandler.length() == 0) {\n 716                   initializableProblemHandler = loader.getInitializableProblemHandler();\n 717               } else {\n 718                   initializableProblemHandler = getInitializableProblemHandler(initProbHandler);\n 719               }\n 720   \n 721               T loaded = null;\n 722   \n 723               try {\n 724                   Class<? extends T> loadedClass = loader.getServiceClass(getLoaderClass(), name);\n 725   \n 726                   // Do pre-load checks and short-circuits\n 727                   //TODO : allow duplicate instances with different configurations\n 728                   loaded = preLoadOne(loadedClass, name, mimeTypes);\n 729                   if (loaded != null) {\n 730                       return loaded;\n 731                   }\n 732   \n 733                   // Get any parameters / settings for the parser\n 734                   Map<String, Param> params = null;\n 735                   try {\n 736                       params = getParams(element);\n 737                   } catch (Exception e) {\n 738                       throw new TikaConfigException(e.getMessage(), e);\n 739                   }\n 740   \n 741                   // Is this a composite or decorated class? If so, support recursion\n 742                   if (isComposite(loadedClass)) {\n 743                       // Get the child objects for it\n 744                       List<T> children = new ArrayList<>();\n 745                       NodeList childNodes = element.getElementsByTagName(getLoaderTagName());\n 746                       if (childNodes.getLength() > 0) {\n 747                           for (int i = 0; i < childNodes.getLength(); i++) {\n 748                               T loadedChild =\n 749                                       loadOne((Element) childNodes.item(i), mimeTypes, loader);\n 750                               if (loadedChild != null) {\n 751                                   children.add(loadedChild);\n 752                               }\n 753                           }\n 754                       }\n 755   \n 756                       // Get the list of children to exclude\n 757                       Set<Class<? extends T>> excludeChildren = new HashSet<>();\n 758                       NodeList excludeChildNodes =\n 759                               element.getElementsByTagName(getLoaderTagName() + \"-exclude\");\n 760                       if (excludeChildNodes.getLength() > 0) {\n 761                           for (int i = 0; i < excludeChildNodes.getLength(); i++) {\n 762                               Element excl = (Element) excludeChildNodes.item(i);\n 763                               String exclName = excl.getAttribute(\"class\");\n 764                               try {\n 765                                   excludeChildren\n 766                                           .add(loader.getServiceClass(getLoaderClass(), exclName));\n 767                               } catch (ClassNotFoundException e) {\n 768                                   //TIKA-3268 -- This should stop the world.\n 769                                   throw new TikaConfigException(\n 770                                           \"Class not found in -exclude list: \" + exclName);\n 771                               }\n 772                           }\n 773                       }\n 774   \n 775                       // Create the Composite\n 776                       loaded = createComposite(loadedClass, children, excludeChildren, params,\n 777                               mimeTypes, loader);\n 778   \n 779                       // Default constructor fallback\n 780                       if (loaded == null) {\n 781                           loaded = newInstance(loadedClass);\n 782                       }\n 783                   } else {\n 784                       // Regular class, create as-is\n 785                       loaded = newInstance(loadedClass);\n 786                       // TODO Support arguments, needed for Translators etc\n 787                       // See the thread \"Configuring parsers and translators\" for details\n 788                   }\n 789   \n 790                   //Assigning the params to bean fields/setters\n 791                   AnnotationUtils.assignFieldParams(loaded, params);\n 792                   if (loaded instanceof Initializable) {\n 793                       ((Initializable) loaded).initialize(params);\n 794                       ((Initializable) loaded).checkInitialization(initializableProblemHandler);\n 795                   }\n 796                   // Have any decoration performed, eg explicit mimetypes\n 797                   loaded = decorate(loaded, element);\n 798                   // All done with setup\n 799                   return loaded;\n 800               } catch (ClassNotFoundException e) {\n 801                   if (loader.getLoadErrorHandler() == LoadErrorHandler.THROW) {\n 802                       // Use a different exception signature here\n 803                       throw new TikaConfigException(\n 804                               \"Unable to find a \" + getLoaderTagName() + \" class: \" + name, e);\n 805                   }\n 806                   // Report the problem\n 807                   loader.getLoadErrorHandler().handleLoadError(name, e);\n 808                   return null;\n 809               } catch (IllegalAccessException e) {\n 810                   throw new TikaException(\n 811                           \"Unable to access a \" + getLoaderTagName() + \" class: \" + name, e);\n 812               } catch (InvocationTargetException e) {\n 813                   throw new TikaException(\n 814                           \"Unable to create a \" + getLoaderTagName() + \" class: \" + name, e);\n 815               } catch (InstantiationException e) {\n 816                   throw new TikaException(\n 817                           \"Unable to instantiate a \" + getLoaderTagName() + \" class: \" + name, e);\n 818               } catch (NoSuchMethodException e) {\n 819                   throw new TikaException(\n 820                           \"Unable to find the right constructor for \" + getLoaderTagName() +\n 821                                   \" class: \" + name, e);\n 822               }\n 823           }\n 838           Map<String, Param> getParams(Element el) throws TikaException {\n 839               Map<String, Param> params = new HashMap<>();\n 840               for (Node child = el.getFirstChild(); child != null; child = child.getNextSibling()) {\n 841                   if (PARAMS_TAG_NAME.equals(child.getNodeName())) { //found the node\n 842                       if (child.hasChildNodes()) { //it has children\n 843                           NodeList childNodes = child.getChildNodes();\n 844                           for (int i = 0; i < childNodes.getLength(); i++) {\n 845                               Node item = childNodes.item(i);\n 846                               if (item.getNodeType() == Node.ELEMENT_NODE) {\n 847                                   Param<?> param = Param.load(item);\n 848                                   params.put(param.getName(), param);\n 849                               }\n 850                           }\n 851                       }\n 852                       break; //only the first one is used\n 853                   }\n 854               }\n 855               return params;\n 856           }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/Param.java:\n127       public static <T> Param<T> load(Node node) throws TikaConfigException {\n128   \n129           Node nameAttr = node.getAttributes().getNamedItem(\"name\");\n130           Node typeAttr = node.getAttributes().getNamedItem(\"type\");\n131           Node valueAttr = node.getAttributes().getNamedItem(\"value\");\n132           Node classAttr = node.getAttributes().getNamedItem(\"class\");\n133           Class clazz = null;\n134           if (classAttr != null) {\n135               try {\n136                   clazz = Class.forName(classAttr.getTextContent());\n137               } catch (ClassNotFoundException e) {\n138                   throw new TikaConfigException(\"can't find class: \" + classAttr.getTextContent(), e);\n139               }\n140           }\n141           Node value = node.getFirstChild();\n142           if (value instanceof NodeList && valueAttr != null) {\n143               throw new TikaConfigException(\"can't specify a value attr _and_ a node list\");\n144           }\n145           if (valueAttr != null && (value == null || value.getTextContent() == null)) {\n146               value = valueAttr;\n147           }\n148   \n149           Param<T> ret = new Param<>();\n150           ret.name = nameAttr.getTextContent();\n151           if (typeAttr != null) {\n152               String type = typeAttr.getTextContent();\n153               if (\"class\".equals(type)) {\n154                   if (classAttr == null) {\n155                       throw new TikaConfigException(\"must specify a class attribute if \" +\n156                               \"type=\\\"class\\\"\");\n157                   }\n158                   ret.setType(clazz);\n159               } else {\n160                   ret.setTypeString(typeAttr.getTextContent());\n161               }\n162           } else {\n163               ret.type = (Class<T>) wellKnownMap.get(ret.name);\n164               if (ret.type == null) {\n165                   ret.type = clazz;\n166               }\n167               if (ret.type == null) {\n168                   throw new TikaConfigException(\"Must specify a \\\"type\\\" in: \" + node.getLocalName());\n169               }\n170           }\n171   \n172           if (clazz != null) {\n173               loadObject(ret, node, clazz);\n174           } else if (List.class.isAssignableFrom(ret.type)) {\n175               loadList(ret, node);\n176           } else if (Map.class.isAssignableFrom(ret.type)) {\n177               loadMap(ret, node);\n178           } else {\n179               //allow the empty string\n180               String textContent = \"\";\n181               if (value != null) {\n182                   textContent = value.getTextContent();\n183               }\n184               ret.actualValue = getTypedValue(ret.type, textContent);\n185               ret.valueStrings.add(textContent);\n186           }\n187           return ret;\n188       }\n189       private static <T> void loadObject(Param<T> ret, Node root, Class clazz) throws TikaConfigException {\n190   \n191           try {\n192               ret.actualValue = (T)clazz.getDeclaredConstructor().newInstance();\n193           } catch (InstantiationException | IllegalAccessException | NoSuchMethodException |\n194                    InvocationTargetException e) {\n195               throw new TikaConfigException(\"can't build class: \" + clazz, e);\n196           }\n197   \n198           NodeList nodeList = root.getChildNodes();\n199           for (int i = 0; i < nodeList.getLength(); i++) {\n200               Node n = nodeList.item(i);\n201               if (\"params\".equals(n.getLocalName())) {\n202                   NodeList params = n.getChildNodes();\n203                   for (int j = 0; j < params.getLength(); j++) {\n204                       if (\"param\".equals(params.item(j).getLocalName())) {\n205                           Param param = load(params.item(j));\n206   \n207                           Method method = null;\n208                           String methodName = \"set\" +\n209                                   param.getName().substring(0,1).toUpperCase(Locale.US) +\n210                                   param.getName().substring(1);\n211                           try {\n212                               method = ret.actualValue.getClass().getMethod(methodName,\n213                                       param.getType());\n214                           } catch (NoSuchMethodException e) {\n215                               throw new TikaConfigException(\"can't find method: \" + methodName, e);\n216                           }\n217                           try {\n218                               method.invoke(ret.actualValue, param.getValue());\n219                           } catch (IllegalAccessException | InvocationTargetException e) {\n220                               throw new TikaConfigException(\"can't set param value: \" + param.getName(), e);\n221                           }\n222                       }\n223                   }\n224               }\n225           }\n226       }\n",
            "cost": 0.13963,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/Param.java:218:29",
            "status": "corpus",
            "valid_path": "NO",
            "id": 157
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n 667           @SuppressWarnings(\"unchecked\")\n 668           CT loadOverall(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 669                   throws TikaException, IOException {\n 670               List<T> loaded = new ArrayList<>();\n 671   \n 672               // Find the children of the parent tag, if any\n 673               for (Element le : getTopLevelElementChildren(element, getParentTagName(),\n 674                       getLoaderTagName())) {\n 675                   T loadedChild = loadOne(le, mimeTypes, loader);\n 676                   if (loadedChild != null) {\n 677                       loaded.add(loadedChild);\n 678                   }\n 679               }\n 680   \n 681               // Build the classes, and wrap as needed\n 682               if (loaded.isEmpty()) {\n 683                   // Nothing defined, create a Default\n 684                   return createDefault(mimeTypes, loader);\n 685               } else if (loaded.size() == 1) {\n 686                   T single = loaded.get(0);\n 687                   if (isComposite(single)) {\n 688                       // Single Composite defined, use that\n 689                       return (CT) single;\n 690                   }\n 691               } else if (!supportsComposite()) {\n 692                   // No composite support, just return the first one\n 693                   if (loaded.size() == 1) {\n 694                       return (CT) loaded.get(0);\n 695                   } else if (loaded.size() > 1) {\n 696                       throw new TikaConfigException(\n 697                               \"Composite not supported for \" + getParentTagName() +\n 698                                       \". Must specify only one child!\");\n 699                   } else {\n 700                       //throw exception if empty?\n 701                   }\n 702               }\n 703               // Wrap the defined parsers/detectors up in a Composite\n 704               return createComposite(loaded, mimeTypes, loader);\n 705           }\n 707           T loadOne(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 708                   throws TikaException, IOException {\n 709               String name = element.getAttribute(\"class\");\n 710               if (name == null) {\n 711                   throw new TikaConfigException(\"class attribute must not be null: \" + element);\n 712               }\n 713               String initProbHandler = element.getAttribute(\"initializableProblemHandler\");\n 714               InitializableProblemHandler initializableProblemHandler;\n 715               if (initProbHandler == null || initProbHandler.length() == 0) {\n 716                   initializableProblemHandler = loader.getInitializableProblemHandler();\n 717               } else {\n 718                   initializableProblemHandler = getInitializableProblemHandler(initProbHandler);\n 719               }\n 720   \n 721               T loaded = null;\n 722   \n 723               try {\n 724                   Class<? extends T> loadedClass = loader.getServiceClass(getLoaderClass(), name);\n 725   \n 726                   // Do pre-load checks and short-circuits\n 727                   //TODO : allow duplicate instances with different configurations\n 728                   loaded = preLoadOne(loadedClass, name, mimeTypes);\n 729                   if (loaded != null) {\n 730                       return loaded;\n 731                   }\n 732   \n 733                   // Get any parameters / settings for the parser\n 734                   Map<String, Param> params = null;\n 735                   try {\n 736                       params = getParams(element);\n 737                   } catch (Exception e) {\n 738                       throw new TikaConfigException(e.getMessage(), e);\n 739                   }\n 740   \n 741                   // Is this a composite or decorated class? If so, support recursion\n 742                   if (isComposite(loadedClass)) {\n 743                       // Get the child objects for it\n 744                       List<T> children = new ArrayList<>();\n 745                       NodeList childNodes = element.getElementsByTagName(getLoaderTagName());\n 746                       if (childNodes.getLength() > 0) {\n 747                           for (int i = 0; i < childNodes.getLength(); i++) {\n 748                               T loadedChild =\n 749                                       loadOne((Element) childNodes.item(i), mimeTypes, loader);\n 750                               if (loadedChild != null) {\n 751                                   children.add(loadedChild);\n 752                               }\n 753                           }\n 754                       }\n 755   \n 756                       // Get the list of children to exclude\n 757                       Set<Class<? extends T>> excludeChildren = new HashSet<>();\n 758                       NodeList excludeChildNodes =\n 759                               element.getElementsByTagName(getLoaderTagName() + \"-exclude\");\n 760                       if (excludeChildNodes.getLength() > 0) {\n 761                           for (int i = 0; i < excludeChildNodes.getLength(); i++) {\n 762                               Element excl = (Element) excludeChildNodes.item(i);\n 763                               String exclName = excl.getAttribute(\"class\");\n 764                               try {\n 765                                   excludeChildren\n 766                                           .add(loader.getServiceClass(getLoaderClass(), exclName));\n 767                               } catch (ClassNotFoundException e) {\n 768                                   //TIKA-3268 -- This should stop the world.\n 769                                   throw new TikaConfigException(\n 770                                           \"Class not found in -exclude list: \" + exclName);\n 771                               }\n 772                           }\n 773                       }\n 774   \n 775                       // Create the Composite\n 776                       loaded = createComposite(loadedClass, children, excludeChildren, params,\n 777                               mimeTypes, loader);\n 778   \n 779                       // Default constructor fallback\n 780                       if (loaded == null) {\n 781                           loaded = newInstance(loadedClass);\n 782                       }\n 783                   } else {\n 784                       // Regular class, create as-is\n 785                       loaded = newInstance(loadedClass);\n 786                       // TODO Support arguments, needed for Translators etc\n 787                       // See the thread \"Configuring parsers and translators\" for details\n 788                   }\n 789   \n 790                   //Assigning the params to bean fields/setters\n 791                   AnnotationUtils.assignFieldParams(loaded, params);\n 792                   if (loaded instanceof Initializable) {\n 793                       ((Initializable) loaded).initialize(params);\n 794                       ((Initializable) loaded).checkInitialization(initializableProblemHandler);\n 795                   }\n 796                   // Have any decoration performed, eg explicit mimetypes\n 797                   loaded = decorate(loaded, element);\n 798                   // All done with setup\n 799                   return loaded;\n 800               } catch (ClassNotFoundException e) {\n 801                   if (loader.getLoadErrorHandler() == LoadErrorHandler.THROW) {\n 802                       // Use a different exception signature here\n 803                       throw new TikaConfigException(\n 804                               \"Unable to find a \" + getLoaderTagName() + \" class: \" + name, e);\n 805                   }\n 806                   // Report the problem\n 807                   loader.getLoadErrorHandler().handleLoadError(name, e);\n 808                   return null;\n 809               } catch (IllegalAccessException e) {\n 810                   throw new TikaException(\n 811                           \"Unable to access a \" + getLoaderTagName() + \" class: \" + name, e);\n 812               } catch (InvocationTargetException e) {\n 813                   throw new TikaException(\n 814                           \"Unable to create a \" + getLoaderTagName() + \" class: \" + name, e);\n 815               } catch (InstantiationException e) {\n 816                   throw new TikaException(\n 817                           \"Unable to instantiate a \" + getLoaderTagName() + \" class: \" + name, e);\n 818               } catch (NoSuchMethodException e) {\n 819                   throw new TikaException(\n 820                           \"Unable to find the right constructor for \" + getLoaderTagName() +\n 821                                   \" class: \" + name, e);\n 822               }\n 823           }\n 838           Map<String, Param> getParams(Element el) throws TikaException {\n 839               Map<String, Param> params = new HashMap<>();\n 840               for (Node child = el.getFirstChild(); child != null; child = child.getNextSibling()) {\n 841                   if (PARAMS_TAG_NAME.equals(child.getNodeName())) { //found the node\n 842                       if (child.hasChildNodes()) { //it has children\n 843                           NodeList childNodes = child.getChildNodes();\n 844                           for (int i = 0; i < childNodes.getLength(); i++) {\n 845                               Node item = childNodes.item(i);\n 846                               if (item.getNodeType() == Node.ELEMENT_NODE) {\n 847                                   Param<?> param = Param.load(item);\n 848                                   params.put(param.getName(), param);\n 849                               }\n 850                           }\n 851                       }\n 852                       break; //only the first one is used\n 853                   }\n 854               }\n 855               return params;\n 856           }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/Param.java:\n127       public static <T> Param<T> load(Node node) throws TikaConfigException {\n128   \n129           Node nameAttr = node.getAttributes().getNamedItem(\"name\");\n130           Node typeAttr = node.getAttributes().getNamedItem(\"type\");\n131           Node valueAttr = node.getAttributes().getNamedItem(\"value\");\n132           Node classAttr = node.getAttributes().getNamedItem(\"class\");\n133           Class clazz = null;\n134           if (classAttr != null) {\n135               try {\n136                   clazz = Class.forName(classAttr.getTextContent());\n137               } catch (ClassNotFoundException e) {\n138                   throw new TikaConfigException(\"can't find class: \" + classAttr.getTextContent(), e);\n139               }\n140           }\n141           Node value = node.getFirstChild();\n142           if (value instanceof NodeList && valueAttr != null) {\n143               throw new TikaConfigException(\"can't specify a value attr _and_ a node list\");\n144           }\n145           if (valueAttr != null && (value == null || value.getTextContent() == null)) {\n146               value = valueAttr;\n147           }\n148   \n149           Param<T> ret = new Param<>();\n150           ret.name = nameAttr.getTextContent();\n151           if (typeAttr != null) {\n152               String type = typeAttr.getTextContent();\n153               if (\"class\".equals(type)) {\n154                   if (classAttr == null) {\n155                       throw new TikaConfigException(\"must specify a class attribute if \" +\n156                               \"type=\\\"class\\\"\");\n157                   }\n158                   ret.setType(clazz);\n159               } else {\n160                   ret.setTypeString(typeAttr.getTextContent());\n161               }\n162           } else {\n163               ret.type = (Class<T>) wellKnownMap.get(ret.name);\n164               if (ret.type == null) {\n165                   ret.type = clazz;\n166               }\n167               if (ret.type == null) {\n168                   throw new TikaConfigException(\"Must specify a \\\"type\\\" in: \" + node.getLocalName());\n169               }\n170           }\n171   \n172           if (clazz != null) {\n173               loadObject(ret, node, clazz);\n174           } else if (List.class.isAssignableFrom(ret.type)) {\n175               loadList(ret, node);\n176           } else if (Map.class.isAssignableFrom(ret.type)) {\n177               loadMap(ret, node);\n178           } else {\n179               //allow the empty string\n180               String textContent = \"\";\n181               if (value != null) {\n182                   textContent = value.getTextContent();\n183               }\n184               ret.actualValue = getTypedValue(ret.type, textContent);\n185               ret.valueStrings.add(textContent);\n186           }\n187           return ret;\n188       }\n189       private static <T> void loadObject(Param<T> ret, Node root, Class clazz) throws TikaConfigException {\n190   \n191           try {\n192               ret.actualValue = (T)clazz.getDeclaredConstructor().newInstance();\n193           } catch (InstantiationException | IllegalAccessException | NoSuchMethodException |\n194                    InvocationTargetException e) {\n195               throw new TikaConfigException(\"can't build class: \" + clazz, e);\n196           }\n197   \n198           NodeList nodeList = root.getChildNodes();\n199           for (int i = 0; i < nodeList.getLength(); i++) {\n200               Node n = nodeList.item(i);\n201               if (\"params\".equals(n.getLocalName())) {\n202                   NodeList params = n.getChildNodes();\n203                   for (int j = 0; j < params.getLength(); j++) {\n204                       if (\"param\".equals(params.item(j).getLocalName())) {\n205                           Param param = load(params.item(j));\n206   \n207                           Method method = null;\n208                           String methodName = \"set\" +\n209                                   param.getName().substring(0,1).toUpperCase(Locale.US) +\n210                                   param.getName().substring(1);\n211                           try {\n212                               method = ret.actualValue.getClass().getMethod(methodName,\n213                                       param.getType());\n214                           } catch (NoSuchMethodException e) {\n215                               throw new TikaConfigException(\"can't find method: \" + methodName, e);\n216                           }\n217                           try {\n218                               method.invoke(ret.actualValue, param.getValue());\n219                           } catch (IllegalAccessException | InvocationTargetException e) {\n220                               throw new TikaConfigException(\"can't set param value: \" + param.getName(), e);\n221                           }\n222                       }\n223                   }\n224               }\n225           }\n226       }\n",
            "cost": 0.13293,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/Param.java:218:43",
            "status": "corpus",
            "valid_path": "NO",
            "id": 158
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n 487       private void dumpConfig(TikaConfigSerializer.Mode mode) throws Exception {\n 488           configure();\n 489           TikaConfig localConfig = (config == null) ? TikaConfig.getDefaultConfig() : config;\n 490   \n 491           TikaConfigSerializer.serialize(localConfig, mode, new OutputStreamWriter(System.out, UTF_8), UTF_8);\n 492       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfigSerializer.java:\n 95       public static void serialize(TikaConfig config, Mode mode, Writer writer, Charset charset)\n 96               throws Exception {\n 97           DocumentBuilder docBuilder = XMLReaderUtils.getDocumentBuilder();\n 98   \n 99           // root elements\n100           Document doc = docBuilder.newDocument();\n101           Element rootElement = doc.createElement(\"properties\");\n102   \n103           doc.appendChild(rootElement);\n104           addMimeComment(mode, rootElement, doc);\n105           addServiceLoader(mode, rootElement, doc, config);\n106           addExecutorService(mode, rootElement, doc, config);\n107           addEncodingDetectors(mode, rootElement, doc, config);\n108           addTranslator(mode, rootElement, doc, config);\n109           addDetectors(mode, rootElement, doc, config);\n110           addParsers(mode, rootElement, doc, config);\n111           // TODO Service Loader section\n112   \n113           // now write\n114           Transformer transformer = XMLReaderUtils.getTransformer();\n115           transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n116           transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"2\");\n117           transformer.setOutputProperty(OutputKeys.ENCODING, charset.name());\n118           DOMSource source = new DOMSource(doc);\n119           StreamResult result = new StreamResult(writer);\n120   \n121           transformer.transform(source, result);\n122       }\n181       private static void addEncodingDetectors(Mode mode, Element rootElement, Document doc,\n182                                                TikaConfig config) throws Exception {\n183           EncodingDetector encDetector = config.getEncodingDetector();\n184   \n185           if (mode == Mode.MINIMAL && encDetector instanceof DefaultEncodingDetector) {\n186               // Don't output anything, all using defaults\n187               Node detComment = doc.createComment(\n188                       \"for example: <encodingDetectors><encodingDetector class=\\\"\" +\n189                               \"org.apache.tika.detect.DefaultEncodingDetector\\\">\" +\n190                               \"</encodingDetectors>\");\n191               rootElement.appendChild(detComment);\n192               return;\n193           }\n194   \n195           Element encDetectorsElement = doc.createElement(\"encodingDetectors\");\n196           if (mode == Mode.CURRENT && encDetector instanceof DefaultEncodingDetector ||\n197                   !(encDetector instanceof CompositeEncodingDetector)) {\n198               Element encDetectorElement = doc.createElement(\"encodingDetector\");\n199               encDetectorElement.setAttribute(\"class\", encDetector.getClass().getCanonicalName());\n200               encDetectorsElement.appendChild(encDetectorElement);\n201           } else {\n202               List<EncodingDetector> children =\n203                       ((CompositeEncodingDetector) encDetector).getDetectors();\n204               for (EncodingDetector d : children) {\n205                   Element encDetectorElement = doc.createElement(\"encodingDetector\");\n206                   encDetectorElement.setAttribute(\"class\", d.getClass().getCanonicalName());\n207                   serializeParams(doc, encDetectorElement, d);\n208   \n209                   encDetectorsElement.appendChild(encDetectorElement);\n210               }\n211           }\n212           rootElement.appendChild(encDetectorsElement);\n213       }\n342       public static void serializeParams(Document doc, Element element, Object object) {\n343           Matcher setterMatcher = Pattern.compile(\"\\\\Aset([A-Z].*)\").matcher(\"\");\n344           Matcher getterMatcher = Pattern.compile(\"\\\\A(?:get|is)([A-Z].+)\\\\Z\").matcher(\"\");\n345   \n346           //TODO -- check code base for setters with lowercase initial letters?!\n347           MethodTuples nonPrimitiveSetters = new MethodTuples();\n348           MethodTuples primitiveSetters = new MethodTuples();\n349           MethodTuples nonPrimitiveGetters = new MethodTuples();\n350           MethodTuples primitiveGetters = new MethodTuples();\n351           for (Method method : object.getClass().getMethods()) {\n352               Class[] parameterTypes = method.getParameterTypes();\n353   \n354               if (setterMatcher.reset(method.getName()).find()) {\n355                   if (!Modifier.isPublic(method.getModifiers())) {\n356                       //we could just call getMethods, but this can be helpful debugging inf\n357                       LOG.trace(\"inaccessible setter: {} in {}\", method.getName(), object.getClass());\n358                       continue;\n359                   }\n360                   //require @Field on setters\n361                   if (method.getAnnotation(Field.class) == null) {\n362                      // LOG.warn(\"unannotated setter {} in {}\", method.getName(), object.getClass());\n363                       continue;\n364                   }\n365                   if (parameterTypes.length != 1) {\n366                       //TODO -- check code base for setX() zero parameters that set boolean to true\n367                       LOG.warn(\"setter with wrong number of params \" + method.getName() + \" \" + parameterTypes.length);\n368                       continue;\n369                   }\n370                   String paramName = methodToParamName(setterMatcher.group(1));\n371                   if (PRIMITIVES.containsKey(parameterTypes[0])) {\n372                       primitiveSetters.add(new MethodTuple(paramName, method, parameterTypes[0]));\n373                   } else {\n374                       nonPrimitiveSetters.add(new MethodTuple(paramName, method, parameterTypes[0]));\n375                   }\n376               } else if (getterMatcher.reset(method.getName()).find()) {\n377                   if (parameterTypes.length != 0) {\n378                       //require 0 parameters for the getter\n379                       continue;\n380                   }\n381                   String paramName = methodToParamName(getterMatcher.group(1));\n382                   if (PRIMITIVES.containsKey(method.getReturnType())) {\n383                       primitiveGetters.add(new MethodTuple(paramName, method, method.getReturnType()));\n384                   } else {\n385                       nonPrimitiveGetters.add(new MethodTuple(paramName, method, method.getReturnType()));\n386                   }\n387   \n388               }\n389           }\n390   \n391           //TODO -- remove nonprimitive setters/getters that have a string equivalent\n392           serializePrimitives(doc, element, object, primitiveSetters, primitiveGetters);\n393           serializeNonPrimitives(doc, element, object, nonPrimitiveSetters, nonPrimitiveGetters);\n394   \n395       }\n454       private static void serializePrimitives(Document doc, Element root,\n455                                               Object object,\n456                                               MethodTuples setterTuples, MethodTuples getterTuples) {\n457   \n458           Element paramsElement = null;\n459           if (object instanceof AbstractMultipleParser) {\n460               paramsElement = doc.createElement(\"params\");\n461               Element paramElement = doc.createElement(\"param\");\n462               paramElement.setAttribute(\"name\", \"metadataPolicy\");\n463               paramElement.setAttribute(\"value\",\n464                       ((AbstractMultipleParser) object).getMetadataPolicy().toString());\n465               paramsElement.appendChild(paramElement);\n466               root.appendChild(paramsElement);\n467           }\n468           for (Map.Entry<String, Set<MethodTuple>> e : setterTuples.tuples.entrySet()) {\n469               if (!getterTuples.tuples.containsKey(e.getKey())) {\n470                   LOG.info(\"no getter for setter: {} in {}\", e.getKey(), object.getClass());\n471                   continue;\n472               }\n473               Set<MethodTuple> getters = getterTuples.tuples.get(e.getKey());\n474               Set<MethodTuple> setters = e.getValue();\n475               MethodTuple getterTuple = null;\n476               for (MethodTuple getterCandidate : getters) {\n477                   for (MethodTuple setter : setters) {\n478                       if (getterCandidate.singleParam.equals(setter.singleParam)) {\n479                           getterTuple = getterCandidate;\n480                           break;\n481                       }\n482                   }\n483               }\n484   \n485               if (getterTuple == null) {\n486                   LOG.debug(\"Could not find getter to match setter for: {}\", e.getKey());\n487                   continue;\n488               }\n489               Object value = null;\n490               try {\n491                   value = getterTuple.method.invoke(object);\n492               } catch (IllegalAccessException ex) {\n493                   LOG.error(\"couldn't invoke \" + getterTuple, ex);\n494                   continue;\n495               } catch (InvocationTargetException ex) {\n496                   LOG.error(\"couldn't invoke \" + getterTuple, ex);\n497                   continue;\n498               }\n499               if (value == null) {\n500                   LOG.debug(\"null value: {} in {}\", getterTuple.name, object.getClass());\n501               }\n502               String valString = (value == null) ? \"\" : value.toString();\n503               Element param = doc.createElement(\"param\");\n504               param.setAttribute(\"name\", getterTuple.name);\n505               param.setAttribute(\"type\", PRIMITIVES.get(getterTuple.singleParam));\n506               if (List.class.isAssignableFrom(getterTuple.singleParam)) {\n507                   //this outputs even empty list elements, which I think is good.\n508                   addList(param, doc, getterTuple, (List<String>) value);\n509               } else if (Map.class.isAssignableFrom(getterTuple.singleParam)) {\n510                   //this outputs even empty lists, which I think is good.\n511                   addMap(param, doc, getterTuple, (Map<String, String>) value);\n512               } else {\n513                   param.setTextContent(valString);\n514               }\n515               if (paramsElement == null) {\n516                   paramsElement = doc.createElement(\"params\");\n517                   root.appendChild(paramsElement);\n518               }\n519               paramsElement.appendChild(param);\n520           }\n521       }\n",
            "cost": 0.10838,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfigSerializer.java:491:25",
            "status": "corpus",
            "valid_path": "NO",
            "id": 159
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n 487       private void dumpConfig(TikaConfigSerializer.Mode mode) throws Exception {\n 488           configure();\n 489           TikaConfig localConfig = (config == null) ? TikaConfig.getDefaultConfig() : config;\n 490   \n 491           TikaConfigSerializer.serialize(localConfig, mode, new OutputStreamWriter(System.out, UTF_8), UTF_8);\n 492       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfigSerializer.java:\n 95       public static void serialize(TikaConfig config, Mode mode, Writer writer, Charset charset)\n 96               throws Exception {\n 97           DocumentBuilder docBuilder = XMLReaderUtils.getDocumentBuilder();\n 98   \n 99           // root elements\n100           Document doc = docBuilder.newDocument();\n101           Element rootElement = doc.createElement(\"properties\");\n102   \n103           doc.appendChild(rootElement);\n104           addMimeComment(mode, rootElement, doc);\n105           addServiceLoader(mode, rootElement, doc, config);\n106           addExecutorService(mode, rootElement, doc, config);\n107           addEncodingDetectors(mode, rootElement, doc, config);\n108           addTranslator(mode, rootElement, doc, config);\n109           addDetectors(mode, rootElement, doc, config);\n110           addParsers(mode, rootElement, doc, config);\n111           // TODO Service Loader section\n112   \n113           // now write\n114           Transformer transformer = XMLReaderUtils.getTransformer();\n115           transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n116           transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"2\");\n117           transformer.setOutputProperty(OutputKeys.ENCODING, charset.name());\n118           DOMSource source = new DOMSource(doc);\n119           StreamResult result = new StreamResult(writer);\n120   \n121           transformer.transform(source, result);\n122       }\n181       private static void addEncodingDetectors(Mode mode, Element rootElement, Document doc,\n182                                                TikaConfig config) throws Exception {\n183           EncodingDetector encDetector = config.getEncodingDetector();\n184   \n185           if (mode == Mode.MINIMAL && encDetector instanceof DefaultEncodingDetector) {\n186               // Don't output anything, all using defaults\n187               Node detComment = doc.createComment(\n188                       \"for example: <encodingDetectors><encodingDetector class=\\\"\" +\n189                               \"org.apache.tika.detect.DefaultEncodingDetector\\\">\" +\n190                               \"</encodingDetectors>\");\n191               rootElement.appendChild(detComment);\n192               return;\n193           }\n194   \n195           Element encDetectorsElement = doc.createElement(\"encodingDetectors\");\n196           if (mode == Mode.CURRENT && encDetector instanceof DefaultEncodingDetector ||\n197                   !(encDetector instanceof CompositeEncodingDetector)) {\n198               Element encDetectorElement = doc.createElement(\"encodingDetector\");\n199               encDetectorElement.setAttribute(\"class\", encDetector.getClass().getCanonicalName());\n200               encDetectorsElement.appendChild(encDetectorElement);\n201           } else {\n202               List<EncodingDetector> children =\n203                       ((CompositeEncodingDetector) encDetector).getDetectors();\n204               for (EncodingDetector d : children) {\n205                   Element encDetectorElement = doc.createElement(\"encodingDetector\");\n206                   encDetectorElement.setAttribute(\"class\", d.getClass().getCanonicalName());\n207                   serializeParams(doc, encDetectorElement, d);\n208   \n209                   encDetectorsElement.appendChild(encDetectorElement);\n210               }\n211           }\n212           rootElement.appendChild(encDetectorsElement);\n213       }\n342       public static void serializeParams(Document doc, Element element, Object object) {\n343           Matcher setterMatcher = Pattern.compile(\"\\\\Aset([A-Z].*)\").matcher(\"\");\n344           Matcher getterMatcher = Pattern.compile(\"\\\\A(?:get|is)([A-Z].+)\\\\Z\").matcher(\"\");\n345   \n346           //TODO -- check code base for setters with lowercase initial letters?!\n347           MethodTuples nonPrimitiveSetters = new MethodTuples();\n348           MethodTuples primitiveSetters = new MethodTuples();\n349           MethodTuples nonPrimitiveGetters = new MethodTuples();\n350           MethodTuples primitiveGetters = new MethodTuples();\n351           for (Method method : object.getClass().getMethods()) {\n352               Class[] parameterTypes = method.getParameterTypes();\n353   \n354               if (setterMatcher.reset(method.getName()).find()) {\n355                   if (!Modifier.isPublic(method.getModifiers())) {\n356                       //we could just call getMethods, but this can be helpful debugging inf\n357                       LOG.trace(\"inaccessible setter: {} in {}\", method.getName(), object.getClass());\n358                       continue;\n359                   }\n360                   //require @Field on setters\n361                   if (method.getAnnotation(Field.class) == null) {\n362                      // LOG.warn(\"unannotated setter {} in {}\", method.getName(), object.getClass());\n363                       continue;\n364                   }\n365                   if (parameterTypes.length != 1) {\n366                       //TODO -- check code base for setX() zero parameters that set boolean to true\n367                       LOG.warn(\"setter with wrong number of params \" + method.getName() + \" \" + parameterTypes.length);\n368                       continue;\n369                   }\n370                   String paramName = methodToParamName(setterMatcher.group(1));\n371                   if (PRIMITIVES.containsKey(parameterTypes[0])) {\n372                       primitiveSetters.add(new MethodTuple(paramName, method, parameterTypes[0]));\n373                   } else {\n374                       nonPrimitiveSetters.add(new MethodTuple(paramName, method, parameterTypes[0]));\n375                   }\n376               } else if (getterMatcher.reset(method.getName()).find()) {\n377                   if (parameterTypes.length != 0) {\n378                       //require 0 parameters for the getter\n379                       continue;\n380                   }\n381                   String paramName = methodToParamName(getterMatcher.group(1));\n382                   if (PRIMITIVES.containsKey(method.getReturnType())) {\n383                       primitiveGetters.add(new MethodTuple(paramName, method, method.getReturnType()));\n384                   } else {\n385                       nonPrimitiveGetters.add(new MethodTuple(paramName, method, method.getReturnType()));\n386                   }\n387   \n388               }\n389           }\n390   \n391           //TODO -- remove nonprimitive setters/getters that have a string equivalent\n392           serializePrimitives(doc, element, object, primitiveSetters, primitiveGetters);\n393           serializeNonPrimitives(doc, element, object, nonPrimitiveSetters, nonPrimitiveGetters);\n394   \n395       }\n454       private static void serializePrimitives(Document doc, Element root,\n455                                               Object object,\n456                                               MethodTuples setterTuples, MethodTuples getterTuples) {\n457   \n458           Element paramsElement = null;\n459           if (object instanceof AbstractMultipleParser) {\n460               paramsElement = doc.createElement(\"params\");\n461               Element paramElement = doc.createElement(\"param\");\n462               paramElement.setAttribute(\"name\", \"metadataPolicy\");\n463               paramElement.setAttribute(\"value\",\n464                       ((AbstractMultipleParser) object).getMetadataPolicy().toString());\n465               paramsElement.appendChild(paramElement);\n466               root.appendChild(paramsElement);\n467           }\n468           for (Map.Entry<String, Set<MethodTuple>> e : setterTuples.tuples.entrySet()) {\n469               if (!getterTuples.tuples.containsKey(e.getKey())) {\n470                   LOG.info(\"no getter for setter: {} in {}\", e.getKey(), object.getClass());\n471                   continue;\n472               }\n473               Set<MethodTuple> getters = getterTuples.tuples.get(e.getKey());\n474               Set<MethodTuple> setters = e.getValue();\n475               MethodTuple getterTuple = null;\n476               for (MethodTuple getterCandidate : getters) {\n477                   for (MethodTuple setter : setters) {\n478                       if (getterCandidate.singleParam.equals(setter.singleParam)) {\n479                           getterTuple = getterCandidate;\n480                           break;\n481                       }\n482                   }\n483               }\n484   \n485               if (getterTuple == null) {\n486                   LOG.debug(\"Could not find getter to match setter for: {}\", e.getKey());\n487                   continue;\n488               }\n489               Object value = null;\n490               try {\n491                   value = getterTuple.method.invoke(object);\n492               } catch (IllegalAccessException ex) {\n493                   LOG.error(\"couldn't invoke \" + getterTuple, ex);\n494                   continue;\n495               } catch (InvocationTargetException ex) {\n496                   LOG.error(\"couldn't invoke \" + getterTuple, ex);\n497                   continue;\n498               }\n499               if (value == null) {\n500                   LOG.debug(\"null value: {} in {}\", getterTuple.name, object.getClass());\n501               }\n502               String valString = (value == null) ? \"\" : value.toString();\n503               Element param = doc.createElement(\"param\");\n504               param.setAttribute(\"name\", getterTuple.name);\n505               param.setAttribute(\"type\", PRIMITIVES.get(getterTuple.singleParam));\n506               if (List.class.isAssignableFrom(getterTuple.singleParam)) {\n507                   //this outputs even empty list elements, which I think is good.\n508                   addList(param, doc, getterTuple, (List<String>) value);\n509               } else if (Map.class.isAssignableFrom(getterTuple.singleParam)) {\n510                   //this outputs even empty lists, which I think is good.\n511                   addMap(param, doc, getterTuple, (Map<String, String>) value);\n512               } else {\n513                   param.setTextContent(valString);\n514               }\n515               if (paramsElement == null) {\n516                   paramsElement = doc.createElement(\"params\");\n517                   root.appendChild(paramsElement);\n518               }\n519               paramsElement.appendChild(param);\n520           }\n521       }\n",
            "cost": 0.10633000000000001,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfigSerializer.java:491:51",
            "status": "corpus",
            "valid_path": "NO",
            "id": 160
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/metadata/filter/MetadataFilter.java:\n44       public static MetadataFilter load(Element root, boolean allowMissing) throws TikaConfigException,\n45               IOException {\n46           try {\n47               return buildComposite(\"metadataFilters\", CompositeMetadataFilter.class,\n48                       \"metadataFilter\", MetadataFilter.class, root);\n49           } catch (TikaConfigException e) {\n50               if (allowMissing && e.getMessage().contains(\"could not find metadataFilters\")) {\n51                   return new NoOpFilter();\n52               }\n53               throw e;\n54           }\n55       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:\n139       protected static <P, T> P buildComposite(String compositeElementName, Class<P> compositeClass,\n140                                                String itemName, Class<T> itemClass,\n141                                                Element properties)\n142               throws TikaConfigException, IOException {\n143   \n144           if (!properties.getLocalName().equals(\"properties\")) {\n145               throw new TikaConfigException(\"expect properties as root node\");\n146           }\n147           NodeList children = properties.getChildNodes();\n148   \n149           for (int i = 0; i < children.getLength(); i++) {\n150               Node child = children.item(i);\n151               if (child.getNodeType() != 1) {\n152                   continue;\n153               }\n154               if (compositeElementName.equals(child.getLocalName())) {\n155                   List<T> components = loadComposite(child, itemName, itemClass);\n156                   Constructor constructor = null;\n157                   try {\n158                       constructor = compositeClass.getConstructor(List.class);\n159                       P composite = (P) constructor.newInstance(components);\n160                       setParams(composite, child, new HashSet<>(), itemName);\n161                       return composite;\n162                   } catch (NoSuchMethodException | InvocationTargetException |\n163                            InstantiationException | IllegalAccessException e) {\n164                       throw new TikaConfigException(\"can't build composite class\", e);\n165                   }\n166               }\n167           }\n168           throw new TikaConfigException(\"could not find \" + compositeElementName);\n169       }\n218       private static void setParams(Object object, Node targetNode, Set<String> settings,\n219                                     String exceptNodeName) throws TikaConfigException {\n220           NodeList children = targetNode.getChildNodes();\n221           List<Node> params = new ArrayList<>();\n222           for (int i = 0; i < children.getLength(); i++) {\n223               Node child = children.item(i);\n224   \n225               if (\"params\".equals(child.getLocalName())) {\n226                   NodeList paramsList = child.getChildNodes();\n227                   for (int j = 0; j < paramsList.getLength(); j++) {\n228                       params.add(paramsList.item(j));\n229                   }\n230               } else {\n231                   params.add(child);\n232               }\n233           }\n234           for (int i = 0; i < params.size(); i++) {\n235               Node param = params.get(i);\n236               if (param.getNodeType() != 1) {\n237                   continue;\n238               }\n239               String localName = param.getLocalName();\n240               if (localName == null || localName.equals(exceptNodeName)) {\n241                   continue;\n242               }\n243               String txt = param.getTextContent();\n244               String itemName = param.getLocalName();\n245               SetterClassPair setterClassPair = findSetterClassPair(object, itemName);\n246               boolean processed = false;\n247               if (!hasClass(param)) {\n248                   if (setterClassPair.itemClass.isAssignableFrom(Map.class) && isMap(param)) {\n249                       tryToSetMap(object, param);\n250                       processed = true;\n251                   } else if (setterClassPair.itemClass.isAssignableFrom(List.class)) {\n252                       tryToSetList(object, param);\n253                       processed = true;\n254                   }\n255               }\n256               if (!processed) {\n257                   if (isPrimitive(setterClassPair.itemClass)) {\n258                       tryToSetPrimitive(object, setterClassPair, param.getTextContent());\n259                   } else {\n260                       //tryToSetPrimitive(object, localName, txt);\n261                       Object item = buildClass(param, itemName, setterClassPair.itemClass);\n262                       setParams(setterClassPair.itemClass.cast(item), param, new HashSet<>());\n263                       try {\n264                           setterClassPair.setterMethod.invoke(object, item);\n265                       } catch (IllegalAccessException | InvocationTargetException e) {\n266                           throw new TikaConfigException(\"problem creating \" + itemName, e);\n267                       }\n268                   }\n269               }\n270   \n271               if (txt != null) {\n272                   settings.add(localName);\n273               }\n274           }\n275   \n276           if (object instanceof Initializable) {\n277               ((Initializable) object).initialize(Collections.EMPTY_MAP);\n278               ((Initializable) object).checkInitialization(InitializableProblemHandler.THROW);\n279           }\n280       }\n416       private static void tryToSetMap(Object object, Node param) throws TikaConfigException {\n417           String name = param.getLocalName();\n418           //only supports string, string at this point\n419           //use LinkedHashMap to keep insertion order!\n420           Map<String, String> map = new LinkedHashMap<>();\n421           NodeList nodeList = param.getChildNodes();\n422           for (int i = 0; i < nodeList.getLength(); i++) {\n423               Node n = nodeList.item(i);\n424               if (n.getNodeType() == 1) {\n425                   NamedNodeMap m = n.getAttributes();\n426                   String key = null;\n427                   String value = null;\n428                   if (m.getNamedItem(\"from\") != null) {\n429                       key = m.getNamedItem(\"from\").getTextContent();\n430                   } else if (m.getNamedItem(\"key\") != null) {\n431                       key = m.getNamedItem(\"key\").getTextContent();\n432                   } else if (m.getNamedItem(\"k\") != null) {\n433                       key = m.getNamedItem(\"k\").getTextContent();\n434                   }\n435   \n436                   if (m.getNamedItem(\"to\") != null) {\n437                       value = m.getNamedItem(\"to\").getTextContent();\n438                   } else if (m.getNamedItem(\"value\") != null) {\n439                       value = m.getNamedItem(\"value\").getTextContent();\n440                   } else if (m.getNamedItem(\"v\") != null) {\n441                       value = m.getNamedItem(\"v\").getTextContent();\n442                   }\n443                   if (key == null) {\n444                       throw new TikaConfigException(\n445                               \"must specify a 'key' or 'from' value in a map \" + \"object : \" + param);\n446                   }\n447                   if (value == null) {\n448                       throw new TikaConfigException(\n449                               \"must specify a 'value' or 'to' value in a \" + \"map object : \" + param);\n450                   }\n451                   map.put(key, value);\n452               }\n453   \n454           }\n455           String setter = \"set\" + name.substring(0, 1).toUpperCase(Locale.US) + name.substring(1);\n456           try {\n457               Method m = object.getClass().getMethod(setter, Map.class);\n458               m.invoke(object, map);\n459           } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {\n460               throw new TikaConfigException(\"can't set \" + name, e);\n461           }\n462       }\n",
            "cost": 0.11469499999999999,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:458:13",
            "status": "corpus",
            "valid_path": "NO",
            "id": 161
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/metadata/filter/MetadataFilter.java:\n44       public static MetadataFilter load(Element root, boolean allowMissing) throws TikaConfigException,\n45               IOException {\n46           try {\n47               return buildComposite(\"metadataFilters\", CompositeMetadataFilter.class,\n48                       \"metadataFilter\", MetadataFilter.class, root);\n49           } catch (TikaConfigException e) {\n50               if (allowMissing && e.getMessage().contains(\"could not find metadataFilters\")) {\n51                   return new NoOpFilter();\n52               }\n53               throw e;\n54           }\n55       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:\n139       protected static <P, T> P buildComposite(String compositeElementName, Class<P> compositeClass,\n140                                                String itemName, Class<T> itemClass,\n141                                                Element properties)\n142               throws TikaConfigException, IOException {\n143   \n144           if (!properties.getLocalName().equals(\"properties\")) {\n145               throw new TikaConfigException(\"expect properties as root node\");\n146           }\n147           NodeList children = properties.getChildNodes();\n148   \n149           for (int i = 0; i < children.getLength(); i++) {\n150               Node child = children.item(i);\n151               if (child.getNodeType() != 1) {\n152                   continue;\n153               }\n154               if (compositeElementName.equals(child.getLocalName())) {\n155                   List<T> components = loadComposite(child, itemName, itemClass);\n156                   Constructor constructor = null;\n157                   try {\n158                       constructor = compositeClass.getConstructor(List.class);\n159                       P composite = (P) constructor.newInstance(components);\n160                       setParams(composite, child, new HashSet<>(), itemName);\n161                       return composite;\n162                   } catch (NoSuchMethodException | InvocationTargetException |\n163                            InstantiationException | IllegalAccessException e) {\n164                       throw new TikaConfigException(\"can't build composite class\", e);\n165                   }\n166               }\n167           }\n168           throw new TikaConfigException(\"could not find \" + compositeElementName);\n169       }\n218       private static void setParams(Object object, Node targetNode, Set<String> settings,\n219                                     String exceptNodeName) throws TikaConfigException {\n220           NodeList children = targetNode.getChildNodes();\n221           List<Node> params = new ArrayList<>();\n222           for (int i = 0; i < children.getLength(); i++) {\n223               Node child = children.item(i);\n224   \n225               if (\"params\".equals(child.getLocalName())) {\n226                   NodeList paramsList = child.getChildNodes();\n227                   for (int j = 0; j < paramsList.getLength(); j++) {\n228                       params.add(paramsList.item(j));\n229                   }\n230               } else {\n231                   params.add(child);\n232               }\n233           }\n234           for (int i = 0; i < params.size(); i++) {\n235               Node param = params.get(i);\n236               if (param.getNodeType() != 1) {\n237                   continue;\n238               }\n239               String localName = param.getLocalName();\n240               if (localName == null || localName.equals(exceptNodeName)) {\n241                   continue;\n242               }\n243               String txt = param.getTextContent();\n244               String itemName = param.getLocalName();\n245               SetterClassPair setterClassPair = findSetterClassPair(object, itemName);\n246               boolean processed = false;\n247               if (!hasClass(param)) {\n248                   if (setterClassPair.itemClass.isAssignableFrom(Map.class) && isMap(param)) {\n249                       tryToSetMap(object, param);\n250                       processed = true;\n251                   } else if (setterClassPair.itemClass.isAssignableFrom(List.class)) {\n252                       tryToSetList(object, param);\n253                       processed = true;\n254                   }\n255               }\n256               if (!processed) {\n257                   if (isPrimitive(setterClassPair.itemClass)) {\n258                       tryToSetPrimitive(object, setterClassPair, param.getTextContent());\n259                   } else {\n260                       //tryToSetPrimitive(object, localName, txt);\n261                       Object item = buildClass(param, itemName, setterClassPair.itemClass);\n262                       setParams(setterClassPair.itemClass.cast(item), param, new HashSet<>());\n263                       try {\n264                           setterClassPair.setterMethod.invoke(object, item);\n265                       } catch (IllegalAccessException | InvocationTargetException e) {\n266                           throw new TikaConfigException(\"problem creating \" + itemName, e);\n267                       }\n268                   }\n269               }\n270   \n271               if (txt != null) {\n272                   settings.add(localName);\n273               }\n274           }\n275   \n276           if (object instanceof Initializable) {\n277               ((Initializable) object).initialize(Collections.EMPTY_MAP);\n278               ((Initializable) object).checkInitialization(InitializableProblemHandler.THROW);\n279           }\n280       }\n416       private static void tryToSetMap(Object object, Node param) throws TikaConfigException {\n417           String name = param.getLocalName();\n418           //only supports string, string at this point\n419           //use LinkedHashMap to keep insertion order!\n420           Map<String, String> map = new LinkedHashMap<>();\n421           NodeList nodeList = param.getChildNodes();\n422           for (int i = 0; i < nodeList.getLength(); i++) {\n423               Node n = nodeList.item(i);\n424               if (n.getNodeType() == 1) {\n425                   NamedNodeMap m = n.getAttributes();\n426                   String key = null;\n427                   String value = null;\n428                   if (m.getNamedItem(\"from\") != null) {\n429                       key = m.getNamedItem(\"from\").getTextContent();\n430                   } else if (m.getNamedItem(\"key\") != null) {\n431                       key = m.getNamedItem(\"key\").getTextContent();\n432                   } else if (m.getNamedItem(\"k\") != null) {\n433                       key = m.getNamedItem(\"k\").getTextContent();\n434                   }\n435   \n436                   if (m.getNamedItem(\"to\") != null) {\n437                       value = m.getNamedItem(\"to\").getTextContent();\n438                   } else if (m.getNamedItem(\"value\") != null) {\n439                       value = m.getNamedItem(\"value\").getTextContent();\n440                   } else if (m.getNamedItem(\"v\") != null) {\n441                       value = m.getNamedItem(\"v\").getTextContent();\n442                   }\n443                   if (key == null) {\n444                       throw new TikaConfigException(\n445                               \"must specify a 'key' or 'from' value in a map \" + \"object : \" + param);\n446                   }\n447                   if (value == null) {\n448                       throw new TikaConfigException(\n449                               \"must specify a 'value' or 'to' value in a \" + \"map object : \" + param);\n450                   }\n451                   map.put(key, value);\n452               }\n453   \n454           }\n455           String setter = \"set\" + name.substring(0, 1).toUpperCase(Locale.US) + name.substring(1);\n456           try {\n457               Method m = object.getClass().getMethod(setter, Map.class);\n458               m.invoke(object, map);\n459           } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {\n460               throw new TikaConfigException(\"can't set \" + name, e);\n461           }\n462       }\n",
            "cost": 0.11494499999999999,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:458:22",
            "status": "corpus",
            "valid_path": "NO",
            "id": 162
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java:119:41",
            "status": "error",
            "id": 163
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java:120:29",
            "status": "error",
            "id": 164
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java:121:32",
            "status": "error",
            "id": 165
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java:121:75",
            "status": "error",
            "id": 166
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java:124:37",
            "status": "error",
            "id": 167
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java:125:33",
            "status": "error",
            "id": 168
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java:129:34",
            "status": "error",
            "id": 169
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java:129:50",
            "status": "error",
            "id": 170
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java:132:27",
            "status": "error",
            "id": 171
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java:132:70",
            "status": "error",
            "id": 172
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java:134:37",
            "status": "error",
            "id": 173
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java:135:33",
            "status": "error",
            "id": 174
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java:140:31",
            "status": "error",
            "id": 175
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java:140:54",
            "status": "error",
            "id": 176
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java:141:27",
            "status": "error",
            "id": 177
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java:141:77",
            "status": "error",
            "id": 178
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java:143:39",
            "status": "error",
            "id": 179
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java:144:33",
            "status": "error",
            "id": 180
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java:145:43",
            "status": "error",
            "id": 181
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java:146:33",
            "status": "error",
            "id": 182
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java:154:39",
            "status": "error",
            "id": 183
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java:155:33",
            "status": "error",
            "id": 184
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java:156:37",
            "status": "error",
            "id": 185
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java:157:33",
            "status": "error",
            "id": 186
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/utils/CharsetUtils.java:185:40",
            "status": "error",
            "id": 187
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/utils/CharsetUtils.java:185:61",
            "status": "error",
            "id": 188
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n1040           public void process(InputStream input, OutputStream output, Metadata metadata) throws Exception {\n1041               Parser p = parser;\n1042               if (fork) {\n1043                   p = new ForkParser(TikaCLI.class.getClassLoader(), p);\n1044               }\n1045               ContentHandler handler = getContentHandler(output, metadata);\n1046               try {\n1047                   p.parse(input, handler, metadata, context);\n1048                   // fix for TIKA-596: if a parser doesn't generate\n1049                   // XHTML output, the lack of an output document prevents\n1050                   // metadata from being output: this fixes that\n1051                   if (handler instanceof NoDocumentMetHandler) {\n1052                       NoDocumentMetHandler metHandler = (NoDocumentMetHandler) handler;\n1053                       if (!metHandler.metOutput()) {\n1054                           metHandler.endDocument();\n1055                       }\n1056                   }\n1057               } finally {\n1058                   if (fork) {\n1059                       ((ForkParser) p).close();\n1060                   }\n1061               }\n1062           }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/xml/AbstractXML2003Parser.java:\n 84       @Override\n 85       public void parse(InputStream stream, ContentHandler handler, Metadata metadata,\n 86                         ParseContext context) throws IOException, SAXException, TikaException {\n 87           setContentType(metadata);\n 88   \n 89           final XHTMLContentHandler xhtml = new XHTMLContentHandler(handler, metadata);\n 90           xhtml.startDocument();\n 91   \n 92           TaggedContentHandler tagged = new TaggedContentHandler(xhtml);\n 93           try {\n 94               //need to get new SAXParser because\n 95               //an attachment might require another SAXParser\n 96               //mid-parse\n 97               XMLReaderUtils.getSAXParser().parse(CloseShieldInputStream.wrap(stream),\n 98                       new EmbeddedContentHandler(\n 99                               getContentHandler(tagged, metadata, context)));\n100           } catch (SAXException e) {\n101               WriteLimitReachedException.throwIfWriteLimitReached(e);\n102               throw new TikaException(\"XML parse error\", e);\n103           } finally {\n104               xhtml.endDocument();\n105           }\n106       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java:\n 194       public static SAXParser getSAXParser() throws TikaException {\n 195           try {\n 196               SAXParser parser = getSAXParserFactory().newSAXParser();\n 197               trySetXercesSecurityManager(parser);\n 198               return parser;\n 199           } catch (ParserConfigurationException e) {\n 200               throw new TikaException(\"Unable to configure a SAX parser\", e);\n 201           } catch (SAXException e) {\n 202               throw new TikaException(\"Unable to create a SAX parser\", e);\n 203           }\n 204       }\n 757       private static void trySetXercesSecurityManager(SAXParser parser) {\n 758           //from POI\n 759           // Try built-in JVM one first, standalone if not\n 760           for (String securityManagerClassName : new String[]{\n 761                   //\"com.sun.org.apache.xerces.internal.util.SecurityManager\",\n 762                   XERCES_SECURITY_MANAGER}) {\n 763               try {\n 764                   Object mgr =\n 765                           Class.forName(securityManagerClassName).getDeclaredConstructor().newInstance();\n 766                   Method setLimit = mgr.getClass().getMethod(\"setEntityExpansionLimit\", Integer.TYPE);\n 767                   setLimit.invoke(mgr, MAX_ENTITY_EXPANSIONS);\n 768   \n 769                   parser.setProperty(XERCES_SECURITY_MANAGER_PROPERTY, mgr);\n 770                   // Stop once one can be setup without error\n 771                   return;\n 772               } catch (ClassNotFoundException e) {\n 773                   // continue without log, this is expected in some setups\n 774               } catch (Throwable e) {\n 775                   // NOSONAR - also catch things like NoClassDefError here\n 776                   // throttle the log somewhat as it can spam the log otherwise\n 777                   if (System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {\n 778                       LOG.warn(\n 779                               \"SAX Security Manager could not be setup [log suppressed for 5 \" +\n 780                                       \"minutes]\",\n 781                               e);\n 782                       LAST_LOG = System.currentTimeMillis();\n 783                   }\n 784               }\n 785           }\n 786   \n 787           // separate old version of Xerces not found => use the builtin way of setting the property\n 788           try {\n 789               parser.setProperty(\"http://www.oracle.com/xml/jaxp/properties/entityExpansionLimit\",\n 790                       MAX_ENTITY_EXPANSIONS);\n 791           } catch (SAXException e) {     // NOSONAR - also catch things like NoClassDefError here\n 792               // throttle the log somewhat as it can spam the log otherwise\n 793               if (System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {\n 794                   LOG.warn(\"SAX Security Manager could not be setup [log suppressed for 5 minutes]\",\n 795                           e);\n 796                   LAST_LOG = System.currentTimeMillis();\n 797               }\n 798           }\n 799       }\n",
            "cost": 0.08965999999999999,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java:767:17",
            "status": "corpus",
            "valid_path": "NO",
            "id": 189
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n1040           public void process(InputStream input, OutputStream output, Metadata metadata) throws Exception {\n1041               Parser p = parser;\n1042               if (fork) {\n1043                   p = new ForkParser(TikaCLI.class.getClassLoader(), p);\n1044               }\n1045               ContentHandler handler = getContentHandler(output, metadata);\n1046               try {\n1047                   p.parse(input, handler, metadata, context);\n1048                   // fix for TIKA-596: if a parser doesn't generate\n1049                   // XHTML output, the lack of an output document prevents\n1050                   // metadata from being output: this fixes that\n1051                   if (handler instanceof NoDocumentMetHandler) {\n1052                       NoDocumentMetHandler metHandler = (NoDocumentMetHandler) handler;\n1053                       if (!metHandler.metOutput()) {\n1054                           metHandler.endDocument();\n1055                       }\n1056                   }\n1057               } finally {\n1058                   if (fork) {\n1059                       ((ForkParser) p).close();\n1060                   }\n1061               }\n1062           }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/xml/AbstractXML2003Parser.java:\n 84       @Override\n 85       public void parse(InputStream stream, ContentHandler handler, Metadata metadata,\n 86                         ParseContext context) throws IOException, SAXException, TikaException {\n 87           setContentType(metadata);\n 88   \n 89           final XHTMLContentHandler xhtml = new XHTMLContentHandler(handler, metadata);\n 90           xhtml.startDocument();\n 91   \n 92           TaggedContentHandler tagged = new TaggedContentHandler(xhtml);\n 93           try {\n 94               //need to get new SAXParser because\n 95               //an attachment might require another SAXParser\n 96               //mid-parse\n 97               XMLReaderUtils.getSAXParser().parse(CloseShieldInputStream.wrap(stream),\n 98                       new EmbeddedContentHandler(\n 99                               getContentHandler(tagged, metadata, context)));\n100           } catch (SAXException e) {\n101               WriteLimitReachedException.throwIfWriteLimitReached(e);\n102               throw new TikaException(\"XML parse error\", e);\n103           } finally {\n104               xhtml.endDocument();\n105           }\n106       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java:\n 194       public static SAXParser getSAXParser() throws TikaException {\n 195           try {\n 196               SAXParser parser = getSAXParserFactory().newSAXParser();\n 197               trySetXercesSecurityManager(parser);\n 198               return parser;\n 199           } catch (ParserConfigurationException e) {\n 200               throw new TikaException(\"Unable to configure a SAX parser\", e);\n 201           } catch (SAXException e) {\n 202               throw new TikaException(\"Unable to create a SAX parser\", e);\n 203           }\n 204       }\n 757       private static void trySetXercesSecurityManager(SAXParser parser) {\n 758           //from POI\n 759           // Try built-in JVM one first, standalone if not\n 760           for (String securityManagerClassName : new String[]{\n 761                   //\"com.sun.org.apache.xerces.internal.util.SecurityManager\",\n 762                   XERCES_SECURITY_MANAGER}) {\n 763               try {\n 764                   Object mgr =\n 765                           Class.forName(securityManagerClassName).getDeclaredConstructor().newInstance();\n 766                   Method setLimit = mgr.getClass().getMethod(\"setEntityExpansionLimit\", Integer.TYPE);\n 767                   setLimit.invoke(mgr, MAX_ENTITY_EXPANSIONS);\n 768   \n 769                   parser.setProperty(XERCES_SECURITY_MANAGER_PROPERTY, mgr);\n 770                   // Stop once one can be setup without error\n 771                   return;\n 772               } catch (ClassNotFoundException e) {\n 773                   // continue without log, this is expected in some setups\n 774               } catch (Throwable e) {\n 775                   // NOSONAR - also catch things like NoClassDefError here\n 776                   // throttle the log somewhat as it can spam the log otherwise\n 777                   if (System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {\n 778                       LOG.warn(\n 779                               \"SAX Security Manager could not be setup [log suppressed for 5 \" +\n 780                                       \"minutes]\",\n 781                               e);\n 782                       LAST_LOG = System.currentTimeMillis();\n 783                   }\n 784               }\n 785           }\n 786   \n 787           // separate old version of Xerces not found => use the builtin way of setting the property\n 788           try {\n 789               parser.setProperty(\"http://www.oracle.com/xml/jaxp/properties/entityExpansionLimit\",\n 790                       MAX_ENTITY_EXPANSIONS);\n 791           } catch (SAXException e) {     // NOSONAR - also catch things like NoClassDefError here\n 792               // throttle the log somewhat as it can spam the log otherwise\n 793               if (System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {\n 794                   LOG.warn(\"SAX Security Manager could not be setup [log suppressed for 5 minutes]\",\n 795                           e);\n 796                   LAST_LOG = System.currentTimeMillis();\n 797               }\n 798           }\n 799       }\n",
            "cost": 0.08936,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java:767:33",
            "status": "corpus",
            "valid_path": "NO",
            "id": 190
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/utils/CharsetUtils.java:107:53",
            "status": "error",
            "id": 191
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/utils/CharsetUtils.java:107:75",
            "status": "error",
            "id": 192
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n 667           @SuppressWarnings(\"unchecked\")\n 668           CT loadOverall(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 669                   throws TikaException, IOException {\n 670               List<T> loaded = new ArrayList<>();\n 671   \n 672               // Find the children of the parent tag, if any\n 673               for (Element le : getTopLevelElementChildren(element, getParentTagName(),\n 674                       getLoaderTagName())) {\n 675                   T loadedChild = loadOne(le, mimeTypes, loader);\n 676                   if (loadedChild != null) {\n 677                       loaded.add(loadedChild);\n 678                   }\n 679               }\n 680   \n 681               // Build the classes, and wrap as needed\n 682               if (loaded.isEmpty()) {\n 683                   // Nothing defined, create a Default\n 684                   return createDefault(mimeTypes, loader);\n 685               } else if (loaded.size() == 1) {\n 686                   T single = loaded.get(0);\n 687                   if (isComposite(single)) {\n 688                       // Single Composite defined, use that\n 689                       return (CT) single;\n 690                   }\n 691               } else if (!supportsComposite()) {\n 692                   // No composite support, just return the first one\n 693                   if (loaded.size() == 1) {\n 694                       return (CT) loaded.get(0);\n 695                   } else if (loaded.size() > 1) {\n 696                       throw new TikaConfigException(\n 697                               \"Composite not supported for \" + getParentTagName() +\n 698                                       \". Must specify only one child!\");\n 699                   } else {\n 700                       //throw exception if empty?\n 701                   }\n 702               }\n 703               // Wrap the defined parsers/detectors up in a Composite\n 704               return createComposite(loaded, mimeTypes, loader);\n 705           }\n 707           T loadOne(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 708                   throws TikaException, IOException {\n 709               String name = element.getAttribute(\"class\");\n 710               if (name == null) {\n 711                   throw new TikaConfigException(\"class attribute must not be null: \" + element);\n 712               }\n 713               String initProbHandler = element.getAttribute(\"initializableProblemHandler\");\n 714               InitializableProblemHandler initializableProblemHandler;\n 715               if (initProbHandler == null || initProbHandler.length() == 0) {\n 716                   initializableProblemHandler = loader.getInitializableProblemHandler();\n 717               } else {\n 718                   initializableProblemHandler = getInitializableProblemHandler(initProbHandler);\n 719               }\n 720   \n 721               T loaded = null;\n 722   \n 723               try {\n 724                   Class<? extends T> loadedClass = loader.getServiceClass(getLoaderClass(), name);\n 725   \n 726                   // Do pre-load checks and short-circuits\n 727                   //TODO : allow duplicate instances with different configurations\n 728                   loaded = preLoadOne(loadedClass, name, mimeTypes);\n 729                   if (loaded != null) {\n 730                       return loaded;\n 731                   }\n 732   \n 733                   // Get any parameters / settings for the parser\n 734                   Map<String, Param> params = null;\n 735                   try {\n 736                       params = getParams(element);\n 737                   } catch (Exception e) {\n 738                       throw new TikaConfigException(e.getMessage(), e);\n 739                   }\n 740   \n 741                   // Is this a composite or decorated class? If so, support recursion\n 742                   if (isComposite(loadedClass)) {\n 743                       // Get the child objects for it\n 744                       List<T> children = new ArrayList<>();\n 745                       NodeList childNodes = element.getElementsByTagName(getLoaderTagName());\n 746                       if (childNodes.getLength() > 0) {\n 747                           for (int i = 0; i < childNodes.getLength(); i++) {\n 748                               T loadedChild =\n 749                                       loadOne((Element) childNodes.item(i), mimeTypes, loader);\n 750                               if (loadedChild != null) {\n 751                                   children.add(loadedChild);\n 752                               }\n 753                           }\n 754                       }\n 755   \n 756                       // Get the list of children to exclude\n 757                       Set<Class<? extends T>> excludeChildren = new HashSet<>();\n 758                       NodeList excludeChildNodes =\n 759                               element.getElementsByTagName(getLoaderTagName() + \"-exclude\");\n 760                       if (excludeChildNodes.getLength() > 0) {\n 761                           for (int i = 0; i < excludeChildNodes.getLength(); i++) {\n 762                               Element excl = (Element) excludeChildNodes.item(i);\n 763                               String exclName = excl.getAttribute(\"class\");\n 764                               try {\n 765                                   excludeChildren\n 766                                           .add(loader.getServiceClass(getLoaderClass(), exclName));\n 767                               } catch (ClassNotFoundException e) {\n 768                                   //TIKA-3268 -- This should stop the world.\n 769                                   throw new TikaConfigException(\n 770                                           \"Class not found in -exclude list: \" + exclName);\n 771                               }\n 772                           }\n 773                       }\n 774   \n 775                       // Create the Composite\n 776                       loaded = createComposite(loadedClass, children, excludeChildren, params,\n 777                               mimeTypes, loader);\n 778   \n 779                       // Default constructor fallback\n 780                       if (loaded == null) {\n 781                           loaded = newInstance(loadedClass);\n 782                       }\n 783                   } else {\n 784                       // Regular class, create as-is\n 785                       loaded = newInstance(loadedClass);\n 786                       // TODO Support arguments, needed for Translators etc\n 787                       // See the thread \"Configuring parsers and translators\" for details\n 788                   }\n 789   \n 790                   //Assigning the params to bean fields/setters\n 791                   AnnotationUtils.assignFieldParams(loaded, params);\n 792                   if (loaded instanceof Initializable) {\n 793                       ((Initializable) loaded).initialize(params);\n 794                       ((Initializable) loaded).checkInitialization(initializableProblemHandler);\n 795                   }\n 796                   // Have any decoration performed, eg explicit mimetypes\n 797                   loaded = decorate(loaded, element);\n 798                   // All done with setup\n 799                   return loaded;\n 800               } catch (ClassNotFoundException e) {\n 801                   if (loader.getLoadErrorHandler() == LoadErrorHandler.THROW) {\n 802                       // Use a different exception signature here\n 803                       throw new TikaConfigException(\n 804                               \"Unable to find a \" + getLoaderTagName() + \" class: \" + name, e);\n 805                   }\n 806                   // Report the problem\n 807                   loader.getLoadErrorHandler().handleLoadError(name, e);\n 808                   return null;\n 809               } catch (IllegalAccessException e) {\n 810                   throw new TikaException(\n 811                           \"Unable to access a \" + getLoaderTagName() + \" class: \" + name, e);\n 812               } catch (InvocationTargetException e) {\n 813                   throw new TikaException(\n 814                           \"Unable to create a \" + getLoaderTagName() + \" class: \" + name, e);\n 815               } catch (InstantiationException e) {\n 816                   throw new TikaException(\n 817                           \"Unable to instantiate a \" + getLoaderTagName() + \" class: \" + name, e);\n 818               } catch (NoSuchMethodException e) {\n 819                   throw new TikaException(\n 820                           \"Unable to find the right constructor for \" + getLoaderTagName() +\n 821                                   \" class: \" + name, e);\n 822               }\n 823           }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/utils/AnnotationUtils.java:\n 85       public static void assignFieldParams(Object bean, Map<String, Param> params)\n 86               throws TikaConfigException {\n 87           Class<?> beanClass = bean.getClass();\n 88           if (!PARAM_INFO.containsKey(beanClass)) {\n 89               synchronized (TikaConfig.class) {\n 90                   if (!PARAM_INFO.containsKey(beanClass)) {\n 91                       List<AccessibleObject> aObjs =\n 92                               collectInfo(beanClass, org.apache.tika.config.Field.class);\n 93                       List<ParamField> fields = new ArrayList<>(aObjs.size());\n 94   \n 95                       for (AccessibleObject aObj : aObjs) {\n 96                           fields.add(new ParamField(aObj));\n 97                       }\n 98                       PARAM_INFO.put(beanClass, fields);\n 99                   }\n100               }\n101           }\n102   \n103           List<ParamField> fields = PARAM_INFO.get(beanClass);\n104   \n105           for (ParamField field : fields) {\n106               Param<?> param = params.get(field.getName());\n107               if (param != null) {\n108                   if (field.getType().isAssignableFrom(param.getType())) {\n109                       try {\n110                           field.assignValue(bean, param.getValue());\n111                       } catch (InvocationTargetException e) {\n112                           LOG.error(\"Error assigning value '{}' to '{}'\", param.getValue(), param.getName());\n113                           final Throwable cause = e.getCause() == null ? e : e.getCause();\n114                           throw new TikaConfigException(cause.getMessage(), cause);\n115                       } catch (IllegalAccessException e) {\n116                           LOG.error(\"Error assigning value '{}' to '{}'\", param.getValue(), param.getName());\n117                           throw new TikaConfigException(e.getMessage(), e);\n118                       }\n119                   } else {\n120                       String msg = String.format(Locale.ROOT,\n121                               \"Value '%s' of type '%s' can't be\" +\n122                                       \" assigned to field '%s' of defined type '%s'\",\n123                               param.getValue(),\n124                               param.getValue().getClass(), field.getName(), field.getType());\n125                       throw new TikaConfigException(msg);\n126                   }\n127               } else if (field.isRequired()) {\n128                   //param not supplied but field is declared as required?\n129                   String msg = String.format(Locale.ROOT,\n130                           \"Param %s is required for %s,\" + \" but it is not given in config.\",\n131                           field.getName(), bean.getClass().getName());\n132                   throw new TikaConfigException(msg);\n133               } else {\n134                   LOG.debug(\"Param not supplied, field is not mandatory\");\n135               }\n136           }\n137       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ParamField.java:\n102       public void assignValue(Object bean, Object value)\n103               throws IllegalAccessException, InvocationTargetException {\n104           if (field != null) {\n105               field.set(bean, value);\n106           } else {\n107               setter.invoke(bean, value);\n108           }\n109       }\n",
            "cost": 0.12224,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ParamField.java:107:13",
            "status": "corpus",
            "valid_path": "NO",
            "id": 193
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n 667           @SuppressWarnings(\"unchecked\")\n 668           CT loadOverall(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 669                   throws TikaException, IOException {\n 670               List<T> loaded = new ArrayList<>();\n 671   \n 672               // Find the children of the parent tag, if any\n 673               for (Element le : getTopLevelElementChildren(element, getParentTagName(),\n 674                       getLoaderTagName())) {\n 675                   T loadedChild = loadOne(le, mimeTypes, loader);\n 676                   if (loadedChild != null) {\n 677                       loaded.add(loadedChild);\n 678                   }\n 679               }\n 680   \n 681               // Build the classes, and wrap as needed\n 682               if (loaded.isEmpty()) {\n 683                   // Nothing defined, create a Default\n 684                   return createDefault(mimeTypes, loader);\n 685               } else if (loaded.size() == 1) {\n 686                   T single = loaded.get(0);\n 687                   if (isComposite(single)) {\n 688                       // Single Composite defined, use that\n 689                       return (CT) single;\n 690                   }\n 691               } else if (!supportsComposite()) {\n 692                   // No composite support, just return the first one\n 693                   if (loaded.size() == 1) {\n 694                       return (CT) loaded.get(0);\n 695                   } else if (loaded.size() > 1) {\n 696                       throw new TikaConfigException(\n 697                               \"Composite not supported for \" + getParentTagName() +\n 698                                       \". Must specify only one child!\");\n 699                   } else {\n 700                       //throw exception if empty?\n 701                   }\n 702               }\n 703               // Wrap the defined parsers/detectors up in a Composite\n 704               return createComposite(loaded, mimeTypes, loader);\n 705           }\n 707           T loadOne(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 708                   throws TikaException, IOException {\n 709               String name = element.getAttribute(\"class\");\n 710               if (name == null) {\n 711                   throw new TikaConfigException(\"class attribute must not be null: \" + element);\n 712               }\n 713               String initProbHandler = element.getAttribute(\"initializableProblemHandler\");\n 714               InitializableProblemHandler initializableProblemHandler;\n 715               if (initProbHandler == null || initProbHandler.length() == 0) {\n 716                   initializableProblemHandler = loader.getInitializableProblemHandler();\n 717               } else {\n 718                   initializableProblemHandler = getInitializableProblemHandler(initProbHandler);\n 719               }\n 720   \n 721               T loaded = null;\n 722   \n 723               try {\n 724                   Class<? extends T> loadedClass = loader.getServiceClass(getLoaderClass(), name);\n 725   \n 726                   // Do pre-load checks and short-circuits\n 727                   //TODO : allow duplicate instances with different configurations\n 728                   loaded = preLoadOne(loadedClass, name, mimeTypes);\n 729                   if (loaded != null) {\n 730                       return loaded;\n 731                   }\n 732   \n 733                   // Get any parameters / settings for the parser\n 734                   Map<String, Param> params = null;\n 735                   try {\n 736                       params = getParams(element);\n 737                   } catch (Exception e) {\n 738                       throw new TikaConfigException(e.getMessage(), e);\n 739                   }\n 740   \n 741                   // Is this a composite or decorated class? If so, support recursion\n 742                   if (isComposite(loadedClass)) {\n 743                       // Get the child objects for it\n 744                       List<T> children = new ArrayList<>();\n 745                       NodeList childNodes = element.getElementsByTagName(getLoaderTagName());\n 746                       if (childNodes.getLength() > 0) {\n 747                           for (int i = 0; i < childNodes.getLength(); i++) {\n 748                               T loadedChild =\n 749                                       loadOne((Element) childNodes.item(i), mimeTypes, loader);\n 750                               if (loadedChild != null) {\n 751                                   children.add(loadedChild);\n 752                               }\n 753                           }\n 754                       }\n 755   \n 756                       // Get the list of children to exclude\n 757                       Set<Class<? extends T>> excludeChildren = new HashSet<>();\n 758                       NodeList excludeChildNodes =\n 759                               element.getElementsByTagName(getLoaderTagName() + \"-exclude\");\n 760                       if (excludeChildNodes.getLength() > 0) {\n 761                           for (int i = 0; i < excludeChildNodes.getLength(); i++) {\n 762                               Element excl = (Element) excludeChildNodes.item(i);\n 763                               String exclName = excl.getAttribute(\"class\");\n 764                               try {\n 765                                   excludeChildren\n 766                                           .add(loader.getServiceClass(getLoaderClass(), exclName));\n 767                               } catch (ClassNotFoundException e) {\n 768                                   //TIKA-3268 -- This should stop the world.\n 769                                   throw new TikaConfigException(\n 770                                           \"Class not found in -exclude list: \" + exclName);\n 771                               }\n 772                           }\n 773                       }\n 774   \n 775                       // Create the Composite\n 776                       loaded = createComposite(loadedClass, children, excludeChildren, params,\n 777                               mimeTypes, loader);\n 778   \n 779                       // Default constructor fallback\n 780                       if (loaded == null) {\n 781                           loaded = newInstance(loadedClass);\n 782                       }\n 783                   } else {\n 784                       // Regular class, create as-is\n 785                       loaded = newInstance(loadedClass);\n 786                       // TODO Support arguments, needed for Translators etc\n 787                       // See the thread \"Configuring parsers and translators\" for details\n 788                   }\n 789   \n 790                   //Assigning the params to bean fields/setters\n 791                   AnnotationUtils.assignFieldParams(loaded, params);\n 792                   if (loaded instanceof Initializable) {\n 793                       ((Initializable) loaded).initialize(params);\n 794                       ((Initializable) loaded).checkInitialization(initializableProblemHandler);\n 795                   }\n 796                   // Have any decoration performed, eg explicit mimetypes\n 797                   loaded = decorate(loaded, element);\n 798                   // All done with setup\n 799                   return loaded;\n 800               } catch (ClassNotFoundException e) {\n 801                   if (loader.getLoadErrorHandler() == LoadErrorHandler.THROW) {\n 802                       // Use a different exception signature here\n 803                       throw new TikaConfigException(\n 804                               \"Unable to find a \" + getLoaderTagName() + \" class: \" + name, e);\n 805                   }\n 806                   // Report the problem\n 807                   loader.getLoadErrorHandler().handleLoadError(name, e);\n 808                   return null;\n 809               } catch (IllegalAccessException e) {\n 810                   throw new TikaException(\n 811                           \"Unable to access a \" + getLoaderTagName() + \" class: \" + name, e);\n 812               } catch (InvocationTargetException e) {\n 813                   throw new TikaException(\n 814                           \"Unable to create a \" + getLoaderTagName() + \" class: \" + name, e);\n 815               } catch (InstantiationException e) {\n 816                   throw new TikaException(\n 817                           \"Unable to instantiate a \" + getLoaderTagName() + \" class: \" + name, e);\n 818               } catch (NoSuchMethodException e) {\n 819                   throw new TikaException(\n 820                           \"Unable to find the right constructor for \" + getLoaderTagName() +\n 821                                   \" class: \" + name, e);\n 822               }\n 823           }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/utils/AnnotationUtils.java:\n 85       public static void assignFieldParams(Object bean, Map<String, Param> params)\n 86               throws TikaConfigException {\n 87           Class<?> beanClass = bean.getClass();\n 88           if (!PARAM_INFO.containsKey(beanClass)) {\n 89               synchronized (TikaConfig.class) {\n 90                   if (!PARAM_INFO.containsKey(beanClass)) {\n 91                       List<AccessibleObject> aObjs =\n 92                               collectInfo(beanClass, org.apache.tika.config.Field.class);\n 93                       List<ParamField> fields = new ArrayList<>(aObjs.size());\n 94   \n 95                       for (AccessibleObject aObj : aObjs) {\n 96                           fields.add(new ParamField(aObj));\n 97                       }\n 98                       PARAM_INFO.put(beanClass, fields);\n 99                   }\n100               }\n101           }\n102   \n103           List<ParamField> fields = PARAM_INFO.get(beanClass);\n104   \n105           for (ParamField field : fields) {\n106               Param<?> param = params.get(field.getName());\n107               if (param != null) {\n108                   if (field.getType().isAssignableFrom(param.getType())) {\n109                       try {\n110                           field.assignValue(bean, param.getValue());\n111                       } catch (InvocationTargetException e) {\n112                           LOG.error(\"Error assigning value '{}' to '{}'\", param.getValue(), param.getName());\n113                           final Throwable cause = e.getCause() == null ? e : e.getCause();\n114                           throw new TikaConfigException(cause.getMessage(), cause);\n115                       } catch (IllegalAccessException e) {\n116                           LOG.error(\"Error assigning value '{}' to '{}'\", param.getValue(), param.getName());\n117                           throw new TikaConfigException(e.getMessage(), e);\n118                       }\n119                   } else {\n120                       String msg = String.format(Locale.ROOT,\n121                               \"Value '%s' of type '%s' can't be\" +\n122                                       \" assigned to field '%s' of defined type '%s'\",\n123                               param.getValue(),\n124                               param.getValue().getClass(), field.getName(), field.getType());\n125                       throw new TikaConfigException(msg);\n126                   }\n127               } else if (field.isRequired()) {\n128                   //param not supplied but field is declared as required?\n129                   String msg = String.format(Locale.ROOT,\n130                           \"Param %s is required for %s,\" + \" but it is not given in config.\",\n131                           field.getName(), bean.getClass().getName());\n132                   throw new TikaConfigException(msg);\n133               } else {\n134                   LOG.debug(\"Param not supplied, field is not mandatory\");\n135               }\n136           }\n137       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ParamField.java:\n102       public void assignValue(Object bean, Object value)\n103               throws IllegalAccessException, InvocationTargetException {\n104           if (field != null) {\n105               field.set(bean, value);\n106           } else {\n107               setter.invoke(bean, value);\n108           }\n109       }\n",
            "cost": 0.13094,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ParamField.java:107:27",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 194
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/metadata/filter/MetadataFilter.java:\n44       public static MetadataFilter load(Element root, boolean allowMissing) throws TikaConfigException,\n45               IOException {\n46           try {\n47               return buildComposite(\"metadataFilters\", CompositeMetadataFilter.class,\n48                       \"metadataFilter\", MetadataFilter.class, root);\n49           } catch (TikaConfigException e) {\n50               if (allowMissing && e.getMessage().contains(\"could not find metadataFilters\")) {\n51                   return new NoOpFilter();\n52               }\n53               throw e;\n54           }\n55       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:\n139       protected static <P, T> P buildComposite(String compositeElementName, Class<P> compositeClass,\n140                                                String itemName, Class<T> itemClass,\n141                                                Element properties)\n142               throws TikaConfigException, IOException {\n143   \n144           if (!properties.getLocalName().equals(\"properties\")) {\n145               throw new TikaConfigException(\"expect properties as root node\");\n146           }\n147           NodeList children = properties.getChildNodes();\n148   \n149           for (int i = 0; i < children.getLength(); i++) {\n150               Node child = children.item(i);\n151               if (child.getNodeType() != 1) {\n152                   continue;\n153               }\n154               if (compositeElementName.equals(child.getLocalName())) {\n155                   List<T> components = loadComposite(child, itemName, itemClass);\n156                   Constructor constructor = null;\n157                   try {\n158                       constructor = compositeClass.getConstructor(List.class);\n159                       P composite = (P) constructor.newInstance(components);\n160                       setParams(composite, child, new HashSet<>(), itemName);\n161                       return composite;\n162                   } catch (NoSuchMethodException | InvocationTargetException |\n163                            InstantiationException | IllegalAccessException e) {\n164                       throw new TikaConfigException(\"can't build composite class\", e);\n165                   }\n166               }\n167           }\n168           throw new TikaConfigException(\"could not find \" + compositeElementName);\n169       }\n218       private static void setParams(Object object, Node targetNode, Set<String> settings,\n219                                     String exceptNodeName) throws TikaConfigException {\n220           NodeList children = targetNode.getChildNodes();\n221           List<Node> params = new ArrayList<>();\n222           for (int i = 0; i < children.getLength(); i++) {\n223               Node child = children.item(i);\n224   \n225               if (\"params\".equals(child.getLocalName())) {\n226                   NodeList paramsList = child.getChildNodes();\n227                   for (int j = 0; j < paramsList.getLength(); j++) {\n228                       params.add(paramsList.item(j));\n229                   }\n230               } else {\n231                   params.add(child);\n232               }\n233           }\n234           for (int i = 0; i < params.size(); i++) {\n235               Node param = params.get(i);\n236               if (param.getNodeType() != 1) {\n237                   continue;\n238               }\n239               String localName = param.getLocalName();\n240               if (localName == null || localName.equals(exceptNodeName)) {\n241                   continue;\n242               }\n243               String txt = param.getTextContent();\n244               String itemName = param.getLocalName();\n245               SetterClassPair setterClassPair = findSetterClassPair(object, itemName);\n246               boolean processed = false;\n247               if (!hasClass(param)) {\n248                   if (setterClassPair.itemClass.isAssignableFrom(Map.class) && isMap(param)) {\n249                       tryToSetMap(object, param);\n250                       processed = true;\n251                   } else if (setterClassPair.itemClass.isAssignableFrom(List.class)) {\n252                       tryToSetList(object, param);\n253                       processed = true;\n254                   }\n255               }\n256               if (!processed) {\n257                   if (isPrimitive(setterClassPair.itemClass)) {\n258                       tryToSetPrimitive(object, setterClassPair, param.getTextContent());\n259                   } else {\n260                       //tryToSetPrimitive(object, localName, txt);\n261                       Object item = buildClass(param, itemName, setterClassPair.itemClass);\n262                       setParams(setterClassPair.itemClass.cast(item), param, new HashSet<>());\n263                       try {\n264                           setterClassPair.setterMethod.invoke(object, item);\n265                       } catch (IllegalAccessException | InvocationTargetException e) {\n266                           throw new TikaConfigException(\"problem creating \" + itemName, e);\n267                       }\n268                   }\n269               }\n270   \n271               if (txt != null) {\n272                   settings.add(localName);\n273               }\n274           }\n275   \n276           if (object instanceof Initializable) {\n277               ((Initializable) object).initialize(Collections.EMPTY_MAP);\n278               ((Initializable) object).checkInitialization(InitializableProblemHandler.THROW);\n279           }\n280       }\n360       private static void tryToSetList(Object object, Node param) throws TikaConfigException {\n361           if (hasClass(param)) {\n362               tryToSetClassList(object, param);\n363           } else {\n364               tryToSetStringList(object, param);\n365           }\n366       }\n368       private static void tryToSetClassList(Object object, Node node) throws TikaConfigException {\n369           String name = node.getLocalName();\n370           try {\n371               Class interfaze =\n372                       Class.forName(node.getAttributes().getNamedItem(\"class\").getTextContent());\n373               List items = new ArrayList<Object>();\n374               NodeList nodeList = node.getChildNodes();\n375               for (int i = 0; i < nodeList.getLength(); i++) {\n376                   Node child = nodeList.item(i);\n377                   if (child.getNodeType() == 1) {\n378                       Object item = buildClass(child, child.getLocalName(), interfaze);\n379                       setParams(item, child, new HashSet<>());\n380                       items.add(item);\n381                   }\n382               }\n383   \n384               String setter = \"set\" + name.substring(0, 1).toUpperCase(Locale.US) + name.substring(1);\n385               Method m = object.getClass().getMethod(setter, List.class);\n386               m.invoke(object, items);\n387   \n388           } catch (ClassNotFoundException | InvocationTargetException | NoSuchMethodException |\n389                    IllegalAccessException e) {\n390               throw new TikaConfigException(\"couldn't build class for \" + name, e);\n391           }\n392       }\n",
            "cost": 0.11333000000000001,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:386:13",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 195
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/metadata/filter/MetadataFilter.java:\n44       public static MetadataFilter load(Element root, boolean allowMissing) throws TikaConfigException,\n45               IOException {\n46           try {\n47               return buildComposite(\"metadataFilters\", CompositeMetadataFilter.class,\n48                       \"metadataFilter\", MetadataFilter.class, root);\n49           } catch (TikaConfigException e) {\n50               if (allowMissing && e.getMessage().contains(\"could not find metadataFilters\")) {\n51                   return new NoOpFilter();\n52               }\n53               throw e;\n54           }\n55       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:\n139       protected static <P, T> P buildComposite(String compositeElementName, Class<P> compositeClass,\n140                                                String itemName, Class<T> itemClass,\n141                                                Element properties)\n142               throws TikaConfigException, IOException {\n143   \n144           if (!properties.getLocalName().equals(\"properties\")) {\n145               throw new TikaConfigException(\"expect properties as root node\");\n146           }\n147           NodeList children = properties.getChildNodes();\n148   \n149           for (int i = 0; i < children.getLength(); i++) {\n150               Node child = children.item(i);\n151               if (child.getNodeType() != 1) {\n152                   continue;\n153               }\n154               if (compositeElementName.equals(child.getLocalName())) {\n155                   List<T> components = loadComposite(child, itemName, itemClass);\n156                   Constructor constructor = null;\n157                   try {\n158                       constructor = compositeClass.getConstructor(List.class);\n159                       P composite = (P) constructor.newInstance(components);\n160                       setParams(composite, child, new HashSet<>(), itemName);\n161                       return composite;\n162                   } catch (NoSuchMethodException | InvocationTargetException |\n163                            InstantiationException | IllegalAccessException e) {\n164                       throw new TikaConfigException(\"can't build composite class\", e);\n165                   }\n166               }\n167           }\n168           throw new TikaConfigException(\"could not find \" + compositeElementName);\n169       }\n218       private static void setParams(Object object, Node targetNode, Set<String> settings,\n219                                     String exceptNodeName) throws TikaConfigException {\n220           NodeList children = targetNode.getChildNodes();\n221           List<Node> params = new ArrayList<>();\n222           for (int i = 0; i < children.getLength(); i++) {\n223               Node child = children.item(i);\n224   \n225               if (\"params\".equals(child.getLocalName())) {\n226                   NodeList paramsList = child.getChildNodes();\n227                   for (int j = 0; j < paramsList.getLength(); j++) {\n228                       params.add(paramsList.item(j));\n229                   }\n230               } else {\n231                   params.add(child);\n232               }\n233           }\n234           for (int i = 0; i < params.size(); i++) {\n235               Node param = params.get(i);\n236               if (param.getNodeType() != 1) {\n237                   continue;\n238               }\n239               String localName = param.getLocalName();\n240               if (localName == null || localName.equals(exceptNodeName)) {\n241                   continue;\n242               }\n243               String txt = param.getTextContent();\n244               String itemName = param.getLocalName();\n245               SetterClassPair setterClassPair = findSetterClassPair(object, itemName);\n246               boolean processed = false;\n247               if (!hasClass(param)) {\n248                   if (setterClassPair.itemClass.isAssignableFrom(Map.class) && isMap(param)) {\n249                       tryToSetMap(object, param);\n250                       processed = true;\n251                   } else if (setterClassPair.itemClass.isAssignableFrom(List.class)) {\n252                       tryToSetList(object, param);\n253                       processed = true;\n254                   }\n255               }\n256               if (!processed) {\n257                   if (isPrimitive(setterClassPair.itemClass)) {\n258                       tryToSetPrimitive(object, setterClassPair, param.getTextContent());\n259                   } else {\n260                       //tryToSetPrimitive(object, localName, txt);\n261                       Object item = buildClass(param, itemName, setterClassPair.itemClass);\n262                       setParams(setterClassPair.itemClass.cast(item), param, new HashSet<>());\n263                       try {\n264                           setterClassPair.setterMethod.invoke(object, item);\n265                       } catch (IllegalAccessException | InvocationTargetException e) {\n266                           throw new TikaConfigException(\"problem creating \" + itemName, e);\n267                       }\n268                   }\n269               }\n270   \n271               if (txt != null) {\n272                   settings.add(localName);\n273               }\n274           }\n275   \n276           if (object instanceof Initializable) {\n277               ((Initializable) object).initialize(Collections.EMPTY_MAP);\n278               ((Initializable) object).checkInitialization(InitializableProblemHandler.THROW);\n279           }\n280       }\n360       private static void tryToSetList(Object object, Node param) throws TikaConfigException {\n361           if (hasClass(param)) {\n362               tryToSetClassList(object, param);\n363           } else {\n364               tryToSetStringList(object, param);\n365           }\n366       }\n368       private static void tryToSetClassList(Object object, Node node) throws TikaConfigException {\n369           String name = node.getLocalName();\n370           try {\n371               Class interfaze =\n372                       Class.forName(node.getAttributes().getNamedItem(\"class\").getTextContent());\n373               List items = new ArrayList<Object>();\n374               NodeList nodeList = node.getChildNodes();\n375               for (int i = 0; i < nodeList.getLength(); i++) {\n376                   Node child = nodeList.item(i);\n377                   if (child.getNodeType() == 1) {\n378                       Object item = buildClass(child, child.getLocalName(), interfaze);\n379                       setParams(item, child, new HashSet<>());\n380                       items.add(item);\n381                   }\n382               }\n383   \n384               String setter = \"set\" + name.substring(0, 1).toUpperCase(Locale.US) + name.substring(1);\n385               Method m = object.getClass().getMethod(setter, List.class);\n386               m.invoke(object, items);\n387   \n388           } catch (ClassNotFoundException | InvocationTargetException | NoSuchMethodException |\n389                    IllegalAccessException e) {\n390               throw new TikaConfigException(\"couldn't build class for \" + name, e);\n391           }\n392       }\n",
            "cost": 0.10928000000000002,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:386:22",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 196
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/metadata/filter/MetadataFilter.java:\n44       public static MetadataFilter load(Element root, boolean allowMissing) throws TikaConfigException,\n45               IOException {\n46           try {\n47               return buildComposite(\"metadataFilters\", CompositeMetadataFilter.class,\n48                       \"metadataFilter\", MetadataFilter.class, root);\n49           } catch (TikaConfigException e) {\n50               if (allowMissing && e.getMessage().contains(\"could not find metadataFilters\")) {\n51                   return new NoOpFilter();\n52               }\n53               throw e;\n54           }\n55       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:\n139       protected static <P, T> P buildComposite(String compositeElementName, Class<P> compositeClass,\n140                                                String itemName, Class<T> itemClass,\n141                                                Element properties)\n142               throws TikaConfigException, IOException {\n143   \n144           if (!properties.getLocalName().equals(\"properties\")) {\n145               throw new TikaConfigException(\"expect properties as root node\");\n146           }\n147           NodeList children = properties.getChildNodes();\n148   \n149           for (int i = 0; i < children.getLength(); i++) {\n150               Node child = children.item(i);\n151               if (child.getNodeType() != 1) {\n152                   continue;\n153               }\n154               if (compositeElementName.equals(child.getLocalName())) {\n155                   List<T> components = loadComposite(child, itemName, itemClass);\n156                   Constructor constructor = null;\n157                   try {\n158                       constructor = compositeClass.getConstructor(List.class);\n159                       P composite = (P) constructor.newInstance(components);\n160                       setParams(composite, child, new HashSet<>(), itemName);\n161                       return composite;\n162                   } catch (NoSuchMethodException | InvocationTargetException |\n163                            InstantiationException | IllegalAccessException e) {\n164                       throw new TikaConfigException(\"can't build composite class\", e);\n165                   }\n166               }\n167           }\n168           throw new TikaConfigException(\"could not find \" + compositeElementName);\n169       }\n218       private static void setParams(Object object, Node targetNode, Set<String> settings,\n219                                     String exceptNodeName) throws TikaConfigException {\n220           NodeList children = targetNode.getChildNodes();\n221           List<Node> params = new ArrayList<>();\n222           for (int i = 0; i < children.getLength(); i++) {\n223               Node child = children.item(i);\n224   \n225               if (\"params\".equals(child.getLocalName())) {\n226                   NodeList paramsList = child.getChildNodes();\n227                   for (int j = 0; j < paramsList.getLength(); j++) {\n228                       params.add(paramsList.item(j));\n229                   }\n230               } else {\n231                   params.add(child);\n232               }\n233           }\n234           for (int i = 0; i < params.size(); i++) {\n235               Node param = params.get(i);\n236               if (param.getNodeType() != 1) {\n237                   continue;\n238               }\n239               String localName = param.getLocalName();\n240               if (localName == null || localName.equals(exceptNodeName)) {\n241                   continue;\n242               }\n243               String txt = param.getTextContent();\n244               String itemName = param.getLocalName();\n245               SetterClassPair setterClassPair = findSetterClassPair(object, itemName);\n246               boolean processed = false;\n247               if (!hasClass(param)) {\n248                   if (setterClassPair.itemClass.isAssignableFrom(Map.class) && isMap(param)) {\n249                       tryToSetMap(object, param);\n250                       processed = true;\n251                   } else if (setterClassPair.itemClass.isAssignableFrom(List.class)) {\n252                       tryToSetList(object, param);\n253                       processed = true;\n254                   }\n255               }\n256               if (!processed) {\n257                   if (isPrimitive(setterClassPair.itemClass)) {\n258                       tryToSetPrimitive(object, setterClassPair, param.getTextContent());\n259                   } else {\n260                       //tryToSetPrimitive(object, localName, txt);\n261                       Object item = buildClass(param, itemName, setterClassPair.itemClass);\n262                       setParams(setterClassPair.itemClass.cast(item), param, new HashSet<>());\n263                       try {\n264                           setterClassPair.setterMethod.invoke(object, item);\n265                       } catch (IllegalAccessException | InvocationTargetException e) {\n266                           throw new TikaConfigException(\"problem creating \" + itemName, e);\n267                       }\n268                   }\n269               }\n270   \n271               if (txt != null) {\n272                   settings.add(localName);\n273               }\n274           }\n275   \n276           if (object instanceof Initializable) {\n277               ((Initializable) object).initialize(Collections.EMPTY_MAP);\n278               ((Initializable) object).checkInitialization(InitializableProblemHandler.THROW);\n279           }\n280       }\n",
            "cost": 0.1013,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:264:25",
            "status": "corpus",
            "valid_path": "NO",
            "id": 197
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/metadata/filter/MetadataFilter.java:\n44       public static MetadataFilter load(Element root, boolean allowMissing) throws TikaConfigException,\n45               IOException {\n46           try {\n47               return buildComposite(\"metadataFilters\", CompositeMetadataFilter.class,\n48                       \"metadataFilter\", MetadataFilter.class, root);\n49           } catch (TikaConfigException e) {\n50               if (allowMissing && e.getMessage().contains(\"could not find metadataFilters\")) {\n51                   return new NoOpFilter();\n52               }\n53               throw e;\n54           }\n55       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:\n139       protected static <P, T> P buildComposite(String compositeElementName, Class<P> compositeClass,\n140                                                String itemName, Class<T> itemClass,\n141                                                Element properties)\n142               throws TikaConfigException, IOException {\n143   \n144           if (!properties.getLocalName().equals(\"properties\")) {\n145               throw new TikaConfigException(\"expect properties as root node\");\n146           }\n147           NodeList children = properties.getChildNodes();\n148   \n149           for (int i = 0; i < children.getLength(); i++) {\n150               Node child = children.item(i);\n151               if (child.getNodeType() != 1) {\n152                   continue;\n153               }\n154               if (compositeElementName.equals(child.getLocalName())) {\n155                   List<T> components = loadComposite(child, itemName, itemClass);\n156                   Constructor constructor = null;\n157                   try {\n158                       constructor = compositeClass.getConstructor(List.class);\n159                       P composite = (P) constructor.newInstance(components);\n160                       setParams(composite, child, new HashSet<>(), itemName);\n161                       return composite;\n162                   } catch (NoSuchMethodException | InvocationTargetException |\n163                            InstantiationException | IllegalAccessException e) {\n164                       throw new TikaConfigException(\"can't build composite class\", e);\n165                   }\n166               }\n167           }\n168           throw new TikaConfigException(\"could not find \" + compositeElementName);\n169       }\n218       private static void setParams(Object object, Node targetNode, Set<String> settings,\n219                                     String exceptNodeName) throws TikaConfigException {\n220           NodeList children = targetNode.getChildNodes();\n221           List<Node> params = new ArrayList<>();\n222           for (int i = 0; i < children.getLength(); i++) {\n223               Node child = children.item(i);\n224   \n225               if (\"params\".equals(child.getLocalName())) {\n226                   NodeList paramsList = child.getChildNodes();\n227                   for (int j = 0; j < paramsList.getLength(); j++) {\n228                       params.add(paramsList.item(j));\n229                   }\n230               } else {\n231                   params.add(child);\n232               }\n233           }\n234           for (int i = 0; i < params.size(); i++) {\n235               Node param = params.get(i);\n236               if (param.getNodeType() != 1) {\n237                   continue;\n238               }\n239               String localName = param.getLocalName();\n240               if (localName == null || localName.equals(exceptNodeName)) {\n241                   continue;\n242               }\n243               String txt = param.getTextContent();\n244               String itemName = param.getLocalName();\n245               SetterClassPair setterClassPair = findSetterClassPair(object, itemName);\n246               boolean processed = false;\n247               if (!hasClass(param)) {\n248                   if (setterClassPair.itemClass.isAssignableFrom(Map.class) && isMap(param)) {\n249                       tryToSetMap(object, param);\n250                       processed = true;\n251                   } else if (setterClassPair.itemClass.isAssignableFrom(List.class)) {\n252                       tryToSetList(object, param);\n253                       processed = true;\n254                   }\n255               }\n256               if (!processed) {\n257                   if (isPrimitive(setterClassPair.itemClass)) {\n258                       tryToSetPrimitive(object, setterClassPair, param.getTextContent());\n259                   } else {\n260                       //tryToSetPrimitive(object, localName, txt);\n261                       Object item = buildClass(param, itemName, setterClassPair.itemClass);\n262                       setParams(setterClassPair.itemClass.cast(item), param, new HashSet<>());\n263                       try {\n264                           setterClassPair.setterMethod.invoke(object, item);\n265                       } catch (IllegalAccessException | InvocationTargetException e) {\n266                           throw new TikaConfigException(\"problem creating \" + itemName, e);\n267                       }\n268                   }\n269               }\n270   \n271               if (txt != null) {\n272                   settings.add(localName);\n273               }\n274           }\n275   \n276           if (object instanceof Initializable) {\n277               ((Initializable) object).initialize(Collections.EMPTY_MAP);\n278               ((Initializable) object).checkInitialization(InitializableProblemHandler.THROW);\n279           }\n280       }\n",
            "cost": 0.10350000000000001,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:264:61",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 198
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:1103:61",
            "status": "error",
            "id": 199
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 344       private static InputStream getConfigInputStream(String config, ServiceLoader serviceLoader)\n 345               throws TikaException, IOException {\n 346           InputStream stream = null;\n 347           try {\n 348               stream = new URL(config).openStream();\n 349           } catch (IOException ignore) {\n 350           }\n 351           if (stream == null) {\n 352               stream = serviceLoader.getResourceAsStream(config);\n 353           }\n 354           if (stream == null) {\n 355               Path file = Paths.get(config);\n 356               if (Files.isRegularFile(file)) {\n 357                   stream = Files.newInputStream(file);\n 358               }\n 359           }\n 360           if (stream == null) {\n 361               throw new TikaException(\"Specified Tika configuration not found: \" + config);\n 362           }\n 363           return stream;\n 364       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n",
            "cost": 0.09068,
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:357:47",
            "status": "corpus",
            "valid_path": "NO",
            "id": 200
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 265       private static void async(String[] args) throws Exception {\n 266           String tikaConfigPath = \"\";\n 267           String config = \"--config=\";\n 268           for (String arg : args) {\n 269               if (arg.startsWith(config)) {\n 270                   tikaConfigPath = arg.substring(config.length());\n 271               }\n 272           }\n 273           TikaAsyncCLI.main(new String[]{tikaConfigPath});\n 274       }\n\nsrc/tika/tika-pipes/tika-async-cli/src/main/java/org/apache/tika/async/cli/TikaAsyncCLI.java:\n35       public static void main(String[] args) throws Exception {\n36           Path tikaConfigPath = Paths.get(args[0]);\n37           PipesIterator pipesIterator = PipesIterator.build(tikaConfigPath);\n38           long start = System.currentTimeMillis();\n39           try (AsyncProcessor processor = new AsyncProcessor(tikaConfigPath, pipesIterator)) {\n40   \n41               for (FetchEmitTuple t : pipesIterator) {\n42                   boolean offered = processor.offer(t, TIMEOUT_MS);\n43                   if (!offered) {\n44                       throw new TimeoutException(\"timed out waiting to add a fetch emit tuple\");\n45                   }\n46               }\n47               processor.finished();\n48               while (true) {\n49                   if (processor.checkActive()) {\n50                       Thread.sleep(500);\n51                   } else {\n52                       break;\n53                   }\n54               }\n55               long elapsed = System.currentTimeMillis() - start;\n56               LOG.info(\"Successfully finished processing {} files in {} ms\", processor.getTotalProcessed(), elapsed);\n57           }\n58       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/pipes/async/AsyncProcessor.java:\n 76       public AsyncProcessor(Path tikaConfigPath, PipesIterator pipesIterator) throws TikaException, IOException {\n 77           this.asyncConfig = AsyncConfig.load(tikaConfigPath);\n 78           this.fetchEmitTuples = new ArrayBlockingQueue<>(asyncConfig.getQueueSize());\n 79           this.emitData = new ArrayBlockingQueue<>(100);\n 80           //+1 is the watcher thread\n 81           this.executorService = Executors.newFixedThreadPool(\n 82                   asyncConfig.getNumClients() + asyncConfig.getNumEmitters() + 1);\n 83           this.executorCompletionService =\n 84                   new ExecutorCompletionService<>(executorService);\n 85           try {\n 86               if (!tikaConfigPath.toAbsolutePath().equals(asyncConfig.getTikaConfig().toAbsolutePath())) {\n 87                   LOG.warn(\"TikaConfig for AsyncProcessor ({}) is different \" +\n 88                                   \"from TikaConfig for workers ({}). If this is intended,\" +\n 89                                   \" please ignore this warning.\", tikaConfigPath.toAbsolutePath(),\n 90                           asyncConfig.getTikaConfig().toAbsolutePath());\n 91               }\n 92               this.executorCompletionService.submit(() -> {\n 93                   while (true) {\n 94                       try {\n 95                           Thread.sleep(500);\n 96                           checkActive();\n 97                       } catch (InterruptedException e) {\n 98                           return WATCHER_FUTURE_CODE;\n 99                       }\n100                   }\n101               });\n102               //this is run in a daemon thread\n103               if (pipesIterator != null && (pipesIterator instanceof TotalCounter)) {\n104                   LOG.debug(\"going to total counts\");\n105                   startCounter((TotalCounter) pipesIterator);\n106               }\n107   \n108               for (int i = 0; i < asyncConfig.getNumClients(); i++) {\n109                   executorCompletionService.submit(\n110                           new FetchEmitWorker(asyncConfig, fetchEmitTuples, emitData));\n111               }\n112   \n113               EmitterManager emitterManager = EmitterManager.load(asyncConfig.getTikaConfig());\n114               for (int i = 0; i < asyncConfig.getNumEmitters(); i++) {\n115                   executorCompletionService.submit(\n116                           new AsyncEmitter(asyncConfig, emitData, emitterManager));\n117               }\n118           } catch (Exception e) {\n119               LOG.error(\"problem initializing AsyncProcessor\", e);\n120               executorService.shutdownNow();\n121               asyncConfig.getPipesReporter().error(e);\n122               throw e;\n123           }\n124       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/pipes/async/AsyncConfig.java:\n 40       public static AsyncConfig load(Path p) throws IOException, TikaConfigException {\n 41           AsyncConfig asyncConfig = new AsyncConfig();\n 42           try (InputStream is = Files.newInputStream(p)) {\n 43               asyncConfig.configure(\"async\", is);\n 44           }\n 45           if (asyncConfig.getTikaConfig() == null) {\n 46               asyncConfig.setTikaConfig(p);\n 47           }\n 48           return asyncConfig;\n 49       }\n",
            "cost": 0.06217,
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/pipes/async/AsyncConfig.java:42:52",
            "status": "corpus",
            "valid_path": "NO",
            "id": 201
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java:455:52",
            "status": "error",
            "id": 202
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n1040           public void process(InputStream input, OutputStream output, Metadata metadata) throws Exception {\n1041               Parser p = parser;\n1042               if (fork) {\n1043                   p = new ForkParser(TikaCLI.class.getClassLoader(), p);\n1044               }\n1045               ContentHandler handler = getContentHandler(output, metadata);\n1046               try {\n1047                   p.parse(input, handler, metadata, context);\n1048                   // fix for TIKA-596: if a parser doesn't generate\n1049                   // XHTML output, the lack of an output document prevents\n1050                   // metadata from being output: this fixes that\n1051                   if (handler instanceof NoDocumentMetHandler) {\n1052                       NoDocumentMetHandler metHandler = (NoDocumentMetHandler) handler;\n1053                       if (!metHandler.metOutput()) {\n1054                           metHandler.endDocument();\n1055                       }\n1056                   }\n1057               } finally {\n1058                   if (fork) {\n1059                       ((ForkParser) p).close();\n1060                   }\n1061               }\n1062           }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParser.java:\n268       public void parse(InputStream stream, ContentHandler handler, Metadata metadata,\n269                         ParseContext context) throws IOException, SAXException, TikaException {\n270           XHTMLContentHandler xhtml = new XHTMLContentHandler(handler, metadata);\n271   \n272           TemporaryResources tmp = new TemporaryResources();\n273           try {\n274               parse(TikaInputStream.get(stream, tmp, metadata), xhtml, metadata, tmp);\n275           } finally {\n276               tmp.dispose();\n277           }\n278       }\n280       private void parse(TikaInputStream stream, XHTMLContentHandler xhtml, Metadata metadata,\n281                          TemporaryResources tmp) throws IOException, SAXException, TikaException {\n282           boolean inputToStdIn = true;\n283           boolean outputFromStdOut = true;\n284           boolean hasPatterns = (metadataPatterns != null && !metadataPatterns.isEmpty());\n285   \n286           File output = null;\n287   \n288           // Build our command\n289           String[] cmd;\n290           if (command.length == 1) {\n291               cmd = command[0].split(\" \");\n292           } else {\n293               cmd = new String[command.length];\n294               System.arraycopy(command, 0, cmd, 0, command.length);\n295           }\n296           for (int i = 0; i < cmd.length; i++) {\n297               if (cmd[i].contains(INPUT_FILE_TOKEN)) {\n298                   cmd[i] = cmd[i].replace(INPUT_FILE_TOKEN, stream.getFile().getPath());\n299                   inputToStdIn = false;\n300               }\n301               if (cmd[i].contains(OUTPUT_FILE_TOKEN)) {\n302                   output = tmp.createTemporaryFile();\n303                   outputFromStdOut = false;\n304                   cmd[i] = cmd[i].replace(OUTPUT_FILE_TOKEN, output.getPath());\n305               }\n306           }\n307   \n308           // Execute\n309           Process process = null;\n310           try {\n311               if (cmd.length == 1) {\n312                   process = Runtime.getRuntime().exec(cmd[0]);\n313               } else {\n314                   process = Runtime.getRuntime().exec(cmd);\n315               }\n316           } catch (Exception e) {\n317               LOG.warn(\"problem with process exec\", e);\n318           }\n319   \n320           try {\n321               if (inputToStdIn) {\n322                   sendInput(process, stream);\n323               } else {\n324                   process.getOutputStream().close();\n325               }\n326   \n327               InputStream out = process.getInputStream();\n328               InputStream err = process.getErrorStream();\n329   \n330               if (hasPatterns) {\n331                   extractMetadata(err, metadata);\n332   \n333                   if (outputFromStdOut) {\n334                       extractOutput(out, xhtml);\n335                   } else {\n336                       extractMetadata(out, metadata);\n337                   }\n338               } else {\n339                   ignoreStream(err);\n340   \n341                   if (outputFromStdOut) {\n342                       extractOutput(out, xhtml);\n343                   } else {\n344                       ignoreStream(out);\n345                   }\n346               }\n347           } finally {\n348               try {\n349                   process.waitFor();\n350               } catch (InterruptedException ignore) {\n351               }\n352           }\n353   \n354           // Grab the output if we haven't already\n355           if (!outputFromStdOut) {\n356               try (FileInputStream fileInputStream = new FileInputStream(output)) {\n357                   extractOutput(fileInputStream, xhtml);\n358               }\n359           }\n360       }\n",
            "cost": 0.08609,
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParser.java:356:72",
            "status": "corpus",
            "valid_path": "NO",
            "id": 203
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/pipes/pipesiterator/PipesIterator.java:85:52",
            "status": "error",
            "id": 204
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-image-module/src/main/java/org/apache/tika/parser/image/AbstractImageParser.java:92:64",
            "status": "error",
            "id": 205
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-image-module/src/main/java/org/apache/tika/parser/image/AbstractImageParser.java:100:64",
            "status": "error",
            "id": 206
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/io/TikaInputStream.java:704:36",
            "status": "error",
            "id": 207
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/io/TikaInputStream.java:704:56",
            "status": "error",
            "id": 208
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/io/TikaInputStream.java:714:32",
            "status": "error",
            "id": 209
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/io/TikaInputStream.java:714:38",
            "status": "error",
            "id": 210
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/io/TikaInputStream.java:720:62",
            "status": "error",
            "id": 211
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/parser/external2/ExternalParser.java:169:70",
            "status": "error",
            "id": 212
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/detect/FileCommandDetector.java:112:24",
            "status": "error",
            "id": 213
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/detect/FileCommandDetector.java:112:65",
            "status": "error",
            "id": 214
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-parsers/tika-parsers-extended/tika-parser-sqlite3-module/src/main/java/org/apache/tika/parser/sqlite3/SQLite3DBParser.java:107:24",
            "status": "error",
            "id": 215
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-parsers/tika-parsers-extended/tika-parser-sqlite3-module/src/main/java/org/apache/tika/parser/sqlite3/SQLite3DBParser.java:107:28",
            "status": "error",
            "id": 216
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-pkg-module/src/main/java/org/apache/tika/parser/pkg/UnrarParser.java:80:58",
            "status": "error",
            "id": 217
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/pipes/emitter/EmitterManager.java:42:52",
            "status": "error",
            "id": 218
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-parsers/tika-parsers-extended/tika-parser-scientific-module/src/main/java/org/apache/tika/parser/gdal/GDALParser.java:276:44",
            "status": "error",
            "id": 219
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-parsers/tika-parsers-extended/tika-parser-scientific-module/src/main/java/org/apache/tika/parser/gdal/GDALParser.java:235:44",
            "status": "error",
            "id": 220
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-pipes/tika-emitters/tika-emitter-fs/src/main/java/org/apache/tika/pipes/emitter/fs/FileSystemEmitter.java:153:24",
            "status": "error",
            "id": 221
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-pipes/tika-emitters/tika-emitter-fs/src/main/java/org/apache/tika/pipes/emitter/fs/FileSystemEmitter.java:153:37",
            "status": "error",
            "id": 222
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-pipes/tika-emitters/tika-emitter-fs/src/main/java/org/apache/tika/pipes/emitter/fs/FileSystemEmitter.java:155:24",
            "status": "error",
            "id": 223
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-pipes/tika-emitters/tika-emitter-fs/src/main/java/org/apache/tika/pipes/emitter/fs/FileSystemEmitter.java:155:37",
            "status": "error",
            "id": 224
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-pipes/tika-emitters/tika-emitter-fs/src/main/java/org/apache/tika/pipes/emitter/fs/FileSystemEmitter.java:159:32",
            "status": "error",
            "id": 225
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-pipes/tika-emitters/tika-emitter-fs/src/main/java/org/apache/tika/pipes/emitter/fs/FileSystemEmitter.java:159:45",
            "status": "error",
            "id": 226
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 265       private static void async(String[] args) throws Exception {\n 266           String tikaConfigPath = \"\";\n 267           String config = \"--config=\";\n 268           for (String arg : args) {\n 269               if (arg.startsWith(config)) {\n 270                   tikaConfigPath = arg.substring(config.length());\n 271               }\n 272           }\n 273           TikaAsyncCLI.main(new String[]{tikaConfigPath});\n 274       }\n\nsrc/tika/tika-pipes/tika-async-cli/src/main/java/org/apache/tika/async/cli/TikaAsyncCLI.java:\n35       public static void main(String[] args) throws Exception {\n36           Path tikaConfigPath = Paths.get(args[0]);\n37           PipesIterator pipesIterator = PipesIterator.build(tikaConfigPath);\n38           long start = System.currentTimeMillis();\n39           try (AsyncProcessor processor = new AsyncProcessor(tikaConfigPath, pipesIterator)) {\n40   \n41               for (FetchEmitTuple t : pipesIterator) {\n42                   boolean offered = processor.offer(t, TIMEOUT_MS);\n43                   if (!offered) {\n44                       throw new TimeoutException(\"timed out waiting to add a fetch emit tuple\");\n45                   }\n46               }\n47               processor.finished();\n48               while (true) {\n49                   if (processor.checkActive()) {\n50                       Thread.sleep(500);\n51                   } else {\n52                       break;\n53                   }\n54               }\n55               long elapsed = System.currentTimeMillis() - start;\n56               LOG.info(\"Successfully finished processing {} files in {} ms\", processor.getTotalProcessed(), elapsed);\n57           }\n58       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/pipes/async/AsyncProcessor.java:\n 76       public AsyncProcessor(Path tikaConfigPath, PipesIterator pipesIterator) throws TikaException, IOException {\n 77           this.asyncConfig = AsyncConfig.load(tikaConfigPath);\n 78           this.fetchEmitTuples = new ArrayBlockingQueue<>(asyncConfig.getQueueSize());\n 79           this.emitData = new ArrayBlockingQueue<>(100);\n 80           //+1 is the watcher thread\n 81           this.executorService = Executors.newFixedThreadPool(\n 82                   asyncConfig.getNumClients() + asyncConfig.getNumEmitters() + 1);\n 83           this.executorCompletionService =\n 84                   new ExecutorCompletionService<>(executorService);\n 85           try {\n 86               if (!tikaConfigPath.toAbsolutePath().equals(asyncConfig.getTikaConfig().toAbsolutePath())) {\n 87                   LOG.warn(\"TikaConfig for AsyncProcessor ({}) is different \" +\n 88                                   \"from TikaConfig for workers ({}). If this is intended,\" +\n 89                                   \" please ignore this warning.\", tikaConfigPath.toAbsolutePath(),\n 90                           asyncConfig.getTikaConfig().toAbsolutePath());\n 91               }\n 92               this.executorCompletionService.submit(() -> {\n 93                   while (true) {\n 94                       try {\n 95                           Thread.sleep(500);\n 96                           checkActive();\n 97                       } catch (InterruptedException e) {\n 98                           return WATCHER_FUTURE_CODE;\n 99                       }\n100                   }\n101               });\n102               //this is run in a daemon thread\n103               if (pipesIterator != null && (pipesIterator instanceof TotalCounter)) {\n104                   LOG.debug(\"going to total counts\");\n105                   startCounter((TotalCounter) pipesIterator);\n106               }\n107   \n108               for (int i = 0; i < asyncConfig.getNumClients(); i++) {\n109                   executorCompletionService.submit(\n110                           new FetchEmitWorker(asyncConfig, fetchEmitTuples, emitData));\n111               }\n112   \n113               EmitterManager emitterManager = EmitterManager.load(asyncConfig.getTikaConfig());\n114               for (int i = 0; i < asyncConfig.getNumEmitters(); i++) {\n115                   executorCompletionService.submit(\n116                           new AsyncEmitter(asyncConfig, emitData, emitterManager));\n117               }\n118           } catch (Exception e) {\n119               LOG.error(\"problem initializing AsyncProcessor\", e);\n120               executorService.shutdownNow();\n121               asyncConfig.getPipesReporter().error(e);\n122               throw e;\n123           }\n124       }\n\nsrc/tika/tika-pipes/tika-pipes-reporters/tika-pipes-reporter-fs-status/src/main/java/org/apache/tika/pipes/reporters/fs/FileSystemStatusReporter.java:\n124       private synchronized void crash(String crashMessage) {\n125           asyncStatus.updateCrash(crashMessage);\n126           try (Writer writer = Files.newBufferedWriter(statusFile, StandardCharsets.UTF_8)) {\n127               objectMapper.writeValue(writer, asyncStatus);\n128           } catch (IOException e) {\n129               LOG.warn(\"couldn't write report\", e);\n130           }\n131       }\n166       @Override\n167       public void error(Throwable t) {\n168           crashed = true;\n169           interuptThread();\n170           crash(ExceptionUtils.getStackTrace(t));\n171       }\n",
            "cost": 0.06217500000000001,
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-pipes/tika-pipes-reporters/tika-pipes-reporter-fs-status/src/main/java/org/apache/tika/pipes/reporters/fs/FileSystemStatusReporter.java:126:54",
            "status": "corpus",
            "valid_path": "NO",
            "id": 227
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/journal/GrobidRESTParser.java:93:70",
            "status": "error",
            "id": 228
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n1040           public void process(InputStream input, OutputStream output, Metadata metadata) throws Exception {\n1041               Parser p = parser;\n1042               if (fork) {\n1043                   p = new ForkParser(TikaCLI.class.getClassLoader(), p);\n1044               }\n1045               ContentHandler handler = getContentHandler(output, metadata);\n1046               try {\n1047                   p.parse(input, handler, metadata, context);\n1048                   // fix for TIKA-596: if a parser doesn't generate\n1049                   // XHTML output, the lack of an output document prevents\n1050                   // metadata from being output: this fixes that\n1051                   if (handler instanceof NoDocumentMetHandler) {\n1052                       NoDocumentMetHandler metHandler = (NoDocumentMetHandler) handler;\n1053                       if (!metHandler.metOutput()) {\n1054                           metHandler.endDocument();\n1055                       }\n1056                   }\n1057               } finally {\n1058                   if (fork) {\n1059                       ((ForkParser) p).close();\n1060                   }\n1061               }\n1062           }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-pkg-module/src/main/java/org/apache/tika/parser/pkg/CompressorParser.java:\n168       @Override\n169       public void parse(InputStream stream, ContentHandler handler, Metadata metadata,\n170                         ParseContext context) throws IOException, SAXException, TikaException {\n171           // At the end we want to close the compression stream to release\n172           // any associated resources, but the underlying document stream\n173           // should not be closed\n174           if (stream.markSupported()) {\n175               stream = CloseShieldInputStream.wrap(stream);\n176           } else {\n177               // Ensure that the stream supports the mark feature\n178               stream = new BufferedInputStream(CloseShieldInputStream.wrap(stream));\n179           }\n180   \n181           CompressorInputStream cis;\n182           try {\n183               CompressorParserOptions options =\n184                       context.get(CompressorParserOptions.class, metadata1 -> decompressConcatenated);\n185               CompressorStreamFactory factory =\n186                       new CompressorStreamFactory(options.decompressConcatenated(metadata),\n187                               memoryLimitInKb);\n188               //if we've already identified it via autodetect\n189               //trust that and go with the appropriate name\n190               //to avoid calling CompressorStreamFactory.detect() twice\n191               String name = getStreamName(metadata);\n192               if (name != null) {\n193                   cis = factory.createCompressorInputStream(name, stream);\n194               } else {\n195                   cis = factory.createCompressorInputStream(stream);\n196                   MediaType type = getMediaType(cis);\n197                   if (!type.equals(MediaType.OCTET_STREAM)) {\n198                       metadata.set(CONTENT_TYPE, type.toString());\n199                   }\n200               }\n201           } catch (CompressorException e) {\n202               if (e.getCause() != null && e.getCause() instanceof MemoryLimitException) {\n203                   throw new TikaMemoryLimitException(e.getMessage());\n204               }\n205               throw new TikaException(\"Unable to uncompress document stream\", e);\n206           }\n207   \n208   \n209           XHTMLContentHandler xhtml = new XHTMLContentHandler(handler, metadata);\n210           xhtml.startDocument();\n211   \n212           try {\n213               Metadata entrydata = new Metadata();\n214               String name = metadata.get(TikaCoreProperties.RESOURCE_NAME_KEY);\n215               if (name != null) {\n216                   if (name.endsWith(\".tbz\") || name.endsWith(\".tbz2\")) {\n217                       name = name.substring(0, name.lastIndexOf(\".\")) + \".tar\";\n218                   } else if (name.endsWith(\".bz\") || name.endsWith(\".bz2\") || name.endsWith(\".xz\") ||\n219                           name.endsWith(\".zlib\") || name.endsWith(\".pack\") || name.endsWith(\".br\")) {\n220                       name = name.substring(0, name.lastIndexOf(\".\"));\n221                   } else if (name.length() > 0) {\n222                       name = GzipUtils.getUncompressedFileName(name);\n223                   }\n224                   entrydata.set(TikaCoreProperties.RESOURCE_NAME_KEY, name);\n225               }\n226   \n227               // Use the delegate parser to parse the compressed document\n228               EmbeddedDocumentExtractor extractor =\n229                       EmbeddedDocumentUtil.getEmbeddedDocumentExtractor(context);\n230               if (extractor.shouldParseEmbedded(entrydata)) {\n231                   extractor.parseEmbedded(cis, xhtml, entrydata, true);\n232               }\n233           } finally {\n234               cis.close();\n235           }\n236   \n237           xhtml.endDocument();\n238       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/extractor/RUnpackExtractor.java:\n 69       @Override\n 70       public void parseEmbedded(\n 71               InputStream stream, ContentHandler handler, Metadata metadata, boolean outputHtml)\n 72               throws SAXException, IOException {\n 73           if (outputHtml) {\n 74               AttributesImpl attributes = new AttributesImpl();\n 75               attributes.addAttribute(\"\", \"class\", \"class\", \"CDATA\", \"package-entry\");\n 76               handler.startElement(XHTML, \"div\", \"div\", attributes);\n 77           }\n 78   \n 79           String name = metadata.get(TikaCoreProperties.RESOURCE_NAME_KEY);\n 80           if (isWriteFileNameToContent() && name != null && name.length() > 0 && outputHtml) {\n 81               handler.startElement(XHTML, \"h1\", \"h1\", new AttributesImpl());\n 82               char[] chars = name.toCharArray();\n 83               handler.characters(chars, 0, chars.length);\n 84               handler.endElement(XHTML, \"h1\", \"h1\");\n 85           }\n 86   \n 87           // Use the delegate parser to parse this entry\n 88           try (TemporaryResources tmp = new TemporaryResources()) {\n 89               final TikaInputStream newStream =\n 90                       TikaInputStream.get(CloseShieldInputStream.wrap(stream), tmp, metadata);\n 91               if (stream instanceof TikaInputStream) {\n 92                   final Object container = ((TikaInputStream) stream).getOpenContainer();\n 93                   if (container != null) {\n 94                       newStream.setOpenContainer(container);\n 95                   }\n 96               }\n 97               EmbeddedDocumentBytesHandler bytesHandler = context.get(EmbeddedDocumentBytesHandler.class);\n 98               if (bytesHandler != null) {\n 99                   parseWithBytes(newStream, handler, metadata);\n100               } else {\n101                   parse(newStream, handler, metadata);\n102               }\n103           } catch (EncryptedDocumentException ede) {\n104               recordException(ede, context);\n105           } catch (CorruptedFileException e) {\n106               //necessary to stop the parse to avoid infinite loops\n107               //on corrupt sqlite3 files\n108               throw new IOException(e);\n109           } catch (TikaException e) {\n110               recordException(e, context);\n111           }\n112   \n113           if (outputHtml) {\n114               handler.endElement(XHTML, \"div\", \"div\");\n115           }\n116       }\n118       private void parseWithBytes(TikaInputStream stream, ContentHandler handler, Metadata metadata)\n119               throws TikaException, IOException, SAXException {\n120           //TODO -- improve the efficiency of this so that we're not\n121           //literally writing out a file per request\n122           Path p = stream.getPath();\n123           try {\n124               //warp in CloseShieldInputStream to ensure that a misbehaving parser isn't closing\n125               //the stream and thereby deleting the temp file.\n126               parse(CloseShieldInputStream.wrap(stream), handler, metadata);\n127           } finally {\n128               storeEmbeddedBytes(p, metadata);\n129           }\n130       }\n139       private void storeEmbeddedBytes(Path p, Metadata metadata) {\n140           if (! embeddedBytesSelector.select(metadata)) {\n141               if (LOGGER.isDebugEnabled()) {\n142                   LOGGER.debug(\"skipping embedded bytes {} <-> {}\",\n143                           metadata.get(Metadata.CONTENT_TYPE),\n144                           metadata.get(TikaCoreProperties.EMBEDDED_RESOURCE_TYPE));\n145               }\n146               return;\n147           }\n148           EmbeddedDocumentBytesHandler embeddedDocumentBytesHandler =\n149                   context.get(EmbeddedDocumentBytesHandler.class);\n150           int id = metadata.getInt(TikaCoreProperties.EMBEDDED_ID);\n151           try (InputStream is = Files.newInputStream(p)) {\n152               if (bytesExtracted >= maxEmbeddedBytesForExtraction) {\n153                   throw new IOException(\"Bytes extracted (\" + bytesExtracted +\n154                           \") >= max allowed (\" + maxEmbeddedBytesForExtraction + \")\");\n155               }\n156               long maxToRead = maxEmbeddedBytesForExtraction - bytesExtracted;\n157   \n158               try (BoundedInputStream boundedIs = new BoundedInputStream(maxToRead, is)) {\n159                   embeddedDocumentBytesHandler.add(id, metadata, boundedIs);\n160                   bytesExtracted += boundedIs.getPos();\n161                   if (boundedIs.hasHitBound()) {\n162                       throw new IOException(\"Bytes extracted (\" + bytesExtracted +\n163                               \") >= max allowed (\" + maxEmbeddedBytesForExtraction + \"). Truncated \" +\n164                               \"bytes\");\n165                   }\n166               }\n167           } catch (IOException e) {\n168               LOGGER.warn(\"problem writing out embedded bytes\", e);\n169               //info in metadata doesn't actually make it back to the metadata list\n170               //because we're filtering and cloning the metadata at the end of the parse\n171               //which happens before we try to copy out the files.\n172               //TODO fix this\n173               //metadata.set(TikaCoreProperties.EMBEDDED_BYTES_EXCEPTION,\n174                 //      ExceptionUtils.getStackTrace(e));\n175           }\n176       }\n",
            "cost": 0.10600000000000001,
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/extractor/RUnpackExtractor.java:151:52",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 229
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-zip-commons/src/main/java/org/apache/tika/detect/zip/DefaultZipContainerDetector.java:246:80",
            "status": "error",
            "id": 230
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n1040           public void process(InputStream input, OutputStream output, Metadata metadata) throws Exception {\n1041               Parser p = parser;\n1042               if (fork) {\n1043                   p = new ForkParser(TikaCLI.class.getClassLoader(), p);\n1044               }\n1045               ContentHandler handler = getContentHandler(output, metadata);\n1046               try {\n1047                   p.parse(input, handler, metadata, context);\n1048                   // fix for TIKA-596: if a parser doesn't generate\n1049                   // XHTML output, the lack of an output document prevents\n1050                   // metadata from being output: this fixes that\n1051                   if (handler instanceof NoDocumentMetHandler) {\n1052                       NoDocumentMetHandler metHandler = (NoDocumentMetHandler) handler;\n1053                       if (!metHandler.metOutput()) {\n1054                           metHandler.endDocument();\n1055                       }\n1056                   }\n1057               } finally {\n1058                   if (fork) {\n1059                       ((ForkParser) p).close();\n1060                   }\n1061               }\n1062           }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-pkg-module/src/main/java/org/apache/tika/parser/pkg/CompressorParser.java:\n168       @Override\n169       public void parse(InputStream stream, ContentHandler handler, Metadata metadata,\n170                         ParseContext context) throws IOException, SAXException, TikaException {\n171           // At the end we want to close the compression stream to release\n172           // any associated resources, but the underlying document stream\n173           // should not be closed\n174           if (stream.markSupported()) {\n175               stream = CloseShieldInputStream.wrap(stream);\n176           } else {\n177               // Ensure that the stream supports the mark feature\n178               stream = new BufferedInputStream(CloseShieldInputStream.wrap(stream));\n179           }\n180   \n181           CompressorInputStream cis;\n182           try {\n183               CompressorParserOptions options =\n184                       context.get(CompressorParserOptions.class, metadata1 -> decompressConcatenated);\n185               CompressorStreamFactory factory =\n186                       new CompressorStreamFactory(options.decompressConcatenated(metadata),\n187                               memoryLimitInKb);\n188               //if we've already identified it via autodetect\n189               //trust that and go with the appropriate name\n190               //to avoid calling CompressorStreamFactory.detect() twice\n191               String name = getStreamName(metadata);\n192               if (name != null) {\n193                   cis = factory.createCompressorInputStream(name, stream);\n194               } else {\n195                   cis = factory.createCompressorInputStream(stream);\n196                   MediaType type = getMediaType(cis);\n197                   if (!type.equals(MediaType.OCTET_STREAM)) {\n198                       metadata.set(CONTENT_TYPE, type.toString());\n199                   }\n200               }\n201           } catch (CompressorException e) {\n202               if (e.getCause() != null && e.getCause() instanceof MemoryLimitException) {\n203                   throw new TikaMemoryLimitException(e.getMessage());\n204               }\n205               throw new TikaException(\"Unable to uncompress document stream\", e);\n206           }\n207   \n208   \n209           XHTMLContentHandler xhtml = new XHTMLContentHandler(handler, metadata);\n210           xhtml.startDocument();\n211   \n212           try {\n213               Metadata entrydata = new Metadata();\n214               String name = metadata.get(TikaCoreProperties.RESOURCE_NAME_KEY);\n215               if (name != null) {\n216                   if (name.endsWith(\".tbz\") || name.endsWith(\".tbz2\")) {\n217                       name = name.substring(0, name.lastIndexOf(\".\")) + \".tar\";\n218                   } else if (name.endsWith(\".bz\") || name.endsWith(\".bz2\") || name.endsWith(\".xz\") ||\n219                           name.endsWith(\".zlib\") || name.endsWith(\".pack\") || name.endsWith(\".br\")) {\n220                       name = name.substring(0, name.lastIndexOf(\".\"));\n221                   } else if (name.length() > 0) {\n222                       name = GzipUtils.getUncompressedFileName(name);\n223                   }\n224                   entrydata.set(TikaCoreProperties.RESOURCE_NAME_KEY, name);\n225               }\n226   \n227               // Use the delegate parser to parse the compressed document\n228               EmbeddedDocumentExtractor extractor =\n229                       EmbeddedDocumentUtil.getEmbeddedDocumentExtractor(context);\n230               if (extractor.shouldParseEmbedded(entrydata)) {\n231                   extractor.parseEmbedded(cis, xhtml, entrydata, true);\n232               }\n233           } finally {\n234               cis.close();\n235           }\n236   \n237           xhtml.endDocument();\n238       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/extractor/RUnpackExtractor.java:\n 69       @Override\n 70       public void parseEmbedded(\n 71               InputStream stream, ContentHandler handler, Metadata metadata, boolean outputHtml)\n 72               throws SAXException, IOException {\n 73           if (outputHtml) {\n 74               AttributesImpl attributes = new AttributesImpl();\n 75               attributes.addAttribute(\"\", \"class\", \"class\", \"CDATA\", \"package-entry\");\n 76               handler.startElement(XHTML, \"div\", \"div\", attributes);\n 77           }\n 78   \n 79           String name = metadata.get(TikaCoreProperties.RESOURCE_NAME_KEY);\n 80           if (isWriteFileNameToContent() && name != null && name.length() > 0 && outputHtml) {\n 81               handler.startElement(XHTML, \"h1\", \"h1\", new AttributesImpl());\n 82               char[] chars = name.toCharArray();\n 83               handler.characters(chars, 0, chars.length);\n 84               handler.endElement(XHTML, \"h1\", \"h1\");\n 85           }\n 86   \n 87           // Use the delegate parser to parse this entry\n 88           try (TemporaryResources tmp = new TemporaryResources()) {\n 89               final TikaInputStream newStream =\n 90                       TikaInputStream.get(CloseShieldInputStream.wrap(stream), tmp, metadata);\n 91               if (stream instanceof TikaInputStream) {\n 92                   final Object container = ((TikaInputStream) stream).getOpenContainer();\n 93                   if (container != null) {\n 94                       newStream.setOpenContainer(container);\n 95                   }\n 96               }\n 97               EmbeddedDocumentBytesHandler bytesHandler = context.get(EmbeddedDocumentBytesHandler.class);\n 98               if (bytesHandler != null) {\n 99                   parseWithBytes(newStream, handler, metadata);\n100               } else {\n101                   parse(newStream, handler, metadata);\n102               }\n103           } catch (EncryptedDocumentException ede) {\n104               recordException(ede, context);\n105           } catch (CorruptedFileException e) {\n106               //necessary to stop the parse to avoid infinite loops\n107               //on corrupt sqlite3 files\n108               throw new IOException(e);\n109           } catch (TikaException e) {\n110               recordException(e, context);\n111           }\n112   \n113           if (outputHtml) {\n114               handler.endElement(XHTML, \"div\", \"div\");\n115           }\n116       }\n118       private void parseWithBytes(TikaInputStream stream, ContentHandler handler, Metadata metadata)\n119               throws TikaException, IOException, SAXException {\n120           //TODO -- improve the efficiency of this so that we're not\n121           //literally writing out a file per request\n122           Path p = stream.getPath();\n123           try {\n124               //warp in CloseShieldInputStream to ensure that a misbehaving parser isn't closing\n125               //the stream and thereby deleting the temp file.\n126               parse(CloseShieldInputStream.wrap(stream), handler, metadata);\n127           } finally {\n128               storeEmbeddedBytes(p, metadata);\n129           }\n130       }\n139       private void storeEmbeddedBytes(Path p, Metadata metadata) {\n140           if (! embeddedBytesSelector.select(metadata)) {\n141               if (LOGGER.isDebugEnabled()) {\n142                   LOGGER.debug(\"skipping embedded bytes {} <-> {}\",\n143                           metadata.get(Metadata.CONTENT_TYPE),\n144                           metadata.get(TikaCoreProperties.EMBEDDED_RESOURCE_TYPE));\n145               }\n146               return;\n147           }\n148           EmbeddedDocumentBytesHandler embeddedDocumentBytesHandler =\n149                   context.get(EmbeddedDocumentBytesHandler.class);\n150           int id = metadata.getInt(TikaCoreProperties.EMBEDDED_ID);\n151           try (InputStream is = Files.newInputStream(p)) {\n152               if (bytesExtracted >= maxEmbeddedBytesForExtraction) {\n153                   throw new IOException(\"Bytes extracted (\" + bytesExtracted +\n154                           \") >= max allowed (\" + maxEmbeddedBytesForExtraction + \")\");\n155               }\n156               long maxToRead = maxEmbeddedBytesForExtraction - bytesExtracted;\n157   \n158               try (BoundedInputStream boundedIs = new BoundedInputStream(maxToRead, is)) {\n159                   embeddedDocumentBytesHandler.add(id, metadata, boundedIs);\n160                   bytesExtracted += boundedIs.getPos();\n161                   if (boundedIs.hasHitBound()) {\n162                       throw new IOException(\"Bytes extracted (\" + bytesExtracted +\n163                               \") >= max allowed (\" + maxEmbeddedBytesForExtraction + \"). Truncated \" +\n164                               \"bytes\");\n165                   }\n166               }\n167           } catch (IOException e) {\n168               LOGGER.warn(\"problem writing out embedded bytes\", e);\n169               //info in metadata doesn't actually make it back to the metadata list\n170               //because we're filtering and cloning the metadata at the end of the parse\n171               //which happens before we try to copy out the files.\n172               //TODO fix this\n173               //metadata.set(TikaCoreProperties.EMBEDDED_BYTES_EXCEPTION,\n174                 //      ExceptionUtils.getStackTrace(e));\n175           }\n176       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/pipes/extractor/EmittingEmbeddedDocumentBytesHandler.java:\n60       @Override\n61       public void add(int id, Metadata metadata, InputStream inputStream) throws IOException {\n62           //intentionally do not call super.add, because we want the ids list to be empty\n63           String emitKey = getEmitKey(containerEmitKey.getEmitKey(),\n64                   id, embeddedDocumentBytesConfig, metadata);\n65           try {\n66               emitter.emit(emitKey, inputStream, METADATA, PARSE_CONTEXT);\n67           } catch (TikaEmitterException e) {\n68               throw new IOException(e);\n69           }\n70       }\n\nsrc/tika/tika-pipes/tika-emitters/tika-emitter-gcs/src/main/java/org/apache/tika/pipes/emitter/gcs/GCSEmitter.java:\n 97       @Override\n 98       public void emit(String path, InputStream is, Metadata userMetadata, ParseContext parseContext) throws IOException, TikaEmitterException {\n 99   \n100           if (is instanceof TikaInputStream && ((TikaInputStream) is).hasFile()) {\n101               write(path, userMetadata, Files.readAllBytes(((TikaInputStream) is).getPath()));\n102           } else {\n103               try (UnsynchronizedByteArrayOutputStream bos = UnsynchronizedByteArrayOutputStream\n104                       .builder()\n105                       .get()) {\n106                   IOUtils.copy(is, bos);\n107                   write(path, userMetadata, bos.toByteArray());\n108               }\n109           }\n110       }\n",
            "cost": 0.11093,
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-pipes/tika-emitters/tika-emitter-gcs/src/main/java/org/apache/tika/pipes/emitter/gcs/GCSEmitter.java:101:58",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 231
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:636:66",
            "status": "error",
            "id": 232
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:865:97",
            "status": "error",
            "id": 233
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/io/TikaInputStream.java:134:60",
            "status": "error",
            "id": 234
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n1040           public void process(InputStream input, OutputStream output, Metadata metadata) throws Exception {\n1041               Parser p = parser;\n1042               if (fork) {\n1043                   p = new ForkParser(TikaCLI.class.getClassLoader(), p);\n1044               }\n1045               ContentHandler handler = getContentHandler(output, metadata);\n1046               try {\n1047                   p.parse(input, handler, metadata, context);\n1048                   // fix for TIKA-596: if a parser doesn't generate\n1049                   // XHTML output, the lack of an output document prevents\n1050                   // metadata from being output: this fixes that\n1051                   if (handler instanceof NoDocumentMetHandler) {\n1052                       NoDocumentMetHandler metHandler = (NoDocumentMetHandler) handler;\n1053                       if (!metHandler.metOutput()) {\n1054                           metHandler.endDocument();\n1055                       }\n1056                   }\n1057               } finally {\n1058                   if (fork) {\n1059                       ((ForkParser) p).close();\n1060                   }\n1061               }\n1062           }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/fork/ForkParser.java:\n236       public void parse(InputStream stream, ContentHandler handler, Metadata metadata,\n237                         ParseContext context) throws IOException, SAXException, TikaException {\n238           if (stream == null) {\n239               throw new NullPointerException(\"null stream\");\n240           }\n241   \n242           Throwable t;\n243   \n244           boolean alive = false;\n245           ForkClient client = acquireClient();\n246           try {\n247               ContentHandler tee =\n248                       (handler instanceof AbstractRecursiveParserWrapperHandler) ? handler :\n249                               new TeeContentHandler(handler, new MetadataContentHandler(metadata));\n250   \n251               t = client.call(\"parse\", stream, tee, metadata, context);\n252               alive = true;\n253           } catch (TikaException te) {\n254               // Problem occurred on our side\n255               alive = true;\n256               throw te;\n257           } catch (IOException e) {\n258               // Problem occurred on the other side\n259               throw new TikaException(\"Failed to communicate with a forked parser process.\" +\n260                       \" The process has most likely crashed due to some error\" +\n261                       \" like running out of memory. A new process will be\" +\n262                       \" started for the next parsing request.\", e);\n263           } finally {\n264               releaseClient(client, alive);\n265           }\n266   \n267           if (t instanceof IOException) {\n268               throw (IOException) t;\n269           } else if (t instanceof SAXException) {\n270               throw (SAXException) t;\n271           } else if (t instanceof TikaException) {\n272               throw (TikaException) t;\n273           } else if (t != null) {\n274               throw new TikaException(\"Unexpected error in forked server process\", t);\n275           }\n276       }\n286       private synchronized ForkClient acquireClient() throws IOException, TikaException {\n287           while (true) {\n288               ForkClient client = pool.poll();\n289   \n290               // Create a new process if there's room in the pool\n291               if (client == null && currentlyInUse < poolSize) {\n292                   client = newClient();\n293               }\n294   \n295               // Ping the process, and get rid of it if it's inactive\n296               if (client != null && !client.ping()) {\n297                   client.close();\n298                   client = null;\n299               }\n300   \n301               if (client != null) {\n302                   currentlyInUse++;\n303                   return client;\n304               } else if (currentlyInUse >= poolSize) {\n305                   try {\n306                       wait();\n307                   } catch (InterruptedException e) {\n308                       throw new TikaException(\"Interrupted while waiting for a fork parser\", e);\n309                   }\n310               }\n311           }\n312       }\n314       private ForkClient newClient() throws IOException, TikaException {\n315           TimeoutLimits timeoutLimits = new TimeoutLimits(serverPulseMillis, serverParseTimeoutMillis,\n316                   serverWaitTimeoutMillis);\n317           if (loader == null && parser == null && tikaBin != null && parserFactoryFactory != null) {\n318               return new ForkClient(tikaBin, parserFactoryFactory, java, timeoutLimits);\n319           } else if (loader != null && parser != null && tikaBin == null &&\n320                   parserFactoryFactory == null) {\n321               return new ForkClient(loader, parser, java, timeoutLimits);\n322           } else if (loader != null && parser == null && tikaBin != null &&\n323                   parserFactoryFactory != null) {\n324               return new ForkClient(tikaBin, parserFactoryFactory, loader, java, timeoutLimits);\n325           } else {\n326               //TODO: make this more useful\n327               throw new IllegalStateException(\"Unexpected combination of state items\");\n328           }\n329       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java:\n134       public ForkClient(ClassLoader loader, Object object, List<String> java,\n135                         TimeoutLimits timeoutLimits) throws IOException, TikaException {\n136           boolean ok = false;\n137           try {\n138               this.loader = loader;\n139               this.jar = createBootstrapJar();\n140   \n141               ProcessBuilder builder = new ProcessBuilder();\n142               List<String> command = new ArrayList<>(java);\n143               command.add(\"-jar\");\n144               command.add(jar.getPath());\n145               command.add(Long.toString(timeoutLimits.getPulseMS()));\n146               command.add(Long.toString(timeoutLimits.getParseTimeoutMS()));\n147               command.add(Long.toString(timeoutLimits.getWaitTimeoutMS()));\n148               builder.command(command);\n149               builder.redirectError(ProcessBuilder.Redirect.INHERIT);\n150               this.process = builder.start();\n151   \n152               this.output = new DataOutputStream(process.getOutputStream());\n153               this.input = new DataInputStream(process.getInputStream());\n154   \n155               waitForStartBeacon();\n156               output.writeByte(ForkServer.INIT_LOADER_PARSER);\n157               output.flush();\n158               sendObject(loader, resources);\n159               sendObject(object, resources);\n160               waitForStartBeacon();\n161   \n162               ok = true;\n163           } finally {\n164               if (!ok) {\n165                   close();\n166               }\n167           }\n168       }\n177       private static File createBootstrapJar() throws IOException {\n178           File file = Files.createTempFile(\"apache-tika-fork-\", \".jar\").toFile();\n179           boolean ok = false;\n180           try {\n181               fillBootstrapJar(file);\n182               ok = true;\n183           } finally {\n184               if (!ok) {\n185                   file.delete();\n186               }\n187           }\n188           return file;\n189       }\n199       private static void fillBootstrapJar(File file) throws IOException {\n200           try (JarOutputStream jar = new JarOutputStream(new FileOutputStream(file))) {\n201               String manifest = \"Main-Class: \" + ForkServer.class.getName() + \"\\n\";\n202               jar.putNextEntry(new ZipEntry(\"META-INF/MANIFEST.MF\"));\n203               jar.write(manifest.getBytes(UTF_8));\n204   \n205               Class<?>[] bootstrap = {ForkServer.class, ForkObjectInputStream.class, ForkProxy.class,\n206                       ClassLoaderProxy.class, MemoryURLConnection.class, MemoryURLStreamHandler.class,\n207                       MemoryURLStreamHandlerFactory.class, MemoryURLStreamRecord.class,\n208                       TikaException.class};\n209               ClassLoader loader = ForkServer.class.getClassLoader();\n210               for (Class<?> klass : bootstrap) {\n211                   String path = klass.getName().replace('.', '/') + \".class\";\n212                   try (InputStream input = loader.getResourceAsStream(path)) {\n213                       jar.putNextEntry(new JarEntry(path));\n214                       IOUtils.copy(input, jar);\n215                   }\n216               }\n217           }\n218       }\n",
            "cost": 0.109585,
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/fork/ForkClient.java:200:77",
            "status": "corpus",
            "valid_path": "NO",
            "id": 235
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/utils/RereadableInputStream.java:263:75",
            "status": "error",
            "id": 236
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/pot/PooledTimeSeriesParser.java:132:21",
            "status": "error",
            "id": 237
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/pot/PooledTimeSeriesParser.java:134:25",
            "status": "error",
            "id": 238
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n 667           @SuppressWarnings(\"unchecked\")\n 668           CT loadOverall(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 669                   throws TikaException, IOException {\n 670               List<T> loaded = new ArrayList<>();\n 671   \n 672               // Find the children of the parent tag, if any\n 673               for (Element le : getTopLevelElementChildren(element, getParentTagName(),\n 674                       getLoaderTagName())) {\n 675                   T loadedChild = loadOne(le, mimeTypes, loader);\n 676                   if (loadedChild != null) {\n 677                       loaded.add(loadedChild);\n 678                   }\n 679               }\n 680   \n 681               // Build the classes, and wrap as needed\n 682               if (loaded.isEmpty()) {\n 683                   // Nothing defined, create a Default\n 684                   return createDefault(mimeTypes, loader);\n 685               } else if (loaded.size() == 1) {\n 686                   T single = loaded.get(0);\n 687                   if (isComposite(single)) {\n 688                       // Single Composite defined, use that\n 689                       return (CT) single;\n 690                   }\n 691               } else if (!supportsComposite()) {\n 692                   // No composite support, just return the first one\n 693                   if (loaded.size() == 1) {\n 694                       return (CT) loaded.get(0);\n 695                   } else if (loaded.size() > 1) {\n 696                       throw new TikaConfigException(\n 697                               \"Composite not supported for \" + getParentTagName() +\n 698                                       \". Must specify only one child!\");\n 699                   } else {\n 700                       //throw exception if empty?\n 701                   }\n 702               }\n 703               // Wrap the defined parsers/detectors up in a Composite\n 704               return createComposite(loaded, mimeTypes, loader);\n 705           }\n 707           T loadOne(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 708                   throws TikaException, IOException {\n 709               String name = element.getAttribute(\"class\");\n 710               if (name == null) {\n 711                   throw new TikaConfigException(\"class attribute must not be null: \" + element);\n 712               }\n 713               String initProbHandler = element.getAttribute(\"initializableProblemHandler\");\n 714               InitializableProblemHandler initializableProblemHandler;\n 715               if (initProbHandler == null || initProbHandler.length() == 0) {\n 716                   initializableProblemHandler = loader.getInitializableProblemHandler();\n 717               } else {\n 718                   initializableProblemHandler = getInitializableProblemHandler(initProbHandler);\n 719               }\n 720   \n 721               T loaded = null;\n 722   \n 723               try {\n 724                   Class<? extends T> loadedClass = loader.getServiceClass(getLoaderClass(), name);\n 725   \n 726                   // Do pre-load checks and short-circuits\n 727                   //TODO : allow duplicate instances with different configurations\n 728                   loaded = preLoadOne(loadedClass, name, mimeTypes);\n 729                   if (loaded != null) {\n 730                       return loaded;\n 731                   }\n 732   \n 733                   // Get any parameters / settings for the parser\n 734                   Map<String, Param> params = null;\n 735                   try {\n 736                       params = getParams(element);\n 737                   } catch (Exception e) {\n 738                       throw new TikaConfigException(e.getMessage(), e);\n 739                   }\n 740   \n 741                   // Is this a composite or decorated class? If so, support recursion\n 742                   if (isComposite(loadedClass)) {\n 743                       // Get the child objects for it\n 744                       List<T> children = new ArrayList<>();\n 745                       NodeList childNodes = element.getElementsByTagName(getLoaderTagName());\n 746                       if (childNodes.getLength() > 0) {\n 747                           for (int i = 0; i < childNodes.getLength(); i++) {\n 748                               T loadedChild =\n 749                                       loadOne((Element) childNodes.item(i), mimeTypes, loader);\n 750                               if (loadedChild != null) {\n 751                                   children.add(loadedChild);\n 752                               }\n 753                           }\n 754                       }\n 755   \n 756                       // Get the list of children to exclude\n 757                       Set<Class<? extends T>> excludeChildren = new HashSet<>();\n 758                       NodeList excludeChildNodes =\n 759                               element.getElementsByTagName(getLoaderTagName() + \"-exclude\");\n 760                       if (excludeChildNodes.getLength() > 0) {\n 761                           for (int i = 0; i < excludeChildNodes.getLength(); i++) {\n 762                               Element excl = (Element) excludeChildNodes.item(i);\n 763                               String exclName = excl.getAttribute(\"class\");\n 764                               try {\n 765                                   excludeChildren\n 766                                           .add(loader.getServiceClass(getLoaderClass(), exclName));\n 767                               } catch (ClassNotFoundException e) {\n 768                                   //TIKA-3268 -- This should stop the world.\n 769                                   throw new TikaConfigException(\n 770                                           \"Class not found in -exclude list: \" + exclName);\n 771                               }\n 772                           }\n 773                       }\n 774   \n 775                       // Create the Composite\n 776                       loaded = createComposite(loadedClass, children, excludeChildren, params,\n 777                               mimeTypes, loader);\n 778   \n 779                       // Default constructor fallback\n 780                       if (loaded == null) {\n 781                           loaded = newInstance(loadedClass);\n 782                       }\n 783                   } else {\n 784                       // Regular class, create as-is\n 785                       loaded = newInstance(loadedClass);\n 786                       // TODO Support arguments, needed for Translators etc\n 787                       // See the thread \"Configuring parsers and translators\" for details\n 788                   }\n 789   \n 790                   //Assigning the params to bean fields/setters\n 791                   AnnotationUtils.assignFieldParams(loaded, params);\n 792                   if (loaded instanceof Initializable) {\n 793                       ((Initializable) loaded).initialize(params);\n 794                       ((Initializable) loaded).checkInitialization(initializableProblemHandler);\n 795                   }\n 796                   // Have any decoration performed, eg explicit mimetypes\n 797                   loaded = decorate(loaded, element);\n 798                   // All done with setup\n 799                   return loaded;\n 800               } catch (ClassNotFoundException e) {\n 801                   if (loader.getLoadErrorHandler() == LoadErrorHandler.THROW) {\n 802                       // Use a different exception signature here\n 803                       throw new TikaConfigException(\n 804                               \"Unable to find a \" + getLoaderTagName() + \" class: \" + name, e);\n 805                   }\n 806                   // Report the problem\n 807                   loader.getLoadErrorHandler().handleLoadError(name, e);\n 808                   return null;\n 809               } catch (IllegalAccessException e) {\n 810                   throw new TikaException(\n 811                           \"Unable to access a \" + getLoaderTagName() + \" class: \" + name, e);\n 812               } catch (InvocationTargetException e) {\n 813                   throw new TikaException(\n 814                           \"Unable to create a \" + getLoaderTagName() + \" class: \" + name, e);\n 815               } catch (InstantiationException e) {\n 816                   throw new TikaException(\n 817                           \"Unable to instantiate a \" + getLoaderTagName() + \" class: \" + name, e);\n 818               } catch (NoSuchMethodException e) {\n 819                   throw new TikaException(\n 820                           \"Unable to find the right constructor for \" + getLoaderTagName() +\n 821                                   \" class: \" + name, e);\n 822               }\n 823           }\n\nsrc/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/recognition/tf/TensorflowImageRecParser.java:\n113       @Override\n114       public void initialize(Map<String, Param> params) throws TikaConfigException {\n115           try {\n116               if (!modelFile.exists()) {\n117                   modelFile.getParentFile().mkdirs();\n118                   LOG.warn(\"Model doesn't exist at {}. Expecting the script to download it.\",\n119                           modelFile);\n120               }\n121               if (!scriptFile.exists()) {\n122                   scriptFile.getParentFile().mkdirs();\n123                   LOG.info(\"Copying script to : {}\", scriptFile);\n124                   try (InputStream sourceStream = getClass().getResourceAsStream(SCRIPT_FILE_NAME)) {\n125                       try (OutputStream destStream = new FileOutputStream(scriptFile)) {\n126                           IOUtils.copy(sourceStream, destStream);\n127                       }\n128                   }\n129                   LOG.debug(\"Copied..\");\n130               }\n131               String[] availabilityCheckArgs =\n132                       {executor, scriptFile.getAbsolutePath(), modelArg, modelFile.getAbsolutePath(),\n133                               availabilityTestArgs};\n134               available = ExternalParser.check(availabilityCheckArgs);\n135               LOG.debug(\"Available? {}\", available);\n136               if (!available) {\n137                   return;\n138               }\n139               String[] parseCmd =\n140                       {executor, scriptFile.getAbsolutePath(), modelArg, modelFile.getAbsolutePath(),\n141                               imageArg, INPUT_FILE_TOKEN, \"--out_file\",\n142                               OUTPUT_FILE_TOKEN}; //inserting output token to let\n143               // external parser parse metadata\n144               setCommand(parseCmd);\n145               HashMap<Pattern, String> patterns = new HashMap<>();\n146               patterns.put(Pattern.compile(outPattern), null);\n147               setMetadataExtractionPatterns(patterns);\n148               setIgnoredLineConsumer(IGNORED_LINE_LOGGER);\n149           } catch (Exception e) {\n150               throw new TikaConfigException(e.getMessage(), e);\n151           }\n152       }\n",
            "cost": 0.11913,
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/recognition/tf/TensorflowImageRecParser.java:125:73",
            "status": "corpus",
            "valid_path": "NO",
            "id": 239
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-detectors/tika-detector-siegfried/src/main/java/org/apache/tika/detect/siegfried/SiegfriedDetector.java:132:24",
            "status": "error",
            "id": 240
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-detectors/tika-detector-siegfried/src/main/java/org/apache/tika/detect/siegfried/SiegfriedDetector.java:132:65",
            "status": "error",
            "id": 241
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n 667           @SuppressWarnings(\"unchecked\")\n 668           CT loadOverall(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 669                   throws TikaException, IOException {\n 670               List<T> loaded = new ArrayList<>();\n 671   \n 672               // Find the children of the parent tag, if any\n 673               for (Element le : getTopLevelElementChildren(element, getParentTagName(),\n 674                       getLoaderTagName())) {\n 675                   T loadedChild = loadOne(le, mimeTypes, loader);\n 676                   if (loadedChild != null) {\n 677                       loaded.add(loadedChild);\n 678                   }\n 679               }\n 680   \n 681               // Build the classes, and wrap as needed\n 682               if (loaded.isEmpty()) {\n 683                   // Nothing defined, create a Default\n 684                   return createDefault(mimeTypes, loader);\n 685               } else if (loaded.size() == 1) {\n 686                   T single = loaded.get(0);\n 687                   if (isComposite(single)) {\n 688                       // Single Composite defined, use that\n 689                       return (CT) single;\n 690                   }\n 691               } else if (!supportsComposite()) {\n 692                   // No composite support, just return the first one\n 693                   if (loaded.size() == 1) {\n 694                       return (CT) loaded.get(0);\n 695                   } else if (loaded.size() > 1) {\n 696                       throw new TikaConfigException(\n 697                               \"Composite not supported for \" + getParentTagName() +\n 698                                       \". Must specify only one child!\");\n 699                   } else {\n 700                       //throw exception if empty?\n 701                   }\n 702               }\n 703               // Wrap the defined parsers/detectors up in a Composite\n 704               return createComposite(loaded, mimeTypes, loader);\n 705           }\n 707           T loadOne(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 708                   throws TikaException, IOException {\n 709               String name = element.getAttribute(\"class\");\n 710               if (name == null) {\n 711                   throw new TikaConfigException(\"class attribute must not be null: \" + element);\n 712               }\n 713               String initProbHandler = element.getAttribute(\"initializableProblemHandler\");\n 714               InitializableProblemHandler initializableProblemHandler;\n 715               if (initProbHandler == null || initProbHandler.length() == 0) {\n 716                   initializableProblemHandler = loader.getInitializableProblemHandler();\n 717               } else {\n 718                   initializableProblemHandler = getInitializableProblemHandler(initProbHandler);\n 719               }\n 720   \n 721               T loaded = null;\n 722   \n 723               try {\n 724                   Class<? extends T> loadedClass = loader.getServiceClass(getLoaderClass(), name);\n 725   \n 726                   // Do pre-load checks and short-circuits\n 727                   //TODO : allow duplicate instances with different configurations\n 728                   loaded = preLoadOne(loadedClass, name, mimeTypes);\n 729                   if (loaded != null) {\n 730                       return loaded;\n 731                   }\n 732   \n 733                   // Get any parameters / settings for the parser\n 734                   Map<String, Param> params = null;\n 735                   try {\n 736                       params = getParams(element);\n 737                   } catch (Exception e) {\n 738                       throw new TikaConfigException(e.getMessage(), e);\n 739                   }\n 740   \n 741                   // Is this a composite or decorated class? If so, support recursion\n 742                   if (isComposite(loadedClass)) {\n 743                       // Get the child objects for it\n 744                       List<T> children = new ArrayList<>();\n 745                       NodeList childNodes = element.getElementsByTagName(getLoaderTagName());\n 746                       if (childNodes.getLength() > 0) {\n 747                           for (int i = 0; i < childNodes.getLength(); i++) {\n 748                               T loadedChild =\n 749                                       loadOne((Element) childNodes.item(i), mimeTypes, loader);\n 750                               if (loadedChild != null) {\n 751                                   children.add(loadedChild);\n 752                               }\n 753                           }\n 754                       }\n 755   \n 756                       // Get the list of children to exclude\n 757                       Set<Class<? extends T>> excludeChildren = new HashSet<>();\n 758                       NodeList excludeChildNodes =\n 759                               element.getElementsByTagName(getLoaderTagName() + \"-exclude\");\n 760                       if (excludeChildNodes.getLength() > 0) {\n 761                           for (int i = 0; i < excludeChildNodes.getLength(); i++) {\n 762                               Element excl = (Element) excludeChildNodes.item(i);\n 763                               String exclName = excl.getAttribute(\"class\");\n 764                               try {\n 765                                   excludeChildren\n 766                                           .add(loader.getServiceClass(getLoaderClass(), exclName));\n 767                               } catch (ClassNotFoundException e) {\n 768                                   //TIKA-3268 -- This should stop the world.\n 769                                   throw new TikaConfigException(\n 770                                           \"Class not found in -exclude list: \" + exclName);\n 771                               }\n 772                           }\n 773                       }\n 774   \n 775                       // Create the Composite\n 776                       loaded = createComposite(loadedClass, children, excludeChildren, params,\n 777                               mimeTypes, loader);\n 778   \n 779                       // Default constructor fallback\n 780                       if (loaded == null) {\n 781                           loaded = newInstance(loadedClass);\n 782                       }\n 783                   } else {\n 784                       // Regular class, create as-is\n 785                       loaded = newInstance(loadedClass);\n 786                       // TODO Support arguments, needed for Translators etc\n 787                       // See the thread \"Configuring parsers and translators\" for details\n 788                   }\n 789   \n 790                   //Assigning the params to bean fields/setters\n 791                   AnnotationUtils.assignFieldParams(loaded, params);\n 792                   if (loaded instanceof Initializable) {\n 793                       ((Initializable) loaded).initialize(params);\n 794                       ((Initializable) loaded).checkInitialization(initializableProblemHandler);\n 795                   }\n 796                   // Have any decoration performed, eg explicit mimetypes\n 797                   loaded = decorate(loaded, element);\n 798                   // All done with setup\n 799                   return loaded;\n 800               } catch (ClassNotFoundException e) {\n 801                   if (loader.getLoadErrorHandler() == LoadErrorHandler.THROW) {\n 802                       // Use a different exception signature here\n 803                       throw new TikaConfigException(\n 804                               \"Unable to find a \" + getLoaderTagName() + \" class: \" + name, e);\n 805                   }\n 806                   // Report the problem\n 807                   loader.getLoadErrorHandler().handleLoadError(name, e);\n 808                   return null;\n 809               } catch (IllegalAccessException e) {\n 810                   throw new TikaException(\n 811                           \"Unable to access a \" + getLoaderTagName() + \" class: \" + name, e);\n 812               } catch (InvocationTargetException e) {\n 813                   throw new TikaException(\n 814                           \"Unable to create a \" + getLoaderTagName() + \" class: \" + name, e);\n 815               } catch (InstantiationException e) {\n 816                   throw new TikaException(\n 817                           \"Unable to instantiate a \" + getLoaderTagName() + \" class: \" + name, e);\n 818               } catch (NoSuchMethodException e) {\n 819                   throw new TikaException(\n 820                           \"Unable to find the right constructor for \" + getLoaderTagName() +\n 821                                   \" class: \" + name, e);\n 822               }\n 823           }\n\nsrc/tika/tika-parsers/tika-parsers-ml/tika-dl/src/main/java/org/apache/tika/dl/imagerec/DL4JInceptionV3Net.java:\n216       private InputStream retrieveResource(String path) throws FileNotFoundException {\n217           File file = new File(path);\n218           if (file.exists()) {\n219               return new FileInputStream(file);\n220           }\n221           LOG.warn(\"File {} not found in local file system. Asking the classloader\", path);\n222           return getClass().getClassLoader().getResourceAsStream(path);\n223       }\n244       @Override\n245       public void initialize(Map<String, Param> params) throws TikaConfigException {\n246   \n247           //STEP 1: resolve weights file, download if necessary\n248           modelWeightsPath = mayBeDownloadFile(modelWeightsPath);\n249   \n250           //STEP 2: Load labels map\n251           try (InputStream stream = retrieveResource(mayBeDownloadFile(labelFile))) {\n252               this.labelMap = loadClassIndex(stream);\n253           } catch (IOException | ParseException e) {\n254               LOG.error(\"Could not load labels map\", e);\n255               return;\n256           }\n257   \n258           //STEP 3: initialize the graph\n259           try {\n260               this.imageLoader = new NativeImageLoader(imgHeight, imgWidth, imgChannels);\n261               LOG.info(\"Going to load Inception network...\");\n262               long st = System.currentTimeMillis();\n263   \n264               try (KerasModelBuilder builder =\n265                       new KerasModel().modelBuilder().modelHdf5Filename(modelWeightsPath)\n266                               .enforceTrainingConfig(false)) {\n267   \n268                   builder.inputShape(new int[]{imgHeight, imgWidth, 3});\n269                   KerasModel model = builder.buildModel();\n270                   this.graph = model.getComputationGraph();\n271                   long time = System.currentTimeMillis() - st;\n272                   LOG.info(\"Loaded the Inception model. Time taken={}ms\", time);\n273               }\n274           } catch (IOException | InvalidKerasConfigurationException |\n275                   UnsupportedKerasConfigurationException e) {\n276               throw new TikaConfigException(e.getMessage(), e);\n277           }\n278       }\n",
            "cost": 0.121925,
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-dl/src/main/java/org/apache/tika/dl/imagerec/DL4JInceptionV3Net.java:219:40",
            "status": "corpus",
            "valid_path": "NO",
            "id": 242
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/parser/digest/InputStreamDigester.java:189:51",
            "status": "error",
            "id": 243
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-example/src/main/java/org/apache/tika/example/ExtractEmbeddedFiles.java:116:24",
            "status": "error",
            "id": 244
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-example/src/main/java/org/apache/tika/example/ExtractEmbeddedFiles.java:116:32",
            "status": "error",
            "id": 245
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-audiovideo-module/src/main/java/org/apache/tika/parser/mp4/MP4Parser.java:101:52",
            "status": "error",
            "id": 246
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java:328:40",
            "status": "error",
            "id": 247
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java:328:47",
            "status": "error",
            "id": 248
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n1040           public void process(InputStream input, OutputStream output, Metadata metadata) throws Exception {\n1041               Parser p = parser;\n1042               if (fork) {\n1043                   p = new ForkParser(TikaCLI.class.getClassLoader(), p);\n1044               }\n1045               ContentHandler handler = getContentHandler(output, metadata);\n1046               try {\n1047                   p.parse(input, handler, metadata, context);\n1048                   // fix for TIKA-596: if a parser doesn't generate\n1049                   // XHTML output, the lack of an output document prevents\n1050                   // metadata from being output: this fixes that\n1051                   if (handler instanceof NoDocumentMetHandler) {\n1052                       NoDocumentMetHandler metHandler = (NoDocumentMetHandler) handler;\n1053                       if (!metHandler.metOutput()) {\n1054                           metHandler.endDocument();\n1055                       }\n1056                   }\n1057               } finally {\n1058                   if (fork) {\n1059                       ((ForkParser) p).close();\n1060                   }\n1061               }\n1062           }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java:\n242       @Override\n243       public void parse(InputStream stream, ContentHandler handler, Metadata metadata,\n244                         ParseContext parseContext) throws IOException, SAXException, TikaException {\n245   \n246           TesseractOCRConfig userConfig = parseContext.get(TesseractOCRConfig.class);\n247           TesseractOCRConfig config = defaultConfig;\n248           if (userConfig != null) {\n249               config = defaultConfig.cloneAndUpdate(userConfig);\n250           }\n251           // If Tesseract is not on the path with the current config, do not try to run OCR\n252           // getSupportedTypes shouldn't have listed us as handling it, so this should only\n253           //  occur if someone directly calls this parser, not via DefaultParser or similar\n254           if (!hasTesseract || (config != null && config.isSkipOcr())) {\n255               return;\n256           }\n257   \n258           //if you haven't checked yet, and a per file config requests imagemagick\n259           //and if the default is not to use image processing\n260           if (! HAS_CHECKED_FOR_IMAGE_MAGICK && config.isEnableImagePreprocessing()) {\n261               hasImageMagick = hasImageMagick();\n262           }\n263   \n264           try (TemporaryResources tmp = new TemporaryResources()) {\n265               TikaInputStream tikaStream = TikaInputStream.get(stream, tmp, metadata);\n266   \n267               //trigger the spooling to a tmp file if the stream wasn't\n268               //already a TikaInputStream that contained a file\n269               tikaStream.getPath();\n270               //this is the text output file name specified on the tesseract\n271               //commandline.  The actual output file name will have a suffix added.\n272               File tmpOCROutputFile = tmp.createTemporaryFile();\n273               ContentHandler baseHandler = getContentHandler(config.isInlineContent(), handler, metadata, parseContext);\n274               XHTMLContentHandler xhtml = new XHTMLContentHandler(baseHandler, metadata);\n275               xhtml.startDocument();\n276               parse(tikaStream, tmpOCROutputFile, xhtml, metadata, parseContext, config);\n277               xhtml.endDocument();\n278           }\n279       }\n300       private void parse(TikaInputStream tikaInputStream, File tmpOCROutputFile,\n301                          ContentHandler xhtml,\n302                          Metadata metadata, ParseContext parseContext, TesseractOCRConfig config)\n303               throws IOException, SAXException, TikaException {\n304           warnOnFirstParse();\n305           validateLangString(config.getLanguage());\n306   \n307           File tmpTxtOutput = null;\n308           try {\n309               Path input = tikaInputStream.getPath();\n310               long size = tikaInputStream.getLength();\n311   \n312               if (size >= config.getMinFileSizeToOcr() && size <= config.getMaxFileSizeToOcr()) {\n313   \n314                   // Process image\n315                   if (config.isEnableImagePreprocessing() || config.isApplyRotation()) {\n316                       if (!hasImageMagick) {\n317                           LOG.warn(\n318                                   \"User has selected to preprocess images, \" +\n319                                           \"but I can't find ImageMagick.\" +\n320                                           \"Backing off to original file.\");\n321                           doOCR(input.toFile(), tmpOCROutputFile, config, parseContext);\n322                       } else {\n323                           // copy the contents of the original input file into a temporary file\n324                           // which will be preprocessed for OCR\n325   \n326                           try (TemporaryResources tmp = new TemporaryResources()) {\n327                               Path tmpFile = tmp.createTempFile();\n328                               Files.copy(input, tmpFile, StandardCopyOption.REPLACE_EXISTING);\n329                               imagePreprocessor.process(tmpFile, tmpFile, metadata, config);\n330                               doOCR(tmpFile.toFile(), tmpOCROutputFile, config, parseContext);\n331                           }\n332                       }\n333                   } else {\n334                       doOCR(input.toFile(), tmpOCROutputFile, config, parseContext);\n335                   }\n336   \n337                   String extension = config.getPageSegMode().equals(\"0\") ? \"osd\" :\n338                           config.getOutputType().toString().toLowerCase(Locale.US);\n339                   // Tesseract appends the output type (.txt or .hocr or .osd) to output file name\n340                   tmpTxtOutput = new File(tmpOCROutputFile.getAbsolutePath() +\n341                           \".\" + extension);\n342   \n343                   if (tmpTxtOutput.exists()) {\n344                       try (InputStream is = new FileInputStream(tmpTxtOutput)) {\n345                           if (config.getPageSegMode().equals(\"0\")) {\n346                               extractOSD(is, metadata);\n347                           } else if (config.getOutputType().equals(TesseractOCRConfig.OUTPUT_TYPE.HOCR)) {\n348                               extractHOCROutput(is, parseContext, xhtml);\n349                           } else {\n350                               extractOutput(is, xhtml);\n351                           }\n352                       }\n353                   }\n354               }\n355           } finally {\n356               if (tmpTxtOutput != null) {\n357                   tmpTxtOutput.delete();\n358               }\n359           }\n360       }\n",
            "cost": 0.09175,
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java:344:63",
            "status": "corpus",
            "valid_path": "NO",
            "id": 249
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-pdf-module/src/main/java/org/apache/tika/renderer/pdf/pdfbox/PDFBoxRenderer.java:173:58",
            "status": "error",
            "id": 250
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/io/TikaInputStream.java:159:59",
            "status": "error",
            "id": 251
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-cad-module/src/main/java/org/apache/tika/parser/dwg/DWGReadParser.java:113:45",
            "status": "error",
            "id": 252
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-cad-module/src/main/java/org/apache/tika/parser/dwg/DWGReadParser.java:113:53",
            "status": "error",
            "id": 253
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-cad-module/src/main/java/org/apache/tika/parser/dwg/DWGReadParser.java:130:60",
            "status": "error",
            "id": 254
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-cad-module/src/main/java/org/apache/tika/parser/dwg/DWGReadParser.java:135:66",
            "status": "error",
            "id": 255
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-parsers/tika-parsers-extended/tika-parser-scientific-module/src/main/java/org/apache/tika/parser/grib/GribParser.java:70:24",
            "status": "error",
            "id": 256
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-parsers/tika-parsers-extended/tika-parser-scientific-module/src/main/java/org/apache/tika/parser/grib/GribParser.java:70:32",
            "status": "error",
            "id": 257
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-zip-commons/src/main/java/org/apache/tika/zip/utils/ZipSalvager.java:128:52",
            "status": "error",
            "id": 258
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/journal/JournalParser.java:63:42",
            "status": "error",
            "id": 259
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/metadata/filter/MetadataFilter.java:\n44       public static MetadataFilter load(Element root, boolean allowMissing) throws TikaConfigException,\n45               IOException {\n46           try {\n47               return buildComposite(\"metadataFilters\", CompositeMetadataFilter.class,\n48                       \"metadataFilter\", MetadataFilter.class, root);\n49           } catch (TikaConfigException e) {\n50               if (allowMissing && e.getMessage().contains(\"could not find metadataFilters\")) {\n51                   return new NoOpFilter();\n52               }\n53               throw e;\n54           }\n55       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:\n139       protected static <P, T> P buildComposite(String compositeElementName, Class<P> compositeClass,\n140                                                String itemName, Class<T> itemClass,\n141                                                Element properties)\n142               throws TikaConfigException, IOException {\n143   \n144           if (!properties.getLocalName().equals(\"properties\")) {\n145               throw new TikaConfigException(\"expect properties as root node\");\n146           }\n147           NodeList children = properties.getChildNodes();\n148   \n149           for (int i = 0; i < children.getLength(); i++) {\n150               Node child = children.item(i);\n151               if (child.getNodeType() != 1) {\n152                   continue;\n153               }\n154               if (compositeElementName.equals(child.getLocalName())) {\n155                   List<T> components = loadComposite(child, itemName, itemClass);\n156                   Constructor constructor = null;\n157                   try {\n158                       constructor = compositeClass.getConstructor(List.class);\n159                       P composite = (P) constructor.newInstance(components);\n160                       setParams(composite, child, new HashSet<>(), itemName);\n161                       return composite;\n162                   } catch (NoSuchMethodException | InvocationTargetException |\n163                            InstantiationException | IllegalAccessException e) {\n164                       throw new TikaConfigException(\"can't build composite class\", e);\n165                   }\n166               }\n167           }\n168           throw new TikaConfigException(\"could not find \" + compositeElementName);\n169       }\n218       private static void setParams(Object object, Node targetNode, Set<String> settings,\n219                                     String exceptNodeName) throws TikaConfigException {\n220           NodeList children = targetNode.getChildNodes();\n221           List<Node> params = new ArrayList<>();\n222           for (int i = 0; i < children.getLength(); i++) {\n223               Node child = children.item(i);\n224   \n225               if (\"params\".equals(child.getLocalName())) {\n226                   NodeList paramsList = child.getChildNodes();\n227                   for (int j = 0; j < paramsList.getLength(); j++) {\n228                       params.add(paramsList.item(j));\n229                   }\n230               } else {\n231                   params.add(child);\n232               }\n233           }\n234           for (int i = 0; i < params.size(); i++) {\n235               Node param = params.get(i);\n236               if (param.getNodeType() != 1) {\n237                   continue;\n238               }\n239               String localName = param.getLocalName();\n240               if (localName == null || localName.equals(exceptNodeName)) {\n241                   continue;\n242               }\n243               String txt = param.getTextContent();\n244               String itemName = param.getLocalName();\n245               SetterClassPair setterClassPair = findSetterClassPair(object, itemName);\n246               boolean processed = false;\n247               if (!hasClass(param)) {\n248                   if (setterClassPair.itemClass.isAssignableFrom(Map.class) && isMap(param)) {\n249                       tryToSetMap(object, param);\n250                       processed = true;\n251                   } else if (setterClassPair.itemClass.isAssignableFrom(List.class)) {\n252                       tryToSetList(object, param);\n253                       processed = true;\n254                   }\n255               }\n256               if (!processed) {\n257                   if (isPrimitive(setterClassPair.itemClass)) {\n258                       tryToSetPrimitive(object, setterClassPair, param.getTextContent());\n259                   } else {\n260                       //tryToSetPrimitive(object, localName, txt);\n261                       Object item = buildClass(param, itemName, setterClassPair.itemClass);\n262                       setParams(setterClassPair.itemClass.cast(item), param, new HashSet<>());\n263                       try {\n264                           setterClassPair.setterMethod.invoke(object, item);\n265                       } catch (IllegalAccessException | InvocationTargetException e) {\n266                           throw new TikaConfigException(\"problem creating \" + itemName, e);\n267                       }\n268                   }\n269               }\n270   \n271               if (txt != null) {\n272                   settings.add(localName);\n273               }\n274           }\n275   \n276           if (object instanceof Initializable) {\n277               ((Initializable) object).initialize(Collections.EMPTY_MAP);\n278               ((Initializable) object).checkInitialization(InitializableProblemHandler.THROW);\n279           }\n280       }\n483       private static void tryToSetPrimitive(Object object, SetterClassPair setterClassPair,\n484                                             String value) throws TikaConfigException {\n485           try {\n486               if (setterClassPair.itemClass == int.class) {\n487                   setterClassPair.setterMethod.invoke(object, Integer.parseInt(value));\n488               } else if (setterClassPair.itemClass == long.class) {\n489                   setterClassPair.setterMethod.invoke(object, Long.parseLong(value));\n490               } else if (setterClassPair.itemClass == float.class) {\n491                   setterClassPair.setterMethod.invoke(object, Float.parseFloat(value));\n492               } else if (setterClassPair.itemClass == double.class) {\n493                   setterClassPair.setterMethod.invoke(object, Double.parseDouble(value));\n494               } else if (setterClassPair.itemClass == boolean.class) {\n495                   setterClassPair.setterMethod.invoke(object, Boolean.parseBoolean(value));\n496               } else {\n497                   setterClassPair.setterMethod.invoke(object, value);\n498               }\n499           } catch (IllegalAccessException | InvocationTargetException e) {\n500               throw new TikaConfigException(\"bad parameter \" + setterClassPair + \" \" + value, e);\n501           }\n502       }\n",
            "cost": 0.10989000000000002,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:487:17",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 260
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/metadata/filter/MetadataFilter.java:\n44       public static MetadataFilter load(Element root, boolean allowMissing) throws TikaConfigException,\n45               IOException {\n46           try {\n47               return buildComposite(\"metadataFilters\", CompositeMetadataFilter.class,\n48                       \"metadataFilter\", MetadataFilter.class, root);\n49           } catch (TikaConfigException e) {\n50               if (allowMissing && e.getMessage().contains(\"could not find metadataFilters\")) {\n51                   return new NoOpFilter();\n52               }\n53               throw e;\n54           }\n55       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:\n139       protected static <P, T> P buildComposite(String compositeElementName, Class<P> compositeClass,\n140                                                String itemName, Class<T> itemClass,\n141                                                Element properties)\n142               throws TikaConfigException, IOException {\n143   \n144           if (!properties.getLocalName().equals(\"properties\")) {\n145               throw new TikaConfigException(\"expect properties as root node\");\n146           }\n147           NodeList children = properties.getChildNodes();\n148   \n149           for (int i = 0; i < children.getLength(); i++) {\n150               Node child = children.item(i);\n151               if (child.getNodeType() != 1) {\n152                   continue;\n153               }\n154               if (compositeElementName.equals(child.getLocalName())) {\n155                   List<T> components = loadComposite(child, itemName, itemClass);\n156                   Constructor constructor = null;\n157                   try {\n158                       constructor = compositeClass.getConstructor(List.class);\n159                       P composite = (P) constructor.newInstance(components);\n160                       setParams(composite, child, new HashSet<>(), itemName);\n161                       return composite;\n162                   } catch (NoSuchMethodException | InvocationTargetException |\n163                            InstantiationException | IllegalAccessException e) {\n164                       throw new TikaConfigException(\"can't build composite class\", e);\n165                   }\n166               }\n167           }\n168           throw new TikaConfigException(\"could not find \" + compositeElementName);\n169       }\n218       private static void setParams(Object object, Node targetNode, Set<String> settings,\n219                                     String exceptNodeName) throws TikaConfigException {\n220           NodeList children = targetNode.getChildNodes();\n221           List<Node> params = new ArrayList<>();\n222           for (int i = 0; i < children.getLength(); i++) {\n223               Node child = children.item(i);\n224   \n225               if (\"params\".equals(child.getLocalName())) {\n226                   NodeList paramsList = child.getChildNodes();\n227                   for (int j = 0; j < paramsList.getLength(); j++) {\n228                       params.add(paramsList.item(j));\n229                   }\n230               } else {\n231                   params.add(child);\n232               }\n233           }\n234           for (int i = 0; i < params.size(); i++) {\n235               Node param = params.get(i);\n236               if (param.getNodeType() != 1) {\n237                   continue;\n238               }\n239               String localName = param.getLocalName();\n240               if (localName == null || localName.equals(exceptNodeName)) {\n241                   continue;\n242               }\n243               String txt = param.getTextContent();\n244               String itemName = param.getLocalName();\n245               SetterClassPair setterClassPair = findSetterClassPair(object, itemName);\n246               boolean processed = false;\n247               if (!hasClass(param)) {\n248                   if (setterClassPair.itemClass.isAssignableFrom(Map.class) && isMap(param)) {\n249                       tryToSetMap(object, param);\n250                       processed = true;\n251                   } else if (setterClassPair.itemClass.isAssignableFrom(List.class)) {\n252                       tryToSetList(object, param);\n253                       processed = true;\n254                   }\n255               }\n256               if (!processed) {\n257                   if (isPrimitive(setterClassPair.itemClass)) {\n258                       tryToSetPrimitive(object, setterClassPair, param.getTextContent());\n259                   } else {\n260                       //tryToSetPrimitive(object, localName, txt);\n261                       Object item = buildClass(param, itemName, setterClassPair.itemClass);\n262                       setParams(setterClassPair.itemClass.cast(item), param, new HashSet<>());\n263                       try {\n264                           setterClassPair.setterMethod.invoke(object, item);\n265                       } catch (IllegalAccessException | InvocationTargetException e) {\n266                           throw new TikaConfigException(\"problem creating \" + itemName, e);\n267                       }\n268                   }\n269               }\n270   \n271               if (txt != null) {\n272                   settings.add(localName);\n273               }\n274           }\n275   \n276           if (object instanceof Initializable) {\n277               ((Initializable) object).initialize(Collections.EMPTY_MAP);\n278               ((Initializable) object).checkInitialization(InitializableProblemHandler.THROW);\n279           }\n280       }\n483       private static void tryToSetPrimitive(Object object, SetterClassPair setterClassPair,\n484                                             String value) throws TikaConfigException {\n485           try {\n486               if (setterClassPair.itemClass == int.class) {\n487                   setterClassPair.setterMethod.invoke(object, Integer.parseInt(value));\n488               } else if (setterClassPair.itemClass == long.class) {\n489                   setterClassPair.setterMethod.invoke(object, Long.parseLong(value));\n490               } else if (setterClassPair.itemClass == float.class) {\n491                   setterClassPair.setterMethod.invoke(object, Float.parseFloat(value));\n492               } else if (setterClassPair.itemClass == double.class) {\n493                   setterClassPair.setterMethod.invoke(object, Double.parseDouble(value));\n494               } else if (setterClassPair.itemClass == boolean.class) {\n495                   setterClassPair.setterMethod.invoke(object, Boolean.parseBoolean(value));\n496               } else {\n497                   setterClassPair.setterMethod.invoke(object, value);\n498               }\n499           } catch (IllegalAccessException | InvocationTargetException e) {\n500               throw new TikaConfigException(\"bad parameter \" + setterClassPair + \" \" + value, e);\n501           }\n502       }\n",
            "cost": 0.10954000000000001,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:489:17",
            "status": "corpus",
            "valid_path": "NO",
            "id": 261
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/metadata/filter/MetadataFilter.java:\n44       public static MetadataFilter load(Element root, boolean allowMissing) throws TikaConfigException,\n45               IOException {\n46           try {\n47               return buildComposite(\"metadataFilters\", CompositeMetadataFilter.class,\n48                       \"metadataFilter\", MetadataFilter.class, root);\n49           } catch (TikaConfigException e) {\n50               if (allowMissing && e.getMessage().contains(\"could not find metadataFilters\")) {\n51                   return new NoOpFilter();\n52               }\n53               throw e;\n54           }\n55       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:\n139       protected static <P, T> P buildComposite(String compositeElementName, Class<P> compositeClass,\n140                                                String itemName, Class<T> itemClass,\n141                                                Element properties)\n142               throws TikaConfigException, IOException {\n143   \n144           if (!properties.getLocalName().equals(\"properties\")) {\n145               throw new TikaConfigException(\"expect properties as root node\");\n146           }\n147           NodeList children = properties.getChildNodes();\n148   \n149           for (int i = 0; i < children.getLength(); i++) {\n150               Node child = children.item(i);\n151               if (child.getNodeType() != 1) {\n152                   continue;\n153               }\n154               if (compositeElementName.equals(child.getLocalName())) {\n155                   List<T> components = loadComposite(child, itemName, itemClass);\n156                   Constructor constructor = null;\n157                   try {\n158                       constructor = compositeClass.getConstructor(List.class);\n159                       P composite = (P) constructor.newInstance(components);\n160                       setParams(composite, child, new HashSet<>(), itemName);\n161                       return composite;\n162                   } catch (NoSuchMethodException | InvocationTargetException |\n163                            InstantiationException | IllegalAccessException e) {\n164                       throw new TikaConfigException(\"can't build composite class\", e);\n165                   }\n166               }\n167           }\n168           throw new TikaConfigException(\"could not find \" + compositeElementName);\n169       }\n218       private static void setParams(Object object, Node targetNode, Set<String> settings,\n219                                     String exceptNodeName) throws TikaConfigException {\n220           NodeList children = targetNode.getChildNodes();\n221           List<Node> params = new ArrayList<>();\n222           for (int i = 0; i < children.getLength(); i++) {\n223               Node child = children.item(i);\n224   \n225               if (\"params\".equals(child.getLocalName())) {\n226                   NodeList paramsList = child.getChildNodes();\n227                   for (int j = 0; j < paramsList.getLength(); j++) {\n228                       params.add(paramsList.item(j));\n229                   }\n230               } else {\n231                   params.add(child);\n232               }\n233           }\n234           for (int i = 0; i < params.size(); i++) {\n235               Node param = params.get(i);\n236               if (param.getNodeType() != 1) {\n237                   continue;\n238               }\n239               String localName = param.getLocalName();\n240               if (localName == null || localName.equals(exceptNodeName)) {\n241                   continue;\n242               }\n243               String txt = param.getTextContent();\n244               String itemName = param.getLocalName();\n245               SetterClassPair setterClassPair = findSetterClassPair(object, itemName);\n246               boolean processed = false;\n247               if (!hasClass(param)) {\n248                   if (setterClassPair.itemClass.isAssignableFrom(Map.class) && isMap(param)) {\n249                       tryToSetMap(object, param);\n250                       processed = true;\n251                   } else if (setterClassPair.itemClass.isAssignableFrom(List.class)) {\n252                       tryToSetList(object, param);\n253                       processed = true;\n254                   }\n255               }\n256               if (!processed) {\n257                   if (isPrimitive(setterClassPair.itemClass)) {\n258                       tryToSetPrimitive(object, setterClassPair, param.getTextContent());\n259                   } else {\n260                       //tryToSetPrimitive(object, localName, txt);\n261                       Object item = buildClass(param, itemName, setterClassPair.itemClass);\n262                       setParams(setterClassPair.itemClass.cast(item), param, new HashSet<>());\n263                       try {\n264                           setterClassPair.setterMethod.invoke(object, item);\n265                       } catch (IllegalAccessException | InvocationTargetException e) {\n266                           throw new TikaConfigException(\"problem creating \" + itemName, e);\n267                       }\n268                   }\n269               }\n270   \n271               if (txt != null) {\n272                   settings.add(localName);\n273               }\n274           }\n275   \n276           if (object instanceof Initializable) {\n277               ((Initializable) object).initialize(Collections.EMPTY_MAP);\n278               ((Initializable) object).checkInitialization(InitializableProblemHandler.THROW);\n279           }\n280       }\n483       private static void tryToSetPrimitive(Object object, SetterClassPair setterClassPair,\n484                                             String value) throws TikaConfigException {\n485           try {\n486               if (setterClassPair.itemClass == int.class) {\n487                   setterClassPair.setterMethod.invoke(object, Integer.parseInt(value));\n488               } else if (setterClassPair.itemClass == long.class) {\n489                   setterClassPair.setterMethod.invoke(object, Long.parseLong(value));\n490               } else if (setterClassPair.itemClass == float.class) {\n491                   setterClassPair.setterMethod.invoke(object, Float.parseFloat(value));\n492               } else if (setterClassPair.itemClass == double.class) {\n493                   setterClassPair.setterMethod.invoke(object, Double.parseDouble(value));\n494               } else if (setterClassPair.itemClass == boolean.class) {\n495                   setterClassPair.setterMethod.invoke(object, Boolean.parseBoolean(value));\n496               } else {\n497                   setterClassPair.setterMethod.invoke(object, value);\n498               }\n499           } catch (IllegalAccessException | InvocationTargetException e) {\n500               throw new TikaConfigException(\"bad parameter \" + setterClassPair + \" \" + value, e);\n501           }\n502       }\n",
            "cost": 0.11124,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:491:17",
            "status": "corpus",
            "valid_path": "NO",
            "id": 262
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/metadata/filter/MetadataFilter.java:\n44       public static MetadataFilter load(Element root, boolean allowMissing) throws TikaConfigException,\n45               IOException {\n46           try {\n47               return buildComposite(\"metadataFilters\", CompositeMetadataFilter.class,\n48                       \"metadataFilter\", MetadataFilter.class, root);\n49           } catch (TikaConfigException e) {\n50               if (allowMissing && e.getMessage().contains(\"could not find metadataFilters\")) {\n51                   return new NoOpFilter();\n52               }\n53               throw e;\n54           }\n55       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:\n139       protected static <P, T> P buildComposite(String compositeElementName, Class<P> compositeClass,\n140                                                String itemName, Class<T> itemClass,\n141                                                Element properties)\n142               throws TikaConfigException, IOException {\n143   \n144           if (!properties.getLocalName().equals(\"properties\")) {\n145               throw new TikaConfigException(\"expect properties as root node\");\n146           }\n147           NodeList children = properties.getChildNodes();\n148   \n149           for (int i = 0; i < children.getLength(); i++) {\n150               Node child = children.item(i);\n151               if (child.getNodeType() != 1) {\n152                   continue;\n153               }\n154               if (compositeElementName.equals(child.getLocalName())) {\n155                   List<T> components = loadComposite(child, itemName, itemClass);\n156                   Constructor constructor = null;\n157                   try {\n158                       constructor = compositeClass.getConstructor(List.class);\n159                       P composite = (P) constructor.newInstance(components);\n160                       setParams(composite, child, new HashSet<>(), itemName);\n161                       return composite;\n162                   } catch (NoSuchMethodException | InvocationTargetException |\n163                            InstantiationException | IllegalAccessException e) {\n164                       throw new TikaConfigException(\"can't build composite class\", e);\n165                   }\n166               }\n167           }\n168           throw new TikaConfigException(\"could not find \" + compositeElementName);\n169       }\n218       private static void setParams(Object object, Node targetNode, Set<String> settings,\n219                                     String exceptNodeName) throws TikaConfigException {\n220           NodeList children = targetNode.getChildNodes();\n221           List<Node> params = new ArrayList<>();\n222           for (int i = 0; i < children.getLength(); i++) {\n223               Node child = children.item(i);\n224   \n225               if (\"params\".equals(child.getLocalName())) {\n226                   NodeList paramsList = child.getChildNodes();\n227                   for (int j = 0; j < paramsList.getLength(); j++) {\n228                       params.add(paramsList.item(j));\n229                   }\n230               } else {\n231                   params.add(child);\n232               }\n233           }\n234           for (int i = 0; i < params.size(); i++) {\n235               Node param = params.get(i);\n236               if (param.getNodeType() != 1) {\n237                   continue;\n238               }\n239               String localName = param.getLocalName();\n240               if (localName == null || localName.equals(exceptNodeName)) {\n241                   continue;\n242               }\n243               String txt = param.getTextContent();\n244               String itemName = param.getLocalName();\n245               SetterClassPair setterClassPair = findSetterClassPair(object, itemName);\n246               boolean processed = false;\n247               if (!hasClass(param)) {\n248                   if (setterClassPair.itemClass.isAssignableFrom(Map.class) && isMap(param)) {\n249                       tryToSetMap(object, param);\n250                       processed = true;\n251                   } else if (setterClassPair.itemClass.isAssignableFrom(List.class)) {\n252                       tryToSetList(object, param);\n253                       processed = true;\n254                   }\n255               }\n256               if (!processed) {\n257                   if (isPrimitive(setterClassPair.itemClass)) {\n258                       tryToSetPrimitive(object, setterClassPair, param.getTextContent());\n259                   } else {\n260                       //tryToSetPrimitive(object, localName, txt);\n261                       Object item = buildClass(param, itemName, setterClassPair.itemClass);\n262                       setParams(setterClassPair.itemClass.cast(item), param, new HashSet<>());\n263                       try {\n264                           setterClassPair.setterMethod.invoke(object, item);\n265                       } catch (IllegalAccessException | InvocationTargetException e) {\n266                           throw new TikaConfigException(\"problem creating \" + itemName, e);\n267                       }\n268                   }\n269               }\n270   \n271               if (txt != null) {\n272                   settings.add(localName);\n273               }\n274           }\n275   \n276           if (object instanceof Initializable) {\n277               ((Initializable) object).initialize(Collections.EMPTY_MAP);\n278               ((Initializable) object).checkInitialization(InitializableProblemHandler.THROW);\n279           }\n280       }\n483       private static void tryToSetPrimitive(Object object, SetterClassPair setterClassPair,\n484                                             String value) throws TikaConfigException {\n485           try {\n486               if (setterClassPair.itemClass == int.class) {\n487                   setterClassPair.setterMethod.invoke(object, Integer.parseInt(value));\n488               } else if (setterClassPair.itemClass == long.class) {\n489                   setterClassPair.setterMethod.invoke(object, Long.parseLong(value));\n490               } else if (setterClassPair.itemClass == float.class) {\n491                   setterClassPair.setterMethod.invoke(object, Float.parseFloat(value));\n492               } else if (setterClassPair.itemClass == double.class) {\n493                   setterClassPair.setterMethod.invoke(object, Double.parseDouble(value));\n494               } else if (setterClassPair.itemClass == boolean.class) {\n495                   setterClassPair.setterMethod.invoke(object, Boolean.parseBoolean(value));\n496               } else {\n497                   setterClassPair.setterMethod.invoke(object, value);\n498               }\n499           } catch (IllegalAccessException | InvocationTargetException e) {\n500               throw new TikaConfigException(\"bad parameter \" + setterClassPair + \" \" + value, e);\n501           }\n502       }\n",
            "cost": 0.11004000000000001,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:493:17",
            "status": "corpus",
            "valid_path": "NO",
            "id": 263
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/metadata/filter/MetadataFilter.java:\n44       public static MetadataFilter load(Element root, boolean allowMissing) throws TikaConfigException,\n45               IOException {\n46           try {\n47               return buildComposite(\"metadataFilters\", CompositeMetadataFilter.class,\n48                       \"metadataFilter\", MetadataFilter.class, root);\n49           } catch (TikaConfigException e) {\n50               if (allowMissing && e.getMessage().contains(\"could not find metadataFilters\")) {\n51                   return new NoOpFilter();\n52               }\n53               throw e;\n54           }\n55       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:\n139       protected static <P, T> P buildComposite(String compositeElementName, Class<P> compositeClass,\n140                                                String itemName, Class<T> itemClass,\n141                                                Element properties)\n142               throws TikaConfigException, IOException {\n143   \n144           if (!properties.getLocalName().equals(\"properties\")) {\n145               throw new TikaConfigException(\"expect properties as root node\");\n146           }\n147           NodeList children = properties.getChildNodes();\n148   \n149           for (int i = 0; i < children.getLength(); i++) {\n150               Node child = children.item(i);\n151               if (child.getNodeType() != 1) {\n152                   continue;\n153               }\n154               if (compositeElementName.equals(child.getLocalName())) {\n155                   List<T> components = loadComposite(child, itemName, itemClass);\n156                   Constructor constructor = null;\n157                   try {\n158                       constructor = compositeClass.getConstructor(List.class);\n159                       P composite = (P) constructor.newInstance(components);\n160                       setParams(composite, child, new HashSet<>(), itemName);\n161                       return composite;\n162                   } catch (NoSuchMethodException | InvocationTargetException |\n163                            InstantiationException | IllegalAccessException e) {\n164                       throw new TikaConfigException(\"can't build composite class\", e);\n165                   }\n166               }\n167           }\n168           throw new TikaConfigException(\"could not find \" + compositeElementName);\n169       }\n218       private static void setParams(Object object, Node targetNode, Set<String> settings,\n219                                     String exceptNodeName) throws TikaConfigException {\n220           NodeList children = targetNode.getChildNodes();\n221           List<Node> params = new ArrayList<>();\n222           for (int i = 0; i < children.getLength(); i++) {\n223               Node child = children.item(i);\n224   \n225               if (\"params\".equals(child.getLocalName())) {\n226                   NodeList paramsList = child.getChildNodes();\n227                   for (int j = 0; j < paramsList.getLength(); j++) {\n228                       params.add(paramsList.item(j));\n229                   }\n230               } else {\n231                   params.add(child);\n232               }\n233           }\n234           for (int i = 0; i < params.size(); i++) {\n235               Node param = params.get(i);\n236               if (param.getNodeType() != 1) {\n237                   continue;\n238               }\n239               String localName = param.getLocalName();\n240               if (localName == null || localName.equals(exceptNodeName)) {\n241                   continue;\n242               }\n243               String txt = param.getTextContent();\n244               String itemName = param.getLocalName();\n245               SetterClassPair setterClassPair = findSetterClassPair(object, itemName);\n246               boolean processed = false;\n247               if (!hasClass(param)) {\n248                   if (setterClassPair.itemClass.isAssignableFrom(Map.class) && isMap(param)) {\n249                       tryToSetMap(object, param);\n250                       processed = true;\n251                   } else if (setterClassPair.itemClass.isAssignableFrom(List.class)) {\n252                       tryToSetList(object, param);\n253                       processed = true;\n254                   }\n255               }\n256               if (!processed) {\n257                   if (isPrimitive(setterClassPair.itemClass)) {\n258                       tryToSetPrimitive(object, setterClassPair, param.getTextContent());\n259                   } else {\n260                       //tryToSetPrimitive(object, localName, txt);\n261                       Object item = buildClass(param, itemName, setterClassPair.itemClass);\n262                       setParams(setterClassPair.itemClass.cast(item), param, new HashSet<>());\n263                       try {\n264                           setterClassPair.setterMethod.invoke(object, item);\n265                       } catch (IllegalAccessException | InvocationTargetException e) {\n266                           throw new TikaConfigException(\"problem creating \" + itemName, e);\n267                       }\n268                   }\n269               }\n270   \n271               if (txt != null) {\n272                   settings.add(localName);\n273               }\n274           }\n275   \n276           if (object instanceof Initializable) {\n277               ((Initializable) object).initialize(Collections.EMPTY_MAP);\n278               ((Initializable) object).checkInitialization(InitializableProblemHandler.THROW);\n279           }\n280       }\n483       private static void tryToSetPrimitive(Object object, SetterClassPair setterClassPair,\n484                                             String value) throws TikaConfigException {\n485           try {\n486               if (setterClassPair.itemClass == int.class) {\n487                   setterClassPair.setterMethod.invoke(object, Integer.parseInt(value));\n488               } else if (setterClassPair.itemClass == long.class) {\n489                   setterClassPair.setterMethod.invoke(object, Long.parseLong(value));\n490               } else if (setterClassPair.itemClass == float.class) {\n491                   setterClassPair.setterMethod.invoke(object, Float.parseFloat(value));\n492               } else if (setterClassPair.itemClass == double.class) {\n493                   setterClassPair.setterMethod.invoke(object, Double.parseDouble(value));\n494               } else if (setterClassPair.itemClass == boolean.class) {\n495                   setterClassPair.setterMethod.invoke(object, Boolean.parseBoolean(value));\n496               } else {\n497                   setterClassPair.setterMethod.invoke(object, value);\n498               }\n499           } catch (IllegalAccessException | InvocationTargetException e) {\n500               throw new TikaConfigException(\"bad parameter \" + setterClassPair + \" \" + value, e);\n501           }\n502       }\n",
            "cost": 0.10899,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:495:17",
            "status": "corpus",
            "valid_path": "NO",
            "id": 264
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/metadata/filter/MetadataFilter.java:\n44       public static MetadataFilter load(Element root, boolean allowMissing) throws TikaConfigException,\n45               IOException {\n46           try {\n47               return buildComposite(\"metadataFilters\", CompositeMetadataFilter.class,\n48                       \"metadataFilter\", MetadataFilter.class, root);\n49           } catch (TikaConfigException e) {\n50               if (allowMissing && e.getMessage().contains(\"could not find metadataFilters\")) {\n51                   return new NoOpFilter();\n52               }\n53               throw e;\n54           }\n55       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:\n139       protected static <P, T> P buildComposite(String compositeElementName, Class<P> compositeClass,\n140                                                String itemName, Class<T> itemClass,\n141                                                Element properties)\n142               throws TikaConfigException, IOException {\n143   \n144           if (!properties.getLocalName().equals(\"properties\")) {\n145               throw new TikaConfigException(\"expect properties as root node\");\n146           }\n147           NodeList children = properties.getChildNodes();\n148   \n149           for (int i = 0; i < children.getLength(); i++) {\n150               Node child = children.item(i);\n151               if (child.getNodeType() != 1) {\n152                   continue;\n153               }\n154               if (compositeElementName.equals(child.getLocalName())) {\n155                   List<T> components = loadComposite(child, itemName, itemClass);\n156                   Constructor constructor = null;\n157                   try {\n158                       constructor = compositeClass.getConstructor(List.class);\n159                       P composite = (P) constructor.newInstance(components);\n160                       setParams(composite, child, new HashSet<>(), itemName);\n161                       return composite;\n162                   } catch (NoSuchMethodException | InvocationTargetException |\n163                            InstantiationException | IllegalAccessException e) {\n164                       throw new TikaConfigException(\"can't build composite class\", e);\n165                   }\n166               }\n167           }\n168           throw new TikaConfigException(\"could not find \" + compositeElementName);\n169       }\n218       private static void setParams(Object object, Node targetNode, Set<String> settings,\n219                                     String exceptNodeName) throws TikaConfigException {\n220           NodeList children = targetNode.getChildNodes();\n221           List<Node> params = new ArrayList<>();\n222           for (int i = 0; i < children.getLength(); i++) {\n223               Node child = children.item(i);\n224   \n225               if (\"params\".equals(child.getLocalName())) {\n226                   NodeList paramsList = child.getChildNodes();\n227                   for (int j = 0; j < paramsList.getLength(); j++) {\n228                       params.add(paramsList.item(j));\n229                   }\n230               } else {\n231                   params.add(child);\n232               }\n233           }\n234           for (int i = 0; i < params.size(); i++) {\n235               Node param = params.get(i);\n236               if (param.getNodeType() != 1) {\n237                   continue;\n238               }\n239               String localName = param.getLocalName();\n240               if (localName == null || localName.equals(exceptNodeName)) {\n241                   continue;\n242               }\n243               String txt = param.getTextContent();\n244               String itemName = param.getLocalName();\n245               SetterClassPair setterClassPair = findSetterClassPair(object, itemName);\n246               boolean processed = false;\n247               if (!hasClass(param)) {\n248                   if (setterClassPair.itemClass.isAssignableFrom(Map.class) && isMap(param)) {\n249                       tryToSetMap(object, param);\n250                       processed = true;\n251                   } else if (setterClassPair.itemClass.isAssignableFrom(List.class)) {\n252                       tryToSetList(object, param);\n253                       processed = true;\n254                   }\n255               }\n256               if (!processed) {\n257                   if (isPrimitive(setterClassPair.itemClass)) {\n258                       tryToSetPrimitive(object, setterClassPair, param.getTextContent());\n259                   } else {\n260                       //tryToSetPrimitive(object, localName, txt);\n261                       Object item = buildClass(param, itemName, setterClassPair.itemClass);\n262                       setParams(setterClassPair.itemClass.cast(item), param, new HashSet<>());\n263                       try {\n264                           setterClassPair.setterMethod.invoke(object, item);\n265                       } catch (IllegalAccessException | InvocationTargetException e) {\n266                           throw new TikaConfigException(\"problem creating \" + itemName, e);\n267                       }\n268                   }\n269               }\n270   \n271               if (txt != null) {\n272                   settings.add(localName);\n273               }\n274           }\n275   \n276           if (object instanceof Initializable) {\n277               ((Initializable) object).initialize(Collections.EMPTY_MAP);\n278               ((Initializable) object).checkInitialization(InitializableProblemHandler.THROW);\n279           }\n280       }\n483       private static void tryToSetPrimitive(Object object, SetterClassPair setterClassPair,\n484                                             String value) throws TikaConfigException {\n485           try {\n486               if (setterClassPair.itemClass == int.class) {\n487                   setterClassPair.setterMethod.invoke(object, Integer.parseInt(value));\n488               } else if (setterClassPair.itemClass == long.class) {\n489                   setterClassPair.setterMethod.invoke(object, Long.parseLong(value));\n490               } else if (setterClassPair.itemClass == float.class) {\n491                   setterClassPair.setterMethod.invoke(object, Float.parseFloat(value));\n492               } else if (setterClassPair.itemClass == double.class) {\n493                   setterClassPair.setterMethod.invoke(object, Double.parseDouble(value));\n494               } else if (setterClassPair.itemClass == boolean.class) {\n495                   setterClassPair.setterMethod.invoke(object, Boolean.parseBoolean(value));\n496               } else {\n497                   setterClassPair.setterMethod.invoke(object, value);\n498               }\n499           } catch (IllegalAccessException | InvocationTargetException e) {\n500               throw new TikaConfigException(\"bad parameter \" + setterClassPair + \" \" + value, e);\n501           }\n502       }\n",
            "cost": 0.10974,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:497:17",
            "status": "corpus",
            "valid_path": "NO",
            "id": 265
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:410:13",
            "status": "error",
            "id": 266
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n 487       private void dumpConfig(TikaConfigSerializer.Mode mode) throws Exception {\n 488           configure();\n 489           TikaConfig localConfig = (config == null) ? TikaConfig.getDefaultConfig() : config;\n 490   \n 491           TikaConfigSerializer.serialize(localConfig, mode, new OutputStreamWriter(System.out, UTF_8), UTF_8);\n 492       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfigSerializer.java:\n 95       public static void serialize(TikaConfig config, Mode mode, Writer writer, Charset charset)\n 96               throws Exception {\n 97           DocumentBuilder docBuilder = XMLReaderUtils.getDocumentBuilder();\n 98   \n 99           // root elements\n100           Document doc = docBuilder.newDocument();\n101           Element rootElement = doc.createElement(\"properties\");\n102   \n103           doc.appendChild(rootElement);\n104           addMimeComment(mode, rootElement, doc);\n105           addServiceLoader(mode, rootElement, doc, config);\n106           addExecutorService(mode, rootElement, doc, config);\n107           addEncodingDetectors(mode, rootElement, doc, config);\n108           addTranslator(mode, rootElement, doc, config);\n109           addDetectors(mode, rootElement, doc, config);\n110           addParsers(mode, rootElement, doc, config);\n111           // TODO Service Loader section\n112   \n113           // now write\n114           Transformer transformer = XMLReaderUtils.getTransformer();\n115           transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n116           transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"2\");\n117           transformer.setOutputProperty(OutputKeys.ENCODING, charset.name());\n118           DOMSource source = new DOMSource(doc);\n119           StreamResult result = new StreamResult(writer);\n120   \n121           transformer.transform(source, result);\n122       }\n181       private static void addEncodingDetectors(Mode mode, Element rootElement, Document doc,\n182                                                TikaConfig config) throws Exception {\n183           EncodingDetector encDetector = config.getEncodingDetector();\n184   \n185           if (mode == Mode.MINIMAL && encDetector instanceof DefaultEncodingDetector) {\n186               // Don't output anything, all using defaults\n187               Node detComment = doc.createComment(\n188                       \"for example: <encodingDetectors><encodingDetector class=\\\"\" +\n189                               \"org.apache.tika.detect.DefaultEncodingDetector\\\">\" +\n190                               \"</encodingDetectors>\");\n191               rootElement.appendChild(detComment);\n192               return;\n193           }\n194   \n195           Element encDetectorsElement = doc.createElement(\"encodingDetectors\");\n196           if (mode == Mode.CURRENT && encDetector instanceof DefaultEncodingDetector ||\n197                   !(encDetector instanceof CompositeEncodingDetector)) {\n198               Element encDetectorElement = doc.createElement(\"encodingDetector\");\n199               encDetectorElement.setAttribute(\"class\", encDetector.getClass().getCanonicalName());\n200               encDetectorsElement.appendChild(encDetectorElement);\n201           } else {\n202               List<EncodingDetector> children =\n203                       ((CompositeEncodingDetector) encDetector).getDetectors();\n204               for (EncodingDetector d : children) {\n205                   Element encDetectorElement = doc.createElement(\"encodingDetector\");\n206                   encDetectorElement.setAttribute(\"class\", d.getClass().getCanonicalName());\n207                   serializeParams(doc, encDetectorElement, d);\n208   \n209                   encDetectorsElement.appendChild(encDetectorElement);\n210               }\n211           }\n212           rootElement.appendChild(encDetectorsElement);\n213       }\n342       public static void serializeParams(Document doc, Element element, Object object) {\n343           Matcher setterMatcher = Pattern.compile(\"\\\\Aset([A-Z].*)\").matcher(\"\");\n344           Matcher getterMatcher = Pattern.compile(\"\\\\A(?:get|is)([A-Z].+)\\\\Z\").matcher(\"\");\n345   \n346           //TODO -- check code base for setters with lowercase initial letters?!\n347           MethodTuples nonPrimitiveSetters = new MethodTuples();\n348           MethodTuples primitiveSetters = new MethodTuples();\n349           MethodTuples nonPrimitiveGetters = new MethodTuples();\n350           MethodTuples primitiveGetters = new MethodTuples();\n351           for (Method method : object.getClass().getMethods()) {\n352               Class[] parameterTypes = method.getParameterTypes();\n353   \n354               if (setterMatcher.reset(method.getName()).find()) {\n355                   if (!Modifier.isPublic(method.getModifiers())) {\n356                       //we could just call getMethods, but this can be helpful debugging inf\n357                       LOG.trace(\"inaccessible setter: {} in {}\", method.getName(), object.getClass());\n358                       continue;\n359                   }\n360                   //require @Field on setters\n361                   if (method.getAnnotation(Field.class) == null) {\n362                      // LOG.warn(\"unannotated setter {} in {}\", method.getName(), object.getClass());\n363                       continue;\n364                   }\n365                   if (parameterTypes.length != 1) {\n366                       //TODO -- check code base for setX() zero parameters that set boolean to true\n367                       LOG.warn(\"setter with wrong number of params \" + method.getName() + \" \" + parameterTypes.length);\n368                       continue;\n369                   }\n370                   String paramName = methodToParamName(setterMatcher.group(1));\n371                   if (PRIMITIVES.containsKey(parameterTypes[0])) {\n372                       primitiveSetters.add(new MethodTuple(paramName, method, parameterTypes[0]));\n373                   } else {\n374                       nonPrimitiveSetters.add(new MethodTuple(paramName, method, parameterTypes[0]));\n375                   }\n376               } else if (getterMatcher.reset(method.getName()).find()) {\n377                   if (parameterTypes.length != 0) {\n378                       //require 0 parameters for the getter\n379                       continue;\n380                   }\n381                   String paramName = methodToParamName(getterMatcher.group(1));\n382                   if (PRIMITIVES.containsKey(method.getReturnType())) {\n383                       primitiveGetters.add(new MethodTuple(paramName, method, method.getReturnType()));\n384                   } else {\n385                       nonPrimitiveGetters.add(new MethodTuple(paramName, method, method.getReturnType()));\n386                   }\n387   \n388               }\n389           }\n390   \n391           //TODO -- remove nonprimitive setters/getters that have a string equivalent\n392           serializePrimitives(doc, element, object, primitiveSetters, primitiveGetters);\n393           serializeNonPrimitives(doc, element, object, nonPrimitiveSetters, nonPrimitiveGetters);\n394   \n395       }\n405       private static void serializeNonPrimitives(Document doc, Element element,\n406                                                  Object object,\n407                                                  MethodTuples setterTuples,\n408                                                  MethodTuples getterTuples) {\n409   \n410           for (Map.Entry<String, Set<MethodTuple>> e : setterTuples.tuples.entrySet()) {\n411               Set<MethodTuple> getters = getterTuples.tuples.get(e.getKey());\n412               processNonPrimitive(e.getKey(), e.getValue(), getters, doc, element, object);\n413               if (!getterTuples.tuples.containsKey(e.getKey())) {\n414                   LOG.warn(\"no getter for setter non-primitive: {} in {}\", e.getKey(),\n415                           object.getClass());\n416                   continue;\n417               }\n418           }\n419       }\n421       private static void processNonPrimitive(String name, Set<MethodTuple> setters,\n422                                               Set<MethodTuple> getters, Document doc, Element element,\n423                                               Object object) {\n424           for (MethodTuple setter : setters) {\n425               for (MethodTuple getter : getters) {\n426                   if (setter.singleParam.equals(getter.singleParam)) {\n427                       serializeObject(name, doc, element, setter, getter, object);\n428                       return;\n429                   }\n430               }\n431           }\n432       }\n434       private static void serializeObject(String name, Document doc, Element element,\n435                                           MethodTuple setter,\n436                                            MethodTuple getter, Object object) {\n437   \n438           Object item = null;\n439           try {\n440               item = getter.method.invoke(object);\n441           } catch (IllegalAccessException | InvocationTargetException e) {\n442               LOG.warn(\"couldn't get \" + name + \" on \" + object.getClass(), e);\n443               return;\n444           }\n445           if (item == null) {\n446               LOG.warn(\"Getter {} on {} returned null\", getter.name, object.getClass());\n447           }\n448           Element entry = doc.createElement(name);\n449           entry.setAttribute(\"class\", item.getClass().getCanonicalName());\n450           element.appendChild(entry);\n451           serializeParams(doc, element, item);\n452       }\n",
            "cost": 0.10415500000000001,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfigSerializer.java:440:20",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 267
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/corenlp/CoreNLPNERecogniser.java:156:29",
            "status": "error",
            "id": 268
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n 557       private void updateXMLReaderUtils(Element element) throws TikaException {\n 558   \n 559           Element child = getChild(element, \"xml-reader-utils\");\n 560           if (child == null) {\n 561               return;\n 562           }\n 563   \n 564           if (child.hasAttribute(\"maxEntityExpansions\")) {\n 565               XMLReaderUtils.setMaxEntityExpansions(Integer.parseInt(child.getAttribute(\"maxEntityExpansions\")));\n 566           }\n 567   \n 568           // make sure to call this after set entity expansions\n 569           if (child.hasAttribute(\"poolSize\")) {\n 570               XMLReaderUtils.setPoolSize(Integer.parseInt(child.getAttribute(\"poolSize\")));\n 571           }\n 572   \n 573       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java:\n 830       public static void setPoolSize(int poolSize) throws TikaException {\n 831           //stop the world with a write lock.\n 832           //parsers that are currently in use will be offered later (once the lock is released),\n 833           //but not accepted and will be gc'd.  We have to do this locking and\n 834           //the read locking in case one thread resizes the pool when the\n 835           //parsers have already started.  We could have an NPE on SAX_PARSERS\n 836           //if we didn't lock.\n 837           SAX_READ_WRITE_LOCK.writeLock().lock();\n 838           try {\n 839               //free up any resources before emptying SAX_PARSERS\n 840               for (PoolSAXParser parser : SAX_PARSERS) {\n 841                   parser.reset();\n 842               }\n 843               SAX_PARSERS.clear();\n 844               SAX_PARSERS = new ArrayBlockingQueue<>(poolSize);\n 845               int generation = POOL_GENERATION.incrementAndGet();\n 846               for (int i = 0; i < poolSize; i++) {\n 847                   try {\n 848                       SAX_PARSERS.offer(buildPoolParser(generation,\n 849                               getSAXParserFactory().newSAXParser()));\n 850                   } catch (SAXException | ParserConfigurationException e) {\n 851                       throw new TikaException(\"problem creating sax parser\", e);\n 852                   }\n 853               }\n 854           } finally {\n 855               SAX_READ_WRITE_LOCK.writeLock().unlock();\n 856           }\n 857   \n 858           DOM_READ_WRITE_LOCK.writeLock().lock();\n 859           try {\n 860               DOM_BUILDERS.clear();\n 861               DOM_BUILDERS = new ArrayBlockingQueue<>(poolSize);\n 862               for (int i = 0; i < poolSize; i++) {\n 863                   DOM_BUILDERS.offer(new PoolDOMBuilder(POOL_GENERATION.get(), getDocumentBuilder()));\n 864               }\n 865           } finally {\n 866               DOM_READ_WRITE_LOCK.writeLock().unlock();\n 867           }\n 868           POOL_SIZE = poolSize;\n 869       }\n 907       private static PoolSAXParser buildPoolParser(int generation, SAXParser parser) {\n 908           boolean canReset = false;\n 909           try {\n 910               parser.reset();\n 911               canReset = true;\n 912           } catch (UnsupportedOperationException e) {\n 913               canReset = false;\n 914           }\n 915           boolean hasSecurityManager = false;\n 916           try {\n 917               Object mgr =\n 918                       Class.forName(XERCES_SECURITY_MANAGER).getDeclaredConstructor().newInstance();\n 919               Method setLimit = mgr.getClass().getMethod(\"setEntityExpansionLimit\", Integer.TYPE);\n 920               setLimit.invoke(mgr, MAX_ENTITY_EXPANSIONS);\n 921   \n 922               parser.setProperty(XERCES_SECURITY_MANAGER_PROPERTY, mgr);\n 923               hasSecurityManager = true;\n 924           } catch (SecurityException e) {\n 925               //don't swallow security exceptions\n 926               throw e;\n 927           } catch (ClassNotFoundException e) {\n 928               // continue without log, this is expected in some setups\n 929           } catch (Throwable e) {\n 930               // NOSONAR - also catch things like NoClassDefError here\n 931               // throttle the log somewhat as it can spam the log otherwise\n 932               if (System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {\n 933                   LOG.warn(\"SAX Security Manager could not be setup [log suppressed for 5 minutes]\",\n 934                           e);\n 935                   LAST_LOG = System.currentTimeMillis();\n 936               }\n 937           }\n 938   \n 939           boolean canSetJaxPEntity = false;\n 940           if (!hasSecurityManager) {\n 941               // use the builtin way of setting the property\n 942               try {\n 943                   parser.setProperty(\"http://www.oracle.com/xml/jaxp/properties/entityExpansionLimit\",\n 944                           MAX_ENTITY_EXPANSIONS);\n 945                   canSetJaxPEntity = true;\n 946               } catch (SAXException e) {     // NOSONAR - also catch things like NoClassDefError here\n 947                   // throttle the log somewhat as it can spam the log otherwise\n 948                   if (System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {\n 949                       LOG.warn(\n 950                               \"SAX Security Manager could not be setup [log suppressed for 5 \" +\n 951                                       \"minutes]\",\n 952                               e);\n 953                       LAST_LOG = System.currentTimeMillis();\n 954                   }\n 955               }\n 956           }\n 957   \n 958           if (!canReset && hasSecurityManager) {\n 959               return new XercesPoolSAXParser(generation, parser);\n 960           } else if (canReset && hasSecurityManager) {\n 961               return new Xerces2PoolSAXParser(generation, parser);\n 962           } else if (canReset && !hasSecurityManager && canSetJaxPEntity) {\n 963               return new BuiltInPoolSAXParser(generation, parser);\n 964           } else {\n 965               return new UnrecognizedPoolSAXParser(generation, parser);\n 966           }\n 967   \n 968       }\n",
            "cost": 0.11218,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java:920:13",
            "status": "corpus",
            "valid_path": "NO",
            "id": 269
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n 487       private void dumpConfig(TikaConfigSerializer.Mode mode) throws Exception {\n 488           configure();\n 489           TikaConfig localConfig = (config == null) ? TikaConfig.getDefaultConfig() : config;\n 490   \n 491           TikaConfigSerializer.serialize(localConfig, mode, new OutputStreamWriter(System.out, UTF_8), UTF_8);\n 492       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfigSerializer.java:\n 95       public static void serialize(TikaConfig config, Mode mode, Writer writer, Charset charset)\n 96               throws Exception {\n 97           DocumentBuilder docBuilder = XMLReaderUtils.getDocumentBuilder();\n 98   \n 99           // root elements\n100           Document doc = docBuilder.newDocument();\n101           Element rootElement = doc.createElement(\"properties\");\n102   \n103           doc.appendChild(rootElement);\n104           addMimeComment(mode, rootElement, doc);\n105           addServiceLoader(mode, rootElement, doc, config);\n106           addExecutorService(mode, rootElement, doc, config);\n107           addEncodingDetectors(mode, rootElement, doc, config);\n108           addTranslator(mode, rootElement, doc, config);\n109           addDetectors(mode, rootElement, doc, config);\n110           addParsers(mode, rootElement, doc, config);\n111           // TODO Service Loader section\n112   \n113           // now write\n114           Transformer transformer = XMLReaderUtils.getTransformer();\n115           transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n116           transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"2\");\n117           transformer.setOutputProperty(OutputKeys.ENCODING, charset.name());\n118           DOMSource source = new DOMSource(doc);\n119           StreamResult result = new StreamResult(writer);\n120   \n121           transformer.transform(source, result);\n122       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java:\n 244       public static DocumentBuilderFactory getDocumentBuilderFactory() {\n 245           //borrowed from Apache POI\n 246           DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n 247           if (LOG.isDebugEnabled()) {\n 248               LOG.debug(\"DocumentBuilderFactory class {}\", factory.getClass());\n 249           }\n 250   \n 251           factory.setExpandEntityReferences(false);\n 252           factory.setNamespaceAware(true);\n 253           factory.setValidating(false);\n 254   \n 255           trySetSAXFeature(factory, XMLConstants.FEATURE_SECURE_PROCESSING, true);\n 256           trySetSAXFeature(factory, \"http://xml.org/sax/features/external-general-entities\", false);\n 257           trySetSAXFeature(factory, \"http://xml.org/sax/features/external-parameter-entities\", false);\n 258           trySetSAXFeature(factory, \"http://apache.org/xml/features/nonvalidating/load-external-dtd\",\n 259                   false);\n 260           trySetSAXFeature(factory, \"http://apache.org/xml/features/nonvalidating/load-dtd-grammar\",\n 261                   false);\n 262           trySetXercesSecurityManager(factory);\n 263           return factory;\n 264       }\n 276       public static DocumentBuilder getDocumentBuilder() throws TikaException {\n 277           try {\n 278               DocumentBuilderFactory documentBuilderFactory = getDocumentBuilderFactory();\n 279               DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n 280               documentBuilder.setEntityResolver(IGNORING_SAX_ENTITY_RESOLVER);\n 281               documentBuilder.setErrorHandler(null);\n 282               return documentBuilder;\n 283           } catch (ParserConfigurationException e) {\n 284               throw new TikaException(\"XML parser not available\", e);\n 285           }\n 286       }\n 713       private static void trySetXercesSecurityManager(DocumentBuilderFactory factory) {\n 714           //from POI\n 715           // Try built-in JVM one first, standalone if not\n 716           for (String securityManagerClassName : new String[]{\n 717                   //\"com.sun.org.apache.xerces.internal.util.SecurityManager\",\n 718                   XERCES_SECURITY_MANAGER}) {\n 719               try {\n 720                   Object mgr =\n 721                           Class.forName(securityManagerClassName).getDeclaredConstructor().newInstance();\n 722                   Method setLimit = mgr.getClass().getMethod(\"setEntityExpansionLimit\",\n 723                           Integer.TYPE);\n 724                   setLimit.invoke(mgr, MAX_ENTITY_EXPANSIONS);\n 725                   factory.setAttribute(XERCES_SECURITY_MANAGER_PROPERTY, mgr);\n 726                   // Stop once one can be setup without error\n 727                   return;\n 728               } catch (ClassNotFoundException e) {\n 729                   // continue without log, this is expected in some setups\n 730               } catch (Throwable e) {     // NOSONAR - also catch things like NoClassDefError here\n 731                   // throttle the log somewhat as it can spam the log otherwise\n 732                   if (System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {\n 733                       LOG.warn(\n 734                               \"SAX Security Manager could not be setup [log suppressed for 5 \" +\n 735                                       \"minutes]\",\n 736                               e);\n 737                       LAST_LOG = System.currentTimeMillis();\n 738                   }\n 739               }\n 740           }\n 741   \n 742           // separate old version of Xerces not found => use the builtin way of setting the property\n 743           try {\n 744               factory.setAttribute(\"http://www.oracle.com/xml/jaxp/properties/entityExpansionLimit\",\n 745                       MAX_ENTITY_EXPANSIONS);\n 746           } catch (IllegalArgumentException e) {\n 747               // NOSONAR - also catch things like NoClassDefError here\n 748               // throttle the log somewhat as it can spam the log otherwise\n 749               if (System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {\n 750                   LOG.warn(\"SAX Security Manager could not be setup [log suppressed for 5 minutes]\",\n 751                           e);\n 752                   LAST_LOG = System.currentTimeMillis();\n 753               }\n 754           }\n 755       }\n",
            "cost": 0.09431,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java:724:17",
            "status": "corpus",
            "valid_path": "NO",
            "id": 270
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n 667           @SuppressWarnings(\"unchecked\")\n 668           CT loadOverall(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 669                   throws TikaException, IOException {\n 670               List<T> loaded = new ArrayList<>();\n 671   \n 672               // Find the children of the parent tag, if any\n 673               for (Element le : getTopLevelElementChildren(element, getParentTagName(),\n 674                       getLoaderTagName())) {\n 675                   T loadedChild = loadOne(le, mimeTypes, loader);\n 676                   if (loadedChild != null) {\n 677                       loaded.add(loadedChild);\n 678                   }\n 679               }\n 680   \n 681               // Build the classes, and wrap as needed\n 682               if (loaded.isEmpty()) {\n 683                   // Nothing defined, create a Default\n 684                   return createDefault(mimeTypes, loader);\n 685               } else if (loaded.size() == 1) {\n 686                   T single = loaded.get(0);\n 687                   if (isComposite(single)) {\n 688                       // Single Composite defined, use that\n 689                       return (CT) single;\n 690                   }\n 691               } else if (!supportsComposite()) {\n 692                   // No composite support, just return the first one\n 693                   if (loaded.size() == 1) {\n 694                       return (CT) loaded.get(0);\n 695                   } else if (loaded.size() > 1) {\n 696                       throw new TikaConfigException(\n 697                               \"Composite not supported for \" + getParentTagName() +\n 698                                       \". Must specify only one child!\");\n 699                   } else {\n 700                       //throw exception if empty?\n 701                   }\n 702               }\n 703               // Wrap the defined parsers/detectors up in a Composite\n 704               return createComposite(loaded, mimeTypes, loader);\n 705           }\n 707           T loadOne(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 708                   throws TikaException, IOException {\n 709               String name = element.getAttribute(\"class\");\n 710               if (name == null) {\n 711                   throw new TikaConfigException(\"class attribute must not be null: \" + element);\n 712               }\n 713               String initProbHandler = element.getAttribute(\"initializableProblemHandler\");\n 714               InitializableProblemHandler initializableProblemHandler;\n 715               if (initProbHandler == null || initProbHandler.length() == 0) {\n 716                   initializableProblemHandler = loader.getInitializableProblemHandler();\n 717               } else {\n 718                   initializableProblemHandler = getInitializableProblemHandler(initProbHandler);\n 719               }\n 720   \n 721               T loaded = null;\n 722   \n 723               try {\n 724                   Class<? extends T> loadedClass = loader.getServiceClass(getLoaderClass(), name);\n 725   \n 726                   // Do pre-load checks and short-circuits\n 727                   //TODO : allow duplicate instances with different configurations\n 728                   loaded = preLoadOne(loadedClass, name, mimeTypes);\n 729                   if (loaded != null) {\n 730                       return loaded;\n 731                   }\n 732   \n 733                   // Get any parameters / settings for the parser\n 734                   Map<String, Param> params = null;\n 735                   try {\n 736                       params = getParams(element);\n 737                   } catch (Exception e) {\n 738                       throw new TikaConfigException(e.getMessage(), e);\n 739                   }\n 740   \n 741                   // Is this a composite or decorated class? If so, support recursion\n 742                   if (isComposite(loadedClass)) {\n 743                       // Get the child objects for it\n 744                       List<T> children = new ArrayList<>();\n 745                       NodeList childNodes = element.getElementsByTagName(getLoaderTagName());\n 746                       if (childNodes.getLength() > 0) {\n 747                           for (int i = 0; i < childNodes.getLength(); i++) {\n 748                               T loadedChild =\n 749                                       loadOne((Element) childNodes.item(i), mimeTypes, loader);\n 750                               if (loadedChild != null) {\n 751                                   children.add(loadedChild);\n 752                               }\n 753                           }\n 754                       }\n 755   \n 756                       // Get the list of children to exclude\n 757                       Set<Class<? extends T>> excludeChildren = new HashSet<>();\n 758                       NodeList excludeChildNodes =\n 759                               element.getElementsByTagName(getLoaderTagName() + \"-exclude\");\n 760                       if (excludeChildNodes.getLength() > 0) {\n 761                           for (int i = 0; i < excludeChildNodes.getLength(); i++) {\n 762                               Element excl = (Element) excludeChildNodes.item(i);\n 763                               String exclName = excl.getAttribute(\"class\");\n 764                               try {\n 765                                   excludeChildren\n 766                                           .add(loader.getServiceClass(getLoaderClass(), exclName));\n 767                               } catch (ClassNotFoundException e) {\n 768                                   //TIKA-3268 -- This should stop the world.\n 769                                   throw new TikaConfigException(\n 770                                           \"Class not found in -exclude list: \" + exclName);\n 771                               }\n 772                           }\n 773                       }\n 774   \n 775                       // Create the Composite\n 776                       loaded = createComposite(loadedClass, children, excludeChildren, params,\n 777                               mimeTypes, loader);\n 778   \n 779                       // Default constructor fallback\n 780                       if (loaded == null) {\n 781                           loaded = newInstance(loadedClass);\n 782                       }\n 783                   } else {\n 784                       // Regular class, create as-is\n 785                       loaded = newInstance(loadedClass);\n 786                       // TODO Support arguments, needed for Translators etc\n 787                       // See the thread \"Configuring parsers and translators\" for details\n 788                   }\n 789   \n 790                   //Assigning the params to bean fields/setters\n 791                   AnnotationUtils.assignFieldParams(loaded, params);\n 792                   if (loaded instanceof Initializable) {\n 793                       ((Initializable) loaded).initialize(params);\n 794                       ((Initializable) loaded).checkInitialization(initializableProblemHandler);\n 795                   }\n 796                   // Have any decoration performed, eg explicit mimetypes\n 797                   loaded = decorate(loaded, element);\n 798                   // All done with setup\n 799                   return loaded;\n 800               } catch (ClassNotFoundException e) {\n 801                   if (loader.getLoadErrorHandler() == LoadErrorHandler.THROW) {\n 802                       // Use a different exception signature here\n 803                       throw new TikaConfigException(\n 804                               \"Unable to find a \" + getLoaderTagName() + \" class: \" + name, e);\n 805                   }\n 806                   // Report the problem\n 807                   loader.getLoadErrorHandler().handleLoadError(name, e);\n 808                   return null;\n 809               } catch (IllegalAccessException e) {\n 810                   throw new TikaException(\n 811                           \"Unable to access a \" + getLoaderTagName() + \" class: \" + name, e);\n 812               } catch (InvocationTargetException e) {\n 813                   throw new TikaException(\n 814                           \"Unable to create a \" + getLoaderTagName() + \" class: \" + name, e);\n 815               } catch (InstantiationException e) {\n 816                   throw new TikaException(\n 817                           \"Unable to instantiate a \" + getLoaderTagName() + \" class: \" + name, e);\n 818               } catch (NoSuchMethodException e) {\n 819                   throw new TikaException(\n 820                           \"Unable to find the right constructor for \" + getLoaderTagName() +\n 821                                   \" class: \" + name, e);\n 822               }\n 823           }\n 838           Map<String, Param> getParams(Element el) throws TikaException {\n 839               Map<String, Param> params = new HashMap<>();\n 840               for (Node child = el.getFirstChild(); child != null; child = child.getNextSibling()) {\n 841                   if (PARAMS_TAG_NAME.equals(child.getNodeName())) { //found the node\n 842                       if (child.hasChildNodes()) { //it has children\n 843                           NodeList childNodes = child.getChildNodes();\n 844                           for (int i = 0; i < childNodes.getLength(); i++) {\n 845                               Node item = childNodes.item(i);\n 846                               if (item.getNodeType() == Node.ELEMENT_NODE) {\n 847                                   Param<?> param = Param.load(item);\n 848                                   params.put(param.getName(), param);\n 849                               }\n 850                           }\n 851                       }\n 852                       break; //only the first one is used\n 853                   }\n 854               }\n 855               return params;\n 856           }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/Param.java:\n127       public static <T> Param<T> load(Node node) throws TikaConfigException {\n128   \n129           Node nameAttr = node.getAttributes().getNamedItem(\"name\");\n130           Node typeAttr = node.getAttributes().getNamedItem(\"type\");\n131           Node valueAttr = node.getAttributes().getNamedItem(\"value\");\n132           Node classAttr = node.getAttributes().getNamedItem(\"class\");\n133           Class clazz = null;\n134           if (classAttr != null) {\n135               try {\n136                   clazz = Class.forName(classAttr.getTextContent());\n137               } catch (ClassNotFoundException e) {\n138                   throw new TikaConfigException(\"can't find class: \" + classAttr.getTextContent(), e);\n139               }\n140           }\n141           Node value = node.getFirstChild();\n142           if (value instanceof NodeList && valueAttr != null) {\n143               throw new TikaConfigException(\"can't specify a value attr _and_ a node list\");\n144           }\n145           if (valueAttr != null && (value == null || value.getTextContent() == null)) {\n146               value = valueAttr;\n147           }\n148   \n149           Param<T> ret = new Param<>();\n150           ret.name = nameAttr.getTextContent();\n151           if (typeAttr != null) {\n152               String type = typeAttr.getTextContent();\n153               if (\"class\".equals(type)) {\n154                   if (classAttr == null) {\n155                       throw new TikaConfigException(\"must specify a class attribute if \" +\n156                               \"type=\\\"class\\\"\");\n157                   }\n158                   ret.setType(clazz);\n159               } else {\n160                   ret.setTypeString(typeAttr.getTextContent());\n161               }\n162           } else {\n163               ret.type = (Class<T>) wellKnownMap.get(ret.name);\n164               if (ret.type == null) {\n165                   ret.type = clazz;\n166               }\n167               if (ret.type == null) {\n168                   throw new TikaConfigException(\"Must specify a \\\"type\\\" in: \" + node.getLocalName());\n169               }\n170           }\n171   \n172           if (clazz != null) {\n173               loadObject(ret, node, clazz);\n174           } else if (List.class.isAssignableFrom(ret.type)) {\n175               loadList(ret, node);\n176           } else if (Map.class.isAssignableFrom(ret.type)) {\n177               loadMap(ret, node);\n178           } else {\n179               //allow the empty string\n180               String textContent = \"\";\n181               if (value != null) {\n182                   textContent = value.getTextContent();\n183               }\n184               ret.actualValue = getTypedValue(ret.type, textContent);\n185               ret.valueStrings.add(textContent);\n186           }\n187           return ret;\n188       }\n189       private static <T> void loadObject(Param<T> ret, Node root, Class clazz) throws TikaConfigException {\n190   \n191           try {\n192               ret.actualValue = (T)clazz.getDeclaredConstructor().newInstance();\n193           } catch (InstantiationException | IllegalAccessException | NoSuchMethodException |\n194                    InvocationTargetException e) {\n195               throw new TikaConfigException(\"can't build class: \" + clazz, e);\n196           }\n197   \n198           NodeList nodeList = root.getChildNodes();\n199           for (int i = 0; i < nodeList.getLength(); i++) {\n200               Node n = nodeList.item(i);\n201               if (\"params\".equals(n.getLocalName())) {\n202                   NodeList params = n.getChildNodes();\n203                   for (int j = 0; j < params.getLength(); j++) {\n204                       if (\"param\".equals(params.item(j).getLocalName())) {\n205                           Param param = load(params.item(j));\n206   \n207                           Method method = null;\n208                           String methodName = \"set\" +\n209                                   param.getName().substring(0,1).toUpperCase(Locale.US) +\n210                                   param.getName().substring(1);\n211                           try {\n212                               method = ret.actualValue.getClass().getMethod(methodName,\n213                                       param.getType());\n214                           } catch (NoSuchMethodException e) {\n215                               throw new TikaConfigException(\"can't find method: \" + methodName, e);\n216                           }\n217                           try {\n218                               method.invoke(ret.actualValue, param.getValue());\n219                           } catch (IllegalAccessException | InvocationTargetException e) {\n220                               throw new TikaConfigException(\"can't set param value: \" + param.getName(), e);\n221                           }\n222                       }\n223                   }\n224               }\n225           }\n226       }\n",
            "cost": 0.13363,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/Param.java:218:29",
            "status": "corpus",
            "valid_path": "NO",
            "id": 271
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n 487       private void dumpConfig(TikaConfigSerializer.Mode mode) throws Exception {\n 488           configure();\n 489           TikaConfig localConfig = (config == null) ? TikaConfig.getDefaultConfig() : config;\n 490   \n 491           TikaConfigSerializer.serialize(localConfig, mode, new OutputStreamWriter(System.out, UTF_8), UTF_8);\n 492       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfigSerializer.java:\n 95       public static void serialize(TikaConfig config, Mode mode, Writer writer, Charset charset)\n 96               throws Exception {\n 97           DocumentBuilder docBuilder = XMLReaderUtils.getDocumentBuilder();\n 98   \n 99           // root elements\n100           Document doc = docBuilder.newDocument();\n101           Element rootElement = doc.createElement(\"properties\");\n102   \n103           doc.appendChild(rootElement);\n104           addMimeComment(mode, rootElement, doc);\n105           addServiceLoader(mode, rootElement, doc, config);\n106           addExecutorService(mode, rootElement, doc, config);\n107           addEncodingDetectors(mode, rootElement, doc, config);\n108           addTranslator(mode, rootElement, doc, config);\n109           addDetectors(mode, rootElement, doc, config);\n110           addParsers(mode, rootElement, doc, config);\n111           // TODO Service Loader section\n112   \n113           // now write\n114           Transformer transformer = XMLReaderUtils.getTransformer();\n115           transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n116           transformer.setOutputProperty(\"{http://xml.apache.org/xslt}indent-amount\", \"2\");\n117           transformer.setOutputProperty(OutputKeys.ENCODING, charset.name());\n118           DOMSource source = new DOMSource(doc);\n119           StreamResult result = new StreamResult(writer);\n120   \n121           transformer.transform(source, result);\n122       }\n181       private static void addEncodingDetectors(Mode mode, Element rootElement, Document doc,\n182                                                TikaConfig config) throws Exception {\n183           EncodingDetector encDetector = config.getEncodingDetector();\n184   \n185           if (mode == Mode.MINIMAL && encDetector instanceof DefaultEncodingDetector) {\n186               // Don't output anything, all using defaults\n187               Node detComment = doc.createComment(\n188                       \"for example: <encodingDetectors><encodingDetector class=\\\"\" +\n189                               \"org.apache.tika.detect.DefaultEncodingDetector\\\">\" +\n190                               \"</encodingDetectors>\");\n191               rootElement.appendChild(detComment);\n192               return;\n193           }\n194   \n195           Element encDetectorsElement = doc.createElement(\"encodingDetectors\");\n196           if (mode == Mode.CURRENT && encDetector instanceof DefaultEncodingDetector ||\n197                   !(encDetector instanceof CompositeEncodingDetector)) {\n198               Element encDetectorElement = doc.createElement(\"encodingDetector\");\n199               encDetectorElement.setAttribute(\"class\", encDetector.getClass().getCanonicalName());\n200               encDetectorsElement.appendChild(encDetectorElement);\n201           } else {\n202               List<EncodingDetector> children =\n203                       ((CompositeEncodingDetector) encDetector).getDetectors();\n204               for (EncodingDetector d : children) {\n205                   Element encDetectorElement = doc.createElement(\"encodingDetector\");\n206                   encDetectorElement.setAttribute(\"class\", d.getClass().getCanonicalName());\n207                   serializeParams(doc, encDetectorElement, d);\n208   \n209                   encDetectorsElement.appendChild(encDetectorElement);\n210               }\n211           }\n212           rootElement.appendChild(encDetectorsElement);\n213       }\n342       public static void serializeParams(Document doc, Element element, Object object) {\n343           Matcher setterMatcher = Pattern.compile(\"\\\\Aset([A-Z].*)\").matcher(\"\");\n344           Matcher getterMatcher = Pattern.compile(\"\\\\A(?:get|is)([A-Z].+)\\\\Z\").matcher(\"\");\n345   \n346           //TODO -- check code base for setters with lowercase initial letters?!\n347           MethodTuples nonPrimitiveSetters = new MethodTuples();\n348           MethodTuples primitiveSetters = new MethodTuples();\n349           MethodTuples nonPrimitiveGetters = new MethodTuples();\n350           MethodTuples primitiveGetters = new MethodTuples();\n351           for (Method method : object.getClass().getMethods()) {\n352               Class[] parameterTypes = method.getParameterTypes();\n353   \n354               if (setterMatcher.reset(method.getName()).find()) {\n355                   if (!Modifier.isPublic(method.getModifiers())) {\n356                       //we could just call getMethods, but this can be helpful debugging inf\n357                       LOG.trace(\"inaccessible setter: {} in {}\", method.getName(), object.getClass());\n358                       continue;\n359                   }\n360                   //require @Field on setters\n361                   if (method.getAnnotation(Field.class) == null) {\n362                      // LOG.warn(\"unannotated setter {} in {}\", method.getName(), object.getClass());\n363                       continue;\n364                   }\n365                   if (parameterTypes.length != 1) {\n366                       //TODO -- check code base for setX() zero parameters that set boolean to true\n367                       LOG.warn(\"setter with wrong number of params \" + method.getName() + \" \" + parameterTypes.length);\n368                       continue;\n369                   }\n370                   String paramName = methodToParamName(setterMatcher.group(1));\n371                   if (PRIMITIVES.containsKey(parameterTypes[0])) {\n372                       primitiveSetters.add(new MethodTuple(paramName, method, parameterTypes[0]));\n373                   } else {\n374                       nonPrimitiveSetters.add(new MethodTuple(paramName, method, parameterTypes[0]));\n375                   }\n376               } else if (getterMatcher.reset(method.getName()).find()) {\n377                   if (parameterTypes.length != 0) {\n378                       //require 0 parameters for the getter\n379                       continue;\n380                   }\n381                   String paramName = methodToParamName(getterMatcher.group(1));\n382                   if (PRIMITIVES.containsKey(method.getReturnType())) {\n383                       primitiveGetters.add(new MethodTuple(paramName, method, method.getReturnType()));\n384                   } else {\n385                       nonPrimitiveGetters.add(new MethodTuple(paramName, method, method.getReturnType()));\n386                   }\n387   \n388               }\n389           }\n390   \n391           //TODO -- remove nonprimitive setters/getters that have a string equivalent\n392           serializePrimitives(doc, element, object, primitiveSetters, primitiveGetters);\n393           serializeNonPrimitives(doc, element, object, nonPrimitiveSetters, nonPrimitiveGetters);\n394   \n395       }\n454       private static void serializePrimitives(Document doc, Element root,\n455                                               Object object,\n456                                               MethodTuples setterTuples, MethodTuples getterTuples) {\n457   \n458           Element paramsElement = null;\n459           if (object instanceof AbstractMultipleParser) {\n460               paramsElement = doc.createElement(\"params\");\n461               Element paramElement = doc.createElement(\"param\");\n462               paramElement.setAttribute(\"name\", \"metadataPolicy\");\n463               paramElement.setAttribute(\"value\",\n464                       ((AbstractMultipleParser) object).getMetadataPolicy().toString());\n465               paramsElement.appendChild(paramElement);\n466               root.appendChild(paramsElement);\n467           }\n468           for (Map.Entry<String, Set<MethodTuple>> e : setterTuples.tuples.entrySet()) {\n469               if (!getterTuples.tuples.containsKey(e.getKey())) {\n470                   LOG.info(\"no getter for setter: {} in {}\", e.getKey(), object.getClass());\n471                   continue;\n472               }\n473               Set<MethodTuple> getters = getterTuples.tuples.get(e.getKey());\n474               Set<MethodTuple> setters = e.getValue();\n475               MethodTuple getterTuple = null;\n476               for (MethodTuple getterCandidate : getters) {\n477                   for (MethodTuple setter : setters) {\n478                       if (getterCandidate.singleParam.equals(setter.singleParam)) {\n479                           getterTuple = getterCandidate;\n480                           break;\n481                       }\n482                   }\n483               }\n484   \n485               if (getterTuple == null) {\n486                   LOG.debug(\"Could not find getter to match setter for: {}\", e.getKey());\n487                   continue;\n488               }\n489               Object value = null;\n490               try {\n491                   value = getterTuple.method.invoke(object);\n492               } catch (IllegalAccessException ex) {\n493                   LOG.error(\"couldn't invoke \" + getterTuple, ex);\n494                   continue;\n495               } catch (InvocationTargetException ex) {\n496                   LOG.error(\"couldn't invoke \" + getterTuple, ex);\n497                   continue;\n498               }\n499               if (value == null) {\n500                   LOG.debug(\"null value: {} in {}\", getterTuple.name, object.getClass());\n501               }\n502               String valString = (value == null) ? \"\" : value.toString();\n503               Element param = doc.createElement(\"param\");\n504               param.setAttribute(\"name\", getterTuple.name);\n505               param.setAttribute(\"type\", PRIMITIVES.get(getterTuple.singleParam));\n506               if (List.class.isAssignableFrom(getterTuple.singleParam)) {\n507                   //this outputs even empty list elements, which I think is good.\n508                   addList(param, doc, getterTuple, (List<String>) value);\n509               } else if (Map.class.isAssignableFrom(getterTuple.singleParam)) {\n510                   //this outputs even empty lists, which I think is good.\n511                   addMap(param, doc, getterTuple, (Map<String, String>) value);\n512               } else {\n513                   param.setTextContent(valString);\n514               }\n515               if (paramsElement == null) {\n516                   paramsElement = doc.createElement(\"params\");\n517                   root.appendChild(paramsElement);\n518               }\n519               paramsElement.appendChild(param);\n520           }\n521       }\n",
            "cost": 0.10488,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfigSerializer.java:491:25",
            "status": "corpus",
            "valid_path": "NO",
            "id": 272
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/metadata/filter/MetadataFilter.java:\n44       public static MetadataFilter load(Element root, boolean allowMissing) throws TikaConfigException,\n45               IOException {\n46           try {\n47               return buildComposite(\"metadataFilters\", CompositeMetadataFilter.class,\n48                       \"metadataFilter\", MetadataFilter.class, root);\n49           } catch (TikaConfigException e) {\n50               if (allowMissing && e.getMessage().contains(\"could not find metadataFilters\")) {\n51                   return new NoOpFilter();\n52               }\n53               throw e;\n54           }\n55       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:\n139       protected static <P, T> P buildComposite(String compositeElementName, Class<P> compositeClass,\n140                                                String itemName, Class<T> itemClass,\n141                                                Element properties)\n142               throws TikaConfigException, IOException {\n143   \n144           if (!properties.getLocalName().equals(\"properties\")) {\n145               throw new TikaConfigException(\"expect properties as root node\");\n146           }\n147           NodeList children = properties.getChildNodes();\n148   \n149           for (int i = 0; i < children.getLength(); i++) {\n150               Node child = children.item(i);\n151               if (child.getNodeType() != 1) {\n152                   continue;\n153               }\n154               if (compositeElementName.equals(child.getLocalName())) {\n155                   List<T> components = loadComposite(child, itemName, itemClass);\n156                   Constructor constructor = null;\n157                   try {\n158                       constructor = compositeClass.getConstructor(List.class);\n159                       P composite = (P) constructor.newInstance(components);\n160                       setParams(composite, child, new HashSet<>(), itemName);\n161                       return composite;\n162                   } catch (NoSuchMethodException | InvocationTargetException |\n163                            InstantiationException | IllegalAccessException e) {\n164                       throw new TikaConfigException(\"can't build composite class\", e);\n165                   }\n166               }\n167           }\n168           throw new TikaConfigException(\"could not find \" + compositeElementName);\n169       }\n218       private static void setParams(Object object, Node targetNode, Set<String> settings,\n219                                     String exceptNodeName) throws TikaConfigException {\n220           NodeList children = targetNode.getChildNodes();\n221           List<Node> params = new ArrayList<>();\n222           for (int i = 0; i < children.getLength(); i++) {\n223               Node child = children.item(i);\n224   \n225               if (\"params\".equals(child.getLocalName())) {\n226                   NodeList paramsList = child.getChildNodes();\n227                   for (int j = 0; j < paramsList.getLength(); j++) {\n228                       params.add(paramsList.item(j));\n229                   }\n230               } else {\n231                   params.add(child);\n232               }\n233           }\n234           for (int i = 0; i < params.size(); i++) {\n235               Node param = params.get(i);\n236               if (param.getNodeType() != 1) {\n237                   continue;\n238               }\n239               String localName = param.getLocalName();\n240               if (localName == null || localName.equals(exceptNodeName)) {\n241                   continue;\n242               }\n243               String txt = param.getTextContent();\n244               String itemName = param.getLocalName();\n245               SetterClassPair setterClassPair = findSetterClassPair(object, itemName);\n246               boolean processed = false;\n247               if (!hasClass(param)) {\n248                   if (setterClassPair.itemClass.isAssignableFrom(Map.class) && isMap(param)) {\n249                       tryToSetMap(object, param);\n250                       processed = true;\n251                   } else if (setterClassPair.itemClass.isAssignableFrom(List.class)) {\n252                       tryToSetList(object, param);\n253                       processed = true;\n254                   }\n255               }\n256               if (!processed) {\n257                   if (isPrimitive(setterClassPair.itemClass)) {\n258                       tryToSetPrimitive(object, setterClassPair, param.getTextContent());\n259                   } else {\n260                       //tryToSetPrimitive(object, localName, txt);\n261                       Object item = buildClass(param, itemName, setterClassPair.itemClass);\n262                       setParams(setterClassPair.itemClass.cast(item), param, new HashSet<>());\n263                       try {\n264                           setterClassPair.setterMethod.invoke(object, item);\n265                       } catch (IllegalAccessException | InvocationTargetException e) {\n266                           throw new TikaConfigException(\"problem creating \" + itemName, e);\n267                       }\n268                   }\n269               }\n270   \n271               if (txt != null) {\n272                   settings.add(localName);\n273               }\n274           }\n275   \n276           if (object instanceof Initializable) {\n277               ((Initializable) object).initialize(Collections.EMPTY_MAP);\n278               ((Initializable) object).checkInitialization(InitializableProblemHandler.THROW);\n279           }\n280       }\n416       private static void tryToSetMap(Object object, Node param) throws TikaConfigException {\n417           String name = param.getLocalName();\n418           //only supports string, string at this point\n419           //use LinkedHashMap to keep insertion order!\n420           Map<String, String> map = new LinkedHashMap<>();\n421           NodeList nodeList = param.getChildNodes();\n422           for (int i = 0; i < nodeList.getLength(); i++) {\n423               Node n = nodeList.item(i);\n424               if (n.getNodeType() == 1) {\n425                   NamedNodeMap m = n.getAttributes();\n426                   String key = null;\n427                   String value = null;\n428                   if (m.getNamedItem(\"from\") != null) {\n429                       key = m.getNamedItem(\"from\").getTextContent();\n430                   } else if (m.getNamedItem(\"key\") != null) {\n431                       key = m.getNamedItem(\"key\").getTextContent();\n432                   } else if (m.getNamedItem(\"k\") != null) {\n433                       key = m.getNamedItem(\"k\").getTextContent();\n434                   }\n435   \n436                   if (m.getNamedItem(\"to\") != null) {\n437                       value = m.getNamedItem(\"to\").getTextContent();\n438                   } else if (m.getNamedItem(\"value\") != null) {\n439                       value = m.getNamedItem(\"value\").getTextContent();\n440                   } else if (m.getNamedItem(\"v\") != null) {\n441                       value = m.getNamedItem(\"v\").getTextContent();\n442                   }\n443                   if (key == null) {\n444                       throw new TikaConfigException(\n445                               \"must specify a 'key' or 'from' value in a map \" + \"object : \" + param);\n446                   }\n447                   if (value == null) {\n448                       throw new TikaConfigException(\n449                               \"must specify a 'value' or 'to' value in a \" + \"map object : \" + param);\n450                   }\n451                   map.put(key, value);\n452               }\n453   \n454           }\n455           String setter = \"set\" + name.substring(0, 1).toUpperCase(Locale.US) + name.substring(1);\n456           try {\n457               Method m = object.getClass().getMethod(setter, Map.class);\n458               m.invoke(object, map);\n459           } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {\n460               throw new TikaConfigException(\"can't set \" + name, e);\n461           }\n462       }\n",
            "cost": 0.112995,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:458:13",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 273
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java:119:41",
            "status": "error",
            "id": 274
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java:121:32",
            "status": "error",
            "id": 275
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java:124:37",
            "status": "error",
            "id": 276
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java:129:34",
            "status": "error",
            "id": 277
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java:132:27",
            "status": "error",
            "id": 278
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java:134:37",
            "status": "error",
            "id": 279
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java:140:31",
            "status": "error",
            "id": 280
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java:141:27",
            "status": "error",
            "id": 281
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java:143:39",
            "status": "error",
            "id": 282
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java:145:43",
            "status": "error",
            "id": 283
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java:154:39",
            "status": "error",
            "id": 284
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-nlp-module/src/main/java/org/apache/tika/parser/ner/mitie/MITIENERecogniser.java:156:37",
            "status": "error",
            "id": 285
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/utils/CharsetUtils.java:185:40",
            "status": "error",
            "id": 286
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n1040           public void process(InputStream input, OutputStream output, Metadata metadata) throws Exception {\n1041               Parser p = parser;\n1042               if (fork) {\n1043                   p = new ForkParser(TikaCLI.class.getClassLoader(), p);\n1044               }\n1045               ContentHandler handler = getContentHandler(output, metadata);\n1046               try {\n1047                   p.parse(input, handler, metadata, context);\n1048                   // fix for TIKA-596: if a parser doesn't generate\n1049                   // XHTML output, the lack of an output document prevents\n1050                   // metadata from being output: this fixes that\n1051                   if (handler instanceof NoDocumentMetHandler) {\n1052                       NoDocumentMetHandler metHandler = (NoDocumentMetHandler) handler;\n1053                       if (!metHandler.metOutput()) {\n1054                           metHandler.endDocument();\n1055                       }\n1056                   }\n1057               } finally {\n1058                   if (fork) {\n1059                       ((ForkParser) p).close();\n1060                   }\n1061               }\n1062           }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/xml/AbstractXML2003Parser.java:\n 84       @Override\n 85       public void parse(InputStream stream, ContentHandler handler, Metadata metadata,\n 86                         ParseContext context) throws IOException, SAXException, TikaException {\n 87           setContentType(metadata);\n 88   \n 89           final XHTMLContentHandler xhtml = new XHTMLContentHandler(handler, metadata);\n 90           xhtml.startDocument();\n 91   \n 92           TaggedContentHandler tagged = new TaggedContentHandler(xhtml);\n 93           try {\n 94               //need to get new SAXParser because\n 95               //an attachment might require another SAXParser\n 96               //mid-parse\n 97               XMLReaderUtils.getSAXParser().parse(CloseShieldInputStream.wrap(stream),\n 98                       new EmbeddedContentHandler(\n 99                               getContentHandler(tagged, metadata, context)));\n100           } catch (SAXException e) {\n101               WriteLimitReachedException.throwIfWriteLimitReached(e);\n102               throw new TikaException(\"XML parse error\", e);\n103           } finally {\n104               xhtml.endDocument();\n105           }\n106       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java:\n 194       public static SAXParser getSAXParser() throws TikaException {\n 195           try {\n 196               SAXParser parser = getSAXParserFactory().newSAXParser();\n 197               trySetXercesSecurityManager(parser);\n 198               return parser;\n 199           } catch (ParserConfigurationException e) {\n 200               throw new TikaException(\"Unable to configure a SAX parser\", e);\n 201           } catch (SAXException e) {\n 202               throw new TikaException(\"Unable to create a SAX parser\", e);\n 203           }\n 204       }\n 757       private static void trySetXercesSecurityManager(SAXParser parser) {\n 758           //from POI\n 759           // Try built-in JVM one first, standalone if not\n 760           for (String securityManagerClassName : new String[]{\n 761                   //\"com.sun.org.apache.xerces.internal.util.SecurityManager\",\n 762                   XERCES_SECURITY_MANAGER}) {\n 763               try {\n 764                   Object mgr =\n 765                           Class.forName(securityManagerClassName).getDeclaredConstructor().newInstance();\n 766                   Method setLimit = mgr.getClass().getMethod(\"setEntityExpansionLimit\", Integer.TYPE);\n 767                   setLimit.invoke(mgr, MAX_ENTITY_EXPANSIONS);\n 768   \n 769                   parser.setProperty(XERCES_SECURITY_MANAGER_PROPERTY, mgr);\n 770                   // Stop once one can be setup without error\n 771                   return;\n 772               } catch (ClassNotFoundException e) {\n 773                   // continue without log, this is expected in some setups\n 774               } catch (Throwable e) {\n 775                   // NOSONAR - also catch things like NoClassDefError here\n 776                   // throttle the log somewhat as it can spam the log otherwise\n 777                   if (System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {\n 778                       LOG.warn(\n 779                               \"SAX Security Manager could not be setup [log suppressed for 5 \" +\n 780                                       \"minutes]\",\n 781                               e);\n 782                       LAST_LOG = System.currentTimeMillis();\n 783                   }\n 784               }\n 785           }\n 786   \n 787           // separate old version of Xerces not found => use the builtin way of setting the property\n 788           try {\n 789               parser.setProperty(\"http://www.oracle.com/xml/jaxp/properties/entityExpansionLimit\",\n 790                       MAX_ENTITY_EXPANSIONS);\n 791           } catch (SAXException e) {     // NOSONAR - also catch things like NoClassDefError here\n 792               // throttle the log somewhat as it can spam the log otherwise\n 793               if (System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {\n 794                   LOG.warn(\"SAX Security Manager could not be setup [log suppressed for 5 minutes]\",\n 795                           e);\n 796                   LAST_LOG = System.currentTimeMillis();\n 797               }\n 798           }\n 799       }\n",
            "cost": 0.08741,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java:767:17",
            "status": "corpus",
            "valid_path": "NO",
            "id": 287
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/utils/CharsetUtils.java:107:53",
            "status": "error",
            "id": 288
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n 667           @SuppressWarnings(\"unchecked\")\n 668           CT loadOverall(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 669                   throws TikaException, IOException {\n 670               List<T> loaded = new ArrayList<>();\n 671   \n 672               // Find the children of the parent tag, if any\n 673               for (Element le : getTopLevelElementChildren(element, getParentTagName(),\n 674                       getLoaderTagName())) {\n 675                   T loadedChild = loadOne(le, mimeTypes, loader);\n 676                   if (loadedChild != null) {\n 677                       loaded.add(loadedChild);\n 678                   }\n 679               }\n 680   \n 681               // Build the classes, and wrap as needed\n 682               if (loaded.isEmpty()) {\n 683                   // Nothing defined, create a Default\n 684                   return createDefault(mimeTypes, loader);\n 685               } else if (loaded.size() == 1) {\n 686                   T single = loaded.get(0);\n 687                   if (isComposite(single)) {\n 688                       // Single Composite defined, use that\n 689                       return (CT) single;\n 690                   }\n 691               } else if (!supportsComposite()) {\n 692                   // No composite support, just return the first one\n 693                   if (loaded.size() == 1) {\n 694                       return (CT) loaded.get(0);\n 695                   } else if (loaded.size() > 1) {\n 696                       throw new TikaConfigException(\n 697                               \"Composite not supported for \" + getParentTagName() +\n 698                                       \". Must specify only one child!\");\n 699                   } else {\n 700                       //throw exception if empty?\n 701                   }\n 702               }\n 703               // Wrap the defined parsers/detectors up in a Composite\n 704               return createComposite(loaded, mimeTypes, loader);\n 705           }\n 707           T loadOne(Element element, MimeTypes mimeTypes, ServiceLoader loader)\n 708                   throws TikaException, IOException {\n 709               String name = element.getAttribute(\"class\");\n 710               if (name == null) {\n 711                   throw new TikaConfigException(\"class attribute must not be null: \" + element);\n 712               }\n 713               String initProbHandler = element.getAttribute(\"initializableProblemHandler\");\n 714               InitializableProblemHandler initializableProblemHandler;\n 715               if (initProbHandler == null || initProbHandler.length() == 0) {\n 716                   initializableProblemHandler = loader.getInitializableProblemHandler();\n 717               } else {\n 718                   initializableProblemHandler = getInitializableProblemHandler(initProbHandler);\n 719               }\n 720   \n 721               T loaded = null;\n 722   \n 723               try {\n 724                   Class<? extends T> loadedClass = loader.getServiceClass(getLoaderClass(), name);\n 725   \n 726                   // Do pre-load checks and short-circuits\n 727                   //TODO : allow duplicate instances with different configurations\n 728                   loaded = preLoadOne(loadedClass, name, mimeTypes);\n 729                   if (loaded != null) {\n 730                       return loaded;\n 731                   }\n 732   \n 733                   // Get any parameters / settings for the parser\n 734                   Map<String, Param> params = null;\n 735                   try {\n 736                       params = getParams(element);\n 737                   } catch (Exception e) {\n 738                       throw new TikaConfigException(e.getMessage(), e);\n 739                   }\n 740   \n 741                   // Is this a composite or decorated class? If so, support recursion\n 742                   if (isComposite(loadedClass)) {\n 743                       // Get the child objects for it\n 744                       List<T> children = new ArrayList<>();\n 745                       NodeList childNodes = element.getElementsByTagName(getLoaderTagName());\n 746                       if (childNodes.getLength() > 0) {\n 747                           for (int i = 0; i < childNodes.getLength(); i++) {\n 748                               T loadedChild =\n 749                                       loadOne((Element) childNodes.item(i), mimeTypes, loader);\n 750                               if (loadedChild != null) {\n 751                                   children.add(loadedChild);\n 752                               }\n 753                           }\n 754                       }\n 755   \n 756                       // Get the list of children to exclude\n 757                       Set<Class<? extends T>> excludeChildren = new HashSet<>();\n 758                       NodeList excludeChildNodes =\n 759                               element.getElementsByTagName(getLoaderTagName() + \"-exclude\");\n 760                       if (excludeChildNodes.getLength() > 0) {\n 761                           for (int i = 0; i < excludeChildNodes.getLength(); i++) {\n 762                               Element excl = (Element) excludeChildNodes.item(i);\n 763                               String exclName = excl.getAttribute(\"class\");\n 764                               try {\n 765                                   excludeChildren\n 766                                           .add(loader.getServiceClass(getLoaderClass(), exclName));\n 767                               } catch (ClassNotFoundException e) {\n 768                                   //TIKA-3268 -- This should stop the world.\n 769                                   throw new TikaConfigException(\n 770                                           \"Class not found in -exclude list: \" + exclName);\n 771                               }\n 772                           }\n 773                       }\n 774   \n 775                       // Create the Composite\n 776                       loaded = createComposite(loadedClass, children, excludeChildren, params,\n 777                               mimeTypes, loader);\n 778   \n 779                       // Default constructor fallback\n 780                       if (loaded == null) {\n 781                           loaded = newInstance(loadedClass);\n 782                       }\n 783                   } else {\n 784                       // Regular class, create as-is\n 785                       loaded = newInstance(loadedClass);\n 786                       // TODO Support arguments, needed for Translators etc\n 787                       // See the thread \"Configuring parsers and translators\" for details\n 788                   }\n 789   \n 790                   //Assigning the params to bean fields/setters\n 791                   AnnotationUtils.assignFieldParams(loaded, params);\n 792                   if (loaded instanceof Initializable) {\n 793                       ((Initializable) loaded).initialize(params);\n 794                       ((Initializable) loaded).checkInitialization(initializableProblemHandler);\n 795                   }\n 796                   // Have any decoration performed, eg explicit mimetypes\n 797                   loaded = decorate(loaded, element);\n 798                   // All done with setup\n 799                   return loaded;\n 800               } catch (ClassNotFoundException e) {\n 801                   if (loader.getLoadErrorHandler() == LoadErrorHandler.THROW) {\n 802                       // Use a different exception signature here\n 803                       throw new TikaConfigException(\n 804                               \"Unable to find a \" + getLoaderTagName() + \" class: \" + name, e);\n 805                   }\n 806                   // Report the problem\n 807                   loader.getLoadErrorHandler().handleLoadError(name, e);\n 808                   return null;\n 809               } catch (IllegalAccessException e) {\n 810                   throw new TikaException(\n 811                           \"Unable to access a \" + getLoaderTagName() + \" class: \" + name, e);\n 812               } catch (InvocationTargetException e) {\n 813                   throw new TikaException(\n 814                           \"Unable to create a \" + getLoaderTagName() + \" class: \" + name, e);\n 815               } catch (InstantiationException e) {\n 816                   throw new TikaException(\n 817                           \"Unable to instantiate a \" + getLoaderTagName() + \" class: \" + name, e);\n 818               } catch (NoSuchMethodException e) {\n 819                   throw new TikaException(\n 820                           \"Unable to find the right constructor for \" + getLoaderTagName() +\n 821                                   \" class: \" + name, e);\n 822               }\n 823           }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/utils/AnnotationUtils.java:\n 85       public static void assignFieldParams(Object bean, Map<String, Param> params)\n 86               throws TikaConfigException {\n 87           Class<?> beanClass = bean.getClass();\n 88           if (!PARAM_INFO.containsKey(beanClass)) {\n 89               synchronized (TikaConfig.class) {\n 90                   if (!PARAM_INFO.containsKey(beanClass)) {\n 91                       List<AccessibleObject> aObjs =\n 92                               collectInfo(beanClass, org.apache.tika.config.Field.class);\n 93                       List<ParamField> fields = new ArrayList<>(aObjs.size());\n 94   \n 95                       for (AccessibleObject aObj : aObjs) {\n 96                           fields.add(new ParamField(aObj));\n 97                       }\n 98                       PARAM_INFO.put(beanClass, fields);\n 99                   }\n100               }\n101           }\n102   \n103           List<ParamField> fields = PARAM_INFO.get(beanClass);\n104   \n105           for (ParamField field : fields) {\n106               Param<?> param = params.get(field.getName());\n107               if (param != null) {\n108                   if (field.getType().isAssignableFrom(param.getType())) {\n109                       try {\n110                           field.assignValue(bean, param.getValue());\n111                       } catch (InvocationTargetException e) {\n112                           LOG.error(\"Error assigning value '{}' to '{}'\", param.getValue(), param.getName());\n113                           final Throwable cause = e.getCause() == null ? e : e.getCause();\n114                           throw new TikaConfigException(cause.getMessage(), cause);\n115                       } catch (IllegalAccessException e) {\n116                           LOG.error(\"Error assigning value '{}' to '{}'\", param.getValue(), param.getName());\n117                           throw new TikaConfigException(e.getMessage(), e);\n118                       }\n119                   } else {\n120                       String msg = String.format(Locale.ROOT,\n121                               \"Value '%s' of type '%s' can't be\" +\n122                                       \" assigned to field '%s' of defined type '%s'\",\n123                               param.getValue(),\n124                               param.getValue().getClass(), field.getName(), field.getType());\n125                       throw new TikaConfigException(msg);\n126                   }\n127               } else if (field.isRequired()) {\n128                   //param not supplied but field is declared as required?\n129                   String msg = String.format(Locale.ROOT,\n130                           \"Param %s is required for %s,\" + \" but it is not given in config.\",\n131                           field.getName(), bean.getClass().getName());\n132                   throw new TikaConfigException(msg);\n133               } else {\n134                   LOG.debug(\"Param not supplied, field is not mandatory\");\n135               }\n136           }\n137       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ParamField.java:\n102       public void assignValue(Object bean, Object value)\n103               throws IllegalAccessException, InvocationTargetException {\n104           if (field != null) {\n105               field.set(bean, value);\n106           } else {\n107               setter.invoke(bean, value);\n108           }\n109       }\n",
            "cost": 0.12579,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ParamField.java:107:13",
            "status": "corpus",
            "valid_path": "NO",
            "id": 289
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/metadata/filter/MetadataFilter.java:\n44       public static MetadataFilter load(Element root, boolean allowMissing) throws TikaConfigException,\n45               IOException {\n46           try {\n47               return buildComposite(\"metadataFilters\", CompositeMetadataFilter.class,\n48                       \"metadataFilter\", MetadataFilter.class, root);\n49           } catch (TikaConfigException e) {\n50               if (allowMissing && e.getMessage().contains(\"could not find metadataFilters\")) {\n51                   return new NoOpFilter();\n52               }\n53               throw e;\n54           }\n55       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:\n139       protected static <P, T> P buildComposite(String compositeElementName, Class<P> compositeClass,\n140                                                String itemName, Class<T> itemClass,\n141                                                Element properties)\n142               throws TikaConfigException, IOException {\n143   \n144           if (!properties.getLocalName().equals(\"properties\")) {\n145               throw new TikaConfigException(\"expect properties as root node\");\n146           }\n147           NodeList children = properties.getChildNodes();\n148   \n149           for (int i = 0; i < children.getLength(); i++) {\n150               Node child = children.item(i);\n151               if (child.getNodeType() != 1) {\n152                   continue;\n153               }\n154               if (compositeElementName.equals(child.getLocalName())) {\n155                   List<T> components = loadComposite(child, itemName, itemClass);\n156                   Constructor constructor = null;\n157                   try {\n158                       constructor = compositeClass.getConstructor(List.class);\n159                       P composite = (P) constructor.newInstance(components);\n160                       setParams(composite, child, new HashSet<>(), itemName);\n161                       return composite;\n162                   } catch (NoSuchMethodException | InvocationTargetException |\n163                            InstantiationException | IllegalAccessException e) {\n164                       throw new TikaConfigException(\"can't build composite class\", e);\n165                   }\n166               }\n167           }\n168           throw new TikaConfigException(\"could not find \" + compositeElementName);\n169       }\n218       private static void setParams(Object object, Node targetNode, Set<String> settings,\n219                                     String exceptNodeName) throws TikaConfigException {\n220           NodeList children = targetNode.getChildNodes();\n221           List<Node> params = new ArrayList<>();\n222           for (int i = 0; i < children.getLength(); i++) {\n223               Node child = children.item(i);\n224   \n225               if (\"params\".equals(child.getLocalName())) {\n226                   NodeList paramsList = child.getChildNodes();\n227                   for (int j = 0; j < paramsList.getLength(); j++) {\n228                       params.add(paramsList.item(j));\n229                   }\n230               } else {\n231                   params.add(child);\n232               }\n233           }\n234           for (int i = 0; i < params.size(); i++) {\n235               Node param = params.get(i);\n236               if (param.getNodeType() != 1) {\n237                   continue;\n238               }\n239               String localName = param.getLocalName();\n240               if (localName == null || localName.equals(exceptNodeName)) {\n241                   continue;\n242               }\n243               String txt = param.getTextContent();\n244               String itemName = param.getLocalName();\n245               SetterClassPair setterClassPair = findSetterClassPair(object, itemName);\n246               boolean processed = false;\n247               if (!hasClass(param)) {\n248                   if (setterClassPair.itemClass.isAssignableFrom(Map.class) && isMap(param)) {\n249                       tryToSetMap(object, param);\n250                       processed = true;\n251                   } else if (setterClassPair.itemClass.isAssignableFrom(List.class)) {\n252                       tryToSetList(object, param);\n253                       processed = true;\n254                   }\n255               }\n256               if (!processed) {\n257                   if (isPrimitive(setterClassPair.itemClass)) {\n258                       tryToSetPrimitive(object, setterClassPair, param.getTextContent());\n259                   } else {\n260                       //tryToSetPrimitive(object, localName, txt);\n261                       Object item = buildClass(param, itemName, setterClassPair.itemClass);\n262                       setParams(setterClassPair.itemClass.cast(item), param, new HashSet<>());\n263                       try {\n264                           setterClassPair.setterMethod.invoke(object, item);\n265                       } catch (IllegalAccessException | InvocationTargetException e) {\n266                           throw new TikaConfigException(\"problem creating \" + itemName, e);\n267                       }\n268                   }\n269               }\n270   \n271               if (txt != null) {\n272                   settings.add(localName);\n273               }\n274           }\n275   \n276           if (object instanceof Initializable) {\n277               ((Initializable) object).initialize(Collections.EMPTY_MAP);\n278               ((Initializable) object).checkInitialization(InitializableProblemHandler.THROW);\n279           }\n280       }\n360       private static void tryToSetList(Object object, Node param) throws TikaConfigException {\n361           if (hasClass(param)) {\n362               tryToSetClassList(object, param);\n363           } else {\n364               tryToSetStringList(object, param);\n365           }\n366       }\n368       private static void tryToSetClassList(Object object, Node node) throws TikaConfigException {\n369           String name = node.getLocalName();\n370           try {\n371               Class interfaze =\n372                       Class.forName(node.getAttributes().getNamedItem(\"class\").getTextContent());\n373               List items = new ArrayList<Object>();\n374               NodeList nodeList = node.getChildNodes();\n375               for (int i = 0; i < nodeList.getLength(); i++) {\n376                   Node child = nodeList.item(i);\n377                   if (child.getNodeType() == 1) {\n378                       Object item = buildClass(child, child.getLocalName(), interfaze);\n379                       setParams(item, child, new HashSet<>());\n380                       items.add(item);\n381                   }\n382               }\n383   \n384               String setter = \"set\" + name.substring(0, 1).toUpperCase(Locale.US) + name.substring(1);\n385               Method m = object.getClass().getMethod(setter, List.class);\n386               m.invoke(object, items);\n387   \n388           } catch (ClassNotFoundException | InvocationTargetException | NoSuchMethodException |\n389                    IllegalAccessException e) {\n390               throw new TikaConfigException(\"couldn't build class for \" + name, e);\n391           }\n392       }\n",
            "cost": 0.11133000000000001,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:386:13",
            "status": "corpus",
            "valid_path": "NO",
            "id": 290
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-one/src/main/java/com/aixcc/tika/harnesses/one/TikaOne.java:\n18       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n19           // write the input to a temporary file\n20           File tmpFile = File.createTempFile(\"tika-harness-one\", \"\");\n21   \n22           try {\n23               FileOutputStream fos = new FileOutputStream(tmpFile);\n24               fos.write(input);\n25               fos.close();\n26               // run Tika on the temporary file\n27               TikaCLI.main(new String[] { \"--extract\", tmpFile.getAbsolutePath() });\n28   \n29           } catch (IOException e) {\n30               // eat io exception\n31   \n32           } finally {\n33               // delete the temporary file\n34               if (tmpFile.exists()) {\n35                   tmpFile.delete();\n36               }\n37           }\n38   \n39       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/cli/TikaCLI.java:\n 227       public static void main(String[] args) throws Exception {\n 228           TikaCLI cli = new TikaCLI();\n 229   \n 230           if (cli.testForHelp(args)) {\n 231               cli.usage();\n 232               return;\n 233           } else if (cli.testForBatch(args)) {\n 234               String[] batchArgs = BatchCommandLineBuilder.build(args);\n 235               BatchProcessDriverCLI batchDriver = new BatchProcessDriverCLI(batchArgs);\n 236               batchDriver.execute();\n 237               return;\n 238           } else if (cli.testForAsync(args)) {\n 239               async(args);\n 240               return;\n 241           }\n 242   \n 243           if (args.length > 0) {\n 244               for (String arg : args) {\n 245                   cli.process(arg);\n 246               }\n 247               if (cli.pipeMode) {\n 248                   cli.process(\"-\");\n 249               }\n 250           } else {\n 251               // Started with no arguments. Wait for up to 0.1s to see if\n 252               // we have something waiting in standard input and use the\n 253               // pipe mode if we have. If no input is seen, start the GUI.\n 254               if (System.in.available() == 0) {\n 255                   Thread.sleep(100);\n 256               }\n 257               if (System.in.available() > 0) {\n 258                   cli.process(\"-\");\n 259               } else {\n 260                   cli.process(\"--gui\");\n 261               }\n 262           }\n 263       }\n 346       public void process(String arg) throws Exception {\n 347           if (arg.equals(\"-?\") || arg.equals(\"--help\")) {\n 348               pipeMode = false;\n 349               usage();\n 350           } else if (arg.equals(\"-V\") || arg.equals(\"--version\")) {\n 351               pipeMode = false;\n 352               version();\n 353           } else if (arg.equals(\"-v\") || arg.equals(\"--verbose\")) {\n 354               org.apache.logging.log4j.core.config.Configurator.setRootLevel(Level.DEBUG);\n 355           } else if (arg.equals(\"-g\") || arg.equals(\"--gui\")) {\n 356               pipeMode = false;\n 357               if (configFilePath != null) {\n 358                   TikaGUI.main(new String[]{configFilePath});\n 359               } else {\n 360                   TikaGUI.main(new String[0]);\n 361               }\n 362           } else if (arg.equals(\"--list-parser\") || arg.equals(\"--list-parsers\")) {\n 363               pipeMode = false;\n 364               displayParsers(false, false);\n 365           } else if (arg.equals(\"--list-detector\") || arg.equals(\"--list-detectors\")) {\n 366               pipeMode = false;\n 367               displayDetectors();\n 368           } else if (arg.equals(\"--list-parser-detail\") || arg.equals(\"--list-parser-details\")) {\n 369               pipeMode = false;\n 370               displayParsers(true, false);\n 371           } else if (arg.equals(\"--list-parser-detail-apt\") || arg.equals(\"--list-parser-details-apt\")) {\n 372               pipeMode = false;\n 373               displayParsers(true, true);\n 374           } else if (arg.equals(\"--list-met-models\")) {\n 375               pipeMode = false;\n 376               displayMetModels();\n 377           } else if (arg.equals(\"--list-supported-types\")) {\n 378               pipeMode = false;\n 379               displaySupportedTypes();\n 380           } else if (arg.startsWith(\"--compare-file-magic=\")) {\n 381               pipeMode = false;\n 382               compareFileMagic(arg.substring(\"--compare-file-magic=\".length()));\n 383           } else if (arg.equals(\"--dump-minimal-config\")) {\n 384               pipeMode = false;\n 385               dumpConfig(TikaConfigSerializer.Mode.MINIMAL);\n 386           } else if (arg.equals(\"--dump-current-config\")) {\n 387               pipeMode = false;\n 388               dumpConfig(TikaConfigSerializer.Mode.CURRENT);\n 389           } else if (arg.equals(\"--dump-static-config\")) {\n 390               pipeMode = false;\n 391               dumpConfig(TikaConfigSerializer.Mode.STATIC);\n 392           } else if (arg.equals(\"--dump-static-full-config\")) {\n 393               pipeMode = false;\n 394               dumpConfig(TikaConfigSerializer.Mode.STATIC_FULL);\n 395           } else if (arg.equals(\"--container-aware\") || arg.equals(\"--container-aware-detector\")) {\n 396               // ignore, as container-aware detectors are now always used\n 397           } else if (arg.equals(\"-f\") || arg.equals(\"--fork\")) {\n 398               fork = true;\n 399           } else if (arg.equals(\"-a\") || arg.equals(\"--async\")) {\n 400               asyncMode = true;\n 401           } else if (arg.startsWith(\"--config=\")) {\n 402               configFilePath = arg.substring(\"--config=\".length());\n 403           } else if (arg.startsWith(\"--digest=\")) {\n 404               digester = new CommonsDigester(MAX_MARK, arg.substring(\"--digest=\".length()));\n 405           } else if (arg.startsWith(\"-e\")) {\n 406               encoding = arg.substring(\"-e\".length());\n 407           } else if (arg.startsWith(\"--encoding=\")) {\n 408               encoding = arg.substring(\"--encoding=\".length());\n 409           } else if (arg.startsWith(\"-p\") && !arg.equals(\"-p\")) {\n 410               password = arg.substring(\"-p\".length());\n 411           } else if (arg.startsWith(\"--password=\")) {\n 412               password = arg.substring(\"--password=\".length());\n 413           } else if (arg.equals(\"-j\") || arg.equals(\"--json\")) {\n 414               type = JSON;\n 415           } else if (arg.equals(\"-J\") || arg.equals(\"--jsonRecursive\")) {\n 416               recursiveJSON = true;\n 417           } else if (arg.equals(\"-y\") || arg.equals(\"--xmp\")) {\n 418               type = XMP;\n 419           } else if (arg.equals(\"-x\") || arg.equals(\"--xml\")) {\n 420               type = XML;\n 421           } else if (arg.equals(\"-h\") || arg.equals(\"--html\")) {\n 422               type = HTML;\n 423           } else if (arg.equals(\"-t\") || arg.equals(\"--text\")) {\n 424               type = TEXT;\n 425           } else if (arg.equals(\"-T\") || arg.equals(\"--text-main\")) {\n 426               type = TEXT_MAIN;\n 427           } else if (arg.equals(\"-A\") || arg.equals(\"--text-all\")) {\n 428               type = TEXT_ALL;\n 429           } else if (arg.equals(\"-m\") || arg.equals(\"--metadata\")) {\n 430               type = METADATA;\n 431           } else if (arg.equals(\"-l\") || arg.equals(\"--language\")) {\n 432               type = LANGUAGE;\n 433           } else if (arg.equals(\"-d\") || arg.equals(\"--detect\")) {\n 434               type = DETECT;\n 435           } else if (arg.startsWith(\"--extract-dir=\")) {\n 436               String dirPath = arg.substring(\"--extract-dir=\".length());\n 437               //if the user accidentally doesn't include\n 438               //a directory, set the directory to the cwd\n 439               if (dirPath.length() == 0) {\n 440                   dirPath = \".\";\n 441               }\n 442               extractDir = new File(dirPath);\n 443           } else if (arg.equals(\"-z\") || arg.equals(\"--extract\")) {\n 444               configurePDFExtractSettings();\n 445               type = NO_OUTPUT;\n 446               context.set(EmbeddedDocumentExtractor.class, new FileEmbeddedDocumentExtractor());\n 447           } else if (arg.equals(\"-r\") || arg.equals(\"--pretty-print\")) {\n 448               prettyPrint = true;\n 449           } else if (arg.equals(\"-p\") || arg.equals(\"--port\") || arg.equals(\"-s\") || arg.equals(\"--server\")) {\n 450               throw new IllegalArgumentException(\"As of Tika 2.0, the server option is no longer supported in tika-app.\\n\" + \"See https://wiki.apache.org/tika/TikaJAXRS for usage.\");\n 451           } else if (arg.startsWith(\"-c\")) {\n 452               networkURI = new URI(arg.substring(\"-c\".length()));\n 453           } else if (arg.startsWith(\"--client=\")) {\n 454               networkURI = new URI(arg.substring(\"--client=\".length()));\n 455           } else {\n 456               pipeMode = false;\n 457               configure();\n 458   \n 459               if (arg.equals(\"-\")) {\n 460                   try (InputStream stream = TikaInputStream.get(CloseShieldInputStream.wrap(System.in))) {\n 461                       type.process(stream, System.out, new Metadata());\n 462                   }\n 463               } else {\n 464                   URL url;\n 465                   File file = new File(arg);\n 466                   if (file.isFile()) {\n 467                       url = file\n 468                               .toURI()\n 469                               .toURL();\n 470                   } else {\n 471                       url = new URL(arg);\n 472                   }\n 473                   if (recursiveJSON) {\n 474                       handleRecursiveJson(url, System.out);\n 475                   } else {\n 476                       Metadata metadata = new Metadata();\n 477                       try (InputStream input = TikaInputStream.get(url, metadata)) {\n 478                           type.process(input, System.out, metadata);\n 479                       } finally {\n 480                           System.out.flush();\n 481                       }\n 482                   }\n 483               }\n 484           }\n 485       }\n\nsrc/tika/tika-app/src/main/java/org/apache/tika/gui/TikaGUI.java:\n192       public static void main(String[] args) throws Exception {\n193           TikaConfig config = TikaConfig.getDefaultConfig();\n194           if (args.length > 0) {\n195               File configFile = new File(args[0]);\n196               config = new TikaConfig(configFile);\n197           }\n198           UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n199           final TikaConfig finalConfig = config;\n200           SwingUtilities.invokeLater(() -> new TikaGUI(\n201                   new DigestingParser(new AutoDetectParser(finalConfig), new CommonsDigester(MAX_MARK, CommonsDigester.DigestAlgorithm.MD5, CommonsDigester.DigestAlgorithm.SHA256),\n202                           false)).setVisible(true));\n203       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/TikaConfig.java:\n 229       public TikaConfig() throws TikaException, IOException {\n 230   \n 231           String config = System.getProperty(\"tika.config\");\n 232           if (!StringUtils.isBlank(config)) {\n 233               LOG.debug(\"loading tika config from system property 'tika.config'\");\n 234           }\n 235   \n 236           if (config == null || config.trim().equals(\"\")) {\n 237               config = System.getenv(\"TIKA_CONFIG\");\n 238               if (!StringUtils.isBlank(config)) {\n 239                   LOG.debug(\"loading tika config from environment variable 'TIKA_CONFIG'\");\n 240               }\n 241           }\n 242   \n 243           if (config == null || config.trim().equals(\"\")) {\n 244               LOG.debug(\"loading tika config from defaults; no config file specified\");\n 245               this.serviceLoader = new ServiceLoader();\n 246               this.mimeTypes = getDefaultMimeTypes(getContextClassLoader());\n 247               this.encodingDetector = getDefaultEncodingDetector(serviceLoader);\n 248               this.renderer = getDefaultRenderer(serviceLoader);\n 249               this.parser = getDefaultParser(mimeTypes, serviceLoader, encodingDetector, renderer);\n 250               this.detector = getDefaultDetector(mimeTypes, serviceLoader);\n 251               this.translator = getDefaultTranslator(serviceLoader);\n 252               this.executorService = getDefaultExecutorService();\n 253               this.metadataFilter = new NoOpFilter();\n 254               this.autoDetectParserConfig = AutoDetectParserConfig.DEFAULT;\n 255           } else {\n 256               ServiceLoader tmpServiceLoader = new ServiceLoader();\n 257               LOG.debug(\"loading tika config from: \" + config);\n 258               try (InputStream stream = getConfigInputStream(config, tmpServiceLoader)) {\n 259                   Element element = XMLReaderUtils.buildDOM(stream).getDocumentElement();\n 260                   updateXMLReaderUtils(element);\n 261                   serviceLoader = serviceLoaderFromDomElement(element, tmpServiceLoader.getLoader());\n 262                   DetectorXmlLoader detectorLoader = new DetectorXmlLoader();\n 263                   EncodingDetectorXmlLoader encodingDetectorLoader = new EncodingDetectorXmlLoader();\n 264                   RendererXmlLoader rendererLoader = new RendererXmlLoader();\n 265                   TranslatorXmlLoader translatorLoader = new TranslatorXmlLoader();\n 266                   ExecutorServiceXmlLoader executorLoader = new ExecutorServiceXmlLoader();\n 267   \n 268                   this.mimeTypes = typesFromDomElement(element);\n 269                   this.encodingDetector =\n 270                           encodingDetectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 271   \n 272                   this.renderer = rendererLoader.loadOverall(element, mimeTypes, serviceLoader);\n 273   \n 274                   ParserXmlLoader parserLoader = new ParserXmlLoader(encodingDetector, renderer);\n 275                   this.parser = parserLoader.loadOverall(element, mimeTypes, serviceLoader);\n 276                   this.detector = detectorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 277                   this.translator = translatorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 278                   this.executorService =\n 279                           executorLoader.loadOverall(element, mimeTypes, serviceLoader);\n 280                   this.metadataFilter = MetadataFilter.load(element, true);\n 281                   this.autoDetectParserConfig = AutoDetectParserConfig.load(element);\n 282                   setMaxJsonStringFieldLength(element);\n 283               } catch (SAXException e) {\n 284                   throw new TikaException(\"Specified Tika configuration has syntax errors: \" + config,\n 285                           e);\n 286               }\n 287           }\n 288           TIMES_INSTANTIATED.incrementAndGet();\n 289       }\n 388       public static TikaConfig getDefaultConfig() {\n 389           try {\n 390               return new TikaConfig();\n 391           } catch (IOException e) {\n 392               throw new RuntimeException(\"Unable to read default configuration\", e);\n 393           } catch (TikaException e) {\n 394               throw new RuntimeException(\"Unable to access default configuration\", e);\n 395           }\n 396       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/metadata/filter/MetadataFilter.java:\n44       public static MetadataFilter load(Element root, boolean allowMissing) throws TikaConfigException,\n45               IOException {\n46           try {\n47               return buildComposite(\"metadataFilters\", CompositeMetadataFilter.class,\n48                       \"metadataFilter\", MetadataFilter.class, root);\n49           } catch (TikaConfigException e) {\n50               if (allowMissing && e.getMessage().contains(\"could not find metadataFilters\")) {\n51                   return new NoOpFilter();\n52               }\n53               throw e;\n54           }\n55       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:\n139       protected static <P, T> P buildComposite(String compositeElementName, Class<P> compositeClass,\n140                                                String itemName, Class<T> itemClass,\n141                                                Element properties)\n142               throws TikaConfigException, IOException {\n143   \n144           if (!properties.getLocalName().equals(\"properties\")) {\n145               throw new TikaConfigException(\"expect properties as root node\");\n146           }\n147           NodeList children = properties.getChildNodes();\n148   \n149           for (int i = 0; i < children.getLength(); i++) {\n150               Node child = children.item(i);\n151               if (child.getNodeType() != 1) {\n152                   continue;\n153               }\n154               if (compositeElementName.equals(child.getLocalName())) {\n155                   List<T> components = loadComposite(child, itemName, itemClass);\n156                   Constructor constructor = null;\n157                   try {\n158                       constructor = compositeClass.getConstructor(List.class);\n159                       P composite = (P) constructor.newInstance(components);\n160                       setParams(composite, child, new HashSet<>(), itemName);\n161                       return composite;\n162                   } catch (NoSuchMethodException | InvocationTargetException |\n163                            InstantiationException | IllegalAccessException e) {\n164                       throw new TikaConfigException(\"can't build composite class\", e);\n165                   }\n166               }\n167           }\n168           throw new TikaConfigException(\"could not find \" + compositeElementName);\n169       }\n218       private static void setParams(Object object, Node targetNode, Set<String> settings,\n219                                     String exceptNodeName) throws TikaConfigException {\n220           NodeList children = targetNode.getChildNodes();\n221           List<Node> params = new ArrayList<>();\n222           for (int i = 0; i < children.getLength(); i++) {\n223               Node child = children.item(i);\n224   \n225               if (\"params\".equals(child.getLocalName())) {\n226                   NodeList paramsList = child.getChildNodes();\n227                   for (int j = 0; j < paramsList.getLength(); j++) {\n228                       params.add(paramsList.item(j));\n229                   }\n230               } else {\n231                   params.add(child);\n232               }\n233           }\n234           for (int i = 0; i < params.size(); i++) {\n235               Node param = params.get(i);\n236               if (param.getNodeType() != 1) {\n237                   continue;\n238               }\n239               String localName = param.getLocalName();\n240               if (localName == null || localName.equals(exceptNodeName)) {\n241                   continue;\n242               }\n243               String txt = param.getTextContent();\n244               String itemName = param.getLocalName();\n245               SetterClassPair setterClassPair = findSetterClassPair(object, itemName);\n246               boolean processed = false;\n247               if (!hasClass(param)) {\n248                   if (setterClassPair.itemClass.isAssignableFrom(Map.class) && isMap(param)) {\n249                       tryToSetMap(object, param);\n250                       processed = true;\n251                   } else if (setterClassPair.itemClass.isAssignableFrom(List.class)) {\n252                       tryToSetList(object, param);\n253                       processed = true;\n254                   }\n255               }\n256               if (!processed) {\n257                   if (isPrimitive(setterClassPair.itemClass)) {\n258                       tryToSetPrimitive(object, setterClassPair, param.getTextContent());\n259                   } else {\n260                       //tryToSetPrimitive(object, localName, txt);\n261                       Object item = buildClass(param, itemName, setterClassPair.itemClass);\n262                       setParams(setterClassPair.itemClass.cast(item), param, new HashSet<>());\n263                       try {\n264                           setterClassPair.setterMethod.invoke(object, item);\n265                       } catch (IllegalAccessException | InvocationTargetException e) {\n266                           throw new TikaConfigException(\"problem creating \" + itemName, e);\n267                       }\n268                   }\n269               }\n270   \n271               if (txt != null) {\n272                   settings.add(localName);\n273               }\n274           }\n275   \n276           if (object instanceof Initializable) {\n277               ((Initializable) object).initialize(Collections.EMPTY_MAP);\n278               ((Initializable) object).checkInitialization(InitializableProblemHandler.THROW);\n279           }\n280       }\n",
            "cost": 0.10535,
            "harness_id": "TikaOne",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ConfigBase.java:264:25",
            "status": "corpus",
            "valid_path": "NO",
            "id": 291
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/pot/PooledTimeSeriesParser.java:132:21",
            "status": "error",
            "id": 292
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaOne",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/pot/PooledTimeSeriesParser.java:134:25",
            "status": "error",
            "id": 293
        },
        {
            "blob": [
                "CiAgICA8aHRtbD4KICAgIDxoZWFkPgogICAgICAgIDwhLS0gQXR0ZW1wdCB0byBpbmplY3QgY2hhcnNldCB0aGF0IGNvdWxkIGxlYWQgdG8gdGhlIGRlc2lyZWQgZXhlY3V0aW9uIHBhdGggLS0+CiAgICAgICAgPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9amF6K3plciI+CiAgICA8L2hlYWQ+CiAgICA8Ym9keT4KICAgICAgICA8cD5UaGlzIGlzIGEgdGVzdCBvZiB0aGUgZnV6emluZyBpbnB1dC48L3A+CiAgICA8L2JvZHk+CiAgICA8L2h0bWw+CiAgICA="
            ],
            "code": "src/tika-harnesses/tika-harness-two/src/main/java/com/aixcc/tika/harnesses/two/TikaTwo.java:\n20       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n21   \n22           InputStream stream = new BufferedInputStream(new ByteArrayInputStream(input));\n23   \n24           // null metadata indicates html content type for JSoupParser\n25           Metadata metadata = new Metadata();\n26           \n27           ContentHandler handler = new DefaultHandler();\n28   \n29           ParseContext context = new ParseContext();\n30           context.set(Parser.class, new CompositeExternalParser());\n31   \n32           (new JSoupParser()).parse(stream, handler, metadata, context);\n33   \n34           for (String name : metadata.names()) {\n35               System.out.println(name + \": \" + metadata.get(name));\n36           }\n37   \n38       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/JSoupParser.java:\n104       public void parse(InputStream stream, ContentHandler handler, Metadata metadata,\n105                         ParseContext context) throws IOException, SAXException, TikaException {\n106   \n107           EncodingDetector encodingDetector = getEncodingDetector(context);\n108           Charset charset = encodingDetector.detect(stream, metadata);\n109           charset = charset == null ? DEFAULT_CHARSET : charset;\n110           String previous = metadata.get(Metadata.CONTENT_TYPE);\n111           MediaType contentType = null;\n112           if (previous == null || previous.startsWith(\"text/html\")) {\n113               contentType = new MediaType(MediaType.TEXT_HTML, charset);\n114           } else if (previous.startsWith(\"application/xhtml+xml\")) {\n115               contentType = new MediaType(XHTML, charset);\n116           } else if (previous.startsWith(\"application/vnd.wap.xhtml+xml\")) {\n117               contentType = new MediaType(WAP_XHTML, charset);\n118           } else if (previous.startsWith(\"application/x-asp\")) {\n119               contentType = new MediaType(X_ASP, charset);\n120           }\n121           if (contentType != null) {\n122               metadata.set(Metadata.CONTENT_TYPE, contentType.toString());\n123           }\n124           // deprecated, see TIKA-431\n125           metadata.set(Metadata.CONTENT_ENCODING, charset.name());\n126   \n127           // Get the HTML mapper from the parse context\n128           HtmlMapper mapper = context.get(HtmlMapper.class, new DefaultHtmlMapper());\n129   \n130           //do better with baseUri?\n131           Document document = Jsoup.parse(CloseShieldInputStream.wrap(stream), charset.name(), \"\");\n132           document.quirksMode(Document.QuirksMode.quirks);\n133           ContentHandler xhtml = new XHTMLDowngradeHandler(\n134                   new HtmlHandler(mapper, handler, metadata, context, extractScripts));\n135           xhtml.startDocument();\n136           try {\n137               NodeTraversor.filter(new TikaNodeFilter(xhtml), document);\n138           } catch (RuntimeSAXException e) {\n139               throw e.getWrapped();\n140           } finally {\n141               xhtml.endDocument();\n142           }\n143       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/HtmlEncodingDetector.java:\n102       public Charset detect(InputStream input, Metadata metadata) throws IOException {\n103           if (input == null) {\n104               return null;\n105           }\n106   \n107           // Read enough of the text stream to capture possible meta tags\n108           input.mark(markLimit);\n109           byte[] buffer = new byte[markLimit];\n110           int n = 0;\n111           int m = input.read(buffer);\n112           while (m != -1 && n < buffer.length) {\n113               n += m;\n114               m = input.read(buffer, n, buffer.length - n);\n115           }\n116           input.reset();\n117   \n118           // Interpret the head as ASCII and try to spot a meta tag with\n119           // a possible character encoding hint\n120   \n121           String head = ASCII.decode(ByteBuffer.wrap(buffer, 0, n)).toString();\n122           //strip out comments\n123           String headNoComments = head.replaceAll(\"<!--.*?(-->|$)\", \" \");\n124           //try to find the encoding in head without comments\n125           Charset charset = findCharset(headNoComments);\n126           //if nothing is found, back off to find any encoding\n127           if (charset == null) {\n128               return findCharset(head);\n129           }\n130           return charset;\n131   \n132       }\n135       private Charset findCharset(String s) {\n136   \n137           Matcher equiv = HTTP_META_PATTERN.matcher(s);\n138           Matcher charsetMatcher = FLEXIBLE_CHARSET_ATTR_PATTERN.matcher(\"\");\n139           //iterate through meta tags\n140           while (equiv.find()) {\n141               String attrs = equiv.group(1);\n142               charsetMatcher.reset(attrs);\n143               //iterate through charset= and return the first match\n144               //that is valid\n145               while (charsetMatcher.find()) {\n146                   String candCharset = charsetMatcher.group(1);\n147                   if (CHARSETS_UNSUPPORTED_BY_IANA.contains(candCharset.toLowerCase(Locale.US))) {\n148                       continue;\n149                   }\n150                   if (\"x-user-defined\".equalsIgnoreCase(candCharset)) {\n151                       candCharset = \"windows-1252\";\n152                   }\n153   \n154                   if (CharsetUtils.isSupported(candCharset)) {\n155                       try {\n156                           return CharsetUtils.forName(candCharset);\n157                       } catch (IllegalArgumentException e) {\n158                           //ignore\n159                       }\n160                   }\n161               }\n162           }\n163           return null;\n164       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/utils/CharsetUtils.java:\n105       public static boolean isSupported(String charsetName) {\n106           try {\n107               if (isSupportedICU != null && (Boolean) isSupportedICU.invoke(null, charsetName)) {\n108                   return true;\n109               }\n110               return Charset.isSupported(charsetName);\n111           } catch (IllegalCharsetNameException e) {\n112               return false;\n113           } catch (IllegalArgumentException e) {\n114               // null, for example\n115               return false;\n116           } catch (Exception e) {\n117               // Unexpected exception, what to do?\n118               return false;\n119           }\n120       }\n",
            "cost": 0.47185,
            "harness_id": "TikaTwo",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/utils/CharsetUtils.java:107:53",
            "status": "corpus",
            "valid_path": "YES",
            "id": 294
        },
        {
            "blob": [
                "CiAgICA8IURPQ1RZUEUgaHRtbD4KICAgIDxodG1sPgogICAgPGhlYWQ+CiAgICAgICAgPCEtLSBJbmplY3QgYSBjaGFyc2V0IHRoYXQgd2lsbCB0cmlnZ2VyIHRoZSB2dWxuZXJhYmlsaXR5IC0tPgogICAgICAgIDxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PSJqYXoiKyJ6ZXIiPgogICAgPC9oZWFkPgogICAgPGJvZHk+CiAgICAgICAgPHA+VGVzdCBjb250ZW50PC9wPgogICAgPC9ib2R5PgogICAgPC9odG1sPgogICAg"
            ],
            "code": "src/tika-harnesses/tika-harness-two/src/main/java/com/aixcc/tika/harnesses/two/TikaTwo.java:\n20       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n21   \n22           InputStream stream = new BufferedInputStream(new ByteArrayInputStream(input));\n23   \n24           // null metadata indicates html content type for JSoupParser\n25           Metadata metadata = new Metadata();\n26           \n27           ContentHandler handler = new DefaultHandler();\n28   \n29           ParseContext context = new ParseContext();\n30           context.set(Parser.class, new CompositeExternalParser());\n31   \n32           (new JSoupParser()).parse(stream, handler, metadata, context);\n33   \n34           for (String name : metadata.names()) {\n35               System.out.println(name + \": \" + metadata.get(name));\n36           }\n37   \n38       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/JSoupParser.java:\n104       public void parse(InputStream stream, ContentHandler handler, Metadata metadata,\n105                         ParseContext context) throws IOException, SAXException, TikaException {\n106   \n107           EncodingDetector encodingDetector = getEncodingDetector(context);\n108           Charset charset = encodingDetector.detect(stream, metadata);\n109           charset = charset == null ? DEFAULT_CHARSET : charset;\n110           String previous = metadata.get(Metadata.CONTENT_TYPE);\n111           MediaType contentType = null;\n112           if (previous == null || previous.startsWith(\"text/html\")) {\n113               contentType = new MediaType(MediaType.TEXT_HTML, charset);\n114           } else if (previous.startsWith(\"application/xhtml+xml\")) {\n115               contentType = new MediaType(XHTML, charset);\n116           } else if (previous.startsWith(\"application/vnd.wap.xhtml+xml\")) {\n117               contentType = new MediaType(WAP_XHTML, charset);\n118           } else if (previous.startsWith(\"application/x-asp\")) {\n119               contentType = new MediaType(X_ASP, charset);\n120           }\n121           if (contentType != null) {\n122               metadata.set(Metadata.CONTENT_TYPE, contentType.toString());\n123           }\n124           // deprecated, see TIKA-431\n125           metadata.set(Metadata.CONTENT_ENCODING, charset.name());\n126   \n127           // Get the HTML mapper from the parse context\n128           HtmlMapper mapper = context.get(HtmlMapper.class, new DefaultHtmlMapper());\n129   \n130           //do better with baseUri?\n131           Document document = Jsoup.parse(CloseShieldInputStream.wrap(stream), charset.name(), \"\");\n132           document.quirksMode(Document.QuirksMode.quirks);\n133           ContentHandler xhtml = new XHTMLDowngradeHandler(\n134                   new HtmlHandler(mapper, handler, metadata, context, extractScripts));\n135           xhtml.startDocument();\n136           try {\n137               NodeTraversor.filter(new TikaNodeFilter(xhtml), document);\n138           } catch (RuntimeSAXException e) {\n139               throw e.getWrapped();\n140           } finally {\n141               xhtml.endDocument();\n142           }\n143       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/HtmlEncodingDetector.java:\n102       public Charset detect(InputStream input, Metadata metadata) throws IOException {\n103           if (input == null) {\n104               return null;\n105           }\n106   \n107           // Read enough of the text stream to capture possible meta tags\n108           input.mark(markLimit);\n109           byte[] buffer = new byte[markLimit];\n110           int n = 0;\n111           int m = input.read(buffer);\n112           while (m != -1 && n < buffer.length) {\n113               n += m;\n114               m = input.read(buffer, n, buffer.length - n);\n115           }\n116           input.reset();\n117   \n118           // Interpret the head as ASCII and try to spot a meta tag with\n119           // a possible character encoding hint\n120   \n121           String head = ASCII.decode(ByteBuffer.wrap(buffer, 0, n)).toString();\n122           //strip out comments\n123           String headNoComments = head.replaceAll(\"<!--.*?(-->|$)\", \" \");\n124           //try to find the encoding in head without comments\n125           Charset charset = findCharset(headNoComments);\n126           //if nothing is found, back off to find any encoding\n127           if (charset == null) {\n128               return findCharset(head);\n129           }\n130           return charset;\n131   \n132       }\n135       private Charset findCharset(String s) {\n136   \n137           Matcher equiv = HTTP_META_PATTERN.matcher(s);\n138           Matcher charsetMatcher = FLEXIBLE_CHARSET_ATTR_PATTERN.matcher(\"\");\n139           //iterate through meta tags\n140           while (equiv.find()) {\n141               String attrs = equiv.group(1);\n142               charsetMatcher.reset(attrs);\n143               //iterate through charset= and return the first match\n144               //that is valid\n145               while (charsetMatcher.find()) {\n146                   String candCharset = charsetMatcher.group(1);\n147                   if (CHARSETS_UNSUPPORTED_BY_IANA.contains(candCharset.toLowerCase(Locale.US))) {\n148                       continue;\n149                   }\n150                   if (\"x-user-defined\".equalsIgnoreCase(candCharset)) {\n151                       candCharset = \"windows-1252\";\n152                   }\n153   \n154                   if (CharsetUtils.isSupported(candCharset)) {\n155                       try {\n156                           return CharsetUtils.forName(candCharset);\n157                       } catch (IllegalArgumentException e) {\n158                           //ignore\n159                       }\n160                   }\n161               }\n162           }\n163           return null;\n164       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/utils/CharsetUtils.java:\n105       public static boolean isSupported(String charsetName) {\n106           try {\n107               if (isSupportedICU != null && (Boolean) isSupportedICU.invoke(null, charsetName)) {\n108                   return true;\n109               }\n110               return Charset.isSupported(charsetName);\n111           } catch (IllegalCharsetNameException e) {\n112               return false;\n113           } catch (IllegalArgumentException e) {\n114               // null, for example\n115               return false;\n116           } catch (Exception e) {\n117               // Unexpected exception, what to do?\n118               return false;\n119           }\n120       }\n143       public static Charset forName(String name) {\n144           if (name == null) {\n145               throw new IllegalArgumentException();\n146           }\n147   \n148           // Get rid of cruft around names, like <>, trailing commas, etc.\n149           Matcher m = CHARSET_NAME_PATTERN.matcher(name);\n150           if (!m.matches()) {\n151               throw new IllegalCharsetNameException(name);\n152           }\n153           name = m.group(1);\n154   \n155           String lower = name.toLowerCase(Locale.ENGLISH);\n156           Charset charset = COMMON_CHARSETS.get(lower);\n157           if (charset != null) {\n158               return charset;\n159           } else if (\"none\".equals(lower) || \"no\".equals(lower)) {\n160               throw new IllegalCharsetNameException(name);\n161           } else {\n162               Matcher iso = ISO_NAME_PATTERN.matcher(lower);\n163               Matcher cp = CP_NAME_PATTERN.matcher(lower);\n164               Matcher win = WIN_NAME_PATTERN.matcher(lower);\n165               if (iso.matches()) {\n166                   // Handle \"iso 8859-x\" error\n167                   name = \"iso-8859-\" + iso.group(1);\n168                   charset = COMMON_CHARSETS.get(name);\n169               } else if (cp.matches()) {\n170                   // Handle \"cp-xxx\" error\n171                   name = \"cp\" + cp.group(1);\n172                   charset = COMMON_CHARSETS.get(name);\n173               } else if (win.matches()) {\n174                   // Handle \"winxxx\" and \"win-xxx\" errors\n175                   name = \"windows-\" + win.group(1);\n176                   charset = COMMON_CHARSETS.get(name);\n177               }\n178               if (charset != null) {\n179                   return charset;\n180               }\n181           }\n182   \n183           if (getCharsetICU != null) {\n184               try {\n185                   Charset cs = (Charset) getCharsetICU.invoke(null, name);\n186                   if (cs != null) {\n187                       return cs;\n188                   }\n189               } catch (IllegalArgumentException | IllegalAccessException |\n190                       InvocationTargetException e) {\n191                   //ignore\n192               }\n193           }\n194   \n195           return Charset.forName(name);\n196       }\n",
            "cost": 0.56072,
            "harness_id": "TikaTwo",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/utils/CharsetUtils.java:185:40",
            "status": "corpus",
            "valid_path": "YES",
            "id": 295
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-two/src/main/java/com/aixcc/tika/harnesses/two/TikaTwo.java:\n20       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n21   \n22           InputStream stream = new BufferedInputStream(new ByteArrayInputStream(input));\n23   \n24           // null metadata indicates html content type for JSoupParser\n25           Metadata metadata = new Metadata();\n26           \n27           ContentHandler handler = new DefaultHandler();\n28   \n29           ParseContext context = new ParseContext();\n30           context.set(Parser.class, new CompositeExternalParser());\n31   \n32           (new JSoupParser()).parse(stream, handler, metadata, context);\n33   \n34           for (String name : metadata.names()) {\n35               System.out.println(name + \": \" + metadata.get(name));\n36           }\n37   \n38       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/JSoupParser.java:\n 76       public JSoupParser() {\n 77           super();\n 78       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/AbstractEncodingDetectorParser.java:\n33       public AbstractEncodingDetectorParser() {\n34           encodingDetector = new DefaultEncodingDetector();\n35       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/detect/DefaultEncodingDetector.java:\n40       public DefaultEncodingDetector() {\n41           this(new ServiceLoader(DefaultEncodingDetector.class.getClassLoader()));\n42       }\n44       public DefaultEncodingDetector(ServiceLoader loader) {\n45           super(loader.loadServiceProviders(EncodingDetector.class));\n46       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java:\n251       public <T> List<T> loadServiceProviders(Class<T> iface) {\n252           List<T> tmp = new ArrayList<>();\n253           tmp.addAll(loadDynamicServiceProviders(iface));\n254           tmp.addAll(loadStaticServiceProviders(iface));\n255   \n256           List<T> providers = new ArrayList<>();\n257           Set<String> seen = new HashSet<>();\n258           for (T provider : tmp) {\n259               if (! seen.contains(provider.getClass().getCanonicalName())) {\n260                   providers.add(provider);\n261                   seen.add(provider.getClass().getCanonicalName());\n262               }\n263           }\n264           return providers;\n265       }\n324       public <T> List<T> loadStaticServiceProviders(Class<T> iface) {\n325           return loadStaticServiceProviders(iface, Collections.EMPTY_SET);\n326       }\n339       @SuppressWarnings(\"unchecked\")\n340       public <T> List<T> loadStaticServiceProviders(Class<T> iface,\n341                                                     Collection<Class<? extends T>> excludes) {\n342           List<T> providers = new ArrayList<>();\n343   \n344           if (loader != null) {\n345               List<String> names = identifyStaticServiceProviders(iface);\n346               for (String name : names) {\n347                   try {\n348                       Class<?> klass = loader.loadClass(name);\n349                       if (iface.isAssignableFrom(klass)) {\n350                           boolean shouldExclude = false;\n351                           for (Class<? extends T> ex : excludes) {\n352                               if (ex.isAssignableFrom(klass)) {\n353                                   shouldExclude = true;\n354                                   break;\n355                               }\n356                           }\n357                           if (!shouldExclude) {\n358                               T instance = ServiceLoaderUtils.newInstance(klass, this);\n359                               if (instance instanceof Initializable) {\n360                                   ((Initializable) instance).initialize(Collections.EMPTY_MAP);\n361                                   ((Initializable) instance)\n362                                           .checkInitialization(initializableProblemHandler);\n363                               }\n364                               providers.add(instance);\n365                           }\n366                       } else {\n367                           throw new TikaConfigException(\n368                                   \"Class \" + name + \" is not of type: \" + iface);\n369                       }\n370                   } catch (Throwable t) {\n371                       handler.handleLoadError(name, t);\n372                   }\n373               }\n374           }\n375           return providers;\n376       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java:\n563       @Override\n564       public void initialize(Map<String, Param> params) throws TikaConfigException {\n565           hasTesseract = hasTesseract();\n566           if (isEnableImagePreprocessing()) {\n567               hasImageMagick = hasImageMagick();\n568           } else {\n569               hasImageMagick = false;\n570           }\n571           if (preloadLangs) {\n572               preloadLangs();\n573               if (!StringUtils.isBlank(defaultConfig.getLanguage())) {\n574                   validateLangString(defaultConfig.getLanguage());\n575               }\n576           }\n577           imagePreprocessor = new ImagePreprocessor(getImageMagickPath() + getImageMagickProg());\n578       }\n886       private void preloadLangs() {\n887           String[] args = new String[]{getTesseractPath() + getTesseractProg(), \"--list-langs\"};\n888   \n889           ProcessBuilder pb = new ProcessBuilder(args);\n890   \n891           setEnv(pb);\n892   \n893           Process process = null;\n894           try {\n895               process = pb.start();\n896               getLangs(process, defaultConfig.getTimeoutSeconds());\n897           } catch (TikaException | IOException e) {\n898               LOG.warn(\"Problem preloading langs\", e);\n899           } finally {\n900               if (process != null) {\n901                   process.destroyForcibly();\n902               }\n903           }\n904       }\n",
            "cost": 0.05686000000000001,
            "harness_id": "TikaTwo",
            "sanitizer": "OS Command Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java:895:23",
            "status": "corpus",
            "valid_path": "NO",
            "id": 296
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-two/src/main/java/com/aixcc/tika/harnesses/two/TikaTwo.java:\n20       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n21   \n22           InputStream stream = new BufferedInputStream(new ByteArrayInputStream(input));\n23   \n24           // null metadata indicates html content type for JSoupParser\n25           Metadata metadata = new Metadata();\n26           \n27           ContentHandler handler = new DefaultHandler();\n28   \n29           ParseContext context = new ParseContext();\n30           context.set(Parser.class, new CompositeExternalParser());\n31   \n32           (new JSoupParser()).parse(stream, handler, metadata, context);\n33   \n34           for (String name : metadata.names()) {\n35               System.out.println(name + \": \" + metadata.get(name));\n36           }\n37   \n38       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/JSoupParser.java:\n 76       public JSoupParser() {\n 77           super();\n 78       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/AbstractEncodingDetectorParser.java:\n33       public AbstractEncodingDetectorParser() {\n34           encodingDetector = new DefaultEncodingDetector();\n35       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/detect/DefaultEncodingDetector.java:\n40       public DefaultEncodingDetector() {\n41           this(new ServiceLoader(DefaultEncodingDetector.class.getClassLoader()));\n42       }\n44       public DefaultEncodingDetector(ServiceLoader loader) {\n45           super(loader.loadServiceProviders(EncodingDetector.class));\n46       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java:\n251       public <T> List<T> loadServiceProviders(Class<T> iface) {\n252           List<T> tmp = new ArrayList<>();\n253           tmp.addAll(loadDynamicServiceProviders(iface));\n254           tmp.addAll(loadStaticServiceProviders(iface));\n255   \n256           List<T> providers = new ArrayList<>();\n257           Set<String> seen = new HashSet<>();\n258           for (T provider : tmp) {\n259               if (! seen.contains(provider.getClass().getCanonicalName())) {\n260                   providers.add(provider);\n261                   seen.add(provider.getClass().getCanonicalName());\n262               }\n263           }\n264           return providers;\n265       }\n324       public <T> List<T> loadStaticServiceProviders(Class<T> iface) {\n325           return loadStaticServiceProviders(iface, Collections.EMPTY_SET);\n326       }\n339       @SuppressWarnings(\"unchecked\")\n340       public <T> List<T> loadStaticServiceProviders(Class<T> iface,\n341                                                     Collection<Class<? extends T>> excludes) {\n342           List<T> providers = new ArrayList<>();\n343   \n344           if (loader != null) {\n345               List<String> names = identifyStaticServiceProviders(iface);\n346               for (String name : names) {\n347                   try {\n348                       Class<?> klass = loader.loadClass(name);\n349                       if (iface.isAssignableFrom(klass)) {\n350                           boolean shouldExclude = false;\n351                           for (Class<? extends T> ex : excludes) {\n352                               if (ex.isAssignableFrom(klass)) {\n353                                   shouldExclude = true;\n354                                   break;\n355                               }\n356                           }\n357                           if (!shouldExclude) {\n358                               T instance = ServiceLoaderUtils.newInstance(klass, this);\n359                               if (instance instanceof Initializable) {\n360                                   ((Initializable) instance).initialize(Collections.EMPTY_MAP);\n361                                   ((Initializable) instance)\n362                                           .checkInitialization(initializableProblemHandler);\n363                               }\n364                               providers.add(instance);\n365                           }\n366                       } else {\n367                           throw new TikaConfigException(\n368                                   \"Class \" + name + \" is not of type: \" + iface);\n369                       }\n370                   } catch (Throwable t) {\n371                       handler.handleLoadError(name, t);\n372                   }\n373               }\n374           }\n375           return providers;\n376       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-microsoft-module/src/main/java/org/apache/tika/parser/microsoft/libpst/LibPstParser.java:\n158       @Override\n159       public void initialize(Map<String, Param> map) throws TikaConfigException {\n160           try {\n161               check();\n162           } catch (IOException e) {\n163               LOGGER.error(\"Couldn't get version of libpst\", e);\n164               throw new TikaConfigException(\"Unable to check version of readpst. Is it installed?!\", e);\n165           }\n166       }\n174       private static void check() throws TikaConfigException, IOException {\n175           ProcessBuilder pb = new ProcessBuilder(READ_PST_COMMAND, \"-V\");\n176           FileProcessResult result = ProcessUtils.execute(pb, 30000, 10000, 10000);\n177           if (result.getExitValue() != 0) {\n178               throw new TikaConfigException(\n179                       \"bad exit value for LibPstParser. It must be installed and on the path\" + \" if this parser is configured. Exit value: \" + result.getExitValue());\n180           }\n181           if (result.isTimeout()) {\n182               throw new TikaConfigException(\"timeout trying to get version from readpst?!\");\n183           }\n184       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/utils/ProcessUtils.java:\n 87       public static FileProcessResult execute(ProcessBuilder pb,\n 88                                               long timeoutMillis,\n 89                                               int maxStdoutBuffer, int maxStdErrBuffer)\n 90               throws IOException {\n 91           Process p = null;\n 92           String id = null;\n 93           try {\n 94               p = pb.start();\n 95               id = register(p);\n 96               long elapsed = -1;\n 97               long start = System.currentTimeMillis();\n 98               StreamGobbler outGobbler = new StreamGobbler(p.getInputStream(), maxStdoutBuffer);\n 99               StreamGobbler errGobbler = new StreamGobbler(p.getErrorStream(), maxStdErrBuffer);\n100   \n101               Thread outThread = new Thread(outGobbler);\n102               outThread.start();\n103   \n104               Thread errThread = new Thread(errGobbler);\n105               errThread.start();\n106               int exitValue = -1;\n107               boolean complete = false;\n108               try {\n109                   complete = p.waitFor(timeoutMillis, TimeUnit.MILLISECONDS);\n110                   elapsed = System.currentTimeMillis() - start;\n111                   if (complete) {\n112                       exitValue = p.exitValue();\n113                       outThread.join(1000);\n114                       errThread.join(1000);\n115                   } else {\n116                       p.destroyForcibly();\n117                       outThread.join(1000);\n118                       errThread.join(1000);\n119                       boolean completed = p.waitFor(500, TimeUnit.MILLISECONDS);\n120                       if (completed) {\n121                           try {\n122                               exitValue = p.exitValue();\n123                           } catch (IllegalThreadStateException e) {\n124                               //not finished!\n125                           }\n126                       }\n127                   }\n128               } catch (InterruptedException e) {\n129                   exitValue = -1000;\n130               } finally {\n131                   outThread.interrupt();\n132                   errThread.interrupt();\n133               }\n134               FileProcessResult result = new FileProcessResult();\n135               result.processTimeMillis = elapsed;\n136               result.stderrLength = errGobbler.getStreamLength();\n137               result.stdoutLength = outGobbler.getStreamLength();\n138               result.isTimeout = ! complete;\n139               result.exitValue = exitValue;\n140               result.stdout = StringUtils.joinWith(\"\\n\", outGobbler.getLines());\n141               result.stderr = StringUtils.joinWith(\"\\n\", errGobbler.getLines());\n142               result.stdoutTruncated = outGobbler.getIsTruncated();\n143               result.stderrTruncated = errGobbler.getIsTruncated();\n144               return result;\n145           } finally {\n146               if (p != null) {\n147                   p.destroyForcibly();\n148               }\n149               if (id != null) {\n150                   release(id);\n151               }\n152           }\n153       }\n",
            "cost": 0.06419,
            "harness_id": "TikaTwo",
            "sanitizer": "OS Command Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/utils/ProcessUtils.java:94:17",
            "status": "corpus",
            "valid_path": "NO",
            "id": 297
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-two/src/main/java/com/aixcc/tika/harnesses/two/TikaTwo.java:\n20       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n21   \n22           InputStream stream = new BufferedInputStream(new ByteArrayInputStream(input));\n23   \n24           // null metadata indicates html content type for JSoupParser\n25           Metadata metadata = new Metadata();\n26           \n27           ContentHandler handler = new DefaultHandler();\n28   \n29           ParseContext context = new ParseContext();\n30           context.set(Parser.class, new CompositeExternalParser());\n31   \n32           (new JSoupParser()).parse(stream, handler, metadata, context);\n33   \n34           for (String name : metadata.names()) {\n35               System.out.println(name + \": \" + metadata.get(name));\n36           }\n37   \n38       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/JSoupParser.java:\n 76       public JSoupParser() {\n 77           super();\n 78       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/AbstractEncodingDetectorParser.java:\n33       public AbstractEncodingDetectorParser() {\n34           encodingDetector = new DefaultEncodingDetector();\n35       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/detect/DefaultEncodingDetector.java:\n40       public DefaultEncodingDetector() {\n41           this(new ServiceLoader(DefaultEncodingDetector.class.getClassLoader()));\n42       }\n44       public DefaultEncodingDetector(ServiceLoader loader) {\n45           super(loader.loadServiceProviders(EncodingDetector.class));\n46       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java:\n251       public <T> List<T> loadServiceProviders(Class<T> iface) {\n252           List<T> tmp = new ArrayList<>();\n253           tmp.addAll(loadDynamicServiceProviders(iface));\n254           tmp.addAll(loadStaticServiceProviders(iface));\n255   \n256           List<T> providers = new ArrayList<>();\n257           Set<String> seen = new HashSet<>();\n258           for (T provider : tmp) {\n259               if (! seen.contains(provider.getClass().getCanonicalName())) {\n260                   providers.add(provider);\n261                   seen.add(provider.getClass().getCanonicalName());\n262               }\n263           }\n264           return providers;\n265       }\n324       public <T> List<T> loadStaticServiceProviders(Class<T> iface) {\n325           return loadStaticServiceProviders(iface, Collections.EMPTY_SET);\n326       }\n339       @SuppressWarnings(\"unchecked\")\n340       public <T> List<T> loadStaticServiceProviders(Class<T> iface,\n341                                                     Collection<Class<? extends T>> excludes) {\n342           List<T> providers = new ArrayList<>();\n343   \n344           if (loader != null) {\n345               List<String> names = identifyStaticServiceProviders(iface);\n346               for (String name : names) {\n347                   try {\n348                       Class<?> klass = loader.loadClass(name);\n349                       if (iface.isAssignableFrom(klass)) {\n350                           boolean shouldExclude = false;\n351                           for (Class<? extends T> ex : excludes) {\n352                               if (ex.isAssignableFrom(klass)) {\n353                                   shouldExclude = true;\n354                                   break;\n355                               }\n356                           }\n357                           if (!shouldExclude) {\n358                               T instance = ServiceLoaderUtils.newInstance(klass, this);\n359                               if (instance instanceof Initializable) {\n360                                   ((Initializable) instance).initialize(Collections.EMPTY_MAP);\n361                                   ((Initializable) instance)\n362                                           .checkInitialization(initializableProblemHandler);\n363                               }\n364                               providers.add(instance);\n365                           }\n366                       } else {\n367                           throw new TikaConfigException(\n368                                   \"Class \" + name + \" is not of type: \" + iface);\n369                       }\n370                   } catch (Throwable t) {\n371                       handler.handleLoadError(name, t);\n372                   }\n373               }\n374           }\n375           return providers;\n376       }\n\nsrc/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/recognition/tf/TensorflowImageRecParser.java:\n113       @Override\n114       public void initialize(Map<String, Param> params) throws TikaConfigException {\n115           try {\n116               if (!modelFile.exists()) {\n117                   modelFile.getParentFile().mkdirs();\n118                   LOG.warn(\"Model doesn't exist at {}. Expecting the script to download it.\",\n119                           modelFile);\n120               }\n121               if (!scriptFile.exists()) {\n122                   scriptFile.getParentFile().mkdirs();\n123                   LOG.info(\"Copying script to : {}\", scriptFile);\n124                   try (InputStream sourceStream = getClass().getResourceAsStream(SCRIPT_FILE_NAME)) {\n125                       try (OutputStream destStream = new FileOutputStream(scriptFile)) {\n126                           IOUtils.copy(sourceStream, destStream);\n127                       }\n128                   }\n129                   LOG.debug(\"Copied..\");\n130               }\n131               String[] availabilityCheckArgs =\n132                       {executor, scriptFile.getAbsolutePath(), modelArg, modelFile.getAbsolutePath(),\n133                               availabilityTestArgs};\n134               available = ExternalParser.check(availabilityCheckArgs);\n135               LOG.debug(\"Available? {}\", available);\n136               if (!available) {\n137                   return;\n138               }\n139               String[] parseCmd =\n140                       {executor, scriptFile.getAbsolutePath(), modelArg, modelFile.getAbsolutePath(),\n141                               imageArg, INPUT_FILE_TOKEN, \"--out_file\",\n142                               OUTPUT_FILE_TOKEN}; //inserting output token to let\n143               // external parser parse metadata\n144               setCommand(parseCmd);\n145               HashMap<Pattern, String> patterns = new HashMap<>();\n146               patterns.put(Pattern.compile(outPattern), null);\n147               setMetadataExtractionPatterns(patterns);\n148               setIgnoredLineConsumer(IGNORED_LINE_LOGGER);\n149           } catch (Exception e) {\n150               throw new TikaConfigException(e.getMessage(), e);\n151           }\n152       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParser.java:\n154       public static boolean check(String[] checkCmd, int... errorValue) {\n155           if (errorValue.length == 0) {\n156               errorValue = new int[]{127};\n157           }\n158   \n159           Process process = null;\n160           try {\n161               process = Runtime.getRuntime().exec(checkCmd);\n162               Thread stdErrSuckerThread = ignoreStream(process.getErrorStream(), false);\n163               Thread stdOutSuckerThread = ignoreStream(process.getInputStream(), false);\n164               stdErrSuckerThread.join();\n165               stdOutSuckerThread.join();\n166               //make the timeout parameterizable\n167               boolean finished = process.waitFor(60000, TimeUnit.MILLISECONDS);\n168               if (!finished) {\n169                   throw new TimeoutException();\n170               }\n171               int result = process.exitValue();\n172               LOG.debug(\"exit value for {}: {}\", checkCmd[0], result);\n173               for (int err : errorValue) {\n174                   if (result == err) {\n175                       return false;\n176                   }\n177               }\n178               return true;\n179           } catch (IOException | InterruptedException | TimeoutException e) {\n180               LOG.debug(\"exception trying to run  \" + checkCmd[0], e);\n181               // Some problem, command is there or is broken\n182               return false;\n183           } catch (SecurityException se) {\n184               // External process execution is banned by the security manager\n185               throw se;\n186           } catch (Error err) {\n187               if (err.getMessage() != null && (err.getMessage().contains(\"posix_spawn\") ||\n188                       err.getMessage().contains(\"UNIXProcess\"))) {\n189                   LOG.debug(\"(TIKA-1526): exception trying to run: \" + checkCmd[0], err);\n190                   //\"Error forking command due to JVM locale bug\n191                   //(see TIKA-1526 and SOLR-6387)\"\n192                   return false;\n193               }\n194               //throw if a different kind of error\n195               throw err;\n196           } finally {\n197               if (process != null) {\n198                   process.destroyForcibly();\n199               }\n200           }\n201       }\n",
            "cost": 0.067485,
            "harness_id": "TikaTwo",
            "sanitizer": "OS Command Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParser.java:161:49",
            "status": "corpus",
            "valid_path": "NO",
            "id": 298
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-two/src/main/java/com/aixcc/tika/harnesses/two/TikaTwo.java:\n20       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n21   \n22           InputStream stream = new BufferedInputStream(new ByteArrayInputStream(input));\n23   \n24           // null metadata indicates html content type for JSoupParser\n25           Metadata metadata = new Metadata();\n26           \n27           ContentHandler handler = new DefaultHandler();\n28   \n29           ParseContext context = new ParseContext();\n30           context.set(Parser.class, new CompositeExternalParser());\n31   \n32           (new JSoupParser()).parse(stream, handler, metadata, context);\n33   \n34           for (String name : metadata.names()) {\n35               System.out.println(name + \": \" + metadata.get(name));\n36           }\n37   \n38       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/JSoupParser.java:\n 76       public JSoupParser() {\n 77           super();\n 78       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/AbstractEncodingDetectorParser.java:\n33       public AbstractEncodingDetectorParser() {\n34           encodingDetector = new DefaultEncodingDetector();\n35       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/detect/DefaultEncodingDetector.java:\n40       public DefaultEncodingDetector() {\n41           this(new ServiceLoader(DefaultEncodingDetector.class.getClassLoader()));\n42       }\n44       public DefaultEncodingDetector(ServiceLoader loader) {\n45           super(loader.loadServiceProviders(EncodingDetector.class));\n46       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java:\n251       public <T> List<T> loadServiceProviders(Class<T> iface) {\n252           List<T> tmp = new ArrayList<>();\n253           tmp.addAll(loadDynamicServiceProviders(iface));\n254           tmp.addAll(loadStaticServiceProviders(iface));\n255   \n256           List<T> providers = new ArrayList<>();\n257           Set<String> seen = new HashSet<>();\n258           for (T provider : tmp) {\n259               if (! seen.contains(provider.getClass().getCanonicalName())) {\n260                   providers.add(provider);\n261                   seen.add(provider.getClass().getCanonicalName());\n262               }\n263           }\n264           return providers;\n265       }\n324       public <T> List<T> loadStaticServiceProviders(Class<T> iface) {\n325           return loadStaticServiceProviders(iface, Collections.EMPTY_SET);\n326       }\n339       @SuppressWarnings(\"unchecked\")\n340       public <T> List<T> loadStaticServiceProviders(Class<T> iface,\n341                                                     Collection<Class<? extends T>> excludes) {\n342           List<T> providers = new ArrayList<>();\n343   \n344           if (loader != null) {\n345               List<String> names = identifyStaticServiceProviders(iface);\n346               for (String name : names) {\n347                   try {\n348                       Class<?> klass = loader.loadClass(name);\n349                       if (iface.isAssignableFrom(klass)) {\n350                           boolean shouldExclude = false;\n351                           for (Class<? extends T> ex : excludes) {\n352                               if (ex.isAssignableFrom(klass)) {\n353                                   shouldExclude = true;\n354                                   break;\n355                               }\n356                           }\n357                           if (!shouldExclude) {\n358                               T instance = ServiceLoaderUtils.newInstance(klass, this);\n359                               if (instance instanceof Initializable) {\n360                                   ((Initializable) instance).initialize(Collections.EMPTY_MAP);\n361                                   ((Initializable) instance)\n362                                           .checkInitialization(initializableProblemHandler);\n363                               }\n364                               providers.add(instance);\n365                           }\n366                       } else {\n367                           throw new TikaConfigException(\n368                                   \"Class \" + name + \" is not of type: \" + iface);\n369                       }\n370                   } catch (Throwable t) {\n371                       handler.handleLoadError(name, t);\n372                   }\n373               }\n374           }\n375           return providers;\n376       }\n\nsrc/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/recognition/tf/TensorflowRESTRecogniser.java:\n108       @Override\n109       public void initialize(Map<String, Param> params) throws TikaConfigException {\n110           healthUri = URI.create(apiBaseUri + \"/ping\");\n111           apiUri = URI.create(apiBaseUri + String.format(Locale.getDefault(),\n112                   \"/classify/image?topn=%1$d&min_confidence=%2$f\", topN, minConfidence));\n113   \n114           try (CloseableHttpClient client = HttpClientBuilder.create().build()) {\n115               HttpResponse response = client.execute(new HttpGet(healthUri));\n116               available = response.getStatusLine().getStatusCode() == 200;\n117   \n118               LOG.info(\"Available = {}, API Status = {}\", available, response.getStatusLine());\n119               LOG.info(\"topN = {}, minConfidence = {}\", topN, minConfidence);\n120           } catch (Exception e) {\n121               available = false;\n122               throw new TikaConfigException(e.getMessage(), e);\n123           }\n124       }\n",
            "cost": 0.05009,
            "harness_id": "TikaTwo",
            "sanitizer": "Server Side Request Forgery (SSRF)",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/recognition/tf/TensorflowRESTRecogniser.java:115:52",
            "status": "corpus",
            "valid_path": "NO",
            "id": 299
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-two/src/main/java/com/aixcc/tika/harnesses/two/TikaTwo.java:\n20       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n21   \n22           InputStream stream = new BufferedInputStream(new ByteArrayInputStream(input));\n23   \n24           // null metadata indicates html content type for JSoupParser\n25           Metadata metadata = new Metadata();\n26           \n27           ContentHandler handler = new DefaultHandler();\n28   \n29           ParseContext context = new ParseContext();\n30           context.set(Parser.class, new CompositeExternalParser());\n31   \n32           (new JSoupParser()).parse(stream, handler, metadata, context);\n33   \n34           for (String name : metadata.names()) {\n35               System.out.println(name + \": \" + metadata.get(name));\n36           }\n37   \n38       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/JSoupParser.java:\n 76       public JSoupParser() {\n 77           super();\n 78       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/AbstractEncodingDetectorParser.java:\n33       public AbstractEncodingDetectorParser() {\n34           encodingDetector = new DefaultEncodingDetector();\n35       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/detect/DefaultEncodingDetector.java:\n40       public DefaultEncodingDetector() {\n41           this(new ServiceLoader(DefaultEncodingDetector.class.getClassLoader()));\n42       }\n44       public DefaultEncodingDetector(ServiceLoader loader) {\n45           super(loader.loadServiceProviders(EncodingDetector.class));\n46       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java:\n251       public <T> List<T> loadServiceProviders(Class<T> iface) {\n252           List<T> tmp = new ArrayList<>();\n253           tmp.addAll(loadDynamicServiceProviders(iface));\n254           tmp.addAll(loadStaticServiceProviders(iface));\n255   \n256           List<T> providers = new ArrayList<>();\n257           Set<String> seen = new HashSet<>();\n258           for (T provider : tmp) {\n259               if (! seen.contains(provider.getClass().getCanonicalName())) {\n260                   providers.add(provider);\n261                   seen.add(provider.getClass().getCanonicalName());\n262               }\n263           }\n264           return providers;\n265       }\n324       public <T> List<T> loadStaticServiceProviders(Class<T> iface) {\n325           return loadStaticServiceProviders(iface, Collections.EMPTY_SET);\n326       }\n339       @SuppressWarnings(\"unchecked\")\n340       public <T> List<T> loadStaticServiceProviders(Class<T> iface,\n341                                                     Collection<Class<? extends T>> excludes) {\n342           List<T> providers = new ArrayList<>();\n343   \n344           if (loader != null) {\n345               List<String> names = identifyStaticServiceProviders(iface);\n346               for (String name : names) {\n347                   try {\n348                       Class<?> klass = loader.loadClass(name);\n349                       if (iface.isAssignableFrom(klass)) {\n350                           boolean shouldExclude = false;\n351                           for (Class<? extends T> ex : excludes) {\n352                               if (ex.isAssignableFrom(klass)) {\n353                                   shouldExclude = true;\n354                                   break;\n355                               }\n356                           }\n357                           if (!shouldExclude) {\n358                               T instance = ServiceLoaderUtils.newInstance(klass, this);\n359                               if (instance instanceof Initializable) {\n360                                   ((Initializable) instance).initialize(Collections.EMPTY_MAP);\n361                                   ((Initializable) instance)\n362                                           .checkInitialization(initializableProblemHandler);\n363                               }\n364                               providers.add(instance);\n365                           }\n366                       } else {\n367                           throw new TikaConfigException(\n368                                   \"Class \" + name + \" is not of type: \" + iface);\n369                       }\n370                   } catch (Throwable t) {\n371                       handler.handleLoadError(name, t);\n372                   }\n373               }\n374           }\n375           return providers;\n376       }\n\nsrc/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/recognition/tf/TensorflowRESTVideoRecogniser.java:\n76       @Override\n77       public void initialize(Map<String, Param> params) throws TikaConfigException {\n78           healthUri = URI.create(apiBaseUri + \"/ping\");\n79           apiUri = URI.create(apiBaseUri + String.format(Locale.getDefault(),\n80                   \"/classify/video?topn=%1$d&min_confidence=%2$f&mode=%3$s\", topN, minConfidence,\n81                   mode));\n82   \n83           try (CloseableHttpClient client = HttpClientBuilder.create().build()) {\n84               HttpResponse response = client.execute(new HttpGet(healthUri));\n85               available = response.getStatusLine().getStatusCode() == 200;\n86   \n87               LOG.info(\"Available = {}, API Status = {}\", available, response.getStatusLine());\n88               LOG.info(\"topN = {}, minConfidence = {}\", topN, minConfidence);\n89           } catch (Exception e) {\n90               available = false;\n91               throw new TikaConfigException(e.getMessage(), e);\n92           }\n93       }\n",
            "cost": 0.049115000000000006,
            "harness_id": "TikaTwo",
            "sanitizer": "Server Side Request Forgery (SSRF)",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/recognition/tf/TensorflowRESTVideoRecogniser.java:84:52",
            "status": "corpus",
            "valid_path": "NO",
            "id": 300
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-two/src/main/java/com/aixcc/tika/harnesses/two/TikaTwo.java:\n20       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n21   \n22           InputStream stream = new BufferedInputStream(new ByteArrayInputStream(input));\n23   \n24           // null metadata indicates html content type for JSoupParser\n25           Metadata metadata = new Metadata();\n26           \n27           ContentHandler handler = new DefaultHandler();\n28   \n29           ParseContext context = new ParseContext();\n30           context.set(Parser.class, new CompositeExternalParser());\n31   \n32           (new JSoupParser()).parse(stream, handler, metadata, context);\n33   \n34           for (String name : metadata.names()) {\n35               System.out.println(name + \": \" + metadata.get(name));\n36           }\n37   \n38       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/JSoupParser.java:\n 76       public JSoupParser() {\n 77           super();\n 78       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/AbstractEncodingDetectorParser.java:\n33       public AbstractEncodingDetectorParser() {\n34           encodingDetector = new DefaultEncodingDetector();\n35       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/detect/DefaultEncodingDetector.java:\n40       public DefaultEncodingDetector() {\n41           this(new ServiceLoader(DefaultEncodingDetector.class.getClassLoader()));\n42       }\n44       public DefaultEncodingDetector(ServiceLoader loader) {\n45           super(loader.loadServiceProviders(EncodingDetector.class));\n46       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java:\n251       public <T> List<T> loadServiceProviders(Class<T> iface) {\n252           List<T> tmp = new ArrayList<>();\n253           tmp.addAll(loadDynamicServiceProviders(iface));\n254           tmp.addAll(loadStaticServiceProviders(iface));\n255   \n256           List<T> providers = new ArrayList<>();\n257           Set<String> seen = new HashSet<>();\n258           for (T provider : tmp) {\n259               if (! seen.contains(provider.getClass().getCanonicalName())) {\n260                   providers.add(provider);\n261                   seen.add(provider.getClass().getCanonicalName());\n262               }\n263           }\n264           return providers;\n265       }\n324       public <T> List<T> loadStaticServiceProviders(Class<T> iface) {\n325           return loadStaticServiceProviders(iface, Collections.EMPTY_SET);\n326       }\n339       @SuppressWarnings(\"unchecked\")\n340       public <T> List<T> loadStaticServiceProviders(Class<T> iface,\n341                                                     Collection<Class<? extends T>> excludes) {\n342           List<T> providers = new ArrayList<>();\n343   \n344           if (loader != null) {\n345               List<String> names = identifyStaticServiceProviders(iface);\n346               for (String name : names) {\n347                   try {\n348                       Class<?> klass = loader.loadClass(name);\n349                       if (iface.isAssignableFrom(klass)) {\n350                           boolean shouldExclude = false;\n351                           for (Class<? extends T> ex : excludes) {\n352                               if (ex.isAssignableFrom(klass)) {\n353                                   shouldExclude = true;\n354                                   break;\n355                               }\n356                           }\n357                           if (!shouldExclude) {\n358                               T instance = ServiceLoaderUtils.newInstance(klass, this);\n359                               if (instance instanceof Initializable) {\n360                                   ((Initializable) instance).initialize(Collections.EMPTY_MAP);\n361                                   ((Initializable) instance)\n362                                           .checkInitialization(initializableProblemHandler);\n363                               }\n364                               providers.add(instance);\n365                           }\n366                       } else {\n367                           throw new TikaConfigException(\n368                                   \"Class \" + name + \" is not of type: \" + iface);\n369                       }\n370                   } catch (Throwable t) {\n371                       handler.handleLoadError(name, t);\n372                   }\n373               }\n374           }\n375           return providers;\n376       }\n\nsrc/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/captioning/tf/TensorflowRESTCaptioner.java:\n106       @Override\n107       public void initialize(Map<String, Param> params) throws TikaConfigException {\n108           healthUri = URI.create(apiBaseUri + \"/ping\");\n109           apiUri = URI.create(apiBaseUri + String.format(Locale.getDefault(),\n110                   \"/caption/image?beam_size=%1$d&max_caption_length=%2$d\", captions,\n111                   maxCaptionLength));\n112   \n113           try (CloseableHttpClient client = HttpClientBuilder.create().build()) {\n114               HttpResponse response = client.execute(new HttpGet(healthUri));\n115               available = response.getStatusLine().getStatusCode() == 200;\n116   \n117               LOG.info(\"Available = {}, API Status = {}\", available, response.getStatusLine());\n118               LOG.info(\"Captions = {}, MaxCaptionLength = {}\", captions, maxCaptionLength);\n119           } catch (Exception e) {\n120               available = false;\n121               throw new TikaConfigException(e.getMessage(), e);\n122           }\n123       }\n",
            "cost": 0.05192,
            "harness_id": "TikaTwo",
            "sanitizer": "Server Side Request Forgery (SSRF)",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/captioning/tf/TensorflowRESTCaptioner.java:114:52",
            "status": "corpus",
            "valid_path": "NO",
            "id": 301
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-two/src/main/java/com/aixcc/tika/harnesses/two/TikaTwo.java:\n20       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n21   \n22           InputStream stream = new BufferedInputStream(new ByteArrayInputStream(input));\n23   \n24           // null metadata indicates html content type for JSoupParser\n25           Metadata metadata = new Metadata();\n26           \n27           ContentHandler handler = new DefaultHandler();\n28   \n29           ParseContext context = new ParseContext();\n30           context.set(Parser.class, new CompositeExternalParser());\n31   \n32           (new JSoupParser()).parse(stream, handler, metadata, context);\n33   \n34           for (String name : metadata.names()) {\n35               System.out.println(name + \": \" + metadata.get(name));\n36           }\n37   \n38       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/external/CompositeExternalParser.java:\n36       public CompositeExternalParser() throws IOException, TikaException {\n37           this(new MediaTypeRegistry());\n38       }\n40       @SuppressWarnings(\"unchecked\")\n41       public CompositeExternalParser(MediaTypeRegistry registry) throws IOException, TikaException {\n42           super(registry, (List<Parser>) (List<? extends Parser>) ExternalParsersFactory.create());\n43       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParsersFactory.java:\n43       public static List<ExternalParser> create() throws IOException, TikaException {\n44           return create(new ServiceLoader());\n45       }\n47       public static List<ExternalParser> create(ServiceLoader loader)\n48               throws IOException, TikaException {\n49           return create(\"tika-external-parsers.xml\", loader);\n50       }\n52       public static List<ExternalParser> create(String filename, ServiceLoader loader)\n53               throws IOException, TikaException {\n54           String filepath =\n55                   ExternalParsersFactory.class.getPackage().getName().replace('.', '/') + \"/\" +\n56                           filename;\n57           Enumeration<URL> files = loader.findServiceResources(filepath);\n58           ArrayList<URL> list = Collections.list(files);\n59           URL[] urls = list.toArray(new URL[0]);\n60           return create(urls);\n61       }\n63       public static List<ExternalParser> create(URL... urls) throws IOException, TikaException {\n64           List<ExternalParser> parsers = new ArrayList<>();\n65           for (URL url : urls) {\n66               try (InputStream stream = url.openStream()) {\n67                   parsers.addAll(ExternalParsersConfigReader.read(stream));\n68               }\n69           }\n70           return parsers;\n71       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParsersConfigReader.java:\n 56       public static List<ExternalParser> read(InputStream stream) throws TikaException, IOException {\n 57           try {\n 58               DocumentBuilder builder = XMLReaderUtils.getDocumentBuilder();\n 59               Document document = builder.parse(new InputSource(stream));\n 60               return read(document);\n 61           } catch (SAXException e) {\n 62               throw new TikaException(\"Invalid parser configuration\", e);\n 63           }\n 64       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java:\n 244       public static DocumentBuilderFactory getDocumentBuilderFactory() {\n 245           //borrowed from Apache POI\n 246           DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n 247           if (LOG.isDebugEnabled()) {\n 248               LOG.debug(\"DocumentBuilderFactory class {}\", factory.getClass());\n 249           }\n 250   \n 251           factory.setExpandEntityReferences(false);\n 252           factory.setNamespaceAware(true);\n 253           factory.setValidating(false);\n 254   \n 255           trySetSAXFeature(factory, XMLConstants.FEATURE_SECURE_PROCESSING, true);\n 256           trySetSAXFeature(factory, \"http://xml.org/sax/features/external-general-entities\", false);\n 257           trySetSAXFeature(factory, \"http://xml.org/sax/features/external-parameter-entities\", false);\n 258           trySetSAXFeature(factory, \"http://apache.org/xml/features/nonvalidating/load-external-dtd\",\n 259                   false);\n 260           trySetSAXFeature(factory, \"http://apache.org/xml/features/nonvalidating/load-dtd-grammar\",\n 261                   false);\n 262           trySetXercesSecurityManager(factory);\n 263           return factory;\n 264       }\n 276       public static DocumentBuilder getDocumentBuilder() throws TikaException {\n 277           try {\n 278               DocumentBuilderFactory documentBuilderFactory = getDocumentBuilderFactory();\n 279               DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n 280               documentBuilder.setEntityResolver(IGNORING_SAX_ENTITY_RESOLVER);\n 281               documentBuilder.setErrorHandler(null);\n 282               return documentBuilder;\n 283           } catch (ParserConfigurationException e) {\n 284               throw new TikaException(\"XML parser not available\", e);\n 285           }\n 286       }\n 713       private static void trySetXercesSecurityManager(DocumentBuilderFactory factory) {\n 714           //from POI\n 715           // Try built-in JVM one first, standalone if not\n 716           for (String securityManagerClassName : new String[]{\n 717                   //\"com.sun.org.apache.xerces.internal.util.SecurityManager\",\n 718                   XERCES_SECURITY_MANAGER}) {\n 719               try {\n 720                   Object mgr =\n 721                           Class.forName(securityManagerClassName).getDeclaredConstructor().newInstance();\n 722                   Method setLimit = mgr.getClass().getMethod(\"setEntityExpansionLimit\",\n 723                           Integer.TYPE);\n 724                   setLimit.invoke(mgr, MAX_ENTITY_EXPANSIONS);\n 725                   factory.setAttribute(XERCES_SECURITY_MANAGER_PROPERTY, mgr);\n 726                   // Stop once one can be setup without error\n 727                   return;\n 728               } catch (ClassNotFoundException e) {\n 729                   // continue without log, this is expected in some setups\n 730               } catch (Throwable e) {     // NOSONAR - also catch things like NoClassDefError here\n 731                   // throttle the log somewhat as it can spam the log otherwise\n 732                   if (System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {\n 733                       LOG.warn(\n 734                               \"SAX Security Manager could not be setup [log suppressed for 5 \" +\n 735                                       \"minutes]\",\n 736                               e);\n 737                       LAST_LOG = System.currentTimeMillis();\n 738                   }\n 739               }\n 740           }\n 741   \n 742           // separate old version of Xerces not found => use the builtin way of setting the property\n 743           try {\n 744               factory.setAttribute(\"http://www.oracle.com/xml/jaxp/properties/entityExpansionLimit\",\n 745                       MAX_ENTITY_EXPANSIONS);\n 746           } catch (IllegalArgumentException e) {\n 747               // NOSONAR - also catch things like NoClassDefError here\n 748               // throttle the log somewhat as it can spam the log otherwise\n 749               if (System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {\n 750                   LOG.warn(\"SAX Security Manager could not be setup [log suppressed for 5 minutes]\",\n 751                           e);\n 752                   LAST_LOG = System.currentTimeMillis();\n 753               }\n 754           }\n 755       }\n",
            "cost": 0.06222,
            "harness_id": "TikaTwo",
            "sanitizer": "Remote Code Execution",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java:721:39",
            "status": "corpus",
            "valid_path": "NO",
            "id": 302
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-two/src/main/java/com/aixcc/tika/harnesses/two/TikaTwo.java:\n20       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n21   \n22           InputStream stream = new BufferedInputStream(new ByteArrayInputStream(input));\n23   \n24           // null metadata indicates html content type for JSoupParser\n25           Metadata metadata = new Metadata();\n26           \n27           ContentHandler handler = new DefaultHandler();\n28   \n29           ParseContext context = new ParseContext();\n30           context.set(Parser.class, new CompositeExternalParser());\n31   \n32           (new JSoupParser()).parse(stream, handler, metadata, context);\n33   \n34           for (String name : metadata.names()) {\n35               System.out.println(name + \": \" + metadata.get(name));\n36           }\n37   \n38       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/JSoupParser.java:\n 76       public JSoupParser() {\n 77           super();\n 78       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/AbstractEncodingDetectorParser.java:\n33       public AbstractEncodingDetectorParser() {\n34           encodingDetector = new DefaultEncodingDetector();\n35       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/detect/DefaultEncodingDetector.java:\n40       public DefaultEncodingDetector() {\n41           this(new ServiceLoader(DefaultEncodingDetector.class.getClassLoader()));\n42       }\n44       public DefaultEncodingDetector(ServiceLoader loader) {\n45           super(loader.loadServiceProviders(EncodingDetector.class));\n46       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java:\n251       public <T> List<T> loadServiceProviders(Class<T> iface) {\n252           List<T> tmp = new ArrayList<>();\n253           tmp.addAll(loadDynamicServiceProviders(iface));\n254           tmp.addAll(loadStaticServiceProviders(iface));\n255   \n256           List<T> providers = new ArrayList<>();\n257           Set<String> seen = new HashSet<>();\n258           for (T provider : tmp) {\n259               if (! seen.contains(provider.getClass().getCanonicalName())) {\n260                   providers.add(provider);\n261                   seen.add(provider.getClass().getCanonicalName());\n262               }\n263           }\n264           return providers;\n265       }\n324       public <T> List<T> loadStaticServiceProviders(Class<T> iface) {\n325           return loadStaticServiceProviders(iface, Collections.EMPTY_SET);\n326       }\n339       @SuppressWarnings(\"unchecked\")\n340       public <T> List<T> loadStaticServiceProviders(Class<T> iface,\n341                                                     Collection<Class<? extends T>> excludes) {\n342           List<T> providers = new ArrayList<>();\n343   \n344           if (loader != null) {\n345               List<String> names = identifyStaticServiceProviders(iface);\n346               for (String name : names) {\n347                   try {\n348                       Class<?> klass = loader.loadClass(name);\n349                       if (iface.isAssignableFrom(klass)) {\n350                           boolean shouldExclude = false;\n351                           for (Class<? extends T> ex : excludes) {\n352                               if (ex.isAssignableFrom(klass)) {\n353                                   shouldExclude = true;\n354                                   break;\n355                               }\n356                           }\n357                           if (!shouldExclude) {\n358                               T instance = ServiceLoaderUtils.newInstance(klass, this);\n359                               if (instance instanceof Initializable) {\n360                                   ((Initializable) instance).initialize(Collections.EMPTY_MAP);\n361                                   ((Initializable) instance)\n362                                           .checkInitialization(initializableProblemHandler);\n363                               }\n364                               providers.add(instance);\n365                           }\n366                       } else {\n367                           throw new TikaConfigException(\n368                                   \"Class \" + name + \" is not of type: \" + iface);\n369                       }\n370                   } catch (Throwable t) {\n371                       handler.handleLoadError(name, t);\n372                   }\n373               }\n374           }\n375           return providers;\n376       }\n\nsrc/tika/tika-pipes/tika-pipes-reporters/tika-pipes-reporter-jdbc/src/main/java/org/apache/tika/pipes/reporters/jdbc/JDBCPipesReporter.java:\n 85       @Override\n 86       public void initialize(Map<String, Param> params) throws TikaConfigException {\n 87           super.initialize(params);\n 88           if (StringUtils.isBlank(connectionString)) {\n 89               throw new TikaConfigException(\"Must specify a connectionString\");\n 90           }\n 91           if (reportVariables == null) {\n 92               reportVariables = new ArrayList<>();\n 93               reportVariables.add(\"id\");\n 94               reportVariables.add(\"status\");\n 95               reportVariables.add(\"timestamp\");\n 96           }\n 97           if (reportSql == null) {\n 98               reportSql = \"insert into \" + getTableName() + \" (id, status, timestamp) values (?,?,?)\";\n 99           }\n100           ReportWorker reportWorker = new ReportWorker(connectionString, postConnectionString,\n101                   queue, cacheSize, reportWithinMs);\n102           reportWorker.init();\n103           reportWorkerFuture = CompletableFuture.runAsync(reportWorker);\n104       }\n320           public void init() throws TikaConfigException {\n321               try {\n322                   createConnection();\n323                   if (isCreateTable()) {\n324                       createTable();\n325                   }\n326                   //table must exist for this to work\n327                   createPreparedStatement();\n328               } catch (SQLException e) {\n329                   throw new TikaConfigException(\"Problem creating connection, etc\", e);\n330               }\n331           }\n428           private void createTable() throws SQLException {\n429               try (Statement st = connection.createStatement()) {\n430                   String sql = \"drop table if exists \" + getTableName();\n431                   st.execute(sql);\n432                   sql = \"create table \" + getTableName() + \" (id varchar(1024), status varchar(32), \" +\n433                           \"timestamp timestamp with time zone)\";\n434                   st.execute(sql);\n435               }\n436           }\n",
            "cost": 0.058355000000000004,
            "harness_id": "TikaTwo",
            "sanitizer": "SQL Injection",
            "sink": "src/tika/tika-pipes/tika-pipes-reporters/tika-pipes-reporter-jdbc/src/main/java/org/apache/tika/pipes/reporters/jdbc/JDBCPipesReporter.java:431:28",
            "status": "corpus",
            "valid_path": "NO",
            "id": 303
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-two/src/main/java/com/aixcc/tika/harnesses/two/TikaTwo.java:\n20       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n21   \n22           InputStream stream = new BufferedInputStream(new ByteArrayInputStream(input));\n23   \n24           // null metadata indicates html content type for JSoupParser\n25           Metadata metadata = new Metadata();\n26           \n27           ContentHandler handler = new DefaultHandler();\n28   \n29           ParseContext context = new ParseContext();\n30           context.set(Parser.class, new CompositeExternalParser());\n31   \n32           (new JSoupParser()).parse(stream, handler, metadata, context);\n33   \n34           for (String name : metadata.names()) {\n35               System.out.println(name + \": \" + metadata.get(name));\n36           }\n37   \n38       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/JSoupParser.java:\n 76       public JSoupParser() {\n 77           super();\n 78       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/AbstractEncodingDetectorParser.java:\n33       public AbstractEncodingDetectorParser() {\n34           encodingDetector = new DefaultEncodingDetector();\n35       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/detect/DefaultEncodingDetector.java:\n40       public DefaultEncodingDetector() {\n41           this(new ServiceLoader(DefaultEncodingDetector.class.getClassLoader()));\n42       }\n44       public DefaultEncodingDetector(ServiceLoader loader) {\n45           super(loader.loadServiceProviders(EncodingDetector.class));\n46       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java:\n251       public <T> List<T> loadServiceProviders(Class<T> iface) {\n252           List<T> tmp = new ArrayList<>();\n253           tmp.addAll(loadDynamicServiceProviders(iface));\n254           tmp.addAll(loadStaticServiceProviders(iface));\n255   \n256           List<T> providers = new ArrayList<>();\n257           Set<String> seen = new HashSet<>();\n258           for (T provider : tmp) {\n259               if (! seen.contains(provider.getClass().getCanonicalName())) {\n260                   providers.add(provider);\n261                   seen.add(provider.getClass().getCanonicalName());\n262               }\n263           }\n264           return providers;\n265       }\n324       public <T> List<T> loadStaticServiceProviders(Class<T> iface) {\n325           return loadStaticServiceProviders(iface, Collections.EMPTY_SET);\n326       }\n339       @SuppressWarnings(\"unchecked\")\n340       public <T> List<T> loadStaticServiceProviders(Class<T> iface,\n341                                                     Collection<Class<? extends T>> excludes) {\n342           List<T> providers = new ArrayList<>();\n343   \n344           if (loader != null) {\n345               List<String> names = identifyStaticServiceProviders(iface);\n346               for (String name : names) {\n347                   try {\n348                       Class<?> klass = loader.loadClass(name);\n349                       if (iface.isAssignableFrom(klass)) {\n350                           boolean shouldExclude = false;\n351                           for (Class<? extends T> ex : excludes) {\n352                               if (ex.isAssignableFrom(klass)) {\n353                                   shouldExclude = true;\n354                                   break;\n355                               }\n356                           }\n357                           if (!shouldExclude) {\n358                               T instance = ServiceLoaderUtils.newInstance(klass, this);\n359                               if (instance instanceof Initializable) {\n360                                   ((Initializable) instance).initialize(Collections.EMPTY_MAP);\n361                                   ((Initializable) instance)\n362                                           .checkInitialization(initializableProblemHandler);\n363                               }\n364                               providers.add(instance);\n365                           }\n366                       } else {\n367                           throw new TikaConfigException(\n368                                   \"Class \" + name + \" is not of type: \" + iface);\n369                       }\n370                   } catch (Throwable t) {\n371                       handler.handleLoadError(name, t);\n372                   }\n373               }\n374           }\n375           return providers;\n376       }\n\nsrc/tika/tika-pipes/tika-pipes-reporters/tika-pipes-reporter-jdbc/src/main/java/org/apache/tika/pipes/reporters/jdbc/JDBCPipesReporter.java:\n 85       @Override\n 86       public void initialize(Map<String, Param> params) throws TikaConfigException {\n 87           super.initialize(params);\n 88           if (StringUtils.isBlank(connectionString)) {\n 89               throw new TikaConfigException(\"Must specify a connectionString\");\n 90           }\n 91           if (reportVariables == null) {\n 92               reportVariables = new ArrayList<>();\n 93               reportVariables.add(\"id\");\n 94               reportVariables.add(\"status\");\n 95               reportVariables.add(\"timestamp\");\n 96           }\n 97           if (reportSql == null) {\n 98               reportSql = \"insert into \" + getTableName() + \" (id, status, timestamp) values (?,?,?)\";\n 99           }\n100           ReportWorker reportWorker = new ReportWorker(connectionString, postConnectionString,\n101                   queue, cacheSize, reportWithinMs);\n102           reportWorker.init();\n103           reportWorkerFuture = CompletableFuture.runAsync(reportWorker);\n104       }\n320           public void init() throws TikaConfigException {\n321               try {\n322                   createConnection();\n323                   if (isCreateTable()) {\n324                       createTable();\n325                   }\n326                   //table must exist for this to work\n327                   createPreparedStatement();\n328               } catch (SQLException e) {\n329                   throw new TikaConfigException(\"Problem creating connection, etc\", e);\n330               }\n331           }\n428           private void createTable() throws SQLException {\n429               try (Statement st = connection.createStatement()) {\n430                   String sql = \"drop table if exists \" + getTableName();\n431                   st.execute(sql);\n432                   sql = \"create table \" + getTableName() + \" (id varchar(1024), status varchar(32), \" +\n433                           \"timestamp timestamp with time zone)\";\n434                   st.execute(sql);\n435               }\n436           }\n",
            "cost": 0.060105,
            "harness_id": "TikaTwo",
            "sanitizer": "SQL Injection",
            "sink": "src/tika/tika-pipes/tika-pipes-reporters/tika-pipes-reporter-jdbc/src/main/java/org/apache/tika/pipes/reporters/jdbc/JDBCPipesReporter.java:434:28",
            "status": "corpus",
            "valid_path": "NO",
            "id": 304
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-two/src/main/java/com/aixcc/tika/harnesses/two/TikaTwo.java:\n20       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n21   \n22           InputStream stream = new BufferedInputStream(new ByteArrayInputStream(input));\n23   \n24           // null metadata indicates html content type for JSoupParser\n25           Metadata metadata = new Metadata();\n26           \n27           ContentHandler handler = new DefaultHandler();\n28   \n29           ParseContext context = new ParseContext();\n30           context.set(Parser.class, new CompositeExternalParser());\n31   \n32           (new JSoupParser()).parse(stream, handler, metadata, context);\n33   \n34           for (String name : metadata.names()) {\n35               System.out.println(name + \": \" + metadata.get(name));\n36           }\n37   \n38       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/JSoupParser.java:\n 76       public JSoupParser() {\n 77           super();\n 78       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/AbstractEncodingDetectorParser.java:\n33       public AbstractEncodingDetectorParser() {\n34           encodingDetector = new DefaultEncodingDetector();\n35       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/detect/DefaultEncodingDetector.java:\n40       public DefaultEncodingDetector() {\n41           this(new ServiceLoader(DefaultEncodingDetector.class.getClassLoader()));\n42       }\n44       public DefaultEncodingDetector(ServiceLoader loader) {\n45           super(loader.loadServiceProviders(EncodingDetector.class));\n46       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java:\n251       public <T> List<T> loadServiceProviders(Class<T> iface) {\n252           List<T> tmp = new ArrayList<>();\n253           tmp.addAll(loadDynamicServiceProviders(iface));\n254           tmp.addAll(loadStaticServiceProviders(iface));\n255   \n256           List<T> providers = new ArrayList<>();\n257           Set<String> seen = new HashSet<>();\n258           for (T provider : tmp) {\n259               if (! seen.contains(provider.getClass().getCanonicalName())) {\n260                   providers.add(provider);\n261                   seen.add(provider.getClass().getCanonicalName());\n262               }\n263           }\n264           return providers;\n265       }\n324       public <T> List<T> loadStaticServiceProviders(Class<T> iface) {\n325           return loadStaticServiceProviders(iface, Collections.EMPTY_SET);\n326       }\n339       @SuppressWarnings(\"unchecked\")\n340       public <T> List<T> loadStaticServiceProviders(Class<T> iface,\n341                                                     Collection<Class<? extends T>> excludes) {\n342           List<T> providers = new ArrayList<>();\n343   \n344           if (loader != null) {\n345               List<String> names = identifyStaticServiceProviders(iface);\n346               for (String name : names) {\n347                   try {\n348                       Class<?> klass = loader.loadClass(name);\n349                       if (iface.isAssignableFrom(klass)) {\n350                           boolean shouldExclude = false;\n351                           for (Class<? extends T> ex : excludes) {\n352                               if (ex.isAssignableFrom(klass)) {\n353                                   shouldExclude = true;\n354                                   break;\n355                               }\n356                           }\n357                           if (!shouldExclude) {\n358                               T instance = ServiceLoaderUtils.newInstance(klass, this);\n359                               if (instance instanceof Initializable) {\n360                                   ((Initializable) instance).initialize(Collections.EMPTY_MAP);\n361                                   ((Initializable) instance)\n362                                           .checkInitialization(initializableProblemHandler);\n363                               }\n364                               providers.add(instance);\n365                           }\n366                       } else {\n367                           throw new TikaConfigException(\n368                                   \"Class \" + name + \" is not of type: \" + iface);\n369                       }\n370                   } catch (Throwable t) {\n371                       handler.handleLoadError(name, t);\n372                   }\n373               }\n374           }\n375           return providers;\n376       }\n\nsrc/tika/tika-pipes/tika-pipes-reporters/tika-pipes-reporter-jdbc/src/main/java/org/apache/tika/pipes/reporters/jdbc/JDBCPipesReporter.java:\n 85       @Override\n 86       public void initialize(Map<String, Param> params) throws TikaConfigException {\n 87           super.initialize(params);\n 88           if (StringUtils.isBlank(connectionString)) {\n 89               throw new TikaConfigException(\"Must specify a connectionString\");\n 90           }\n 91           if (reportVariables == null) {\n 92               reportVariables = new ArrayList<>();\n 93               reportVariables.add(\"id\");\n 94               reportVariables.add(\"status\");\n 95               reportVariables.add(\"timestamp\");\n 96           }\n 97           if (reportSql == null) {\n 98               reportSql = \"insert into \" + getTableName() + \" (id, status, timestamp) values (?,?,?)\";\n 99           }\n100           ReportWorker reportWorker = new ReportWorker(connectionString, postConnectionString,\n101                   queue, cacheSize, reportWithinMs);\n102           reportWorker.init();\n103           reportWorkerFuture = CompletableFuture.runAsync(reportWorker);\n104       }\n320           public void init() throws TikaConfigException {\n321               try {\n322                   createConnection();\n323                   if (isCreateTable()) {\n324                       createTable();\n325                   }\n326                   //table must exist for this to work\n327                   createPreparedStatement();\n328               } catch (SQLException e) {\n329                   throw new TikaConfigException(\"Problem creating connection, etc\", e);\n330               }\n331           }\n476           private void createConnection() throws SQLException {\n477               connection = DriverManager.getConnection(connectionString);\n478               if (postConnectionString.isPresent()) {\n479                   try (Statement st = connection.createStatement()) {\n480                       st.execute(postConnectionString.get());\n481                   }\n482               }\n483           }\n",
            "cost": 0.057475,
            "harness_id": "TikaTwo",
            "sanitizer": "SQL Injection",
            "sink": "src/tika/tika-pipes/tika-pipes-reporters/tika-pipes-reporter-jdbc/src/main/java/org/apache/tika/pipes/reporters/jdbc/JDBCPipesReporter.java:480:32",
            "status": "corpus",
            "valid_path": "NO",
            "id": 305
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-two/src/main/java/com/aixcc/tika/harnesses/two/TikaTwo.java:\n20       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n21   \n22           InputStream stream = new BufferedInputStream(new ByteArrayInputStream(input));\n23   \n24           // null metadata indicates html content type for JSoupParser\n25           Metadata metadata = new Metadata();\n26           \n27           ContentHandler handler = new DefaultHandler();\n28   \n29           ParseContext context = new ParseContext();\n30           context.set(Parser.class, new CompositeExternalParser());\n31   \n32           (new JSoupParser()).parse(stream, handler, metadata, context);\n33   \n34           for (String name : metadata.names()) {\n35               System.out.println(name + \": \" + metadata.get(name));\n36           }\n37   \n38       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/JSoupParser.java:\n 76       public JSoupParser() {\n 77           super();\n 78       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/AbstractEncodingDetectorParser.java:\n33       public AbstractEncodingDetectorParser() {\n34           encodingDetector = new DefaultEncodingDetector();\n35       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/detect/DefaultEncodingDetector.java:\n40       public DefaultEncodingDetector() {\n41           this(new ServiceLoader(DefaultEncodingDetector.class.getClassLoader()));\n42       }\n44       public DefaultEncodingDetector(ServiceLoader loader) {\n45           super(loader.loadServiceProviders(EncodingDetector.class));\n46       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java:\n251       public <T> List<T> loadServiceProviders(Class<T> iface) {\n252           List<T> tmp = new ArrayList<>();\n253           tmp.addAll(loadDynamicServiceProviders(iface));\n254           tmp.addAll(loadStaticServiceProviders(iface));\n255   \n256           List<T> providers = new ArrayList<>();\n257           Set<String> seen = new HashSet<>();\n258           for (T provider : tmp) {\n259               if (! seen.contains(provider.getClass().getCanonicalName())) {\n260                   providers.add(provider);\n261                   seen.add(provider.getClass().getCanonicalName());\n262               }\n263           }\n264           return providers;\n265       }\n324       public <T> List<T> loadStaticServiceProviders(Class<T> iface) {\n325           return loadStaticServiceProviders(iface, Collections.EMPTY_SET);\n326       }\n339       @SuppressWarnings(\"unchecked\")\n340       public <T> List<T> loadStaticServiceProviders(Class<T> iface,\n341                                                     Collection<Class<? extends T>> excludes) {\n342           List<T> providers = new ArrayList<>();\n343   \n344           if (loader != null) {\n345               List<String> names = identifyStaticServiceProviders(iface);\n346               for (String name : names) {\n347                   try {\n348                       Class<?> klass = loader.loadClass(name);\n349                       if (iface.isAssignableFrom(klass)) {\n350                           boolean shouldExclude = false;\n351                           for (Class<? extends T> ex : excludes) {\n352                               if (ex.isAssignableFrom(klass)) {\n353                                   shouldExclude = true;\n354                                   break;\n355                               }\n356                           }\n357                           if (!shouldExclude) {\n358                               T instance = ServiceLoaderUtils.newInstance(klass, this);\n359                               if (instance instanceof Initializable) {\n360                                   ((Initializable) instance).initialize(Collections.EMPTY_MAP);\n361                                   ((Initializable) instance)\n362                                           .checkInitialization(initializableProblemHandler);\n363                               }\n364                               providers.add(instance);\n365                           }\n366                       } else {\n367                           throw new TikaConfigException(\n368                                   \"Class \" + name + \" is not of type: \" + iface);\n369                       }\n370                   } catch (Throwable t) {\n371                       handler.handleLoadError(name, t);\n372                   }\n373               }\n374           }\n375           return providers;\n376       }\n\nsrc/tika/tika-pipes/tika-emitters/tika-emitter-jdbc/src/main/java/org/apache/tika/pipes/emitter/jdbc/JDBCEmitter.java:\n535       @Override\n536       public void initialize(Map<String, Param> params) throws TikaConfigException {\n537           parseColTypes();\n538           setStringNormalizer();\n539           try {\n540               createConnection();\n541           } catch (SQLException e) {\n542               throw new TikaConfigException(\"couldn't open connection: \" + connectionString, e);\n543           }\n544           if (!StringUtils.isBlank(createTable)) {\n545               //synchronize table creation\n546               READ_WRITE_LOCK.writeLock().lock();\n547               try {\n548                   String tableCreationString = connectionString + \" \" + createTable;\n549                   if (!TABLES_CREATED.contains(tableCreationString)) {\n550                       try (Statement st = connection.createStatement()) {\n551                           st.execute(createTable);\n552                           if (!StringUtils.isBlank(alterTable)) {\n553                               st.execute(alterTable);\n554                           }\n555                           TABLES_CREATED.add(tableCreationString);\n556                       } catch (SQLException e) {\n557                           throw new TikaConfigException(\"can't create table\", e);\n558                       }\n559                   }\n560               } finally {\n561                   READ_WRITE_LOCK.writeLock().unlock();\n562               }\n563           }\n564           try {\n565               insertStatement = connection.prepareStatement(insert);\n566           } catch (SQLException e) {\n567               throw new TikaConfigException(\"can't create insert statement\", e);\n568           }\n569       }\n",
            "cost": 0.05439,
            "harness_id": "TikaTwo",
            "sanitizer": "SQL Injection",
            "sink": "src/tika/tika-pipes/tika-emitters/tika-emitter-jdbc/src/main/java/org/apache/tika/pipes/emitter/jdbc/JDBCEmitter.java:551:36",
            "status": "corpus",
            "valid_path": "NO",
            "id": 306
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-two/src/main/java/com/aixcc/tika/harnesses/two/TikaTwo.java:\n20       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n21   \n22           InputStream stream = new BufferedInputStream(new ByteArrayInputStream(input));\n23   \n24           // null metadata indicates html content type for JSoupParser\n25           Metadata metadata = new Metadata();\n26           \n27           ContentHandler handler = new DefaultHandler();\n28   \n29           ParseContext context = new ParseContext();\n30           context.set(Parser.class, new CompositeExternalParser());\n31   \n32           (new JSoupParser()).parse(stream, handler, metadata, context);\n33   \n34           for (String name : metadata.names()) {\n35               System.out.println(name + \": \" + metadata.get(name));\n36           }\n37   \n38       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/JSoupParser.java:\n 76       public JSoupParser() {\n 77           super();\n 78       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/AbstractEncodingDetectorParser.java:\n33       public AbstractEncodingDetectorParser() {\n34           encodingDetector = new DefaultEncodingDetector();\n35       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/detect/DefaultEncodingDetector.java:\n40       public DefaultEncodingDetector() {\n41           this(new ServiceLoader(DefaultEncodingDetector.class.getClassLoader()));\n42       }\n44       public DefaultEncodingDetector(ServiceLoader loader) {\n45           super(loader.loadServiceProviders(EncodingDetector.class));\n46       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java:\n251       public <T> List<T> loadServiceProviders(Class<T> iface) {\n252           List<T> tmp = new ArrayList<>();\n253           tmp.addAll(loadDynamicServiceProviders(iface));\n254           tmp.addAll(loadStaticServiceProviders(iface));\n255   \n256           List<T> providers = new ArrayList<>();\n257           Set<String> seen = new HashSet<>();\n258           for (T provider : tmp) {\n259               if (! seen.contains(provider.getClass().getCanonicalName())) {\n260                   providers.add(provider);\n261                   seen.add(provider.getClass().getCanonicalName());\n262               }\n263           }\n264           return providers;\n265       }\n324       public <T> List<T> loadStaticServiceProviders(Class<T> iface) {\n325           return loadStaticServiceProviders(iface, Collections.EMPTY_SET);\n326       }\n339       @SuppressWarnings(\"unchecked\")\n340       public <T> List<T> loadStaticServiceProviders(Class<T> iface,\n341                                                     Collection<Class<? extends T>> excludes) {\n342           List<T> providers = new ArrayList<>();\n343   \n344           if (loader != null) {\n345               List<String> names = identifyStaticServiceProviders(iface);\n346               for (String name : names) {\n347                   try {\n348                       Class<?> klass = loader.loadClass(name);\n349                       if (iface.isAssignableFrom(klass)) {\n350                           boolean shouldExclude = false;\n351                           for (Class<? extends T> ex : excludes) {\n352                               if (ex.isAssignableFrom(klass)) {\n353                                   shouldExclude = true;\n354                                   break;\n355                               }\n356                           }\n357                           if (!shouldExclude) {\n358                               T instance = ServiceLoaderUtils.newInstance(klass, this);\n359                               if (instance instanceof Initializable) {\n360                                   ((Initializable) instance).initialize(Collections.EMPTY_MAP);\n361                                   ((Initializable) instance)\n362                                           .checkInitialization(initializableProblemHandler);\n363                               }\n364                               providers.add(instance);\n365                           }\n366                       } else {\n367                           throw new TikaConfigException(\n368                                   \"Class \" + name + \" is not of type: \" + iface);\n369                       }\n370                   } catch (Throwable t) {\n371                       handler.handleLoadError(name, t);\n372                   }\n373               }\n374           }\n375           return providers;\n376       }\n\nsrc/tika/tika-pipes/tika-emitters/tika-emitter-jdbc/src/main/java/org/apache/tika/pipes/emitter/jdbc/JDBCEmitter.java:\n535       @Override\n536       public void initialize(Map<String, Param> params) throws TikaConfigException {\n537           parseColTypes();\n538           setStringNormalizer();\n539           try {\n540               createConnection();\n541           } catch (SQLException e) {\n542               throw new TikaConfigException(\"couldn't open connection: \" + connectionString, e);\n543           }\n544           if (!StringUtils.isBlank(createTable)) {\n545               //synchronize table creation\n546               READ_WRITE_LOCK.writeLock().lock();\n547               try {\n548                   String tableCreationString = connectionString + \" \" + createTable;\n549                   if (!TABLES_CREATED.contains(tableCreationString)) {\n550                       try (Statement st = connection.createStatement()) {\n551                           st.execute(createTable);\n552                           if (!StringUtils.isBlank(alterTable)) {\n553                               st.execute(alterTable);\n554                           }\n555                           TABLES_CREATED.add(tableCreationString);\n556                       } catch (SQLException e) {\n557                           throw new TikaConfigException(\"can't create table\", e);\n558                       }\n559                   }\n560               } finally {\n561                   READ_WRITE_LOCK.writeLock().unlock();\n562               }\n563           }\n564           try {\n565               insertStatement = connection.prepareStatement(insert);\n566           } catch (SQLException e) {\n567               throw new TikaConfigException(\"can't create insert statement\", e);\n568           }\n569       }\n",
            "cost": 0.05204,
            "harness_id": "TikaTwo",
            "sanitizer": "SQL Injection",
            "sink": "src/tika/tika-pipes/tika-emitters/tika-emitter-jdbc/src/main/java/org/apache/tika/pipes/emitter/jdbc/JDBCEmitter.java:553:40",
            "status": "corpus",
            "valid_path": "NO",
            "id": 307
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-two/src/main/java/com/aixcc/tika/harnesses/two/TikaTwo.java:\n20       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n21   \n22           InputStream stream = new BufferedInputStream(new ByteArrayInputStream(input));\n23   \n24           // null metadata indicates html content type for JSoupParser\n25           Metadata metadata = new Metadata();\n26           \n27           ContentHandler handler = new DefaultHandler();\n28   \n29           ParseContext context = new ParseContext();\n30           context.set(Parser.class, new CompositeExternalParser());\n31   \n32           (new JSoupParser()).parse(stream, handler, metadata, context);\n33   \n34           for (String name : metadata.names()) {\n35               System.out.println(name + \": \" + metadata.get(name));\n36           }\n37   \n38       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/JSoupParser.java:\n 76       public JSoupParser() {\n 77           super();\n 78       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/AbstractEncodingDetectorParser.java:\n33       public AbstractEncodingDetectorParser() {\n34           encodingDetector = new DefaultEncodingDetector();\n35       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/detect/DefaultEncodingDetector.java:\n40       public DefaultEncodingDetector() {\n41           this(new ServiceLoader(DefaultEncodingDetector.class.getClassLoader()));\n42       }\n44       public DefaultEncodingDetector(ServiceLoader loader) {\n45           super(loader.loadServiceProviders(EncodingDetector.class));\n46       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java:\n251       public <T> List<T> loadServiceProviders(Class<T> iface) {\n252           List<T> tmp = new ArrayList<>();\n253           tmp.addAll(loadDynamicServiceProviders(iface));\n254           tmp.addAll(loadStaticServiceProviders(iface));\n255   \n256           List<T> providers = new ArrayList<>();\n257           Set<String> seen = new HashSet<>();\n258           for (T provider : tmp) {\n259               if (! seen.contains(provider.getClass().getCanonicalName())) {\n260                   providers.add(provider);\n261                   seen.add(provider.getClass().getCanonicalName());\n262               }\n263           }\n264           return providers;\n265       }\n324       public <T> List<T> loadStaticServiceProviders(Class<T> iface) {\n325           return loadStaticServiceProviders(iface, Collections.EMPTY_SET);\n326       }\n339       @SuppressWarnings(\"unchecked\")\n340       public <T> List<T> loadStaticServiceProviders(Class<T> iface,\n341                                                     Collection<Class<? extends T>> excludes) {\n342           List<T> providers = new ArrayList<>();\n343   \n344           if (loader != null) {\n345               List<String> names = identifyStaticServiceProviders(iface);\n346               for (String name : names) {\n347                   try {\n348                       Class<?> klass = loader.loadClass(name);\n349                       if (iface.isAssignableFrom(klass)) {\n350                           boolean shouldExclude = false;\n351                           for (Class<? extends T> ex : excludes) {\n352                               if (ex.isAssignableFrom(klass)) {\n353                                   shouldExclude = true;\n354                                   break;\n355                               }\n356                           }\n357                           if (!shouldExclude) {\n358                               T instance = ServiceLoaderUtils.newInstance(klass, this);\n359                               if (instance instanceof Initializable) {\n360                                   ((Initializable) instance).initialize(Collections.EMPTY_MAP);\n361                                   ((Initializable) instance)\n362                                           .checkInitialization(initializableProblemHandler);\n363                               }\n364                               providers.add(instance);\n365                           }\n366                       } else {\n367                           throw new TikaConfigException(\n368                                   \"Class \" + name + \" is not of type: \" + iface);\n369                       }\n370                   } catch (Throwable t) {\n371                       handler.handleLoadError(name, t);\n372                   }\n373               }\n374           }\n375           return providers;\n376       }\n\nsrc/tika/tika-pipes/tika-emitters/tika-emitter-jdbc/src/main/java/org/apache/tika/pipes/emitter/jdbc/JDBCEmitter.java:\n379       private void createConnection() throws SQLException {\n380           connection = DriverManager.getConnection(connectionString);\n381           connection.setAutoCommit(false);\n382           if (postConnectionString.isPresent()) {\n383               try (Statement st = connection.createStatement()) {\n384                   st.execute(postConnectionString.get());\n385               }\n386           }\n387       }\n535       @Override\n536       public void initialize(Map<String, Param> params) throws TikaConfigException {\n537           parseColTypes();\n538           setStringNormalizer();\n539           try {\n540               createConnection();\n541           } catch (SQLException e) {\n542               throw new TikaConfigException(\"couldn't open connection: \" + connectionString, e);\n543           }\n544           if (!StringUtils.isBlank(createTable)) {\n545               //synchronize table creation\n546               READ_WRITE_LOCK.writeLock().lock();\n547               try {\n548                   String tableCreationString = connectionString + \" \" + createTable;\n549                   if (!TABLES_CREATED.contains(tableCreationString)) {\n550                       try (Statement st = connection.createStatement()) {\n551                           st.execute(createTable);\n552                           if (!StringUtils.isBlank(alterTable)) {\n553                               st.execute(alterTable);\n554                           }\n555                           TABLES_CREATED.add(tableCreationString);\n556                       } catch (SQLException e) {\n557                           throw new TikaConfigException(\"can't create table\", e);\n558                       }\n559                   }\n560               } finally {\n561                   READ_WRITE_LOCK.writeLock().unlock();\n562               }\n563           }\n564           try {\n565               insertStatement = connection.prepareStatement(insert);\n566           } catch (SQLException e) {\n567               throw new TikaConfigException(\"can't create insert statement\", e);\n568           }\n569       }\n",
            "cost": 0.053290000000000004,
            "harness_id": "TikaTwo",
            "sanitizer": "SQL Injection",
            "sink": "src/tika/tika-pipes/tika-emitters/tika-emitter-jdbc/src/main/java/org/apache/tika/pipes/emitter/jdbc/JDBCEmitter.java:384:28",
            "status": "corpus",
            "valid_path": "NO",
            "id": 308
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-two/src/main/java/com/aixcc/tika/harnesses/two/TikaTwo.java:\n20       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n21   \n22           InputStream stream = new BufferedInputStream(new ByteArrayInputStream(input));\n23   \n24           // null metadata indicates html content type for JSoupParser\n25           Metadata metadata = new Metadata();\n26           \n27           ContentHandler handler = new DefaultHandler();\n28   \n29           ParseContext context = new ParseContext();\n30           context.set(Parser.class, new CompositeExternalParser());\n31   \n32           (new JSoupParser()).parse(stream, handler, metadata, context);\n33   \n34           for (String name : metadata.names()) {\n35               System.out.println(name + \": \" + metadata.get(name));\n36           }\n37   \n38       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/external/CompositeExternalParser.java:\n36       public CompositeExternalParser() throws IOException, TikaException {\n37           this(new MediaTypeRegistry());\n38       }\n40       @SuppressWarnings(\"unchecked\")\n41       public CompositeExternalParser(MediaTypeRegistry registry) throws IOException, TikaException {\n42           super(registry, (List<Parser>) (List<? extends Parser>) ExternalParsersFactory.create());\n43       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParsersFactory.java:\n43       public static List<ExternalParser> create() throws IOException, TikaException {\n44           return create(new ServiceLoader());\n45       }\n47       public static List<ExternalParser> create(ServiceLoader loader)\n48               throws IOException, TikaException {\n49           return create(\"tika-external-parsers.xml\", loader);\n50       }\n52       public static List<ExternalParser> create(String filename, ServiceLoader loader)\n53               throws IOException, TikaException {\n54           String filepath =\n55                   ExternalParsersFactory.class.getPackage().getName().replace('.', '/') + \"/\" +\n56                           filename;\n57           Enumeration<URL> files = loader.findServiceResources(filepath);\n58           ArrayList<URL> list = Collections.list(files);\n59           URL[] urls = list.toArray(new URL[0]);\n60           return create(urls);\n61       }\n63       public static List<ExternalParser> create(URL... urls) throws IOException, TikaException {\n64           List<ExternalParser> parsers = new ArrayList<>();\n65           for (URL url : urls) {\n66               try (InputStream stream = url.openStream()) {\n67                   parsers.addAll(ExternalParsersConfigReader.read(stream));\n68               }\n69           }\n70           return parsers;\n71       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParsersConfigReader.java:\n 56       public static List<ExternalParser> read(InputStream stream) throws TikaException, IOException {\n 57           try {\n 58               DocumentBuilder builder = XMLReaderUtils.getDocumentBuilder();\n 59               Document document = builder.parse(new InputSource(stream));\n 60               return read(document);\n 61           } catch (SAXException e) {\n 62               throw new TikaException(\"Invalid parser configuration\", e);\n 63           }\n 64       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java:\n 244       public static DocumentBuilderFactory getDocumentBuilderFactory() {\n 245           //borrowed from Apache POI\n 246           DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n 247           if (LOG.isDebugEnabled()) {\n 248               LOG.debug(\"DocumentBuilderFactory class {}\", factory.getClass());\n 249           }\n 250   \n 251           factory.setExpandEntityReferences(false);\n 252           factory.setNamespaceAware(true);\n 253           factory.setValidating(false);\n 254   \n 255           trySetSAXFeature(factory, XMLConstants.FEATURE_SECURE_PROCESSING, true);\n 256           trySetSAXFeature(factory, \"http://xml.org/sax/features/external-general-entities\", false);\n 257           trySetSAXFeature(factory, \"http://xml.org/sax/features/external-parameter-entities\", false);\n 258           trySetSAXFeature(factory, \"http://apache.org/xml/features/nonvalidating/load-external-dtd\",\n 259                   false);\n 260           trySetSAXFeature(factory, \"http://apache.org/xml/features/nonvalidating/load-dtd-grammar\",\n 261                   false);\n 262           trySetXercesSecurityManager(factory);\n 263           return factory;\n 264       }\n 276       public static DocumentBuilder getDocumentBuilder() throws TikaException {\n 277           try {\n 278               DocumentBuilderFactory documentBuilderFactory = getDocumentBuilderFactory();\n 279               DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n 280               documentBuilder.setEntityResolver(IGNORING_SAX_ENTITY_RESOLVER);\n 281               documentBuilder.setErrorHandler(null);\n 282               return documentBuilder;\n 283           } catch (ParserConfigurationException e) {\n 284               throw new TikaException(\"XML parser not available\", e);\n 285           }\n 286       }\n 713       private static void trySetXercesSecurityManager(DocumentBuilderFactory factory) {\n 714           //from POI\n 715           // Try built-in JVM one first, standalone if not\n 716           for (String securityManagerClassName : new String[]{\n 717                   //\"com.sun.org.apache.xerces.internal.util.SecurityManager\",\n 718                   XERCES_SECURITY_MANAGER}) {\n 719               try {\n 720                   Object mgr =\n 721                           Class.forName(securityManagerClassName).getDeclaredConstructor().newInstance();\n 722                   Method setLimit = mgr.getClass().getMethod(\"setEntityExpansionLimit\",\n 723                           Integer.TYPE);\n 724                   setLimit.invoke(mgr, MAX_ENTITY_EXPANSIONS);\n 725                   factory.setAttribute(XERCES_SECURITY_MANAGER_PROPERTY, mgr);\n 726                   // Stop once one can be setup without error\n 727                   return;\n 728               } catch (ClassNotFoundException e) {\n 729                   // continue without log, this is expected in some setups\n 730               } catch (Throwable e) {     // NOSONAR - also catch things like NoClassDefError here\n 731                   // throttle the log somewhat as it can spam the log otherwise\n 732                   if (System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {\n 733                       LOG.warn(\n 734                               \"SAX Security Manager could not be setup [log suppressed for 5 \" +\n 735                                       \"minutes]\",\n 736                               e);\n 737                       LAST_LOG = System.currentTimeMillis();\n 738                   }\n 739               }\n 740           }\n 741   \n 742           // separate old version of Xerces not found => use the builtin way of setting the property\n 743           try {\n 744               factory.setAttribute(\"http://www.oracle.com/xml/jaxp/properties/entityExpansionLimit\",\n 745                       MAX_ENTITY_EXPANSIONS);\n 746           } catch (IllegalArgumentException e) {\n 747               // NOSONAR - also catch things like NoClassDefError here\n 748               // throttle the log somewhat as it can spam the log otherwise\n 749               if (System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {\n 750                   LOG.warn(\"SAX Security Manager could not be setup [log suppressed for 5 minutes]\",\n 751                           e);\n 752                   LAST_LOG = System.currentTimeMillis();\n 753               }\n 754           }\n 755       }\n",
            "cost": 0.06222,
            "harness_id": "TikaTwo",
            "sanitizer": "load arbitrary library",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java:721:39",
            "status": "corpus",
            "valid_path": "NO",
            "id": 309
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-two/src/main/java/com/aixcc/tika/harnesses/two/TikaTwo.java:\n20       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n21   \n22           InputStream stream = new BufferedInputStream(new ByteArrayInputStream(input));\n23   \n24           // null metadata indicates html content type for JSoupParser\n25           Metadata metadata = new Metadata();\n26           \n27           ContentHandler handler = new DefaultHandler();\n28   \n29           ParseContext context = new ParseContext();\n30           context.set(Parser.class, new CompositeExternalParser());\n31   \n32           (new JSoupParser()).parse(stream, handler, metadata, context);\n33   \n34           for (String name : metadata.names()) {\n35               System.out.println(name + \": \" + metadata.get(name));\n36           }\n37   \n38       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/JSoupParser.java:\n 76       public JSoupParser() {\n 77           super();\n 78       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/AbstractEncodingDetectorParser.java:\n33       public AbstractEncodingDetectorParser() {\n34           encodingDetector = new DefaultEncodingDetector();\n35       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/detect/DefaultEncodingDetector.java:\n40       public DefaultEncodingDetector() {\n41           this(new ServiceLoader(DefaultEncodingDetector.class.getClassLoader()));\n42       }\n44       public DefaultEncodingDetector(ServiceLoader loader) {\n45           super(loader.loadServiceProviders(EncodingDetector.class));\n46       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java:\n251       public <T> List<T> loadServiceProviders(Class<T> iface) {\n252           List<T> tmp = new ArrayList<>();\n253           tmp.addAll(loadDynamicServiceProviders(iface));\n254           tmp.addAll(loadStaticServiceProviders(iface));\n255   \n256           List<T> providers = new ArrayList<>();\n257           Set<String> seen = new HashSet<>();\n258           for (T provider : tmp) {\n259               if (! seen.contains(provider.getClass().getCanonicalName())) {\n260                   providers.add(provider);\n261                   seen.add(provider.getClass().getCanonicalName());\n262               }\n263           }\n264           return providers;\n265       }\n324       public <T> List<T> loadStaticServiceProviders(Class<T> iface) {\n325           return loadStaticServiceProviders(iface, Collections.EMPTY_SET);\n326       }\n339       @SuppressWarnings(\"unchecked\")\n340       public <T> List<T> loadStaticServiceProviders(Class<T> iface,\n341                                                     Collection<Class<? extends T>> excludes) {\n342           List<T> providers = new ArrayList<>();\n343   \n344           if (loader != null) {\n345               List<String> names = identifyStaticServiceProviders(iface);\n346               for (String name : names) {\n347                   try {\n348                       Class<?> klass = loader.loadClass(name);\n349                       if (iface.isAssignableFrom(klass)) {\n350                           boolean shouldExclude = false;\n351                           for (Class<? extends T> ex : excludes) {\n352                               if (ex.isAssignableFrom(klass)) {\n353                                   shouldExclude = true;\n354                                   break;\n355                               }\n356                           }\n357                           if (!shouldExclude) {\n358                               T instance = ServiceLoaderUtils.newInstance(klass, this);\n359                               if (instance instanceof Initializable) {\n360                                   ((Initializable) instance).initialize(Collections.EMPTY_MAP);\n361                                   ((Initializable) instance)\n362                                           .checkInitialization(initializableProblemHandler);\n363                               }\n364                               providers.add(instance);\n365                           }\n366                       } else {\n367                           throw new TikaConfigException(\n368                                   \"Class \" + name + \" is not of type: \" + iface);\n369                       }\n370                   } catch (Throwable t) {\n371                       handler.handleLoadError(name, t);\n372                   }\n373               }\n374           }\n375           return providers;\n376       }\n",
            "cost": 0.04862,
            "harness_id": "TikaTwo",
            "sanitizer": "load arbitrary library",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java:348:55",
            "status": "corpus",
            "valid_path": "NO",
            "id": 310
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-two/src/main/java/com/aixcc/tika/harnesses/two/TikaTwo.java:\n20       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n21   \n22           InputStream stream = new BufferedInputStream(new ByteArrayInputStream(input));\n23   \n24           // null metadata indicates html content type for JSoupParser\n25           Metadata metadata = new Metadata();\n26           \n27           ContentHandler handler = new DefaultHandler();\n28   \n29           ParseContext context = new ParseContext();\n30           context.set(Parser.class, new CompositeExternalParser());\n31   \n32           (new JSoupParser()).parse(stream, handler, metadata, context);\n33   \n34           for (String name : metadata.names()) {\n35               System.out.println(name + \": \" + metadata.get(name));\n36           }\n37   \n38       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/JSoupParser.java:\n 76       public JSoupParser() {\n 77           super();\n 78       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/AbstractEncodingDetectorParser.java:\n33       public AbstractEncodingDetectorParser() {\n34           encodingDetector = new DefaultEncodingDetector();\n35       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/detect/DefaultEncodingDetector.java:\n40       public DefaultEncodingDetector() {\n41           this(new ServiceLoader(DefaultEncodingDetector.class.getClassLoader()));\n42       }\n44       public DefaultEncodingDetector(ServiceLoader loader) {\n45           super(loader.loadServiceProviders(EncodingDetector.class));\n46       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java:\n251       public <T> List<T> loadServiceProviders(Class<T> iface) {\n252           List<T> tmp = new ArrayList<>();\n253           tmp.addAll(loadDynamicServiceProviders(iface));\n254           tmp.addAll(loadStaticServiceProviders(iface));\n255   \n256           List<T> providers = new ArrayList<>();\n257           Set<String> seen = new HashSet<>();\n258           for (T provider : tmp) {\n259               if (! seen.contains(provider.getClass().getCanonicalName())) {\n260                   providers.add(provider);\n261                   seen.add(provider.getClass().getCanonicalName());\n262               }\n263           }\n264           return providers;\n265       }\n324       public <T> List<T> loadStaticServiceProviders(Class<T> iface) {\n325           return loadStaticServiceProviders(iface, Collections.EMPTY_SET);\n326       }\n339       @SuppressWarnings(\"unchecked\")\n340       public <T> List<T> loadStaticServiceProviders(Class<T> iface,\n341                                                     Collection<Class<? extends T>> excludes) {\n342           List<T> providers = new ArrayList<>();\n343   \n344           if (loader != null) {\n345               List<String> names = identifyStaticServiceProviders(iface);\n346               for (String name : names) {\n347                   try {\n348                       Class<?> klass = loader.loadClass(name);\n349                       if (iface.isAssignableFrom(klass)) {\n350                           boolean shouldExclude = false;\n351                           for (Class<? extends T> ex : excludes) {\n352                               if (ex.isAssignableFrom(klass)) {\n353                                   shouldExclude = true;\n354                                   break;\n355                               }\n356                           }\n357                           if (!shouldExclude) {\n358                               T instance = ServiceLoaderUtils.newInstance(klass, this);\n359                               if (instance instanceof Initializable) {\n360                                   ((Initializable) instance).initialize(Collections.EMPTY_MAP);\n361                                   ((Initializable) instance)\n362                                           .checkInitialization(initializableProblemHandler);\n363                               }\n364                               providers.add(instance);\n365                           }\n366                       } else {\n367                           throw new TikaConfigException(\n368                                   \"Class \" + name + \" is not of type: \" + iface);\n369                       }\n370                   } catch (Throwable t) {\n371                       handler.handleLoadError(name, t);\n372                   }\n373               }\n374           }\n375           return providers;\n376       }\n\nsrc/tika/tika-pipes/tika-emitters/tika-emitter-kafka/src/main/java/org/apache/tika/pipes/emitter/kafka/KafkaEmitter.java:\n226       @Override\n227       public void initialize(Map<String, Param> params) throws TikaConfigException {\n228   \n229           // create instance for properties to access producer configs   \n230           Properties props = new Properties();\n231   \n232           //Assign localhost id\n233           safePut(props, ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n234   \n235           //Set acknowledgements for producer requests.      \n236           safePut(props, ProducerConfig.ACKS_CONFIG, acks);\n237   \n238           //If the request fails, the producer can automatically retry,\n239           safePut(props, ProducerConfig.RETRIES_CONFIG, retries);\n240   \n241           //Specify buffer size in config\n242           safePut(props, ProducerConfig.BATCH_SIZE_CONFIG, batchSize);\n243   \n244           //Reduce the no of requests less than 0   \n245           safePut(props, ProducerConfig.LINGER_MS_CONFIG, lingerMs);\n246   \n247           //The buffer.memory controls the total amount of memory available to the producer for buffering.   \n248           safePut(props, ProducerConfig.BUFFER_MEMORY_CONFIG, bufferMemory);\n249   \n250           safePut(props, ProducerConfig.CLIENT_ID_CONFIG, clientId);\n251           safePut(props, ProducerConfig.COMPRESSION_TYPE_CONFIG, compressionType);\n252           safePut(props, ProducerConfig.DELIVERY_TIMEOUT_MS_CONFIG, deliveryTimeoutMs);\n253           safePut(props, ProducerConfig.ENABLE_IDEMPOTENCE_CONFIG, enableIdempotence);\n254           safePut(props, ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, interceptorClasses);\n255           safePut(props, ProducerConfig.MAX_BLOCK_MS_CONFIG, maxBlockMs);\n256           safePut(props, ProducerConfig.MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION, maxInFlightRequestsPerConnection);\n257           safePut(props, ProducerConfig.MAX_REQUEST_SIZE_CONFIG, maxRequestSize);\n258           safePut(props, ProducerConfig.METADATA_MAX_AGE_CONFIG, metadataMaxAgeMs);\n259           safePut(props, ProducerConfig.REQUEST_TIMEOUT_MS_CONFIG, requestTimeoutMs);\n260           safePut(props, ProducerConfig.RETRY_BACKOFF_MS_CONFIG, retryBackoffMs);\n261           safePut(props, ProducerConfig.TRANSACTION_TIMEOUT_CONFIG, transactionTimeoutMs);\n262           safePut(props, ProducerConfig.TRANSACTIONAL_ID_CONFIG, transactionalId);\n263   \n264           safePut(props, ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,\n265                   serializerClass(keySerializer, StringSerializer.class));\n266           safePut(props, ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,\n267                   serializerClass(valueSerializer, StringSerializer.class));\n268   \n269           producer = new KafkaProducer<>(props);\n270       }\n272       private Object serializerClass(String className, Class defaultClass) {\n273           try {\n274               return className == null ? defaultClass : Class.forName(className);\n275           } catch (ClassNotFoundException e) {\n276               LOGGER.error(\"Could not find key serializer class: {}\", className);\n277               return null;\n278           }\n279       }\n",
            "cost": 0.057120000000000004,
            "harness_id": "TikaTwo",
            "sanitizer": "load arbitrary library",
            "sink": "src/tika/tika-pipes/tika-emitters/tika-emitter-kafka/src/main/java/org/apache/tika/pipes/emitter/kafka/KafkaEmitter.java:274:69",
            "status": "corpus",
            "valid_path": "NO",
            "id": 311
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-two/src/main/java/com/aixcc/tika/harnesses/two/TikaTwo.java:\n20       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n21   \n22           InputStream stream = new BufferedInputStream(new ByteArrayInputStream(input));\n23   \n24           // null metadata indicates html content type for JSoupParser\n25           Metadata metadata = new Metadata();\n26           \n27           ContentHandler handler = new DefaultHandler();\n28   \n29           ParseContext context = new ParseContext();\n30           context.set(Parser.class, new CompositeExternalParser());\n31   \n32           (new JSoupParser()).parse(stream, handler, metadata, context);\n33   \n34           for (String name : metadata.names()) {\n35               System.out.println(name + \": \" + metadata.get(name));\n36           }\n37   \n38       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/JSoupParser.java:\n 76       public JSoupParser() {\n 77           super();\n 78       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/AbstractEncodingDetectorParser.java:\n33       public AbstractEncodingDetectorParser() {\n34           encodingDetector = new DefaultEncodingDetector();\n35       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/detect/DefaultEncodingDetector.java:\n40       public DefaultEncodingDetector() {\n41           this(new ServiceLoader(DefaultEncodingDetector.class.getClassLoader()));\n42       }\n44       public DefaultEncodingDetector(ServiceLoader loader) {\n45           super(loader.loadServiceProviders(EncodingDetector.class));\n46       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java:\n251       public <T> List<T> loadServiceProviders(Class<T> iface) {\n252           List<T> tmp = new ArrayList<>();\n253           tmp.addAll(loadDynamicServiceProviders(iface));\n254           tmp.addAll(loadStaticServiceProviders(iface));\n255   \n256           List<T> providers = new ArrayList<>();\n257           Set<String> seen = new HashSet<>();\n258           for (T provider : tmp) {\n259               if (! seen.contains(provider.getClass().getCanonicalName())) {\n260                   providers.add(provider);\n261                   seen.add(provider.getClass().getCanonicalName());\n262               }\n263           }\n264           return providers;\n265       }\n324       public <T> List<T> loadStaticServiceProviders(Class<T> iface) {\n325           return loadStaticServiceProviders(iface, Collections.EMPTY_SET);\n326       }\n339       @SuppressWarnings(\"unchecked\")\n340       public <T> List<T> loadStaticServiceProviders(Class<T> iface,\n341                                                     Collection<Class<? extends T>> excludes) {\n342           List<T> providers = new ArrayList<>();\n343   \n344           if (loader != null) {\n345               List<String> names = identifyStaticServiceProviders(iface);\n346               for (String name : names) {\n347                   try {\n348                       Class<?> klass = loader.loadClass(name);\n349                       if (iface.isAssignableFrom(klass)) {\n350                           boolean shouldExclude = false;\n351                           for (Class<? extends T> ex : excludes) {\n352                               if (ex.isAssignableFrom(klass)) {\n353                                   shouldExclude = true;\n354                                   break;\n355                               }\n356                           }\n357                           if (!shouldExclude) {\n358                               T instance = ServiceLoaderUtils.newInstance(klass, this);\n359                               if (instance instanceof Initializable) {\n360                                   ((Initializable) instance).initialize(Collections.EMPTY_MAP);\n361                                   ((Initializable) instance)\n362                                           .checkInitialization(initializableProblemHandler);\n363                               }\n364                               providers.add(instance);\n365                           }\n366                       } else {\n367                           throw new TikaConfigException(\n368                                   \"Class \" + name + \" is not of type: \" + iface);\n369                       }\n370                   } catch (Throwable t) {\n371                       handler.handleLoadError(name, t);\n372                   }\n373               }\n374           }\n375           return providers;\n376       }\n\nsrc/tika/tika-pipes/tika-pipes-iterators/tika-pipes-iterator-kafka/src/main/java/org/apache/tika/pipes/pipesiterator/kafka/KafkaPipesIterator.java:\n120       @Override\n121       public void initialize(Map<String, Param> params) {\n122           props = new Properties();\n123           safePut(props, ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n124           safePut(props, ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, serializerClass(keySerializer, StringDeserializer.class));\n125           safePut(props, ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, serializerClass(valueSerializer, StringDeserializer.class));\n126           safePut(props, ConsumerConfig.GROUP_ID_CONFIG, groupId);\n127           safePut(props, ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, autoOffsetReset);\n128           safePut(props, \"group.inital.rebalance.delay.ms\", groupInitialRebalanceDelayMs);\n129           consumer = new KafkaConsumer<>(props);\n130           consumer.subscribe(Arrays.asList(topic));\n131       }\n133       private Object serializerClass(String className, Class defaultClass) {\n134           try {\n135               return className == null ? defaultClass : Class.forName(className);\n136           } catch (ClassNotFoundException e) {\n137               LOGGER.error(\"Could not find key serializer class: {}\", className);\n138               return null;\n139           }\n140       }\n",
            "cost": 0.054275000000000004,
            "harness_id": "TikaTwo",
            "sanitizer": "load arbitrary library",
            "sink": "src/tika/tika-pipes/tika-pipes-iterators/tika-pipes-iterator-kafka/src/main/java/org/apache/tika/pipes/pipesiterator/kafka/KafkaPipesIterator.java:135:69",
            "status": "corpus",
            "valid_path": "NO",
            "id": 312
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-two/src/main/java/com/aixcc/tika/harnesses/two/TikaTwo.java:\n20       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n21   \n22           InputStream stream = new BufferedInputStream(new ByteArrayInputStream(input));\n23   \n24           // null metadata indicates html content type for JSoupParser\n25           Metadata metadata = new Metadata();\n26           \n27           ContentHandler handler = new DefaultHandler();\n28   \n29           ParseContext context = new ParseContext();\n30           context.set(Parser.class, new CompositeExternalParser());\n31   \n32           (new JSoupParser()).parse(stream, handler, metadata, context);\n33   \n34           for (String name : metadata.names()) {\n35               System.out.println(name + \": \" + metadata.get(name));\n36           }\n37   \n38       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/external/CompositeExternalParser.java:\n36       public CompositeExternalParser() throws IOException, TikaException {\n37           this(new MediaTypeRegistry());\n38       }\n40       @SuppressWarnings(\"unchecked\")\n41       public CompositeExternalParser(MediaTypeRegistry registry) throws IOException, TikaException {\n42           super(registry, (List<Parser>) (List<? extends Parser>) ExternalParsersFactory.create());\n43       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParsersFactory.java:\n43       public static List<ExternalParser> create() throws IOException, TikaException {\n44           return create(new ServiceLoader());\n45       }\n47       public static List<ExternalParser> create(ServiceLoader loader)\n48               throws IOException, TikaException {\n49           return create(\"tika-external-parsers.xml\", loader);\n50       }\n52       public static List<ExternalParser> create(String filename, ServiceLoader loader)\n53               throws IOException, TikaException {\n54           String filepath =\n55                   ExternalParsersFactory.class.getPackage().getName().replace('.', '/') + \"/\" +\n56                           filename;\n57           Enumeration<URL> files = loader.findServiceResources(filepath);\n58           ArrayList<URL> list = Collections.list(files);\n59           URL[] urls = list.toArray(new URL[0]);\n60           return create(urls);\n61       }\n63       public static List<ExternalParser> create(URL... urls) throws IOException, TikaException {\n64           List<ExternalParser> parsers = new ArrayList<>();\n65           for (URL url : urls) {\n66               try (InputStream stream = url.openStream()) {\n67                   parsers.addAll(ExternalParsersConfigReader.read(stream));\n68               }\n69           }\n70           return parsers;\n71       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParsersConfigReader.java:\n 56       public static List<ExternalParser> read(InputStream stream) throws TikaException, IOException {\n 57           try {\n 58               DocumentBuilder builder = XMLReaderUtils.getDocumentBuilder();\n 59               Document document = builder.parse(new InputSource(stream));\n 60               return read(document);\n 61           } catch (SAXException e) {\n 62               throw new TikaException(\"Invalid parser configuration\", e);\n 63           }\n 64       }\n 66       public static List<ExternalParser> read(Document document) throws TikaException, IOException {\n 67           return read(document.getDocumentElement());\n 68       }\n 70       public static List<ExternalParser> read(Element element) throws TikaException, IOException {\n 71           List<ExternalParser> parsers = new ArrayList<>();\n 72   \n 73           if (element != null && element.getTagName().equals(EXTERNAL_PARSERS_TAG)) {\n 74               NodeList nodes = element.getChildNodes();\n 75               for (int i = 0; i < nodes.getLength(); i++) {\n 76                   Node node = nodes.item(i);\n 77                   if (node.getNodeType() == Node.ELEMENT_NODE) {\n 78                       Element child = (Element) node;\n 79                       if (child.getTagName().equals(PARSER_TAG)) {\n 80                           ExternalParser p = readParser(child);\n 81                           if (p != null) {\n 82                               parsers.add(p);\n 83                           }\n 84                       }\n 85                   }\n 86               }\n 87           } else {\n 88               throw new MimeTypeException(\n 89                       \"Not a <\" + EXTERNAL_PARSERS_TAG + \"/> configuration document: \" +\n 90                               (element != null ? element.getTagName() : \"n/a\"));\n 91           }\n 92   \n 93           return parsers;\n 94       }\n100       private static ExternalParser readParser(Element parserDef) throws TikaException {\n101           ExternalParser parser = new ExternalParser();\n102   \n103           NodeList children = parserDef.getChildNodes();\n104           for (int i = 0; i < children.getLength(); i++) {\n105               Node node = children.item(i);\n106               if (node.getNodeType() == Node.ELEMENT_NODE) {\n107                   Element child = (Element) node;\n108                   switch (child.getTagName()) {\n109                       case CHECK_TAG:\n110                           boolean present = readCheckTagAndCheck(child);\n111                           if (!present) {\n112                               return null;\n113                           }\n114                           break;\n115                       case COMMAND_TAG:\n116                           parser.setCommand(getString(child));\n117                           break;\n118                       case MIMETYPES_TAG:\n119                           parser.setSupportedTypes(readMimeTypes(child));\n120                           break;\n121                       case METADATA_TAG:\n122                           parser.setMetadataExtractionPatterns(readMetadataPatterns(child));\n123                           break;\n124                       default:\n125                           throw new IllegalArgumentException(\"reaction not defined for \" + child.getTagName());\n126                   }\n127               }\n128           }\n129   \n130           return parser;\n131       }\n169       private static boolean readCheckTagAndCheck(Element checkDef) {\n170           String command = null;\n171           List<Integer> errorVals = new ArrayList<>();\n172   \n173           NodeList children = checkDef.getChildNodes();\n174           for (int i = 0; i < children.getLength(); i++) {\n175               Node node = children.item(i);\n176               if (node.getNodeType() == Node.ELEMENT_NODE) {\n177                   Element child = (Element) node;\n178                   if (child.getTagName().equals(COMMAND_TAG)) {\n179                       command = getString(child);\n180                   }\n181                   if (child.getTagName().equals(ERROR_CODES_TAG)) {\n182                       String errs = getString(child);\n183                       StringTokenizer st = new StringTokenizer(errs, \",\");\n184                       while (st.hasMoreElements()) {\n185                           try {\n186                               String s = st.nextToken();\n187                               errorVals.add(Integer.parseInt(s));\n188                           } catch (NumberFormatException e) {\n189                               //swallow\n190                           }\n191                       }\n192                   }\n193               }\n194           }\n195   \n196           if (command != null) {\n197               String[] theCommand = command.split(\" \");\n198               int[] errVals = new int[errorVals.size()];\n199               for (int i = 0; i < errVals.length; i++) {\n200                   errVals[i] = errorVals.get(i);\n201               }\n202   \n203               return ExternalParser.check(theCommand, errVals);\n204           }\n205   \n206           // No check command, so assume it's there\n207           return true;\n208       }\n",
            "cost": 0.065275,
            "harness_id": "TikaTwo",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParsersConfigReader.java:197:49",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 313
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaTwo",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/HtmlEncodingDetector.java:123:49",
            "status": "error",
            "id": 314
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-two/src/main/java/com/aixcc/tika/harnesses/two/TikaTwo.java:\n20       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n21   \n22           InputStream stream = new BufferedInputStream(new ByteArrayInputStream(input));\n23   \n24           // null metadata indicates html content type for JSoupParser\n25           Metadata metadata = new Metadata();\n26           \n27           ContentHandler handler = new DefaultHandler();\n28   \n29           ParseContext context = new ParseContext();\n30           context.set(Parser.class, new CompositeExternalParser());\n31   \n32           (new JSoupParser()).parse(stream, handler, metadata, context);\n33   \n34           for (String name : metadata.names()) {\n35               System.out.println(name + \": \" + metadata.get(name));\n36           }\n37   \n38       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/JSoupParser.java:\n 76       public JSoupParser() {\n 77           super();\n 78       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/AbstractEncodingDetectorParser.java:\n33       public AbstractEncodingDetectorParser() {\n34           encodingDetector = new DefaultEncodingDetector();\n35       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/detect/DefaultEncodingDetector.java:\n40       public DefaultEncodingDetector() {\n41           this(new ServiceLoader(DefaultEncodingDetector.class.getClassLoader()));\n42       }\n44       public DefaultEncodingDetector(ServiceLoader loader) {\n45           super(loader.loadServiceProviders(EncodingDetector.class));\n46       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java:\n251       public <T> List<T> loadServiceProviders(Class<T> iface) {\n252           List<T> tmp = new ArrayList<>();\n253           tmp.addAll(loadDynamicServiceProviders(iface));\n254           tmp.addAll(loadStaticServiceProviders(iface));\n255   \n256           List<T> providers = new ArrayList<>();\n257           Set<String> seen = new HashSet<>();\n258           for (T provider : tmp) {\n259               if (! seen.contains(provider.getClass().getCanonicalName())) {\n260                   providers.add(provider);\n261                   seen.add(provider.getClass().getCanonicalName());\n262               }\n263           }\n264           return providers;\n265       }\n324       public <T> List<T> loadStaticServiceProviders(Class<T> iface) {\n325           return loadStaticServiceProviders(iface, Collections.EMPTY_SET);\n326       }\n339       @SuppressWarnings(\"unchecked\")\n340       public <T> List<T> loadStaticServiceProviders(Class<T> iface,\n341                                                     Collection<Class<? extends T>> excludes) {\n342           List<T> providers = new ArrayList<>();\n343   \n344           if (loader != null) {\n345               List<String> names = identifyStaticServiceProviders(iface);\n346               for (String name : names) {\n347                   try {\n348                       Class<?> klass = loader.loadClass(name);\n349                       if (iface.isAssignableFrom(klass)) {\n350                           boolean shouldExclude = false;\n351                           for (Class<? extends T> ex : excludes) {\n352                               if (ex.isAssignableFrom(klass)) {\n353                                   shouldExclude = true;\n354                                   break;\n355                               }\n356                           }\n357                           if (!shouldExclude) {\n358                               T instance = ServiceLoaderUtils.newInstance(klass, this);\n359                               if (instance instanceof Initializable) {\n360                                   ((Initializable) instance).initialize(Collections.EMPTY_MAP);\n361                                   ((Initializable) instance)\n362                                           .checkInitialization(initializableProblemHandler);\n363                               }\n364                               providers.add(instance);\n365                           }\n366                       } else {\n367                           throw new TikaConfigException(\n368                                   \"Class \" + name + \" is not of type: \" + iface);\n369                       }\n370                   } catch (Throwable t) {\n371                       handler.handleLoadError(name, t);\n372                   }\n373               }\n374           }\n375           return providers;\n376       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/metadata/filter/CaptureGroupMetadataFilter.java:\n102       @Override\n103       public void initialize(Map<String, Param> params) throws TikaConfigException {\n104           try {\n105               regex = Pattern.compile(regexString);\n106           } catch (PatternSyntaxException e) {\n107               throw new TikaConfigException(\"Couldn't parse regex\", e);\n108           }\n109   \n110       }\n",
            "cost": 0.049595,
            "harness_id": "TikaTwo",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/metadata/filter/CaptureGroupMetadataFilter.java:105:37",
            "status": "corpus",
            "valid_path": "NO",
            "id": 315
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-two/src/main/java/com/aixcc/tika/harnesses/two/TikaTwo.java:\n20       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n21   \n22           InputStream stream = new BufferedInputStream(new ByteArrayInputStream(input));\n23   \n24           // null metadata indicates html content type for JSoupParser\n25           Metadata metadata = new Metadata();\n26           \n27           ContentHandler handler = new DefaultHandler();\n28   \n29           ParseContext context = new ParseContext();\n30           context.set(Parser.class, new CompositeExternalParser());\n31   \n32           (new JSoupParser()).parse(stream, handler, metadata, context);\n33   \n34           for (String name : metadata.names()) {\n35               System.out.println(name + \": \" + metadata.get(name));\n36           }\n37   \n38       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/JSoupParser.java:\n 76       public JSoupParser() {\n 77           super();\n 78       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/AbstractEncodingDetectorParser.java:\n33       public AbstractEncodingDetectorParser() {\n34           encodingDetector = new DefaultEncodingDetector();\n35       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/detect/DefaultEncodingDetector.java:\n40       public DefaultEncodingDetector() {\n41           this(new ServiceLoader(DefaultEncodingDetector.class.getClassLoader()));\n42       }\n44       public DefaultEncodingDetector(ServiceLoader loader) {\n45           super(loader.loadServiceProviders(EncodingDetector.class));\n46       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java:\n251       public <T> List<T> loadServiceProviders(Class<T> iface) {\n252           List<T> tmp = new ArrayList<>();\n253           tmp.addAll(loadDynamicServiceProviders(iface));\n254           tmp.addAll(loadStaticServiceProviders(iface));\n255   \n256           List<T> providers = new ArrayList<>();\n257           Set<String> seen = new HashSet<>();\n258           for (T provider : tmp) {\n259               if (! seen.contains(provider.getClass().getCanonicalName())) {\n260                   providers.add(provider);\n261                   seen.add(provider.getClass().getCanonicalName());\n262               }\n263           }\n264           return providers;\n265       }\n324       public <T> List<T> loadStaticServiceProviders(Class<T> iface) {\n325           return loadStaticServiceProviders(iface, Collections.EMPTY_SET);\n326       }\n339       @SuppressWarnings(\"unchecked\")\n340       public <T> List<T> loadStaticServiceProviders(Class<T> iface,\n341                                                     Collection<Class<? extends T>> excludes) {\n342           List<T> providers = new ArrayList<>();\n343   \n344           if (loader != null) {\n345               List<String> names = identifyStaticServiceProviders(iface);\n346               for (String name : names) {\n347                   try {\n348                       Class<?> klass = loader.loadClass(name);\n349                       if (iface.isAssignableFrom(klass)) {\n350                           boolean shouldExclude = false;\n351                           for (Class<? extends T> ex : excludes) {\n352                               if (ex.isAssignableFrom(klass)) {\n353                                   shouldExclude = true;\n354                                   break;\n355                               }\n356                           }\n357                           if (!shouldExclude) {\n358                               T instance = ServiceLoaderUtils.newInstance(klass, this);\n359                               if (instance instanceof Initializable) {\n360                                   ((Initializable) instance).initialize(Collections.EMPTY_MAP);\n361                                   ((Initializable) instance)\n362                                           .checkInitialization(initializableProblemHandler);\n363                               }\n364                               providers.add(instance);\n365                           }\n366                       } else {\n367                           throw new TikaConfigException(\n368                                   \"Class \" + name + \" is not of type: \" + iface);\n369                       }\n370                   } catch (Throwable t) {\n371                       handler.handleLoadError(name, t);\n372                   }\n373               }\n374           }\n375           return providers;\n376       }\n\nsrc/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/recognition/tf/TensorflowImageRecParser.java:\n113       @Override\n114       public void initialize(Map<String, Param> params) throws TikaConfigException {\n115           try {\n116               if (!modelFile.exists()) {\n117                   modelFile.getParentFile().mkdirs();\n118                   LOG.warn(\"Model doesn't exist at {}. Expecting the script to download it.\",\n119                           modelFile);\n120               }\n121               if (!scriptFile.exists()) {\n122                   scriptFile.getParentFile().mkdirs();\n123                   LOG.info(\"Copying script to : {}\", scriptFile);\n124                   try (InputStream sourceStream = getClass().getResourceAsStream(SCRIPT_FILE_NAME)) {\n125                       try (OutputStream destStream = new FileOutputStream(scriptFile)) {\n126                           IOUtils.copy(sourceStream, destStream);\n127                       }\n128                   }\n129                   LOG.debug(\"Copied..\");\n130               }\n131               String[] availabilityCheckArgs =\n132                       {executor, scriptFile.getAbsolutePath(), modelArg, modelFile.getAbsolutePath(),\n133                               availabilityTestArgs};\n134               available = ExternalParser.check(availabilityCheckArgs);\n135               LOG.debug(\"Available? {}\", available);\n136               if (!available) {\n137                   return;\n138               }\n139               String[] parseCmd =\n140                       {executor, scriptFile.getAbsolutePath(), modelArg, modelFile.getAbsolutePath(),\n141                               imageArg, INPUT_FILE_TOKEN, \"--out_file\",\n142                               OUTPUT_FILE_TOKEN}; //inserting output token to let\n143               // external parser parse metadata\n144               setCommand(parseCmd);\n145               HashMap<Pattern, String> patterns = new HashMap<>();\n146               patterns.put(Pattern.compile(outPattern), null);\n147               setMetadataExtractionPatterns(patterns);\n148               setIgnoredLineConsumer(IGNORED_LINE_LOGGER);\n149           } catch (Exception e) {\n150               throw new TikaConfigException(e.getMessage(), e);\n151           }\n152       }\n",
            "cost": 0.05233,
            "harness_id": "TikaTwo",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/recognition/tf/TensorflowImageRecParser.java:146:42",
            "status": "corpus",
            "valid_path": "NO",
            "id": 316
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-two/src/main/java/com/aixcc/tika/harnesses/two/TikaTwo.java:\n20       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n21   \n22           InputStream stream = new BufferedInputStream(new ByteArrayInputStream(input));\n23   \n24           // null metadata indicates html content type for JSoupParser\n25           Metadata metadata = new Metadata();\n26           \n27           ContentHandler handler = new DefaultHandler();\n28   \n29           ParseContext context = new ParseContext();\n30           context.set(Parser.class, new CompositeExternalParser());\n31   \n32           (new JSoupParser()).parse(stream, handler, metadata, context);\n33   \n34           for (String name : metadata.names()) {\n35               System.out.println(name + \": \" + metadata.get(name));\n36           }\n37   \n38       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/JSoupParser.java:\n 76       public JSoupParser() {\n 77           super();\n 78       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/AbstractEncodingDetectorParser.java:\n33       public AbstractEncodingDetectorParser() {\n34           encodingDetector = new DefaultEncodingDetector();\n35       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/detect/DefaultEncodingDetector.java:\n40       public DefaultEncodingDetector() {\n41           this(new ServiceLoader(DefaultEncodingDetector.class.getClassLoader()));\n42       }\n44       public DefaultEncodingDetector(ServiceLoader loader) {\n45           super(loader.loadServiceProviders(EncodingDetector.class));\n46       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java:\n251       public <T> List<T> loadServiceProviders(Class<T> iface) {\n252           List<T> tmp = new ArrayList<>();\n253           tmp.addAll(loadDynamicServiceProviders(iface));\n254           tmp.addAll(loadStaticServiceProviders(iface));\n255   \n256           List<T> providers = new ArrayList<>();\n257           Set<String> seen = new HashSet<>();\n258           for (T provider : tmp) {\n259               if (! seen.contains(provider.getClass().getCanonicalName())) {\n260                   providers.add(provider);\n261                   seen.add(provider.getClass().getCanonicalName());\n262               }\n263           }\n264           return providers;\n265       }\n324       public <T> List<T> loadStaticServiceProviders(Class<T> iface) {\n325           return loadStaticServiceProviders(iface, Collections.EMPTY_SET);\n326       }\n339       @SuppressWarnings(\"unchecked\")\n340       public <T> List<T> loadStaticServiceProviders(Class<T> iface,\n341                                                     Collection<Class<? extends T>> excludes) {\n342           List<T> providers = new ArrayList<>();\n343   \n344           if (loader != null) {\n345               List<String> names = identifyStaticServiceProviders(iface);\n346               for (String name : names) {\n347                   try {\n348                       Class<?> klass = loader.loadClass(name);\n349                       if (iface.isAssignableFrom(klass)) {\n350                           boolean shouldExclude = false;\n351                           for (Class<? extends T> ex : excludes) {\n352                               if (ex.isAssignableFrom(klass)) {\n353                                   shouldExclude = true;\n354                                   break;\n355                               }\n356                           }\n357                           if (!shouldExclude) {\n358                               T instance = ServiceLoaderUtils.newInstance(klass, this);\n359                               if (instance instanceof Initializable) {\n360                                   ((Initializable) instance).initialize(Collections.EMPTY_MAP);\n361                                   ((Initializable) instance)\n362                                           .checkInitialization(initializableProblemHandler);\n363                               }\n364                               providers.add(instance);\n365                           }\n366                       } else {\n367                           throw new TikaConfigException(\n368                                   \"Class \" + name + \" is not of type: \" + iface);\n369                       }\n370                   } catch (Throwable t) {\n371                       handler.handleLoadError(name, t);\n372                   }\n373               }\n374           }\n375           return providers;\n376       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java:\n563       @Override\n564       public void initialize(Map<String, Param> params) throws TikaConfigException {\n565           hasTesseract = hasTesseract();\n566           if (isEnableImagePreprocessing()) {\n567               hasImageMagick = hasImageMagick();\n568           } else {\n569               hasImageMagick = false;\n570           }\n571           if (preloadLangs) {\n572               preloadLangs();\n573               if (!StringUtils.isBlank(defaultConfig.getLanguage())) {\n574                   validateLangString(defaultConfig.getLanguage());\n575               }\n576           }\n577           imagePreprocessor = new ImagePreprocessor(getImageMagickPath() + getImageMagickProg());\n578       }\n886       private void preloadLangs() {\n887           String[] args = new String[]{getTesseractPath() + getTesseractProg(), \"--list-langs\"};\n888   \n889           ProcessBuilder pb = new ProcessBuilder(args);\n890   \n891           setEnv(pb);\n892   \n893           Process process = null;\n894           try {\n895               process = pb.start();\n896               getLangs(process, defaultConfig.getTimeoutSeconds());\n897           } catch (TikaException | IOException e) {\n898               LOG.warn(\"Problem preloading langs\", e);\n899           } finally {\n900               if (process != null) {\n901                   process.destroyForcibly();\n902               }\n903           }\n904       }\n906       private void getLangs(Process process, int timeoutSeconds) throws IOException, TikaException {\n907           process.getOutputStream().close();\n908           InputStream out = process.getInputStream();\n909           InputStream err = process.getErrorStream();\n910           StringBuilder outBuilder = new StringBuilder();\n911           StringBuilder errBuilder = new StringBuilder();\n912           Thread outThread = logStream(out, outBuilder);\n913           Thread errThread = logStream(err, errBuilder);\n914           outThread.start();\n915           errThread.start();\n916   \n917           int exitValue = Integer.MIN_VALUE;\n918           try {\n919               boolean finished = process.waitFor(timeoutSeconds, TimeUnit.SECONDS);\n920               if (!finished) {\n921                   throw new TikaException(\"TesseractOCRParser timeout\");\n922               }\n923               exitValue = process.exitValue();\n924               outThread.join(1000);\n925           } catch (InterruptedException e) {\n926               Thread.currentThread().interrupt();\n927               throw new TikaException(\"TesseractOCRParser interrupted\", e);\n928           } catch (IllegalThreadStateException e) {\n929               //this _should_ never be thrown\n930               throw new TikaException(\"TesseractOCRParser timeout\");\n931           }\n932           if (exitValue > 0) {\n933               throw new TikaException(\n934                       \"TesseractOCRParser bad exit value \" + exitValue + \" err msg: \" +\n935                               errBuilder.toString());\n936           }\n937           for (String line : outBuilder.toString().split(\"[\\r\\n]+\")) {\n938               if (line.startsWith(\"List of available\")) {\n939                   continue;\n940               }\n941               langs.add(line.trim());\n942           }\n943       }\n",
            "cost": 0.05709,
            "harness_id": "TikaTwo",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java:937:56",
            "status": "corpus",
            "valid_path": "NO",
            "id": 317
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-two/src/main/java/com/aixcc/tika/harnesses/two/TikaTwo.java:\n20       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n21   \n22           InputStream stream = new BufferedInputStream(new ByteArrayInputStream(input));\n23   \n24           // null metadata indicates html content type for JSoupParser\n25           Metadata metadata = new Metadata();\n26           \n27           ContentHandler handler = new DefaultHandler();\n28   \n29           ParseContext context = new ParseContext();\n30           context.set(Parser.class, new CompositeExternalParser());\n31   \n32           (new JSoupParser()).parse(stream, handler, metadata, context);\n33   \n34           for (String name : metadata.names()) {\n35               System.out.println(name + \": \" + metadata.get(name));\n36           }\n37   \n38       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/JSoupParser.java:\n 76       public JSoupParser() {\n 77           super();\n 78       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/AbstractEncodingDetectorParser.java:\n33       public AbstractEncodingDetectorParser() {\n34           encodingDetector = new DefaultEncodingDetector();\n35       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/detect/DefaultEncodingDetector.java:\n40       public DefaultEncodingDetector() {\n41           this(new ServiceLoader(DefaultEncodingDetector.class.getClassLoader()));\n42       }\n44       public DefaultEncodingDetector(ServiceLoader loader) {\n45           super(loader.loadServiceProviders(EncodingDetector.class));\n46       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java:\n251       public <T> List<T> loadServiceProviders(Class<T> iface) {\n252           List<T> tmp = new ArrayList<>();\n253           tmp.addAll(loadDynamicServiceProviders(iface));\n254           tmp.addAll(loadStaticServiceProviders(iface));\n255   \n256           List<T> providers = new ArrayList<>();\n257           Set<String> seen = new HashSet<>();\n258           for (T provider : tmp) {\n259               if (! seen.contains(provider.getClass().getCanonicalName())) {\n260                   providers.add(provider);\n261                   seen.add(provider.getClass().getCanonicalName());\n262               }\n263           }\n264           return providers;\n265       }\n324       public <T> List<T> loadStaticServiceProviders(Class<T> iface) {\n325           return loadStaticServiceProviders(iface, Collections.EMPTY_SET);\n326       }\n339       @SuppressWarnings(\"unchecked\")\n340       public <T> List<T> loadStaticServiceProviders(Class<T> iface,\n341                                                     Collection<Class<? extends T>> excludes) {\n342           List<T> providers = new ArrayList<>();\n343   \n344           if (loader != null) {\n345               List<String> names = identifyStaticServiceProviders(iface);\n346               for (String name : names) {\n347                   try {\n348                       Class<?> klass = loader.loadClass(name);\n349                       if (iface.isAssignableFrom(klass)) {\n350                           boolean shouldExclude = false;\n351                           for (Class<? extends T> ex : excludes) {\n352                               if (ex.isAssignableFrom(klass)) {\n353                                   shouldExclude = true;\n354                                   break;\n355                               }\n356                           }\n357                           if (!shouldExclude) {\n358                               T instance = ServiceLoaderUtils.newInstance(klass, this);\n359                               if (instance instanceof Initializable) {\n360                                   ((Initializable) instance).initialize(Collections.EMPTY_MAP);\n361                                   ((Initializable) instance)\n362                                           .checkInitialization(initializableProblemHandler);\n363                               }\n364                               providers.add(instance);\n365                           }\n366                       } else {\n367                           throw new TikaConfigException(\n368                                   \"Class \" + name + \" is not of type: \" + iface);\n369                       }\n370                   } catch (Throwable t) {\n371                       handler.handleLoadError(name, t);\n372                   }\n373               }\n374           }\n375           return providers;\n376       }\n\nsrc/tika/tika-parsers/tika-parsers-ml/tika-dl/src/main/java/org/apache/tika/dl/imagerec/DL4JInceptionV3Net.java:\n158       private static synchronized File cachedDownload(File cacheDir, URI uri) throws IOException {\n159   \n160           if (\"file\".equals(uri.getScheme()) || uri.getScheme() == null) {\n161               return new File(uri);\n162           }\n163           if (!cacheDir.exists()) {\n164               cacheDir.mkdirs();\n165           }\n166           String[] parts = uri.toASCIIString().split(\"/\");\n167           File cacheFile = new File(cacheDir, parts[parts.length - 1]);\n168           File successFlag = new File(cacheFile.getAbsolutePath() + \".success\");\n169   \n170           if (cacheFile.exists() && successFlag.exists()) {\n171               LOG.info(\"Cache exist at {}. Not downloading it\", cacheFile.getAbsolutePath());\n172           } else {\n173               if (successFlag.exists()) {\n174                   successFlag.delete();\n175               }\n176               LOG.info(\"Cache doesn't exist. Going to make a copy\");\n177               LOG.info(\"This might take a while! GET {}\", uri);\n178               FileUtils.copyURLToFile(uri.toURL(), cacheFile, 5000, 60000);\n179               //restore the success flag again\n180               FileUtils.write(successFlag, \"CopiedAt:\" + System.currentTimeMillis(),\n181                       StandardCharsets.UTF_8);\n182           }\n183           return cacheFile;\n184       }\n225       private String mayBeDownloadFile(String path) throws TikaConfigException {\n226           String resolvedFilePath;\n227           if (path.startsWith(\"http://\") || path.startsWith(\"https://\")) {\n228               LOG.debug(\"Config instructed to download the file, doing so.\");\n229               try {\n230                   resolvedFilePath = cachedDownload(cacheDir, URI.create(path)).getAbsolutePath();\n231               } catch (IOException e) {\n232                   throw new TikaConfigException(e.getMessage(), e);\n233               }\n234           } else {\n235               File file = retrieveFile(path);\n236               if (!file.exists()) {\n237                   LOG.error(\"File does not exist at :: {}\", path);\n238               }\n239               resolvedFilePath = file.getAbsolutePath();\n240           }\n241           return resolvedFilePath;\n242       }\n244       @Override\n245       public void initialize(Map<String, Param> params) throws TikaConfigException {\n246   \n247           //STEP 1: resolve weights file, download if necessary\n248           modelWeightsPath = mayBeDownloadFile(modelWeightsPath);\n249   \n250           //STEP 2: Load labels map\n251           try (InputStream stream = retrieveResource(mayBeDownloadFile(labelFile))) {\n252               this.labelMap = loadClassIndex(stream);\n253           } catch (IOException | ParseException e) {\n254               LOG.error(\"Could not load labels map\", e);\n255               return;\n256           }\n257   \n258           //STEP 3: initialize the graph\n259           try {\n260               this.imageLoader = new NativeImageLoader(imgHeight, imgWidth, imgChannels);\n261               LOG.info(\"Going to load Inception network...\");\n262               long st = System.currentTimeMillis();\n263   \n264               try (KerasModelBuilder builder =\n265                       new KerasModel().modelBuilder().modelHdf5Filename(modelWeightsPath)\n266                               .enforceTrainingConfig(false)) {\n267   \n268                   builder.inputShape(new int[]{imgHeight, imgWidth, 3});\n269                   KerasModel model = builder.buildModel();\n270                   this.graph = model.getComputationGraph();\n271                   long time = System.currentTimeMillis() - st;\n272                   LOG.info(\"Loaded the Inception model. Time taken={}ms\", time);\n273               }\n274           } catch (IOException | InvalidKerasConfigurationException |\n275                   UnsupportedKerasConfigurationException e) {\n276               throw new TikaConfigException(e.getMessage(), e);\n277           }\n278       }\n",
            "cost": 0.06529,
            "harness_id": "TikaTwo",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-dl/src/main/java/org/apache/tika/dl/imagerec/DL4JInceptionV3Net.java:166:52",
            "status": "corpus",
            "valid_path": "NO",
            "id": 318
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-two/src/main/java/com/aixcc/tika/harnesses/two/TikaTwo.java:\n20       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n21   \n22           InputStream stream = new BufferedInputStream(new ByteArrayInputStream(input));\n23   \n24           // null metadata indicates html content type for JSoupParser\n25           Metadata metadata = new Metadata();\n26           \n27           ContentHandler handler = new DefaultHandler();\n28   \n29           ParseContext context = new ParseContext();\n30           context.set(Parser.class, new CompositeExternalParser());\n31   \n32           (new JSoupParser()).parse(stream, handler, metadata, context);\n33   \n34           for (String name : metadata.names()) {\n35               System.out.println(name + \": \" + metadata.get(name));\n36           }\n37   \n38       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/external/CompositeExternalParser.java:\n36       public CompositeExternalParser() throws IOException, TikaException {\n37           this(new MediaTypeRegistry());\n38       }\n40       @SuppressWarnings(\"unchecked\")\n41       public CompositeExternalParser(MediaTypeRegistry registry) throws IOException, TikaException {\n42           super(registry, (List<Parser>) (List<? extends Parser>) ExternalParsersFactory.create());\n43       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParsersFactory.java:\n43       public static List<ExternalParser> create() throws IOException, TikaException {\n44           return create(new ServiceLoader());\n45       }\n47       public static List<ExternalParser> create(ServiceLoader loader)\n48               throws IOException, TikaException {\n49           return create(\"tika-external-parsers.xml\", loader);\n50       }\n52       public static List<ExternalParser> create(String filename, ServiceLoader loader)\n53               throws IOException, TikaException {\n54           String filepath =\n55                   ExternalParsersFactory.class.getPackage().getName().replace('.', '/') + \"/\" +\n56                           filename;\n57           Enumeration<URL> files = loader.findServiceResources(filepath);\n58           ArrayList<URL> list = Collections.list(files);\n59           URL[] urls = list.toArray(new URL[0]);\n60           return create(urls);\n61       }\n63       public static List<ExternalParser> create(URL... urls) throws IOException, TikaException {\n64           List<ExternalParser> parsers = new ArrayList<>();\n65           for (URL url : urls) {\n66               try (InputStream stream = url.openStream()) {\n67                   parsers.addAll(ExternalParsersConfigReader.read(stream));\n68               }\n69           }\n70           return parsers;\n71       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParsersConfigReader.java:\n 56       public static List<ExternalParser> read(InputStream stream) throws TikaException, IOException {\n 57           try {\n 58               DocumentBuilder builder = XMLReaderUtils.getDocumentBuilder();\n 59               Document document = builder.parse(new InputSource(stream));\n 60               return read(document);\n 61           } catch (SAXException e) {\n 62               throw new TikaException(\"Invalid parser configuration\", e);\n 63           }\n 64       }\n 66       public static List<ExternalParser> read(Document document) throws TikaException, IOException {\n 67           return read(document.getDocumentElement());\n 68       }\n 70       public static List<ExternalParser> read(Element element) throws TikaException, IOException {\n 71           List<ExternalParser> parsers = new ArrayList<>();\n 72   \n 73           if (element != null && element.getTagName().equals(EXTERNAL_PARSERS_TAG)) {\n 74               NodeList nodes = element.getChildNodes();\n 75               for (int i = 0; i < nodes.getLength(); i++) {\n 76                   Node node = nodes.item(i);\n 77                   if (node.getNodeType() == Node.ELEMENT_NODE) {\n 78                       Element child = (Element) node;\n 79                       if (child.getTagName().equals(PARSER_TAG)) {\n 80                           ExternalParser p = readParser(child);\n 81                           if (p != null) {\n 82                               parsers.add(p);\n 83                           }\n 84                       }\n 85                   }\n 86               }\n 87           } else {\n 88               throw new MimeTypeException(\n 89                       \"Not a <\" + EXTERNAL_PARSERS_TAG + \"/> configuration document: \" +\n 90                               (element != null ? element.getTagName() : \"n/a\"));\n 91           }\n 92   \n 93           return parsers;\n 94       }\n100       private static ExternalParser readParser(Element parserDef) throws TikaException {\n101           ExternalParser parser = new ExternalParser();\n102   \n103           NodeList children = parserDef.getChildNodes();\n104           for (int i = 0; i < children.getLength(); i++) {\n105               Node node = children.item(i);\n106               if (node.getNodeType() == Node.ELEMENT_NODE) {\n107                   Element child = (Element) node;\n108                   switch (child.getTagName()) {\n109                       case CHECK_TAG:\n110                           boolean present = readCheckTagAndCheck(child);\n111                           if (!present) {\n112                               return null;\n113                           }\n114                           break;\n115                       case COMMAND_TAG:\n116                           parser.setCommand(getString(child));\n117                           break;\n118                       case MIMETYPES_TAG:\n119                           parser.setSupportedTypes(readMimeTypes(child));\n120                           break;\n121                       case METADATA_TAG:\n122                           parser.setMetadataExtractionPatterns(readMetadataPatterns(child));\n123                           break;\n124                       default:\n125                           throw new IllegalArgumentException(\"reaction not defined for \" + child.getTagName());\n126                   }\n127               }\n128           }\n129   \n130           return parser;\n131       }\n150       private static Map<Pattern, String> readMetadataPatterns(Element metadataDef) {\n151           Map<Pattern, String> metadata = new HashMap<>();\n152   \n153           NodeList children = metadataDef.getChildNodes();\n154           for (int i = 0; i < children.getLength(); i++) {\n155               Node node = children.item(i);\n156               if (node.getNodeType() == Node.ELEMENT_NODE) {\n157                   Element child = (Element) node;\n158                   if (child.getTagName().equals(METADATA_MATCH_TAG)) {\n159                       String metadataKey = child.getAttribute(METADATA_KEY_ATTR);\n160                       Pattern pattern = Pattern.compile(getString(child));\n161                       metadata.put(pattern, metadataKey);\n162                   }\n163               }\n164           }\n165   \n166           return metadata;\n167       }\n",
            "cost": 0.062020000000000006,
            "harness_id": "TikaTwo",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParsersConfigReader.java:160:55",
            "status": "corpus",
            "valid_path": "NO",
            "id": 319
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaTwo",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-xmp/src/main/java/org/apache/tika/xmp/XMPMetadata.java:631:39",
            "status": "error",
            "id": 320
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-two/src/main/java/com/aixcc/tika/harnesses/two/TikaTwo.java:\n20       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n21   \n22           InputStream stream = new BufferedInputStream(new ByteArrayInputStream(input));\n23   \n24           // null metadata indicates html content type for JSoupParser\n25           Metadata metadata = new Metadata();\n26           \n27           ContentHandler handler = new DefaultHandler();\n28   \n29           ParseContext context = new ParseContext();\n30           context.set(Parser.class, new CompositeExternalParser());\n31   \n32           (new JSoupParser()).parse(stream, handler, metadata, context);\n33   \n34           for (String name : metadata.names()) {\n35               System.out.println(name + \": \" + metadata.get(name));\n36           }\n37   \n38       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/JSoupParser.java:\n 76       public JSoupParser() {\n 77           super();\n 78       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/AbstractEncodingDetectorParser.java:\n33       public AbstractEncodingDetectorParser() {\n34           encodingDetector = new DefaultEncodingDetector();\n35       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/detect/DefaultEncodingDetector.java:\n40       public DefaultEncodingDetector() {\n41           this(new ServiceLoader(DefaultEncodingDetector.class.getClassLoader()));\n42       }\n44       public DefaultEncodingDetector(ServiceLoader loader) {\n45           super(loader.loadServiceProviders(EncodingDetector.class));\n46       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java:\n251       public <T> List<T> loadServiceProviders(Class<T> iface) {\n252           List<T> tmp = new ArrayList<>();\n253           tmp.addAll(loadDynamicServiceProviders(iface));\n254           tmp.addAll(loadStaticServiceProviders(iface));\n255   \n256           List<T> providers = new ArrayList<>();\n257           Set<String> seen = new HashSet<>();\n258           for (T provider : tmp) {\n259               if (! seen.contains(provider.getClass().getCanonicalName())) {\n260                   providers.add(provider);\n261                   seen.add(provider.getClass().getCanonicalName());\n262               }\n263           }\n264           return providers;\n265       }\n324       public <T> List<T> loadStaticServiceProviders(Class<T> iface) {\n325           return loadStaticServiceProviders(iface, Collections.EMPTY_SET);\n326       }\n339       @SuppressWarnings(\"unchecked\")\n340       public <T> List<T> loadStaticServiceProviders(Class<T> iface,\n341                                                     Collection<Class<? extends T>> excludes) {\n342           List<T> providers = new ArrayList<>();\n343   \n344           if (loader != null) {\n345               List<String> names = identifyStaticServiceProviders(iface);\n346               for (String name : names) {\n347                   try {\n348                       Class<?> klass = loader.loadClass(name);\n349                       if (iface.isAssignableFrom(klass)) {\n350                           boolean shouldExclude = false;\n351                           for (Class<? extends T> ex : excludes) {\n352                               if (ex.isAssignableFrom(klass)) {\n353                                   shouldExclude = true;\n354                                   break;\n355                               }\n356                           }\n357                           if (!shouldExclude) {\n358                               T instance = ServiceLoaderUtils.newInstance(klass, this);\n359                               if (instance instanceof Initializable) {\n360                                   ((Initializable) instance).initialize(Collections.EMPTY_MAP);\n361                                   ((Initializable) instance)\n362                                           .checkInitialization(initializableProblemHandler);\n363                               }\n364                               providers.add(instance);\n365                           }\n366                       } else {\n367                           throw new TikaConfigException(\n368                                   \"Class \" + name + \" is not of type: \" + iface);\n369                       }\n370                   } catch (Throwable t) {\n371                       handler.handleLoadError(name, t);\n372                   }\n373               }\n374           }\n375           return providers;\n376       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java:\n563       @Override\n564       public void initialize(Map<String, Param> params) throws TikaConfigException {\n565           hasTesseract = hasTesseract();\n566           if (isEnableImagePreprocessing()) {\n567               hasImageMagick = hasImageMagick();\n568           } else {\n569               hasImageMagick = false;\n570           }\n571           if (preloadLangs) {\n572               preloadLangs();\n573               if (!StringUtils.isBlank(defaultConfig.getLanguage())) {\n574                   validateLangString(defaultConfig.getLanguage());\n575               }\n576           }\n577           imagePreprocessor = new ImagePreprocessor(getImageMagickPath() + getImageMagickProg());\n578       }\n580       private void validateLangString(String language) throws TikaConfigException {\n581           Set<String> invalidlangs = new HashSet<>();\n582           Set<String> validLangs = new HashSet<>();\n583           TesseractOCRConfig.getLangs(language, validLangs, invalidlangs);\n584           if (invalidlangs.size() > 0) {\n585               throw new TikaConfigException(\"Invalid language code(s): \" + invalidlangs);\n586           }\n587           if (langs.size() > 0) {\n588               for (String lang : validLangs) {\n589                   if (!langs.contains(lang)) {\n590                       throw new TikaConfigException(\n591                               \"tesseract does not have \" + lang + \" available. I see only: \" + langs);\n592                   }\n593               }\n594           }\n595       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRConfig.java:\n109       public static void getLangs(String language, Set<String> validLangs, Set<String> invalidLangs) {\n110           if (StringUtils.isBlank(language)) {\n111               return;\n112           }\n113           // Get rid of embedded spaces\n114           language = language.replaceAll(\"\\\\s\", \"\");\n115           // Test for leading or trailing +\n116           if (language.matches(\"\\\\+.*|.*\\\\+\")) {\n117               throw new IllegalArgumentException(\n118                       \"Invalid syntax - Can't start or end with +\" + language);\n119           }\n120           // Split on the + sign\n121           final String[] langs = language.split(\"\\\\+\");\n122           for (String lang : langs) {\n123               // First, make sure it conforms to the correct syntax\n124               if (!lang.matches(\n125                       \"([a-zA-Z]{3}(_[a-zA-Z]{3,4}){0,2})|script(/|\\\\\\\\)[A-Z][a-zA-Z_]+\")) {\n126                   invalidLangs.add(lang + \" (invalid syntax)\");\n127               } else {\n128                   validLangs.add(lang);\n129               }\n130           }\n131       }\n",
            "cost": 0.06295,
            "harness_id": "TikaTwo",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRConfig.java:114:40",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 321
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-two/src/main/java/com/aixcc/tika/harnesses/two/TikaTwo.java:\n20       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n21   \n22           InputStream stream = new BufferedInputStream(new ByteArrayInputStream(input));\n23   \n24           // null metadata indicates html content type for JSoupParser\n25           Metadata metadata = new Metadata();\n26           \n27           ContentHandler handler = new DefaultHandler();\n28   \n29           ParseContext context = new ParseContext();\n30           context.set(Parser.class, new CompositeExternalParser());\n31   \n32           (new JSoupParser()).parse(stream, handler, metadata, context);\n33   \n34           for (String name : metadata.names()) {\n35               System.out.println(name + \": \" + metadata.get(name));\n36           }\n37   \n38       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/JSoupParser.java:\n 76       public JSoupParser() {\n 77           super();\n 78       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/AbstractEncodingDetectorParser.java:\n33       public AbstractEncodingDetectorParser() {\n34           encodingDetector = new DefaultEncodingDetector();\n35       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/detect/DefaultEncodingDetector.java:\n40       public DefaultEncodingDetector() {\n41           this(new ServiceLoader(DefaultEncodingDetector.class.getClassLoader()));\n42       }\n44       public DefaultEncodingDetector(ServiceLoader loader) {\n45           super(loader.loadServiceProviders(EncodingDetector.class));\n46       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java:\n251       public <T> List<T> loadServiceProviders(Class<T> iface) {\n252           List<T> tmp = new ArrayList<>();\n253           tmp.addAll(loadDynamicServiceProviders(iface));\n254           tmp.addAll(loadStaticServiceProviders(iface));\n255   \n256           List<T> providers = new ArrayList<>();\n257           Set<String> seen = new HashSet<>();\n258           for (T provider : tmp) {\n259               if (! seen.contains(provider.getClass().getCanonicalName())) {\n260                   providers.add(provider);\n261                   seen.add(provider.getClass().getCanonicalName());\n262               }\n263           }\n264           return providers;\n265       }\n324       public <T> List<T> loadStaticServiceProviders(Class<T> iface) {\n325           return loadStaticServiceProviders(iface, Collections.EMPTY_SET);\n326       }\n339       @SuppressWarnings(\"unchecked\")\n340       public <T> List<T> loadStaticServiceProviders(Class<T> iface,\n341                                                     Collection<Class<? extends T>> excludes) {\n342           List<T> providers = new ArrayList<>();\n343   \n344           if (loader != null) {\n345               List<String> names = identifyStaticServiceProviders(iface);\n346               for (String name : names) {\n347                   try {\n348                       Class<?> klass = loader.loadClass(name);\n349                       if (iface.isAssignableFrom(klass)) {\n350                           boolean shouldExclude = false;\n351                           for (Class<? extends T> ex : excludes) {\n352                               if (ex.isAssignableFrom(klass)) {\n353                                   shouldExclude = true;\n354                                   break;\n355                               }\n356                           }\n357                           if (!shouldExclude) {\n358                               T instance = ServiceLoaderUtils.newInstance(klass, this);\n359                               if (instance instanceof Initializable) {\n360                                   ((Initializable) instance).initialize(Collections.EMPTY_MAP);\n361                                   ((Initializable) instance)\n362                                           .checkInitialization(initializableProblemHandler);\n363                               }\n364                               providers.add(instance);\n365                           }\n366                       } else {\n367                           throw new TikaConfigException(\n368                                   \"Class \" + name + \" is not of type: \" + iface);\n369                       }\n370                   } catch (Throwable t) {\n371                       handler.handleLoadError(name, t);\n372                   }\n373               }\n374           }\n375           return providers;\n376       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java:\n563       @Override\n564       public void initialize(Map<String, Param> params) throws TikaConfigException {\n565           hasTesseract = hasTesseract();\n566           if (isEnableImagePreprocessing()) {\n567               hasImageMagick = hasImageMagick();\n568           } else {\n569               hasImageMagick = false;\n570           }\n571           if (preloadLangs) {\n572               preloadLangs();\n573               if (!StringUtils.isBlank(defaultConfig.getLanguage())) {\n574                   validateLangString(defaultConfig.getLanguage());\n575               }\n576           }\n577           imagePreprocessor = new ImagePreprocessor(getImageMagickPath() + getImageMagickProg());\n578       }\n580       private void validateLangString(String language) throws TikaConfigException {\n581           Set<String> invalidlangs = new HashSet<>();\n582           Set<String> validLangs = new HashSet<>();\n583           TesseractOCRConfig.getLangs(language, validLangs, invalidlangs);\n584           if (invalidlangs.size() > 0) {\n585               throw new TikaConfigException(\"Invalid language code(s): \" + invalidlangs);\n586           }\n587           if (langs.size() > 0) {\n588               for (String lang : validLangs) {\n589                   if (!langs.contains(lang)) {\n590                       throw new TikaConfigException(\n591                               \"tesseract does not have \" + lang + \" available. I see only: \" + langs);\n592                   }\n593               }\n594           }\n595       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRConfig.java:\n109       public static void getLangs(String language, Set<String> validLangs, Set<String> invalidLangs) {\n110           if (StringUtils.isBlank(language)) {\n111               return;\n112           }\n113           // Get rid of embedded spaces\n114           language = language.replaceAll(\"\\\\s\", \"\");\n115           // Test for leading or trailing +\n116           if (language.matches(\"\\\\+.*|.*\\\\+\")) {\n117               throw new IllegalArgumentException(\n118                       \"Invalid syntax - Can't start or end with +\" + language);\n119           }\n120           // Split on the + sign\n121           final String[] langs = language.split(\"\\\\+\");\n122           for (String lang : langs) {\n123               // First, make sure it conforms to the correct syntax\n124               if (!lang.matches(\n125                       \"([a-zA-Z]{3}(_[a-zA-Z]{3,4}){0,2})|script(/|\\\\\\\\)[A-Z][a-zA-Z_]+\")) {\n126                   invalidLangs.add(lang + \" (invalid syntax)\");\n127               } else {\n128                   validLangs.add(lang);\n129               }\n130           }\n131       }\n",
            "cost": 0.061450000000000005,
            "harness_id": "TikaTwo",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRConfig.java:116:30",
            "status": "corpus",
            "valid_path": "NO",
            "id": 322
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-two/src/main/java/com/aixcc/tika/harnesses/two/TikaTwo.java:\n20       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n21   \n22           InputStream stream = new BufferedInputStream(new ByteArrayInputStream(input));\n23   \n24           // null metadata indicates html content type for JSoupParser\n25           Metadata metadata = new Metadata();\n26           \n27           ContentHandler handler = new DefaultHandler();\n28   \n29           ParseContext context = new ParseContext();\n30           context.set(Parser.class, new CompositeExternalParser());\n31   \n32           (new JSoupParser()).parse(stream, handler, metadata, context);\n33   \n34           for (String name : metadata.names()) {\n35               System.out.println(name + \": \" + metadata.get(name));\n36           }\n37   \n38       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/JSoupParser.java:\n 76       public JSoupParser() {\n 77           super();\n 78       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/AbstractEncodingDetectorParser.java:\n33       public AbstractEncodingDetectorParser() {\n34           encodingDetector = new DefaultEncodingDetector();\n35       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/detect/DefaultEncodingDetector.java:\n40       public DefaultEncodingDetector() {\n41           this(new ServiceLoader(DefaultEncodingDetector.class.getClassLoader()));\n42       }\n44       public DefaultEncodingDetector(ServiceLoader loader) {\n45           super(loader.loadServiceProviders(EncodingDetector.class));\n46       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java:\n251       public <T> List<T> loadServiceProviders(Class<T> iface) {\n252           List<T> tmp = new ArrayList<>();\n253           tmp.addAll(loadDynamicServiceProviders(iface));\n254           tmp.addAll(loadStaticServiceProviders(iface));\n255   \n256           List<T> providers = new ArrayList<>();\n257           Set<String> seen = new HashSet<>();\n258           for (T provider : tmp) {\n259               if (! seen.contains(provider.getClass().getCanonicalName())) {\n260                   providers.add(provider);\n261                   seen.add(provider.getClass().getCanonicalName());\n262               }\n263           }\n264           return providers;\n265       }\n324       public <T> List<T> loadStaticServiceProviders(Class<T> iface) {\n325           return loadStaticServiceProviders(iface, Collections.EMPTY_SET);\n326       }\n339       @SuppressWarnings(\"unchecked\")\n340       public <T> List<T> loadStaticServiceProviders(Class<T> iface,\n341                                                     Collection<Class<? extends T>> excludes) {\n342           List<T> providers = new ArrayList<>();\n343   \n344           if (loader != null) {\n345               List<String> names = identifyStaticServiceProviders(iface);\n346               for (String name : names) {\n347                   try {\n348                       Class<?> klass = loader.loadClass(name);\n349                       if (iface.isAssignableFrom(klass)) {\n350                           boolean shouldExclude = false;\n351                           for (Class<? extends T> ex : excludes) {\n352                               if (ex.isAssignableFrom(klass)) {\n353                                   shouldExclude = true;\n354                                   break;\n355                               }\n356                           }\n357                           if (!shouldExclude) {\n358                               T instance = ServiceLoaderUtils.newInstance(klass, this);\n359                               if (instance instanceof Initializable) {\n360                                   ((Initializable) instance).initialize(Collections.EMPTY_MAP);\n361                                   ((Initializable) instance)\n362                                           .checkInitialization(initializableProblemHandler);\n363                               }\n364                               providers.add(instance);\n365                           }\n366                       } else {\n367                           throw new TikaConfigException(\n368                                   \"Class \" + name + \" is not of type: \" + iface);\n369                       }\n370                   } catch (Throwable t) {\n371                       handler.handleLoadError(name, t);\n372                   }\n373               }\n374           }\n375           return providers;\n376       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java:\n563       @Override\n564       public void initialize(Map<String, Param> params) throws TikaConfigException {\n565           hasTesseract = hasTesseract();\n566           if (isEnableImagePreprocessing()) {\n567               hasImageMagick = hasImageMagick();\n568           } else {\n569               hasImageMagick = false;\n570           }\n571           if (preloadLangs) {\n572               preloadLangs();\n573               if (!StringUtils.isBlank(defaultConfig.getLanguage())) {\n574                   validateLangString(defaultConfig.getLanguage());\n575               }\n576           }\n577           imagePreprocessor = new ImagePreprocessor(getImageMagickPath() + getImageMagickProg());\n578       }\n580       private void validateLangString(String language) throws TikaConfigException {\n581           Set<String> invalidlangs = new HashSet<>();\n582           Set<String> validLangs = new HashSet<>();\n583           TesseractOCRConfig.getLangs(language, validLangs, invalidlangs);\n584           if (invalidlangs.size() > 0) {\n585               throw new TikaConfigException(\"Invalid language code(s): \" + invalidlangs);\n586           }\n587           if (langs.size() > 0) {\n588               for (String lang : validLangs) {\n589                   if (!langs.contains(lang)) {\n590                       throw new TikaConfigException(\n591                               \"tesseract does not have \" + lang + \" available. I see only: \" + langs);\n592                   }\n593               }\n594           }\n595       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRConfig.java:\n109       public static void getLangs(String language, Set<String> validLangs, Set<String> invalidLangs) {\n110           if (StringUtils.isBlank(language)) {\n111               return;\n112           }\n113           // Get rid of embedded spaces\n114           language = language.replaceAll(\"\\\\s\", \"\");\n115           // Test for leading or trailing +\n116           if (language.matches(\"\\\\+.*|.*\\\\+\")) {\n117               throw new IllegalArgumentException(\n118                       \"Invalid syntax - Can't start or end with +\" + language);\n119           }\n120           // Split on the + sign\n121           final String[] langs = language.split(\"\\\\+\");\n122           for (String lang : langs) {\n123               // First, make sure it conforms to the correct syntax\n124               if (!lang.matches(\n125                       \"([a-zA-Z]{3}(_[a-zA-Z]{3,4}){0,2})|script(/|\\\\\\\\)[A-Z][a-zA-Z_]+\")) {\n126                   invalidLangs.add(lang + \" (invalid syntax)\");\n127               } else {\n128                   validLangs.add(lang);\n129               }\n130           }\n131       }\n",
            "cost": 0.0635,
            "harness_id": "TikaTwo",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRConfig.java:121:47",
            "status": "corpus",
            "valid_path": "NO",
            "id": 323
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-two/src/main/java/com/aixcc/tika/harnesses/two/TikaTwo.java:\n20       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n21   \n22           InputStream stream = new BufferedInputStream(new ByteArrayInputStream(input));\n23   \n24           // null metadata indicates html content type for JSoupParser\n25           Metadata metadata = new Metadata();\n26           \n27           ContentHandler handler = new DefaultHandler();\n28   \n29           ParseContext context = new ParseContext();\n30           context.set(Parser.class, new CompositeExternalParser());\n31   \n32           (new JSoupParser()).parse(stream, handler, metadata, context);\n33   \n34           for (String name : metadata.names()) {\n35               System.out.println(name + \": \" + metadata.get(name));\n36           }\n37   \n38       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/JSoupParser.java:\n 76       public JSoupParser() {\n 77           super();\n 78       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/AbstractEncodingDetectorParser.java:\n33       public AbstractEncodingDetectorParser() {\n34           encodingDetector = new DefaultEncodingDetector();\n35       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/detect/DefaultEncodingDetector.java:\n40       public DefaultEncodingDetector() {\n41           this(new ServiceLoader(DefaultEncodingDetector.class.getClassLoader()));\n42       }\n44       public DefaultEncodingDetector(ServiceLoader loader) {\n45           super(loader.loadServiceProviders(EncodingDetector.class));\n46       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java:\n251       public <T> List<T> loadServiceProviders(Class<T> iface) {\n252           List<T> tmp = new ArrayList<>();\n253           tmp.addAll(loadDynamicServiceProviders(iface));\n254           tmp.addAll(loadStaticServiceProviders(iface));\n255   \n256           List<T> providers = new ArrayList<>();\n257           Set<String> seen = new HashSet<>();\n258           for (T provider : tmp) {\n259               if (! seen.contains(provider.getClass().getCanonicalName())) {\n260                   providers.add(provider);\n261                   seen.add(provider.getClass().getCanonicalName());\n262               }\n263           }\n264           return providers;\n265       }\n324       public <T> List<T> loadStaticServiceProviders(Class<T> iface) {\n325           return loadStaticServiceProviders(iface, Collections.EMPTY_SET);\n326       }\n339       @SuppressWarnings(\"unchecked\")\n340       public <T> List<T> loadStaticServiceProviders(Class<T> iface,\n341                                                     Collection<Class<? extends T>> excludes) {\n342           List<T> providers = new ArrayList<>();\n343   \n344           if (loader != null) {\n345               List<String> names = identifyStaticServiceProviders(iface);\n346               for (String name : names) {\n347                   try {\n348                       Class<?> klass = loader.loadClass(name);\n349                       if (iface.isAssignableFrom(klass)) {\n350                           boolean shouldExclude = false;\n351                           for (Class<? extends T> ex : excludes) {\n352                               if (ex.isAssignableFrom(klass)) {\n353                                   shouldExclude = true;\n354                                   break;\n355                               }\n356                           }\n357                           if (!shouldExclude) {\n358                               T instance = ServiceLoaderUtils.newInstance(klass, this);\n359                               if (instance instanceof Initializable) {\n360                                   ((Initializable) instance).initialize(Collections.EMPTY_MAP);\n361                                   ((Initializable) instance)\n362                                           .checkInitialization(initializableProblemHandler);\n363                               }\n364                               providers.add(instance);\n365                           }\n366                       } else {\n367                           throw new TikaConfigException(\n368                                   \"Class \" + name + \" is not of type: \" + iface);\n369                       }\n370                   } catch (Throwable t) {\n371                       handler.handleLoadError(name, t);\n372                   }\n373               }\n374           }\n375           return providers;\n376       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRParser.java:\n563       @Override\n564       public void initialize(Map<String, Param> params) throws TikaConfigException {\n565           hasTesseract = hasTesseract();\n566           if (isEnableImagePreprocessing()) {\n567               hasImageMagick = hasImageMagick();\n568           } else {\n569               hasImageMagick = false;\n570           }\n571           if (preloadLangs) {\n572               preloadLangs();\n573               if (!StringUtils.isBlank(defaultConfig.getLanguage())) {\n574                   validateLangString(defaultConfig.getLanguage());\n575               }\n576           }\n577           imagePreprocessor = new ImagePreprocessor(getImageMagickPath() + getImageMagickProg());\n578       }\n580       private void validateLangString(String language) throws TikaConfigException {\n581           Set<String> invalidlangs = new HashSet<>();\n582           Set<String> validLangs = new HashSet<>();\n583           TesseractOCRConfig.getLangs(language, validLangs, invalidlangs);\n584           if (invalidlangs.size() > 0) {\n585               throw new TikaConfigException(\"Invalid language code(s): \" + invalidlangs);\n586           }\n587           if (langs.size() > 0) {\n588               for (String lang : validLangs) {\n589                   if (!langs.contains(lang)) {\n590                       throw new TikaConfigException(\n591                               \"tesseract does not have \" + lang + \" available. I see only: \" + langs);\n592                   }\n593               }\n594           }\n595       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRConfig.java:\n109       public static void getLangs(String language, Set<String> validLangs, Set<String> invalidLangs) {\n110           if (StringUtils.isBlank(language)) {\n111               return;\n112           }\n113           // Get rid of embedded spaces\n114           language = language.replaceAll(\"\\\\s\", \"\");\n115           // Test for leading or trailing +\n116           if (language.matches(\"\\\\+.*|.*\\\\+\")) {\n117               throw new IllegalArgumentException(\n118                       \"Invalid syntax - Can't start or end with +\" + language);\n119           }\n120           // Split on the + sign\n121           final String[] langs = language.split(\"\\\\+\");\n122           for (String lang : langs) {\n123               // First, make sure it conforms to the correct syntax\n124               if (!lang.matches(\n125                       \"([a-zA-Z]{3}(_[a-zA-Z]{3,4}){0,2})|script(/|\\\\\\\\)[A-Z][a-zA-Z_]+\")) {\n126                   invalidLangs.add(lang + \" (invalid syntax)\");\n127               } else {\n128                   validLangs.add(lang);\n129               }\n130           }\n131       }\n",
            "cost": 0.06015000000000001,
            "harness_id": "TikaTwo",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-ocr-module/src/main/java/org/apache/tika/parser/ocr/TesseractOCRConfig.java:125:21",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 324
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaTwo",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/utils/CharsetUtils.java:107:75",
            "status": "error",
            "id": 325
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-two/src/main/java/com/aixcc/tika/harnesses/two/TikaTwo.java:\n20       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n21   \n22           InputStream stream = new BufferedInputStream(new ByteArrayInputStream(input));\n23   \n24           // null metadata indicates html content type for JSoupParser\n25           Metadata metadata = new Metadata();\n26           \n27           ContentHandler handler = new DefaultHandler();\n28   \n29           ParseContext context = new ParseContext();\n30           context.set(Parser.class, new CompositeExternalParser());\n31   \n32           (new JSoupParser()).parse(stream, handler, metadata, context);\n33   \n34           for (String name : metadata.names()) {\n35               System.out.println(name + \": \" + metadata.get(name));\n36           }\n37   \n38       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/external/CompositeExternalParser.java:\n36       public CompositeExternalParser() throws IOException, TikaException {\n37           this(new MediaTypeRegistry());\n38       }\n40       @SuppressWarnings(\"unchecked\")\n41       public CompositeExternalParser(MediaTypeRegistry registry) throws IOException, TikaException {\n42           super(registry, (List<Parser>) (List<? extends Parser>) ExternalParsersFactory.create());\n43       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParsersFactory.java:\n43       public static List<ExternalParser> create() throws IOException, TikaException {\n44           return create(new ServiceLoader());\n45       }\n47       public static List<ExternalParser> create(ServiceLoader loader)\n48               throws IOException, TikaException {\n49           return create(\"tika-external-parsers.xml\", loader);\n50       }\n52       public static List<ExternalParser> create(String filename, ServiceLoader loader)\n53               throws IOException, TikaException {\n54           String filepath =\n55                   ExternalParsersFactory.class.getPackage().getName().replace('.', '/') + \"/\" +\n56                           filename;\n57           Enumeration<URL> files = loader.findServiceResources(filepath);\n58           ArrayList<URL> list = Collections.list(files);\n59           URL[] urls = list.toArray(new URL[0]);\n60           return create(urls);\n61       }\n63       public static List<ExternalParser> create(URL... urls) throws IOException, TikaException {\n64           List<ExternalParser> parsers = new ArrayList<>();\n65           for (URL url : urls) {\n66               try (InputStream stream = url.openStream()) {\n67                   parsers.addAll(ExternalParsersConfigReader.read(stream));\n68               }\n69           }\n70           return parsers;\n71       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParsersConfigReader.java:\n 56       public static List<ExternalParser> read(InputStream stream) throws TikaException, IOException {\n 57           try {\n 58               DocumentBuilder builder = XMLReaderUtils.getDocumentBuilder();\n 59               Document document = builder.parse(new InputSource(stream));\n 60               return read(document);\n 61           } catch (SAXException e) {\n 62               throw new TikaException(\"Invalid parser configuration\", e);\n 63           }\n 64       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java:\n 244       public static DocumentBuilderFactory getDocumentBuilderFactory() {\n 245           //borrowed from Apache POI\n 246           DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n 247           if (LOG.isDebugEnabled()) {\n 248               LOG.debug(\"DocumentBuilderFactory class {}\", factory.getClass());\n 249           }\n 250   \n 251           factory.setExpandEntityReferences(false);\n 252           factory.setNamespaceAware(true);\n 253           factory.setValidating(false);\n 254   \n 255           trySetSAXFeature(factory, XMLConstants.FEATURE_SECURE_PROCESSING, true);\n 256           trySetSAXFeature(factory, \"http://xml.org/sax/features/external-general-entities\", false);\n 257           trySetSAXFeature(factory, \"http://xml.org/sax/features/external-parameter-entities\", false);\n 258           trySetSAXFeature(factory, \"http://apache.org/xml/features/nonvalidating/load-external-dtd\",\n 259                   false);\n 260           trySetSAXFeature(factory, \"http://apache.org/xml/features/nonvalidating/load-dtd-grammar\",\n 261                   false);\n 262           trySetXercesSecurityManager(factory);\n 263           return factory;\n 264       }\n 276       public static DocumentBuilder getDocumentBuilder() throws TikaException {\n 277           try {\n 278               DocumentBuilderFactory documentBuilderFactory = getDocumentBuilderFactory();\n 279               DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n 280               documentBuilder.setEntityResolver(IGNORING_SAX_ENTITY_RESOLVER);\n 281               documentBuilder.setErrorHandler(null);\n 282               return documentBuilder;\n 283           } catch (ParserConfigurationException e) {\n 284               throw new TikaException(\"XML parser not available\", e);\n 285           }\n 286       }\n 713       private static void trySetXercesSecurityManager(DocumentBuilderFactory factory) {\n 714           //from POI\n 715           // Try built-in JVM one first, standalone if not\n 716           for (String securityManagerClassName : new String[]{\n 717                   //\"com.sun.org.apache.xerces.internal.util.SecurityManager\",\n 718                   XERCES_SECURITY_MANAGER}) {\n 719               try {\n 720                   Object mgr =\n 721                           Class.forName(securityManagerClassName).getDeclaredConstructor().newInstance();\n 722                   Method setLimit = mgr.getClass().getMethod(\"setEntityExpansionLimit\",\n 723                           Integer.TYPE);\n 724                   setLimit.invoke(mgr, MAX_ENTITY_EXPANSIONS);\n 725                   factory.setAttribute(XERCES_SECURITY_MANAGER_PROPERTY, mgr);\n 726                   // Stop once one can be setup without error\n 727                   return;\n 728               } catch (ClassNotFoundException e) {\n 729                   // continue without log, this is expected in some setups\n 730               } catch (Throwable e) {     // NOSONAR - also catch things like NoClassDefError here\n 731                   // throttle the log somewhat as it can spam the log otherwise\n 732                   if (System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {\n 733                       LOG.warn(\n 734                               \"SAX Security Manager could not be setup [log suppressed for 5 \" +\n 735                                       \"minutes]\",\n 736                               e);\n 737                       LAST_LOG = System.currentTimeMillis();\n 738                   }\n 739               }\n 740           }\n 741   \n 742           // separate old version of Xerces not found => use the builtin way of setting the property\n 743           try {\n 744               factory.setAttribute(\"http://www.oracle.com/xml/jaxp/properties/entityExpansionLimit\",\n 745                       MAX_ENTITY_EXPANSIONS);\n 746           } catch (IllegalArgumentException e) {\n 747               // NOSONAR - also catch things like NoClassDefError here\n 748               // throttle the log somewhat as it can spam the log otherwise\n 749               if (System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {\n 750                   LOG.warn(\"SAX Security Manager could not be setup [log suppressed for 5 minutes]\",\n 751                           e);\n 752                   LAST_LOG = System.currentTimeMillis();\n 753               }\n 754           }\n 755       }\n",
            "cost": 0.05987,
            "harness_id": "TikaTwo",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java:724:17",
            "status": "corpus",
            "valid_path": "NO",
            "id": 326
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-two/src/main/java/com/aixcc/tika/harnesses/two/TikaTwo.java:\n20       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n21   \n22           InputStream stream = new BufferedInputStream(new ByteArrayInputStream(input));\n23   \n24           // null metadata indicates html content type for JSoupParser\n25           Metadata metadata = new Metadata();\n26           \n27           ContentHandler handler = new DefaultHandler();\n28   \n29           ParseContext context = new ParseContext();\n30           context.set(Parser.class, new CompositeExternalParser());\n31   \n32           (new JSoupParser()).parse(stream, handler, metadata, context);\n33   \n34           for (String name : metadata.names()) {\n35               System.out.println(name + \": \" + metadata.get(name));\n36           }\n37   \n38       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/external/CompositeExternalParser.java:\n36       public CompositeExternalParser() throws IOException, TikaException {\n37           this(new MediaTypeRegistry());\n38       }\n40       @SuppressWarnings(\"unchecked\")\n41       public CompositeExternalParser(MediaTypeRegistry registry) throws IOException, TikaException {\n42           super(registry, (List<Parser>) (List<? extends Parser>) ExternalParsersFactory.create());\n43       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParsersFactory.java:\n43       public static List<ExternalParser> create() throws IOException, TikaException {\n44           return create(new ServiceLoader());\n45       }\n47       public static List<ExternalParser> create(ServiceLoader loader)\n48               throws IOException, TikaException {\n49           return create(\"tika-external-parsers.xml\", loader);\n50       }\n52       public static List<ExternalParser> create(String filename, ServiceLoader loader)\n53               throws IOException, TikaException {\n54           String filepath =\n55                   ExternalParsersFactory.class.getPackage().getName().replace('.', '/') + \"/\" +\n56                           filename;\n57           Enumeration<URL> files = loader.findServiceResources(filepath);\n58           ArrayList<URL> list = Collections.list(files);\n59           URL[] urls = list.toArray(new URL[0]);\n60           return create(urls);\n61       }\n63       public static List<ExternalParser> create(URL... urls) throws IOException, TikaException {\n64           List<ExternalParser> parsers = new ArrayList<>();\n65           for (URL url : urls) {\n66               try (InputStream stream = url.openStream()) {\n67                   parsers.addAll(ExternalParsersConfigReader.read(stream));\n68               }\n69           }\n70           return parsers;\n71       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParsersConfigReader.java:\n 56       public static List<ExternalParser> read(InputStream stream) throws TikaException, IOException {\n 57           try {\n 58               DocumentBuilder builder = XMLReaderUtils.getDocumentBuilder();\n 59               Document document = builder.parse(new InputSource(stream));\n 60               return read(document);\n 61           } catch (SAXException e) {\n 62               throw new TikaException(\"Invalid parser configuration\", e);\n 63           }\n 64       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java:\n 244       public static DocumentBuilderFactory getDocumentBuilderFactory() {\n 245           //borrowed from Apache POI\n 246           DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n 247           if (LOG.isDebugEnabled()) {\n 248               LOG.debug(\"DocumentBuilderFactory class {}\", factory.getClass());\n 249           }\n 250   \n 251           factory.setExpandEntityReferences(false);\n 252           factory.setNamespaceAware(true);\n 253           factory.setValidating(false);\n 254   \n 255           trySetSAXFeature(factory, XMLConstants.FEATURE_SECURE_PROCESSING, true);\n 256           trySetSAXFeature(factory, \"http://xml.org/sax/features/external-general-entities\", false);\n 257           trySetSAXFeature(factory, \"http://xml.org/sax/features/external-parameter-entities\", false);\n 258           trySetSAXFeature(factory, \"http://apache.org/xml/features/nonvalidating/load-external-dtd\",\n 259                   false);\n 260           trySetSAXFeature(factory, \"http://apache.org/xml/features/nonvalidating/load-dtd-grammar\",\n 261                   false);\n 262           trySetXercesSecurityManager(factory);\n 263           return factory;\n 264       }\n 276       public static DocumentBuilder getDocumentBuilder() throws TikaException {\n 277           try {\n 278               DocumentBuilderFactory documentBuilderFactory = getDocumentBuilderFactory();\n 279               DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n 280               documentBuilder.setEntityResolver(IGNORING_SAX_ENTITY_RESOLVER);\n 281               documentBuilder.setErrorHandler(null);\n 282               return documentBuilder;\n 283           } catch (ParserConfigurationException e) {\n 284               throw new TikaException(\"XML parser not available\", e);\n 285           }\n 286       }\n 713       private static void trySetXercesSecurityManager(DocumentBuilderFactory factory) {\n 714           //from POI\n 715           // Try built-in JVM one first, standalone if not\n 716           for (String securityManagerClassName : new String[]{\n 717                   //\"com.sun.org.apache.xerces.internal.util.SecurityManager\",\n 718                   XERCES_SECURITY_MANAGER}) {\n 719               try {\n 720                   Object mgr =\n 721                           Class.forName(securityManagerClassName).getDeclaredConstructor().newInstance();\n 722                   Method setLimit = mgr.getClass().getMethod(\"setEntityExpansionLimit\",\n 723                           Integer.TYPE);\n 724                   setLimit.invoke(mgr, MAX_ENTITY_EXPANSIONS);\n 725                   factory.setAttribute(XERCES_SECURITY_MANAGER_PROPERTY, mgr);\n 726                   // Stop once one can be setup without error\n 727                   return;\n 728               } catch (ClassNotFoundException e) {\n 729                   // continue without log, this is expected in some setups\n 730               } catch (Throwable e) {     // NOSONAR - also catch things like NoClassDefError here\n 731                   // throttle the log somewhat as it can spam the log otherwise\n 732                   if (System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {\n 733                       LOG.warn(\n 734                               \"SAX Security Manager could not be setup [log suppressed for 5 \" +\n 735                                       \"minutes]\",\n 736                               e);\n 737                       LAST_LOG = System.currentTimeMillis();\n 738                   }\n 739               }\n 740           }\n 741   \n 742           // separate old version of Xerces not found => use the builtin way of setting the property\n 743           try {\n 744               factory.setAttribute(\"http://www.oracle.com/xml/jaxp/properties/entityExpansionLimit\",\n 745                       MAX_ENTITY_EXPANSIONS);\n 746           } catch (IllegalArgumentException e) {\n 747               // NOSONAR - also catch things like NoClassDefError here\n 748               // throttle the log somewhat as it can spam the log otherwise\n 749               if (System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {\n 750                   LOG.warn(\"SAX Security Manager could not be setup [log suppressed for 5 minutes]\",\n 751                           e);\n 752                   LAST_LOG = System.currentTimeMillis();\n 753               }\n 754           }\n 755       }\n",
            "cost": 0.05947,
            "harness_id": "TikaTwo",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java:724:33",
            "status": "corpus",
            "valid_path": "NO",
            "id": 327
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-two/src/main/java/com/aixcc/tika/harnesses/two/TikaTwo.java:\n20       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n21   \n22           InputStream stream = new BufferedInputStream(new ByteArrayInputStream(input));\n23   \n24           // null metadata indicates html content type for JSoupParser\n25           Metadata metadata = new Metadata();\n26           \n27           ContentHandler handler = new DefaultHandler();\n28   \n29           ParseContext context = new ParseContext();\n30           context.set(Parser.class, new CompositeExternalParser());\n31   \n32           (new JSoupParser()).parse(stream, handler, metadata, context);\n33   \n34           for (String name : metadata.names()) {\n35               System.out.println(name + \": \" + metadata.get(name));\n36           }\n37   \n38       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/JSoupParser.java:\n 76       public JSoupParser() {\n 77           super();\n 78       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/AbstractEncodingDetectorParser.java:\n33       public AbstractEncodingDetectorParser() {\n34           encodingDetector = new DefaultEncodingDetector();\n35       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/detect/DefaultEncodingDetector.java:\n40       public DefaultEncodingDetector() {\n41           this(new ServiceLoader(DefaultEncodingDetector.class.getClassLoader()));\n42       }\n44       public DefaultEncodingDetector(ServiceLoader loader) {\n45           super(loader.loadServiceProviders(EncodingDetector.class));\n46       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java:\n251       public <T> List<T> loadServiceProviders(Class<T> iface) {\n252           List<T> tmp = new ArrayList<>();\n253           tmp.addAll(loadDynamicServiceProviders(iface));\n254           tmp.addAll(loadStaticServiceProviders(iface));\n255   \n256           List<T> providers = new ArrayList<>();\n257           Set<String> seen = new HashSet<>();\n258           for (T provider : tmp) {\n259               if (! seen.contains(provider.getClass().getCanonicalName())) {\n260                   providers.add(provider);\n261                   seen.add(provider.getClass().getCanonicalName());\n262               }\n263           }\n264           return providers;\n265       }\n324       public <T> List<T> loadStaticServiceProviders(Class<T> iface) {\n325           return loadStaticServiceProviders(iface, Collections.EMPTY_SET);\n326       }\n339       @SuppressWarnings(\"unchecked\")\n340       public <T> List<T> loadStaticServiceProviders(Class<T> iface,\n341                                                     Collection<Class<? extends T>> excludes) {\n342           List<T> providers = new ArrayList<>();\n343   \n344           if (loader != null) {\n345               List<String> names = identifyStaticServiceProviders(iface);\n346               for (String name : names) {\n347                   try {\n348                       Class<?> klass = loader.loadClass(name);\n349                       if (iface.isAssignableFrom(klass)) {\n350                           boolean shouldExclude = false;\n351                           for (Class<? extends T> ex : excludes) {\n352                               if (ex.isAssignableFrom(klass)) {\n353                                   shouldExclude = true;\n354                                   break;\n355                               }\n356                           }\n357                           if (!shouldExclude) {\n358                               T instance = ServiceLoaderUtils.newInstance(klass, this);\n359                               if (instance instanceof Initializable) {\n360                                   ((Initializable) instance).initialize(Collections.EMPTY_MAP);\n361                                   ((Initializable) instance)\n362                                           .checkInitialization(initializableProblemHandler);\n363                               }\n364                               providers.add(instance);\n365                           }\n366                       } else {\n367                           throw new TikaConfigException(\n368                                   \"Class \" + name + \" is not of type: \" + iface);\n369                       }\n370                   } catch (Throwable t) {\n371                       handler.handleLoadError(name, t);\n372                   }\n373               }\n374           }\n375           return providers;\n376       }\n\nsrc/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/recognition/ObjectRecognitionParser.java:\n 84       @Override\n 85       public void initialize(Map<String, Param> params) throws TikaConfigException {\n 86           AnnotationUtils.assignFieldParams(recogniser, params);\n 87           recogniser.initialize(params);\n 88           LOG.info(\"Recogniser = {}\", recogniser.getClass().getName());\n 89           LOG.info(\"Recogniser Available = {}\", recogniser.isAvailable());\n 90       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/utils/AnnotationUtils.java:\n 85       public static void assignFieldParams(Object bean, Map<String, Param> params)\n 86               throws TikaConfigException {\n 87           Class<?> beanClass = bean.getClass();\n 88           if (!PARAM_INFO.containsKey(beanClass)) {\n 89               synchronized (TikaConfig.class) {\n 90                   if (!PARAM_INFO.containsKey(beanClass)) {\n 91                       List<AccessibleObject> aObjs =\n 92                               collectInfo(beanClass, org.apache.tika.config.Field.class);\n 93                       List<ParamField> fields = new ArrayList<>(aObjs.size());\n 94   \n 95                       for (AccessibleObject aObj : aObjs) {\n 96                           fields.add(new ParamField(aObj));\n 97                       }\n 98                       PARAM_INFO.put(beanClass, fields);\n 99                   }\n100               }\n101           }\n102   \n103           List<ParamField> fields = PARAM_INFO.get(beanClass);\n104   \n105           for (ParamField field : fields) {\n106               Param<?> param = params.get(field.getName());\n107               if (param != null) {\n108                   if (field.getType().isAssignableFrom(param.getType())) {\n109                       try {\n110                           field.assignValue(bean, param.getValue());\n111                       } catch (InvocationTargetException e) {\n112                           LOG.error(\"Error assigning value '{}' to '{}'\", param.getValue(), param.getName());\n113                           final Throwable cause = e.getCause() == null ? e : e.getCause();\n114                           throw new TikaConfigException(cause.getMessage(), cause);\n115                       } catch (IllegalAccessException e) {\n116                           LOG.error(\"Error assigning value '{}' to '{}'\", param.getValue(), param.getName());\n117                           throw new TikaConfigException(e.getMessage(), e);\n118                       }\n119                   } else {\n120                       String msg = String.format(Locale.ROOT,\n121                               \"Value '%s' of type '%s' can't be\" +\n122                                       \" assigned to field '%s' of defined type '%s'\",\n123                               param.getValue(),\n124                               param.getValue().getClass(), field.getName(), field.getType());\n125                       throw new TikaConfigException(msg);\n126                   }\n127               } else if (field.isRequired()) {\n128                   //param not supplied but field is declared as required?\n129                   String msg = String.format(Locale.ROOT,\n130                           \"Param %s is required for %s,\" + \" but it is not given in config.\",\n131                           field.getName(), bean.getClass().getName());\n132                   throw new TikaConfigException(msg);\n133               } else {\n134                   LOG.debug(\"Param not supplied, field is not mandatory\");\n135               }\n136           }\n137       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ParamField.java:\n102       public void assignValue(Object bean, Object value)\n103               throws IllegalAccessException, InvocationTargetException {\n104           if (field != null) {\n105               field.set(bean, value);\n106           } else {\n107               setter.invoke(bean, value);\n108           }\n109       }\n",
            "cost": 0.061835,
            "harness_id": "TikaTwo",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ParamField.java:107:13",
            "status": "corpus",
            "valid_path": "NO",
            "id": 328
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-two/src/main/java/com/aixcc/tika/harnesses/two/TikaTwo.java:\n20       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n21   \n22           InputStream stream = new BufferedInputStream(new ByteArrayInputStream(input));\n23   \n24           // null metadata indicates html content type for JSoupParser\n25           Metadata metadata = new Metadata();\n26           \n27           ContentHandler handler = new DefaultHandler();\n28   \n29           ParseContext context = new ParseContext();\n30           context.set(Parser.class, new CompositeExternalParser());\n31   \n32           (new JSoupParser()).parse(stream, handler, metadata, context);\n33   \n34           for (String name : metadata.names()) {\n35               System.out.println(name + \": \" + metadata.get(name));\n36           }\n37   \n38       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/JSoupParser.java:\n 76       public JSoupParser() {\n 77           super();\n 78       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/AbstractEncodingDetectorParser.java:\n33       public AbstractEncodingDetectorParser() {\n34           encodingDetector = new DefaultEncodingDetector();\n35       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/detect/DefaultEncodingDetector.java:\n40       public DefaultEncodingDetector() {\n41           this(new ServiceLoader(DefaultEncodingDetector.class.getClassLoader()));\n42       }\n44       public DefaultEncodingDetector(ServiceLoader loader) {\n45           super(loader.loadServiceProviders(EncodingDetector.class));\n46       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java:\n251       public <T> List<T> loadServiceProviders(Class<T> iface) {\n252           List<T> tmp = new ArrayList<>();\n253           tmp.addAll(loadDynamicServiceProviders(iface));\n254           tmp.addAll(loadStaticServiceProviders(iface));\n255   \n256           List<T> providers = new ArrayList<>();\n257           Set<String> seen = new HashSet<>();\n258           for (T provider : tmp) {\n259               if (! seen.contains(provider.getClass().getCanonicalName())) {\n260                   providers.add(provider);\n261                   seen.add(provider.getClass().getCanonicalName());\n262               }\n263           }\n264           return providers;\n265       }\n324       public <T> List<T> loadStaticServiceProviders(Class<T> iface) {\n325           return loadStaticServiceProviders(iface, Collections.EMPTY_SET);\n326       }\n339       @SuppressWarnings(\"unchecked\")\n340       public <T> List<T> loadStaticServiceProviders(Class<T> iface,\n341                                                     Collection<Class<? extends T>> excludes) {\n342           List<T> providers = new ArrayList<>();\n343   \n344           if (loader != null) {\n345               List<String> names = identifyStaticServiceProviders(iface);\n346               for (String name : names) {\n347                   try {\n348                       Class<?> klass = loader.loadClass(name);\n349                       if (iface.isAssignableFrom(klass)) {\n350                           boolean shouldExclude = false;\n351                           for (Class<? extends T> ex : excludes) {\n352                               if (ex.isAssignableFrom(klass)) {\n353                                   shouldExclude = true;\n354                                   break;\n355                               }\n356                           }\n357                           if (!shouldExclude) {\n358                               T instance = ServiceLoaderUtils.newInstance(klass, this);\n359                               if (instance instanceof Initializable) {\n360                                   ((Initializable) instance).initialize(Collections.EMPTY_MAP);\n361                                   ((Initializable) instance)\n362                                           .checkInitialization(initializableProblemHandler);\n363                               }\n364                               providers.add(instance);\n365                           }\n366                       } else {\n367                           throw new TikaConfigException(\n368                                   \"Class \" + name + \" is not of type: \" + iface);\n369                       }\n370                   } catch (Throwable t) {\n371                       handler.handleLoadError(name, t);\n372                   }\n373               }\n374           }\n375           return providers;\n376       }\n\nsrc/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/recognition/ObjectRecognitionParser.java:\n 84       @Override\n 85       public void initialize(Map<String, Param> params) throws TikaConfigException {\n 86           AnnotationUtils.assignFieldParams(recogniser, params);\n 87           recogniser.initialize(params);\n 88           LOG.info(\"Recogniser = {}\", recogniser.getClass().getName());\n 89           LOG.info(\"Recogniser Available = {}\", recogniser.isAvailable());\n 90       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/utils/AnnotationUtils.java:\n 85       public static void assignFieldParams(Object bean, Map<String, Param> params)\n 86               throws TikaConfigException {\n 87           Class<?> beanClass = bean.getClass();\n 88           if (!PARAM_INFO.containsKey(beanClass)) {\n 89               synchronized (TikaConfig.class) {\n 90                   if (!PARAM_INFO.containsKey(beanClass)) {\n 91                       List<AccessibleObject> aObjs =\n 92                               collectInfo(beanClass, org.apache.tika.config.Field.class);\n 93                       List<ParamField> fields = new ArrayList<>(aObjs.size());\n 94   \n 95                       for (AccessibleObject aObj : aObjs) {\n 96                           fields.add(new ParamField(aObj));\n 97                       }\n 98                       PARAM_INFO.put(beanClass, fields);\n 99                   }\n100               }\n101           }\n102   \n103           List<ParamField> fields = PARAM_INFO.get(beanClass);\n104   \n105           for (ParamField field : fields) {\n106               Param<?> param = params.get(field.getName());\n107               if (param != null) {\n108                   if (field.getType().isAssignableFrom(param.getType())) {\n109                       try {\n110                           field.assignValue(bean, param.getValue());\n111                       } catch (InvocationTargetException e) {\n112                           LOG.error(\"Error assigning value '{}' to '{}'\", param.getValue(), param.getName());\n113                           final Throwable cause = e.getCause() == null ? e : e.getCause();\n114                           throw new TikaConfigException(cause.getMessage(), cause);\n115                       } catch (IllegalAccessException e) {\n116                           LOG.error(\"Error assigning value '{}' to '{}'\", param.getValue(), param.getName());\n117                           throw new TikaConfigException(e.getMessage(), e);\n118                       }\n119                   } else {\n120                       String msg = String.format(Locale.ROOT,\n121                               \"Value '%s' of type '%s' can't be\" +\n122                                       \" assigned to field '%s' of defined type '%s'\",\n123                               param.getValue(),\n124                               param.getValue().getClass(), field.getName(), field.getType());\n125                       throw new TikaConfigException(msg);\n126                   }\n127               } else if (field.isRequired()) {\n128                   //param not supplied but field is declared as required?\n129                   String msg = String.format(Locale.ROOT,\n130                           \"Param %s is required for %s,\" + \" but it is not given in config.\",\n131                           field.getName(), bean.getClass().getName());\n132                   throw new TikaConfigException(msg);\n133               } else {\n134                   LOG.debug(\"Param not supplied, field is not mandatory\");\n135               }\n136           }\n137       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ParamField.java:\n102       public void assignValue(Object bean, Object value)\n103               throws IllegalAccessException, InvocationTargetException {\n104           if (field != null) {\n105               field.set(bean, value);\n106           } else {\n107               setter.invoke(bean, value);\n108           }\n109       }\n",
            "cost": 0.060835,
            "harness_id": "TikaTwo",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ParamField.java:107:27",
            "status": "corpus",
            "valid_path": "NO",
            "id": 329
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaTwo",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/utils/CharsetUtils.java:185:61",
            "status": "error",
            "id": 330
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-two/src/main/java/com/aixcc/tika/harnesses/two/TikaTwo.java:\n20       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n21   \n22           InputStream stream = new BufferedInputStream(new ByteArrayInputStream(input));\n23   \n24           // null metadata indicates html content type for JSoupParser\n25           Metadata metadata = new Metadata();\n26           \n27           ContentHandler handler = new DefaultHandler();\n28   \n29           ParseContext context = new ParseContext();\n30           context.set(Parser.class, new CompositeExternalParser());\n31   \n32           (new JSoupParser()).parse(stream, handler, metadata, context);\n33   \n34           for (String name : metadata.names()) {\n35               System.out.println(name + \": \" + metadata.get(name));\n36           }\n37   \n38       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/JSoupParser.java:\n 76       public JSoupParser() {\n 77           super();\n 78       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/AbstractEncodingDetectorParser.java:\n33       public AbstractEncodingDetectorParser() {\n34           encodingDetector = new DefaultEncodingDetector();\n35       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/detect/DefaultEncodingDetector.java:\n40       public DefaultEncodingDetector() {\n41           this(new ServiceLoader(DefaultEncodingDetector.class.getClassLoader()));\n42       }\n44       public DefaultEncodingDetector(ServiceLoader loader) {\n45           super(loader.loadServiceProviders(EncodingDetector.class));\n46       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java:\n251       public <T> List<T> loadServiceProviders(Class<T> iface) {\n252           List<T> tmp = new ArrayList<>();\n253           tmp.addAll(loadDynamicServiceProviders(iface));\n254           tmp.addAll(loadStaticServiceProviders(iface));\n255   \n256           List<T> providers = new ArrayList<>();\n257           Set<String> seen = new HashSet<>();\n258           for (T provider : tmp) {\n259               if (! seen.contains(provider.getClass().getCanonicalName())) {\n260                   providers.add(provider);\n261                   seen.add(provider.getClass().getCanonicalName());\n262               }\n263           }\n264           return providers;\n265       }\n324       public <T> List<T> loadStaticServiceProviders(Class<T> iface) {\n325           return loadStaticServiceProviders(iface, Collections.EMPTY_SET);\n326       }\n339       @SuppressWarnings(\"unchecked\")\n340       public <T> List<T> loadStaticServiceProviders(Class<T> iface,\n341                                                     Collection<Class<? extends T>> excludes) {\n342           List<T> providers = new ArrayList<>();\n343   \n344           if (loader != null) {\n345               List<String> names = identifyStaticServiceProviders(iface);\n346               for (String name : names) {\n347                   try {\n348                       Class<?> klass = loader.loadClass(name);\n349                       if (iface.isAssignableFrom(klass)) {\n350                           boolean shouldExclude = false;\n351                           for (Class<? extends T> ex : excludes) {\n352                               if (ex.isAssignableFrom(klass)) {\n353                                   shouldExclude = true;\n354                                   break;\n355                               }\n356                           }\n357                           if (!shouldExclude) {\n358                               T instance = ServiceLoaderUtils.newInstance(klass, this);\n359                               if (instance instanceof Initializable) {\n360                                   ((Initializable) instance).initialize(Collections.EMPTY_MAP);\n361                                   ((Initializable) instance)\n362                                           .checkInitialization(initializableProblemHandler);\n363                               }\n364                               providers.add(instance);\n365                           }\n366                       } else {\n367                           throw new TikaConfigException(\n368                                   \"Class \" + name + \" is not of type: \" + iface);\n369                       }\n370                   } catch (Throwable t) {\n371                       handler.handleLoadError(name, t);\n372                   }\n373               }\n374           }\n375           return providers;\n376       }\n\nsrc/tika/tika-parsers/tika-parsers-ml/tika-dl/src/main/java/org/apache/tika/dl/imagerec/DL4JInceptionV3Net.java:\n216       private InputStream retrieveResource(String path) throws FileNotFoundException {\n217           File file = new File(path);\n218           if (file.exists()) {\n219               return new FileInputStream(file);\n220           }\n221           LOG.warn(\"File {} not found in local file system. Asking the classloader\", path);\n222           return getClass().getClassLoader().getResourceAsStream(path);\n223       }\n244       @Override\n245       public void initialize(Map<String, Param> params) throws TikaConfigException {\n246   \n247           //STEP 1: resolve weights file, download if necessary\n248           modelWeightsPath = mayBeDownloadFile(modelWeightsPath);\n249   \n250           //STEP 2: Load labels map\n251           try (InputStream stream = retrieveResource(mayBeDownloadFile(labelFile))) {\n252               this.labelMap = loadClassIndex(stream);\n253           } catch (IOException | ParseException e) {\n254               LOG.error(\"Could not load labels map\", e);\n255               return;\n256           }\n257   \n258           //STEP 3: initialize the graph\n259           try {\n260               this.imageLoader = new NativeImageLoader(imgHeight, imgWidth, imgChannels);\n261               LOG.info(\"Going to load Inception network...\");\n262               long st = System.currentTimeMillis();\n263   \n264               try (KerasModelBuilder builder =\n265                       new KerasModel().modelBuilder().modelHdf5Filename(modelWeightsPath)\n266                               .enforceTrainingConfig(false)) {\n267   \n268                   builder.inputShape(new int[]{imgHeight, imgWidth, 3});\n269                   KerasModel model = builder.buildModel();\n270                   this.graph = model.getComputationGraph();\n271                   long time = System.currentTimeMillis() - st;\n272                   LOG.info(\"Loaded the Inception model. Time taken={}ms\", time);\n273               }\n274           } catch (IOException | InvalidKerasConfigurationException |\n275                   UnsupportedKerasConfigurationException e) {\n276               throw new TikaConfigException(e.getMessage(), e);\n277           }\n278       }\n",
            "cost": 0.056275000000000006,
            "harness_id": "TikaTwo",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-dl/src/main/java/org/apache/tika/dl/imagerec/DL4JInceptionV3Net.java:219:40",
            "status": "corpus",
            "valid_path": "NO",
            "id": 331
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-two/src/main/java/com/aixcc/tika/harnesses/two/TikaTwo.java:\n20       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n21   \n22           InputStream stream = new BufferedInputStream(new ByteArrayInputStream(input));\n23   \n24           // null metadata indicates html content type for JSoupParser\n25           Metadata metadata = new Metadata();\n26           \n27           ContentHandler handler = new DefaultHandler();\n28   \n29           ParseContext context = new ParseContext();\n30           context.set(Parser.class, new CompositeExternalParser());\n31   \n32           (new JSoupParser()).parse(stream, handler, metadata, context);\n33   \n34           for (String name : metadata.names()) {\n35               System.out.println(name + \": \" + metadata.get(name));\n36           }\n37   \n38       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/JSoupParser.java:\n 76       public JSoupParser() {\n 77           super();\n 78       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/AbstractEncodingDetectorParser.java:\n33       public AbstractEncodingDetectorParser() {\n34           encodingDetector = new DefaultEncodingDetector();\n35       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/detect/DefaultEncodingDetector.java:\n40       public DefaultEncodingDetector() {\n41           this(new ServiceLoader(DefaultEncodingDetector.class.getClassLoader()));\n42       }\n44       public DefaultEncodingDetector(ServiceLoader loader) {\n45           super(loader.loadServiceProviders(EncodingDetector.class));\n46       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java:\n251       public <T> List<T> loadServiceProviders(Class<T> iface) {\n252           List<T> tmp = new ArrayList<>();\n253           tmp.addAll(loadDynamicServiceProviders(iface));\n254           tmp.addAll(loadStaticServiceProviders(iface));\n255   \n256           List<T> providers = new ArrayList<>();\n257           Set<String> seen = new HashSet<>();\n258           for (T provider : tmp) {\n259               if (! seen.contains(provider.getClass().getCanonicalName())) {\n260                   providers.add(provider);\n261                   seen.add(provider.getClass().getCanonicalName());\n262               }\n263           }\n264           return providers;\n265       }\n324       public <T> List<T> loadStaticServiceProviders(Class<T> iface) {\n325           return loadStaticServiceProviders(iface, Collections.EMPTY_SET);\n326       }\n339       @SuppressWarnings(\"unchecked\")\n340       public <T> List<T> loadStaticServiceProviders(Class<T> iface,\n341                                                     Collection<Class<? extends T>> excludes) {\n342           List<T> providers = new ArrayList<>();\n343   \n344           if (loader != null) {\n345               List<String> names = identifyStaticServiceProviders(iface);\n346               for (String name : names) {\n347                   try {\n348                       Class<?> klass = loader.loadClass(name);\n349                       if (iface.isAssignableFrom(klass)) {\n350                           boolean shouldExclude = false;\n351                           for (Class<? extends T> ex : excludes) {\n352                               if (ex.isAssignableFrom(klass)) {\n353                                   shouldExclude = true;\n354                                   break;\n355                               }\n356                           }\n357                           if (!shouldExclude) {\n358                               T instance = ServiceLoaderUtils.newInstance(klass, this);\n359                               if (instance instanceof Initializable) {\n360                                   ((Initializable) instance).initialize(Collections.EMPTY_MAP);\n361                                   ((Initializable) instance)\n362                                           .checkInitialization(initializableProblemHandler);\n363                               }\n364                               providers.add(instance);\n365                           }\n366                       } else {\n367                           throw new TikaConfigException(\n368                                   \"Class \" + name + \" is not of type: \" + iface);\n369                       }\n370                   } catch (Throwable t) {\n371                       handler.handleLoadError(name, t);\n372                   }\n373               }\n374           }\n375           return providers;\n376       }\n\nsrc/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/recognition/tf/TensorflowImageRecParser.java:\n113       @Override\n114       public void initialize(Map<String, Param> params) throws TikaConfigException {\n115           try {\n116               if (!modelFile.exists()) {\n117                   modelFile.getParentFile().mkdirs();\n118                   LOG.warn(\"Model doesn't exist at {}. Expecting the script to download it.\",\n119                           modelFile);\n120               }\n121               if (!scriptFile.exists()) {\n122                   scriptFile.getParentFile().mkdirs();\n123                   LOG.info(\"Copying script to : {}\", scriptFile);\n124                   try (InputStream sourceStream = getClass().getResourceAsStream(SCRIPT_FILE_NAME)) {\n125                       try (OutputStream destStream = new FileOutputStream(scriptFile)) {\n126                           IOUtils.copy(sourceStream, destStream);\n127                       }\n128                   }\n129                   LOG.debug(\"Copied..\");\n130               }\n131               String[] availabilityCheckArgs =\n132                       {executor, scriptFile.getAbsolutePath(), modelArg, modelFile.getAbsolutePath(),\n133                               availabilityTestArgs};\n134               available = ExternalParser.check(availabilityCheckArgs);\n135               LOG.debug(\"Available? {}\", available);\n136               if (!available) {\n137                   return;\n138               }\n139               String[] parseCmd =\n140                       {executor, scriptFile.getAbsolutePath(), modelArg, modelFile.getAbsolutePath(),\n141                               imageArg, INPUT_FILE_TOKEN, \"--out_file\",\n142                               OUTPUT_FILE_TOKEN}; //inserting output token to let\n143               // external parser parse metadata\n144               setCommand(parseCmd);\n145               HashMap<Pattern, String> patterns = new HashMap<>();\n146               patterns.put(Pattern.compile(outPattern), null);\n147               setMetadataExtractionPatterns(patterns);\n148               setIgnoredLineConsumer(IGNORED_LINE_LOGGER);\n149           } catch (Exception e) {\n150               throw new TikaConfigException(e.getMessage(), e);\n151           }\n152       }\n",
            "cost": 0.05548,
            "harness_id": "TikaTwo",
            "sanitizer": "File read/write hook path",
            "sink": "src/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/recognition/tf/TensorflowImageRecParser.java:125:73",
            "status": "corpus",
            "valid_path": "NO",
            "id": 332
        },
        {
            "blob": [
                "CiAgICA8IURPQ1RZUEUgaHRtbD4KICAgIDxodG1sPgogICAgPGhlYWQ+CiAgICAgICAgPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9amF6emVyIj4KICAgIDwvaGVhZD4KICAgIDxib2R5PgogICAgICAgIDxwPlRlc3QgY29udGVudDwvcD4KICAgIDwvYm9keT4KICAgIDwvaHRtbD4KICAgIA=="
            ],
            "code": "src/tika-harnesses/tika-harness-two/src/main/java/com/aixcc/tika/harnesses/two/TikaTwo.java:\n20       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n21   \n22           InputStream stream = new BufferedInputStream(new ByteArrayInputStream(input));\n23   \n24           // null metadata indicates html content type for JSoupParser\n25           Metadata metadata = new Metadata();\n26           \n27           ContentHandler handler = new DefaultHandler();\n28   \n29           ParseContext context = new ParseContext();\n30           context.set(Parser.class, new CompositeExternalParser());\n31   \n32           (new JSoupParser()).parse(stream, handler, metadata, context);\n33   \n34           for (String name : metadata.names()) {\n35               System.out.println(name + \": \" + metadata.get(name));\n36           }\n37   \n38       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/JSoupParser.java:\n104       public void parse(InputStream stream, ContentHandler handler, Metadata metadata,\n105                         ParseContext context) throws IOException, SAXException, TikaException {\n106   \n107           EncodingDetector encodingDetector = getEncodingDetector(context);\n108           Charset charset = encodingDetector.detect(stream, metadata);\n109           charset = charset == null ? DEFAULT_CHARSET : charset;\n110           String previous = metadata.get(Metadata.CONTENT_TYPE);\n111           MediaType contentType = null;\n112           if (previous == null || previous.startsWith(\"text/html\")) {\n113               contentType = new MediaType(MediaType.TEXT_HTML, charset);\n114           } else if (previous.startsWith(\"application/xhtml+xml\")) {\n115               contentType = new MediaType(XHTML, charset);\n116           } else if (previous.startsWith(\"application/vnd.wap.xhtml+xml\")) {\n117               contentType = new MediaType(WAP_XHTML, charset);\n118           } else if (previous.startsWith(\"application/x-asp\")) {\n119               contentType = new MediaType(X_ASP, charset);\n120           }\n121           if (contentType != null) {\n122               metadata.set(Metadata.CONTENT_TYPE, contentType.toString());\n123           }\n124           // deprecated, see TIKA-431\n125           metadata.set(Metadata.CONTENT_ENCODING, charset.name());\n126   \n127           // Get the HTML mapper from the parse context\n128           HtmlMapper mapper = context.get(HtmlMapper.class, new DefaultHtmlMapper());\n129   \n130           //do better with baseUri?\n131           Document document = Jsoup.parse(CloseShieldInputStream.wrap(stream), charset.name(), \"\");\n132           document.quirksMode(Document.QuirksMode.quirks);\n133           ContentHandler xhtml = new XHTMLDowngradeHandler(\n134                   new HtmlHandler(mapper, handler, metadata, context, extractScripts));\n135           xhtml.startDocument();\n136           try {\n137               NodeTraversor.filter(new TikaNodeFilter(xhtml), document);\n138           } catch (RuntimeSAXException e) {\n139               throw e.getWrapped();\n140           } finally {\n141               xhtml.endDocument();\n142           }\n143       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/HtmlEncodingDetector.java:\n102       public Charset detect(InputStream input, Metadata metadata) throws IOException {\n103           if (input == null) {\n104               return null;\n105           }\n106   \n107           // Read enough of the text stream to capture possible meta tags\n108           input.mark(markLimit);\n109           byte[] buffer = new byte[markLimit];\n110           int n = 0;\n111           int m = input.read(buffer);\n112           while (m != -1 && n < buffer.length) {\n113               n += m;\n114               m = input.read(buffer, n, buffer.length - n);\n115           }\n116           input.reset();\n117   \n118           // Interpret the head as ASCII and try to spot a meta tag with\n119           // a possible character encoding hint\n120   \n121           String head = ASCII.decode(ByteBuffer.wrap(buffer, 0, n)).toString();\n122           //strip out comments\n123           String headNoComments = head.replaceAll(\"<!--.*?(-->|$)\", \" \");\n124           //try to find the encoding in head without comments\n125           Charset charset = findCharset(headNoComments);\n126           //if nothing is found, back off to find any encoding\n127           if (charset == null) {\n128               return findCharset(head);\n129           }\n130           return charset;\n131   \n132       }\n135       private Charset findCharset(String s) {\n136   \n137           Matcher equiv = HTTP_META_PATTERN.matcher(s);\n138           Matcher charsetMatcher = FLEXIBLE_CHARSET_ATTR_PATTERN.matcher(\"\");\n139           //iterate through meta tags\n140           while (equiv.find()) {\n141               String attrs = equiv.group(1);\n142               charsetMatcher.reset(attrs);\n143               //iterate through charset= and return the first match\n144               //that is valid\n145               while (charsetMatcher.find()) {\n146                   String candCharset = charsetMatcher.group(1);\n147                   if (CHARSETS_UNSUPPORTED_BY_IANA.contains(candCharset.toLowerCase(Locale.US))) {\n148                       continue;\n149                   }\n150                   if (\"x-user-defined\".equalsIgnoreCase(candCharset)) {\n151                       candCharset = \"windows-1252\";\n152                   }\n153   \n154                   if (CharsetUtils.isSupported(candCharset)) {\n155                       try {\n156                           return CharsetUtils.forName(candCharset);\n157                       } catch (IllegalArgumentException e) {\n158                           //ignore\n159                       }\n160                   }\n161               }\n162           }\n163           return null;\n164       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/utils/CharsetUtils.java:\n105       public static boolean isSupported(String charsetName) {\n106           try {\n107               if (isSupportedICU != null && (Boolean) isSupportedICU.invoke(null, charsetName)) {\n108                   return true;\n109               }\n110               return Charset.isSupported(charsetName);\n111           } catch (IllegalCharsetNameException e) {\n112               return false;\n113           } catch (IllegalArgumentException e) {\n114               // null, for example\n115               return false;\n116           } catch (Exception e) {\n117               // Unexpected exception, what to do?\n118               return false;\n119           }\n120       }\n",
            "cost": 0.592215,
            "harness_id": "TikaTwo",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/utils/CharsetUtils.java:107:53",
            "status": "corpus",
            "valid_path": "YES",
            "id": 333
        },
        {
            "blob": [
                "PCFET0NUWVBFIGh0bWw+CjxodG1sPgo8aGVhZD4KICAgIDxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PSJqYSIrInp6ZXIiPgo8L2hlYWQ+Cjxib2R5PgogICAgPCEtLSBBZGRpdGlvbmFsIGNvbnRlbnQgY2FuIGJlIGFkZGVkIGhlcmUgaWYgbmVjZXNzYXJ5IC0tPgo8L2JvZHk+CjwvaHRtbD4K"
            ],
            "code": "src/tika-harnesses/tika-harness-two/src/main/java/com/aixcc/tika/harnesses/two/TikaTwo.java:\n20       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n21   \n22           InputStream stream = new BufferedInputStream(new ByteArrayInputStream(input));\n23   \n24           // null metadata indicates html content type for JSoupParser\n25           Metadata metadata = new Metadata();\n26           \n27           ContentHandler handler = new DefaultHandler();\n28   \n29           ParseContext context = new ParseContext();\n30           context.set(Parser.class, new CompositeExternalParser());\n31   \n32           (new JSoupParser()).parse(stream, handler, metadata, context);\n33   \n34           for (String name : metadata.names()) {\n35               System.out.println(name + \": \" + metadata.get(name));\n36           }\n37   \n38       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/JSoupParser.java:\n104       public void parse(InputStream stream, ContentHandler handler, Metadata metadata,\n105                         ParseContext context) throws IOException, SAXException, TikaException {\n106   \n107           EncodingDetector encodingDetector = getEncodingDetector(context);\n108           Charset charset = encodingDetector.detect(stream, metadata);\n109           charset = charset == null ? DEFAULT_CHARSET : charset;\n110           String previous = metadata.get(Metadata.CONTENT_TYPE);\n111           MediaType contentType = null;\n112           if (previous == null || previous.startsWith(\"text/html\")) {\n113               contentType = new MediaType(MediaType.TEXT_HTML, charset);\n114           } else if (previous.startsWith(\"application/xhtml+xml\")) {\n115               contentType = new MediaType(XHTML, charset);\n116           } else if (previous.startsWith(\"application/vnd.wap.xhtml+xml\")) {\n117               contentType = new MediaType(WAP_XHTML, charset);\n118           } else if (previous.startsWith(\"application/x-asp\")) {\n119               contentType = new MediaType(X_ASP, charset);\n120           }\n121           if (contentType != null) {\n122               metadata.set(Metadata.CONTENT_TYPE, contentType.toString());\n123           }\n124           // deprecated, see TIKA-431\n125           metadata.set(Metadata.CONTENT_ENCODING, charset.name());\n126   \n127           // Get the HTML mapper from the parse context\n128           HtmlMapper mapper = context.get(HtmlMapper.class, new DefaultHtmlMapper());\n129   \n130           //do better with baseUri?\n131           Document document = Jsoup.parse(CloseShieldInputStream.wrap(stream), charset.name(), \"\");\n132           document.quirksMode(Document.QuirksMode.quirks);\n133           ContentHandler xhtml = new XHTMLDowngradeHandler(\n134                   new HtmlHandler(mapper, handler, metadata, context, extractScripts));\n135           xhtml.startDocument();\n136           try {\n137               NodeTraversor.filter(new TikaNodeFilter(xhtml), document);\n138           } catch (RuntimeSAXException e) {\n139               throw e.getWrapped();\n140           } finally {\n141               xhtml.endDocument();\n142           }\n143       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/HtmlEncodingDetector.java:\n102       public Charset detect(InputStream input, Metadata metadata) throws IOException {\n103           if (input == null) {\n104               return null;\n105           }\n106   \n107           // Read enough of the text stream to capture possible meta tags\n108           input.mark(markLimit);\n109           byte[] buffer = new byte[markLimit];\n110           int n = 0;\n111           int m = input.read(buffer);\n112           while (m != -1 && n < buffer.length) {\n113               n += m;\n114               m = input.read(buffer, n, buffer.length - n);\n115           }\n116           input.reset();\n117   \n118           // Interpret the head as ASCII and try to spot a meta tag with\n119           // a possible character encoding hint\n120   \n121           String head = ASCII.decode(ByteBuffer.wrap(buffer, 0, n)).toString();\n122           //strip out comments\n123           String headNoComments = head.replaceAll(\"<!--.*?(-->|$)\", \" \");\n124           //try to find the encoding in head without comments\n125           Charset charset = findCharset(headNoComments);\n126           //if nothing is found, back off to find any encoding\n127           if (charset == null) {\n128               return findCharset(head);\n129           }\n130           return charset;\n131   \n132       }\n135       private Charset findCharset(String s) {\n136   \n137           Matcher equiv = HTTP_META_PATTERN.matcher(s);\n138           Matcher charsetMatcher = FLEXIBLE_CHARSET_ATTR_PATTERN.matcher(\"\");\n139           //iterate through meta tags\n140           while (equiv.find()) {\n141               String attrs = equiv.group(1);\n142               charsetMatcher.reset(attrs);\n143               //iterate through charset= and return the first match\n144               //that is valid\n145               while (charsetMatcher.find()) {\n146                   String candCharset = charsetMatcher.group(1);\n147                   if (CHARSETS_UNSUPPORTED_BY_IANA.contains(candCharset.toLowerCase(Locale.US))) {\n148                       continue;\n149                   }\n150                   if (\"x-user-defined\".equalsIgnoreCase(candCharset)) {\n151                       candCharset = \"windows-1252\";\n152                   }\n153   \n154                   if (CharsetUtils.isSupported(candCharset)) {\n155                       try {\n156                           return CharsetUtils.forName(candCharset);\n157                       } catch (IllegalArgumentException e) {\n158                           //ignore\n159                       }\n160                   }\n161               }\n162           }\n163           return null;\n164       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/utils/CharsetUtils.java:\n105       public static boolean isSupported(String charsetName) {\n106           try {\n107               if (isSupportedICU != null && (Boolean) isSupportedICU.invoke(null, charsetName)) {\n108                   return true;\n109               }\n110               return Charset.isSupported(charsetName);\n111           } catch (IllegalCharsetNameException e) {\n112               return false;\n113           } catch (IllegalArgumentException e) {\n114               // null, for example\n115               return false;\n116           } catch (Exception e) {\n117               // Unexpected exception, what to do?\n118               return false;\n119           }\n120       }\n143       public static Charset forName(String name) {\n144           if (name == null) {\n145               throw new IllegalArgumentException();\n146           }\n147   \n148           // Get rid of cruft around names, like <>, trailing commas, etc.\n149           Matcher m = CHARSET_NAME_PATTERN.matcher(name);\n150           if (!m.matches()) {\n151               throw new IllegalCharsetNameException(name);\n152           }\n153           name = m.group(1);\n154   \n155           String lower = name.toLowerCase(Locale.ENGLISH);\n156           Charset charset = COMMON_CHARSETS.get(lower);\n157           if (charset != null) {\n158               return charset;\n159           } else if (\"none\".equals(lower) || \"no\".equals(lower)) {\n160               throw new IllegalCharsetNameException(name);\n161           } else {\n162               Matcher iso = ISO_NAME_PATTERN.matcher(lower);\n163               Matcher cp = CP_NAME_PATTERN.matcher(lower);\n164               Matcher win = WIN_NAME_PATTERN.matcher(lower);\n165               if (iso.matches()) {\n166                   // Handle \"iso 8859-x\" error\n167                   name = \"iso-8859-\" + iso.group(1);\n168                   charset = COMMON_CHARSETS.get(name);\n169               } else if (cp.matches()) {\n170                   // Handle \"cp-xxx\" error\n171                   name = \"cp\" + cp.group(1);\n172                   charset = COMMON_CHARSETS.get(name);\n173               } else if (win.matches()) {\n174                   // Handle \"winxxx\" and \"win-xxx\" errors\n175                   name = \"windows-\" + win.group(1);\n176                   charset = COMMON_CHARSETS.get(name);\n177               }\n178               if (charset != null) {\n179                   return charset;\n180               }\n181           }\n182   \n183           if (getCharsetICU != null) {\n184               try {\n185                   Charset cs = (Charset) getCharsetICU.invoke(null, name);\n186                   if (cs != null) {\n187                       return cs;\n188                   }\n189               } catch (IllegalArgumentException | IllegalAccessException |\n190                       InvocationTargetException e) {\n191                   //ignore\n192               }\n193           }\n194   \n195           return Charset.forName(name);\n196       }\n",
            "cost": 0.5542400000000001,
            "harness_id": "TikaTwo",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/utils/CharsetUtils.java:185:40",
            "status": "corpus",
            "valid_path": "YES",
            "id": 334
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-two/src/main/java/com/aixcc/tika/harnesses/two/TikaTwo.java:\n20       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n21   \n22           InputStream stream = new BufferedInputStream(new ByteArrayInputStream(input));\n23   \n24           // null metadata indicates html content type for JSoupParser\n25           Metadata metadata = new Metadata();\n26           \n27           ContentHandler handler = new DefaultHandler();\n28   \n29           ParseContext context = new ParseContext();\n30           context.set(Parser.class, new CompositeExternalParser());\n31   \n32           (new JSoupParser()).parse(stream, handler, metadata, context);\n33   \n34           for (String name : metadata.names()) {\n35               System.out.println(name + \": \" + metadata.get(name));\n36           }\n37   \n38       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/external/CompositeExternalParser.java:\n36       public CompositeExternalParser() throws IOException, TikaException {\n37           this(new MediaTypeRegistry());\n38       }\n40       @SuppressWarnings(\"unchecked\")\n41       public CompositeExternalParser(MediaTypeRegistry registry) throws IOException, TikaException {\n42           super(registry, (List<Parser>) (List<? extends Parser>) ExternalParsersFactory.create());\n43       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParsersFactory.java:\n43       public static List<ExternalParser> create() throws IOException, TikaException {\n44           return create(new ServiceLoader());\n45       }\n47       public static List<ExternalParser> create(ServiceLoader loader)\n48               throws IOException, TikaException {\n49           return create(\"tika-external-parsers.xml\", loader);\n50       }\n52       public static List<ExternalParser> create(String filename, ServiceLoader loader)\n53               throws IOException, TikaException {\n54           String filepath =\n55                   ExternalParsersFactory.class.getPackage().getName().replace('.', '/') + \"/\" +\n56                           filename;\n57           Enumeration<URL> files = loader.findServiceResources(filepath);\n58           ArrayList<URL> list = Collections.list(files);\n59           URL[] urls = list.toArray(new URL[0]);\n60           return create(urls);\n61       }\n63       public static List<ExternalParser> create(URL... urls) throws IOException, TikaException {\n64           List<ExternalParser> parsers = new ArrayList<>();\n65           for (URL url : urls) {\n66               try (InputStream stream = url.openStream()) {\n67                   parsers.addAll(ExternalParsersConfigReader.read(stream));\n68               }\n69           }\n70           return parsers;\n71       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/external/ExternalParsersConfigReader.java:\n 56       public static List<ExternalParser> read(InputStream stream) throws TikaException, IOException {\n 57           try {\n 58               DocumentBuilder builder = XMLReaderUtils.getDocumentBuilder();\n 59               Document document = builder.parse(new InputSource(stream));\n 60               return read(document);\n 61           } catch (SAXException e) {\n 62               throw new TikaException(\"Invalid parser configuration\", e);\n 63           }\n 64       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java:\n 244       public static DocumentBuilderFactory getDocumentBuilderFactory() {\n 245           //borrowed from Apache POI\n 246           DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n 247           if (LOG.isDebugEnabled()) {\n 248               LOG.debug(\"DocumentBuilderFactory class {}\", factory.getClass());\n 249           }\n 250   \n 251           factory.setExpandEntityReferences(false);\n 252           factory.setNamespaceAware(true);\n 253           factory.setValidating(false);\n 254   \n 255           trySetSAXFeature(factory, XMLConstants.FEATURE_SECURE_PROCESSING, true);\n 256           trySetSAXFeature(factory, \"http://xml.org/sax/features/external-general-entities\", false);\n 257           trySetSAXFeature(factory, \"http://xml.org/sax/features/external-parameter-entities\", false);\n 258           trySetSAXFeature(factory, \"http://apache.org/xml/features/nonvalidating/load-external-dtd\",\n 259                   false);\n 260           trySetSAXFeature(factory, \"http://apache.org/xml/features/nonvalidating/load-dtd-grammar\",\n 261                   false);\n 262           trySetXercesSecurityManager(factory);\n 263           return factory;\n 264       }\n 276       public static DocumentBuilder getDocumentBuilder() throws TikaException {\n 277           try {\n 278               DocumentBuilderFactory documentBuilderFactory = getDocumentBuilderFactory();\n 279               DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n 280               documentBuilder.setEntityResolver(IGNORING_SAX_ENTITY_RESOLVER);\n 281               documentBuilder.setErrorHandler(null);\n 282               return documentBuilder;\n 283           } catch (ParserConfigurationException e) {\n 284               throw new TikaException(\"XML parser not available\", e);\n 285           }\n 286       }\n 713       private static void trySetXercesSecurityManager(DocumentBuilderFactory factory) {\n 714           //from POI\n 715           // Try built-in JVM one first, standalone if not\n 716           for (String securityManagerClassName : new String[]{\n 717                   //\"com.sun.org.apache.xerces.internal.util.SecurityManager\",\n 718                   XERCES_SECURITY_MANAGER}) {\n 719               try {\n 720                   Object mgr =\n 721                           Class.forName(securityManagerClassName).getDeclaredConstructor().newInstance();\n 722                   Method setLimit = mgr.getClass().getMethod(\"setEntityExpansionLimit\",\n 723                           Integer.TYPE);\n 724                   setLimit.invoke(mgr, MAX_ENTITY_EXPANSIONS);\n 725                   factory.setAttribute(XERCES_SECURITY_MANAGER_PROPERTY, mgr);\n 726                   // Stop once one can be setup without error\n 727                   return;\n 728               } catch (ClassNotFoundException e) {\n 729                   // continue without log, this is expected in some setups\n 730               } catch (Throwable e) {     // NOSONAR - also catch things like NoClassDefError here\n 731                   // throttle the log somewhat as it can spam the log otherwise\n 732                   if (System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {\n 733                       LOG.warn(\n 734                               \"SAX Security Manager could not be setup [log suppressed for 5 \" +\n 735                                       \"minutes]\",\n 736                               e);\n 737                       LAST_LOG = System.currentTimeMillis();\n 738                   }\n 739               }\n 740           }\n 741   \n 742           // separate old version of Xerces not found => use the builtin way of setting the property\n 743           try {\n 744               factory.setAttribute(\"http://www.oracle.com/xml/jaxp/properties/entityExpansionLimit\",\n 745                       MAX_ENTITY_EXPANSIONS);\n 746           } catch (IllegalArgumentException e) {\n 747               // NOSONAR - also catch things like NoClassDefError here\n 748               // throttle the log somewhat as it can spam the log otherwise\n 749               if (System.currentTimeMillis() > LAST_LOG + TimeUnit.MINUTES.toMillis(5)) {\n 750                   LOG.warn(\"SAX Security Manager could not be setup [log suppressed for 5 minutes]\",\n 751                           e);\n 752                   LAST_LOG = System.currentTimeMillis();\n 753               }\n 754           }\n 755       }\n",
            "cost": 0.06597,
            "harness_id": "TikaTwo",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/utils/XMLReaderUtils.java:724:17",
            "status": "corpus",
            "valid_path": "NO",
            "id": 335
        },
        {
            "blob": [
                ""
            ],
            "code": "src/tika-harnesses/tika-harness-two/src/main/java/com/aixcc/tika/harnesses/two/TikaTwo.java:\n20       public static void fuzzerTestOneInput(byte[] input) throws Exception {\n21   \n22           InputStream stream = new BufferedInputStream(new ByteArrayInputStream(input));\n23   \n24           // null metadata indicates html content type for JSoupParser\n25           Metadata metadata = new Metadata();\n26           \n27           ContentHandler handler = new DefaultHandler();\n28   \n29           ParseContext context = new ParseContext();\n30           context.set(Parser.class, new CompositeExternalParser());\n31   \n32           (new JSoupParser()).parse(stream, handler, metadata, context);\n33   \n34           for (String name : metadata.names()) {\n35               System.out.println(name + \": \" + metadata.get(name));\n36           }\n37   \n38       }\n\nsrc/tika/tika-parsers/tika-parsers-standard/tika-parsers-standard-modules/tika-parser-html-module/src/main/java/org/apache/tika/parser/html/JSoupParser.java:\n 76       public JSoupParser() {\n 77           super();\n 78       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/parser/AbstractEncodingDetectorParser.java:\n33       public AbstractEncodingDetectorParser() {\n34           encodingDetector = new DefaultEncodingDetector();\n35       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/detect/DefaultEncodingDetector.java:\n40       public DefaultEncodingDetector() {\n41           this(new ServiceLoader(DefaultEncodingDetector.class.getClassLoader()));\n42       }\n44       public DefaultEncodingDetector(ServiceLoader loader) {\n45           super(loader.loadServiceProviders(EncodingDetector.class));\n46       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ServiceLoader.java:\n251       public <T> List<T> loadServiceProviders(Class<T> iface) {\n252           List<T> tmp = new ArrayList<>();\n253           tmp.addAll(loadDynamicServiceProviders(iface));\n254           tmp.addAll(loadStaticServiceProviders(iface));\n255   \n256           List<T> providers = new ArrayList<>();\n257           Set<String> seen = new HashSet<>();\n258           for (T provider : tmp) {\n259               if (! seen.contains(provider.getClass().getCanonicalName())) {\n260                   providers.add(provider);\n261                   seen.add(provider.getClass().getCanonicalName());\n262               }\n263           }\n264           return providers;\n265       }\n324       public <T> List<T> loadStaticServiceProviders(Class<T> iface) {\n325           return loadStaticServiceProviders(iface, Collections.EMPTY_SET);\n326       }\n339       @SuppressWarnings(\"unchecked\")\n340       public <T> List<T> loadStaticServiceProviders(Class<T> iface,\n341                                                     Collection<Class<? extends T>> excludes) {\n342           List<T> providers = new ArrayList<>();\n343   \n344           if (loader != null) {\n345               List<String> names = identifyStaticServiceProviders(iface);\n346               for (String name : names) {\n347                   try {\n348                       Class<?> klass = loader.loadClass(name);\n349                       if (iface.isAssignableFrom(klass)) {\n350                           boolean shouldExclude = false;\n351                           for (Class<? extends T> ex : excludes) {\n352                               if (ex.isAssignableFrom(klass)) {\n353                                   shouldExclude = true;\n354                                   break;\n355                               }\n356                           }\n357                           if (!shouldExclude) {\n358                               T instance = ServiceLoaderUtils.newInstance(klass, this);\n359                               if (instance instanceof Initializable) {\n360                                   ((Initializable) instance).initialize(Collections.EMPTY_MAP);\n361                                   ((Initializable) instance)\n362                                           .checkInitialization(initializableProblemHandler);\n363                               }\n364                               providers.add(instance);\n365                           }\n366                       } else {\n367                           throw new TikaConfigException(\n368                                   \"Class \" + name + \" is not of type: \" + iface);\n369                       }\n370                   } catch (Throwable t) {\n371                       handler.handleLoadError(name, t);\n372                   }\n373               }\n374           }\n375           return providers;\n376       }\n\nsrc/tika/tika-parsers/tika-parsers-ml/tika-parser-advancedmedia-module/src/main/java/org/apache/tika/parser/recognition/ObjectRecognitionParser.java:\n 84       @Override\n 85       public void initialize(Map<String, Param> params) throws TikaConfigException {\n 86           AnnotationUtils.assignFieldParams(recogniser, params);\n 87           recogniser.initialize(params);\n 88           LOG.info(\"Recogniser = {}\", recogniser.getClass().getName());\n 89           LOG.info(\"Recogniser Available = {}\", recogniser.isAvailable());\n 90       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/utils/AnnotationUtils.java:\n 85       public static void assignFieldParams(Object bean, Map<String, Param> params)\n 86               throws TikaConfigException {\n 87           Class<?> beanClass = bean.getClass();\n 88           if (!PARAM_INFO.containsKey(beanClass)) {\n 89               synchronized (TikaConfig.class) {\n 90                   if (!PARAM_INFO.containsKey(beanClass)) {\n 91                       List<AccessibleObject> aObjs =\n 92                               collectInfo(beanClass, org.apache.tika.config.Field.class);\n 93                       List<ParamField> fields = new ArrayList<>(aObjs.size());\n 94   \n 95                       for (AccessibleObject aObj : aObjs) {\n 96                           fields.add(new ParamField(aObj));\n 97                       }\n 98                       PARAM_INFO.put(beanClass, fields);\n 99                   }\n100               }\n101           }\n102   \n103           List<ParamField> fields = PARAM_INFO.get(beanClass);\n104   \n105           for (ParamField field : fields) {\n106               Param<?> param = params.get(field.getName());\n107               if (param != null) {\n108                   if (field.getType().isAssignableFrom(param.getType())) {\n109                       try {\n110                           field.assignValue(bean, param.getValue());\n111                       } catch (InvocationTargetException e) {\n112                           LOG.error(\"Error assigning value '{}' to '{}'\", param.getValue(), param.getName());\n113                           final Throwable cause = e.getCause() == null ? e : e.getCause();\n114                           throw new TikaConfigException(cause.getMessage(), cause);\n115                       } catch (IllegalAccessException e) {\n116                           LOG.error(\"Error assigning value '{}' to '{}'\", param.getValue(), param.getName());\n117                           throw new TikaConfigException(e.getMessage(), e);\n118                       }\n119                   } else {\n120                       String msg = String.format(Locale.ROOT,\n121                               \"Value '%s' of type '%s' can't be\" +\n122                                       \" assigned to field '%s' of defined type '%s'\",\n123                               param.getValue(),\n124                               param.getValue().getClass(), field.getName(), field.getType());\n125                       throw new TikaConfigException(msg);\n126                   }\n127               } else if (field.isRequired()) {\n128                   //param not supplied but field is declared as required?\n129                   String msg = String.format(Locale.ROOT,\n130                           \"Param %s is required for %s,\" + \" but it is not given in config.\",\n131                           field.getName(), bean.getClass().getName());\n132                   throw new TikaConfigException(msg);\n133               } else {\n134                   LOG.debug(\"Param not supplied, field is not mandatory\");\n135               }\n136           }\n137       }\n\nsrc/tika/tika-core/src/main/java/org/apache/tika/config/ParamField.java:\n102       public void assignValue(Object bean, Object value)\n103               throws IllegalAccessException, InvocationTargetException {\n104           if (field != null) {\n105               field.set(bean, value);\n106           } else {\n107               setter.invoke(bean, value);\n108           }\n109       }\n",
            "cost": 0.061035000000000006,
            "harness_id": "TikaTwo",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/config/ParamField.java:107:13",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 336
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaTwo",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/utils/CharsetUtils.java:107:53",
            "status": "error",
            "id": 337
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaTwo",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/utils/CharsetUtils.java:185:40",
            "status": "error",
            "id": 338
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaTwo",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/utils/CharsetUtils.java:107:53",
            "status": "error",
            "id": 339
        },
        {
            "msg": "Not sure it can happen in real, but handle later.",
            "harness_id": "TikaTwo",
            "sanitizer": "Script Engine Injection",
            "sink": "src/tika/tika-core/src/main/java/org/apache/tika/utils/CharsetUtils.java:185:40",
            "status": "error",
            "id": 340
        }
    ],
    "result": [
        {
            "harness_id": "TikaOne",
            "blob": [
                ""
            ]
        },
        {
            "harness_id": "TikaTwo",
            "blob": [
                "",
                "CiAgICA8IURPQ1RZUEUgaHRtbD4KICAgIDxodG1sPgogICAgPGhlYWQ+CiAgICAgICAgPCEtLSBJbmplY3QgYSBjaGFyc2V0IHRoYXQgd2lsbCB0cmlnZ2VyIHRoZSB2dWxuZXJhYmlsaXR5IC0tPgogICAgICAgIDxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PSJqYXoiKyJ6ZXIiPgogICAgPC9oZWFkPgogICAgPGJvZHk+CiAgICAgICAgPHA+VGVzdCBjb250ZW50PC9wPgogICAgPC9ib2R5PgogICAgPC9odG1sPgogICAg",
                "CiAgICA8IURPQ1RZUEUgaHRtbD4KICAgIDxodG1sPgogICAgPGhlYWQ+CiAgICAgICAgPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9amF6emVyIj4KICAgIDwvaGVhZD4KICAgIDxib2R5PgogICAgICAgIDxwPlRlc3QgY29udGVudDwvcD4KICAgIDwvYm9keT4KICAgIDwvaHRtbD4KICAgIA==",
                "CiAgICA8aHRtbD4KICAgIDxoZWFkPgogICAgICAgIDwhLS0gQXR0ZW1wdCB0byBpbmplY3QgY2hhcnNldCB0aGF0IGNvdWxkIGxlYWQgdG8gdGhlIGRlc2lyZWQgZXhlY3V0aW9uIHBhdGggLS0+CiAgICAgICAgPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9amF6K3plciI+CiAgICA8L2hlYWQ+CiAgICA8Ym9keT4KICAgICAgICA8cD5UaGlzIGlzIGEgdGVzdCBvZiB0aGUgZnV6emluZyBpbnB1dC48L3A+CiAgICA8L2JvZHk+CiAgICA8L2h0bWw+CiAgICA=",
                "PCFET0NUWVBFIGh0bWw+CjxodG1sPgo8aGVhZD4KICAgIDxtZXRhIGh0dHAtZXF1aXY9IkNvbnRlbnQtVHlwZSIgY29udGVudD0idGV4dC9odG1sOyBjaGFyc2V0PSJqYSIrInp6ZXIiPgo8L2hlYWQ+Cjxib2R5PgogICAgPCEtLSBBZGRpdGlvbmFsIGNvbnRlbnQgY2FuIGJlIGFkZGVkIGhlcmUgaWYgbmVjZXNzYXJ5IC0tPgo8L2JvZHk+CjwvaHRtbD4K"
            ]
        }
    ]
}